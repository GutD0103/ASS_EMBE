
Read_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc98  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  0800fd50  0800fd50  0001fd50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104ac  080104ac  00030484  2**0
                  CONTENTS
  4 .ARM          00000000  080104ac  080104ac  00030484  2**0
                  CONTENTS
  5 .preinit_array 00000000  080104ac  080104ac  00030484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104ac  080104ac  000204ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104b0  080104b0  000204b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  080104b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e54  20000488  08010938  00030488  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022dc  08010938  000322dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030484  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a94d  00000000  00000000  000304ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe6  00000000  00000000  0004adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0004ede0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  00050350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c110  00000000  00000000  000516d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f254  00000000  00000000  0006d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e700  00000000  00000000  0008ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b13c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000624c  00000000  00000000  0012b18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000488 	.word	0x20000488
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800fd38 	.word	0x0800fd38

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000048c 	.word	0x2000048c
 80000fc:	0800fd38 	.word	0x0800fd38

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe81 	bl	800213c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fdd1 	bl	8001fec <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe73 	bl	800213c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe69 	bl	800213c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fdf9 	bl	8002070 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fdef 	bl	8002070 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fbc5 	bl	8000c38 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb51 	bl	8000b60 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fbb7 	bl	8000c38 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbad 	bl	8000c38 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb5d 	bl	8000bac <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb53 	bl	8000bac <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_d2uiz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__aeabi_d2uiz+0x38>)
 800051a:	0004      	movs	r4, r0
 800051c:	000d      	movs	r5, r1
 800051e:	f7ff ffb5 	bl	800048c <__aeabi_dcmpge>
 8000522:	2800      	cmp	r0, #0
 8000524:	d104      	bne.n	8000530 <__aeabi_d2uiz+0x1c>
 8000526:	0020      	movs	r0, r4
 8000528:	0029      	movs	r1, r5
 800052a:	f002 fc87 	bl	8002e3c <__aeabi_d2iz>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <__aeabi_d2uiz+0x38>)
 8000532:	2200      	movs	r2, #0
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f002 f8d0 	bl	80026dc <__aeabi_dsub>
 800053c:	f002 fc7e 	bl	8002e3c <__aeabi_d2iz>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	061b      	lsls	r3, r3, #24
 8000544:	469c      	mov	ip, r3
 8000546:	4460      	add	r0, ip
 8000548:	e7f1      	b.n	800052e <__aeabi_d2uiz+0x1a>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	41e00000 	.word	0x41e00000

08000550 <__aeabi_d2lz>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	0005      	movs	r5, r0
 8000554:	000c      	movs	r4, r1
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	0028      	movs	r0, r5
 800055c:	0021      	movs	r1, r4
 800055e:	f7ff ff77 	bl	8000450 <__aeabi_dcmplt>
 8000562:	2800      	cmp	r0, #0
 8000564:	d108      	bne.n	8000578 <__aeabi_d2lz+0x28>
 8000566:	0028      	movs	r0, r5
 8000568:	0021      	movs	r1, r4
 800056a:	f000 f80f 	bl	800058c <__aeabi_d2ulz>
 800056e:	0002      	movs	r2, r0
 8000570:	000b      	movs	r3, r1
 8000572:	0010      	movs	r0, r2
 8000574:	0019      	movs	r1, r3
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	18e1      	adds	r1, r4, r3
 800057e:	0028      	movs	r0, r5
 8000580:	f000 f804 	bl	800058c <__aeabi_d2ulz>
 8000584:	2300      	movs	r3, #0
 8000586:	4242      	negs	r2, r0
 8000588:	418b      	sbcs	r3, r1
 800058a:	e7f2      	b.n	8000572 <__aeabi_d2lz+0x22>

0800058c <__aeabi_d2ulz>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2200      	movs	r2, #0
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <__aeabi_d2ulz+0x34>)
 8000592:	000d      	movs	r5, r1
 8000594:	0004      	movs	r4, r0
 8000596:	f001 fe35 	bl	8002204 <__aeabi_dmul>
 800059a:	f7ff ffbb 	bl	8000514 <__aeabi_d2uiz>
 800059e:	0006      	movs	r6, r0
 80005a0:	f002 fcb2 	bl	8002f08 <__aeabi_ui2d>
 80005a4:	2200      	movs	r2, #0
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <__aeabi_d2ulz+0x38>)
 80005a8:	f001 fe2c 	bl	8002204 <__aeabi_dmul>
 80005ac:	0002      	movs	r2, r0
 80005ae:	000b      	movs	r3, r1
 80005b0:	0020      	movs	r0, r4
 80005b2:	0029      	movs	r1, r5
 80005b4:	f002 f892 	bl	80026dc <__aeabi_dsub>
 80005b8:	f7ff ffac 	bl	8000514 <__aeabi_d2uiz>
 80005bc:	0031      	movs	r1, r6
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	3df00000 	.word	0x3df00000
 80005c4:	41f00000 	.word	0x41f00000

080005c8 <__aeabi_l2d>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	0006      	movs	r6, r0
 80005cc:	0008      	movs	r0, r1
 80005ce:	f002 fc6b 	bl	8002ea8 <__aeabi_i2d>
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_l2d+0x28>)
 80005d6:	f001 fe15 	bl	8002204 <__aeabi_dmul>
 80005da:	000d      	movs	r5, r1
 80005dc:	0004      	movs	r4, r0
 80005de:	0030      	movs	r0, r6
 80005e0:	f002 fc92 	bl	8002f08 <__aeabi_ui2d>
 80005e4:	002b      	movs	r3, r5
 80005e6:	0022      	movs	r2, r4
 80005e8:	f000 fece 	bl	8001388 <__aeabi_dadd>
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_fadd>:
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	46c6      	mov	lr, r8
 80005f8:	0243      	lsls	r3, r0, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	024e      	lsls	r6, r1, #9
 80005fe:	0045      	lsls	r5, r0, #1
 8000600:	004f      	lsls	r7, r1, #1
 8000602:	00da      	lsls	r2, r3, #3
 8000604:	0fc4      	lsrs	r4, r0, #31
 8000606:	469c      	mov	ip, r3
 8000608:	0a70      	lsrs	r0, r6, #9
 800060a:	4690      	mov	r8, r2
 800060c:	b500      	push	{lr}
 800060e:	0e2d      	lsrs	r5, r5, #24
 8000610:	0e3f      	lsrs	r7, r7, #24
 8000612:	0fc9      	lsrs	r1, r1, #31
 8000614:	09b6      	lsrs	r6, r6, #6
 8000616:	428c      	cmp	r4, r1
 8000618:	d04b      	beq.n	80006b2 <__aeabi_fadd+0xbe>
 800061a:	1bea      	subs	r2, r5, r7
 800061c:	2a00      	cmp	r2, #0
 800061e:	dd36      	ble.n	800068e <__aeabi_fadd+0x9a>
 8000620:	2f00      	cmp	r7, #0
 8000622:	d061      	beq.n	80006e8 <__aeabi_fadd+0xf4>
 8000624:	2dff      	cmp	r5, #255	; 0xff
 8000626:	d100      	bne.n	800062a <__aeabi_fadd+0x36>
 8000628:	e0ad      	b.n	8000786 <__aeabi_fadd+0x192>
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	04db      	lsls	r3, r3, #19
 800062e:	431e      	orrs	r6, r3
 8000630:	2a1b      	cmp	r2, #27
 8000632:	dc00      	bgt.n	8000636 <__aeabi_fadd+0x42>
 8000634:	e0d3      	b.n	80007de <__aeabi_fadd+0x1ea>
 8000636:	2001      	movs	r0, #1
 8000638:	4643      	mov	r3, r8
 800063a:	1a18      	subs	r0, r3, r0
 800063c:	0143      	lsls	r3, r0, #5
 800063e:	d400      	bmi.n	8000642 <__aeabi_fadd+0x4e>
 8000640:	e08c      	b.n	800075c <__aeabi_fadd+0x168>
 8000642:	0180      	lsls	r0, r0, #6
 8000644:	0987      	lsrs	r7, r0, #6
 8000646:	0038      	movs	r0, r7
 8000648:	f002 fd54 	bl	80030f4 <__clzsi2>
 800064c:	3805      	subs	r0, #5
 800064e:	4087      	lsls	r7, r0
 8000650:	4285      	cmp	r5, r0
 8000652:	dc00      	bgt.n	8000656 <__aeabi_fadd+0x62>
 8000654:	e0b6      	b.n	80007c4 <__aeabi_fadd+0x1d0>
 8000656:	1a2d      	subs	r5, r5, r0
 8000658:	48b3      	ldr	r0, [pc, #716]	; (8000928 <__aeabi_fadd+0x334>)
 800065a:	4038      	ands	r0, r7
 800065c:	0743      	lsls	r3, r0, #29
 800065e:	d004      	beq.n	800066a <__aeabi_fadd+0x76>
 8000660:	230f      	movs	r3, #15
 8000662:	4003      	ands	r3, r0
 8000664:	2b04      	cmp	r3, #4
 8000666:	d000      	beq.n	800066a <__aeabi_fadd+0x76>
 8000668:	3004      	adds	r0, #4
 800066a:	0143      	lsls	r3, r0, #5
 800066c:	d400      	bmi.n	8000670 <__aeabi_fadd+0x7c>
 800066e:	e078      	b.n	8000762 <__aeabi_fadd+0x16e>
 8000670:	1c6a      	adds	r2, r5, #1
 8000672:	2dfe      	cmp	r5, #254	; 0xfe
 8000674:	d065      	beq.n	8000742 <__aeabi_fadd+0x14e>
 8000676:	0180      	lsls	r0, r0, #6
 8000678:	0a43      	lsrs	r3, r0, #9
 800067a:	469c      	mov	ip, r3
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	4663      	mov	r3, ip
 8000680:	05d0      	lsls	r0, r2, #23
 8000682:	4318      	orrs	r0, r3
 8000684:	07e4      	lsls	r4, r4, #31
 8000686:	4320      	orrs	r0, r4
 8000688:	bc80      	pop	{r7}
 800068a:	46b8      	mov	r8, r7
 800068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068e:	2a00      	cmp	r2, #0
 8000690:	d035      	beq.n	80006fe <__aeabi_fadd+0x10a>
 8000692:	1b7a      	subs	r2, r7, r5
 8000694:	2d00      	cmp	r5, #0
 8000696:	d000      	beq.n	800069a <__aeabi_fadd+0xa6>
 8000698:	e0af      	b.n	80007fa <__aeabi_fadd+0x206>
 800069a:	4643      	mov	r3, r8
 800069c:	2b00      	cmp	r3, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_fadd+0xae>
 80006a0:	e0a7      	b.n	80007f2 <__aeabi_fadd+0x1fe>
 80006a2:	1e53      	subs	r3, r2, #1
 80006a4:	2a01      	cmp	r2, #1
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0xb6>
 80006a8:	e12f      	b.n	800090a <__aeabi_fadd+0x316>
 80006aa:	2aff      	cmp	r2, #255	; 0xff
 80006ac:	d069      	beq.n	8000782 <__aeabi_fadd+0x18e>
 80006ae:	001a      	movs	r2, r3
 80006b0:	e0aa      	b.n	8000808 <__aeabi_fadd+0x214>
 80006b2:	1be9      	subs	r1, r5, r7
 80006b4:	2900      	cmp	r1, #0
 80006b6:	dd70      	ble.n	800079a <__aeabi_fadd+0x1a6>
 80006b8:	2f00      	cmp	r7, #0
 80006ba:	d037      	beq.n	800072c <__aeabi_fadd+0x138>
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d062      	beq.n	8000786 <__aeabi_fadd+0x192>
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	04db      	lsls	r3, r3, #19
 80006c4:	431e      	orrs	r6, r3
 80006c6:	291b      	cmp	r1, #27
 80006c8:	dc00      	bgt.n	80006cc <__aeabi_fadd+0xd8>
 80006ca:	e0b0      	b.n	800082e <__aeabi_fadd+0x23a>
 80006cc:	2001      	movs	r0, #1
 80006ce:	4440      	add	r0, r8
 80006d0:	0143      	lsls	r3, r0, #5
 80006d2:	d543      	bpl.n	800075c <__aeabi_fadd+0x168>
 80006d4:	3501      	adds	r5, #1
 80006d6:	2dff      	cmp	r5, #255	; 0xff
 80006d8:	d033      	beq.n	8000742 <__aeabi_fadd+0x14e>
 80006da:	2301      	movs	r3, #1
 80006dc:	4a93      	ldr	r2, [pc, #588]	; (800092c <__aeabi_fadd+0x338>)
 80006de:	4003      	ands	r3, r0
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	4010      	ands	r0, r2
 80006e4:	4318      	orrs	r0, r3
 80006e6:	e7b9      	b.n	800065c <__aeabi_fadd+0x68>
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0xfa>
 80006ec:	e083      	b.n	80007f6 <__aeabi_fadd+0x202>
 80006ee:	1e51      	subs	r1, r2, #1
 80006f0:	2a01      	cmp	r2, #1
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0x102>
 80006f4:	e0d8      	b.n	80008a8 <__aeabi_fadd+0x2b4>
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d045      	beq.n	8000786 <__aeabi_fadd+0x192>
 80006fa:	000a      	movs	r2, r1
 80006fc:	e798      	b.n	8000630 <__aeabi_fadd+0x3c>
 80006fe:	27fe      	movs	r7, #254	; 0xfe
 8000700:	1c6a      	adds	r2, r5, #1
 8000702:	4217      	tst	r7, r2
 8000704:	d000      	beq.n	8000708 <__aeabi_fadd+0x114>
 8000706:	e086      	b.n	8000816 <__aeabi_fadd+0x222>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0x11a>
 800070c:	e0b7      	b.n	800087e <__aeabi_fadd+0x28a>
 800070e:	4643      	mov	r3, r8
 8000710:	2b00      	cmp	r3, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x122>
 8000714:	e0f3      	b.n	80008fe <__aeabi_fadd+0x30a>
 8000716:	2200      	movs	r2, #0
 8000718:	2e00      	cmp	r6, #0
 800071a:	d0b0      	beq.n	800067e <__aeabi_fadd+0x8a>
 800071c:	1b98      	subs	r0, r3, r6
 800071e:	0143      	lsls	r3, r0, #5
 8000720:	d400      	bmi.n	8000724 <__aeabi_fadd+0x130>
 8000722:	e0fa      	b.n	800091a <__aeabi_fadd+0x326>
 8000724:	4643      	mov	r3, r8
 8000726:	000c      	movs	r4, r1
 8000728:	1af0      	subs	r0, r6, r3
 800072a:	e797      	b.n	800065c <__aeabi_fadd+0x68>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x13e>
 8000730:	e0c8      	b.n	80008c4 <__aeabi_fadd+0x2d0>
 8000732:	1e4a      	subs	r2, r1, #1
 8000734:	2901      	cmp	r1, #1
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x146>
 8000738:	e0ae      	b.n	8000898 <__aeabi_fadd+0x2a4>
 800073a:	29ff      	cmp	r1, #255	; 0xff
 800073c:	d023      	beq.n	8000786 <__aeabi_fadd+0x192>
 800073e:	0011      	movs	r1, r2
 8000740:	e7c1      	b.n	80006c6 <__aeabi_fadd+0xd2>
 8000742:	2300      	movs	r3, #0
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	469c      	mov	ip, r3
 8000748:	e799      	b.n	800067e <__aeabi_fadd+0x8a>
 800074a:	21fe      	movs	r1, #254	; 0xfe
 800074c:	1c6a      	adds	r2, r5, #1
 800074e:	4211      	tst	r1, r2
 8000750:	d077      	beq.n	8000842 <__aeabi_fadd+0x24e>
 8000752:	2aff      	cmp	r2, #255	; 0xff
 8000754:	d0f5      	beq.n	8000742 <__aeabi_fadd+0x14e>
 8000756:	0015      	movs	r5, r2
 8000758:	4446      	add	r6, r8
 800075a:	0870      	lsrs	r0, r6, #1
 800075c:	0743      	lsls	r3, r0, #29
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x16e>
 8000760:	e77e      	b.n	8000660 <__aeabi_fadd+0x6c>
 8000762:	08c3      	lsrs	r3, r0, #3
 8000764:	2dff      	cmp	r5, #255	; 0xff
 8000766:	d00e      	beq.n	8000786 <__aeabi_fadd+0x192>
 8000768:	025b      	lsls	r3, r3, #9
 800076a:	0a5b      	lsrs	r3, r3, #9
 800076c:	469c      	mov	ip, r3
 800076e:	b2ea      	uxtb	r2, r5
 8000770:	e785      	b.n	800067e <__aeabi_fadd+0x8a>
 8000772:	2e00      	cmp	r6, #0
 8000774:	d007      	beq.n	8000786 <__aeabi_fadd+0x192>
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	03d2      	lsls	r2, r2, #15
 800077a:	4213      	tst	r3, r2
 800077c:	d003      	beq.n	8000786 <__aeabi_fadd+0x192>
 800077e:	4210      	tst	r0, r2
 8000780:	d101      	bne.n	8000786 <__aeabi_fadd+0x192>
 8000782:	000c      	movs	r4, r1
 8000784:	0003      	movs	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0db      	beq.n	8000742 <__aeabi_fadd+0x14e>
 800078a:	2080      	movs	r0, #128	; 0x80
 800078c:	03c0      	lsls	r0, r0, #15
 800078e:	4318      	orrs	r0, r3
 8000790:	0240      	lsls	r0, r0, #9
 8000792:	0a43      	lsrs	r3, r0, #9
 8000794:	469c      	mov	ip, r3
 8000796:	22ff      	movs	r2, #255	; 0xff
 8000798:	e771      	b.n	800067e <__aeabi_fadd+0x8a>
 800079a:	2900      	cmp	r1, #0
 800079c:	d0d5      	beq.n	800074a <__aeabi_fadd+0x156>
 800079e:	1b7a      	subs	r2, r7, r5
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d160      	bne.n	8000866 <__aeabi_fadd+0x272>
 80007a4:	4643      	mov	r3, r8
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d024      	beq.n	80007f4 <__aeabi_fadd+0x200>
 80007aa:	1e53      	subs	r3, r2, #1
 80007ac:	2a01      	cmp	r2, #1
 80007ae:	d073      	beq.n	8000898 <__aeabi_fadd+0x2a4>
 80007b0:	2aff      	cmp	r2, #255	; 0xff
 80007b2:	d0e7      	beq.n	8000784 <__aeabi_fadd+0x190>
 80007b4:	001a      	movs	r2, r3
 80007b6:	2a1b      	cmp	r2, #27
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_fadd+0x1c8>
 80007ba:	e085      	b.n	80008c8 <__aeabi_fadd+0x2d4>
 80007bc:	2001      	movs	r0, #1
 80007be:	003d      	movs	r5, r7
 80007c0:	1980      	adds	r0, r0, r6
 80007c2:	e785      	b.n	80006d0 <__aeabi_fadd+0xdc>
 80007c4:	2320      	movs	r3, #32
 80007c6:	003a      	movs	r2, r7
 80007c8:	1b45      	subs	r5, r0, r5
 80007ca:	0038      	movs	r0, r7
 80007cc:	3501      	adds	r5, #1
 80007ce:	40ea      	lsrs	r2, r5
 80007d0:	1b5d      	subs	r5, r3, r5
 80007d2:	40a8      	lsls	r0, r5
 80007d4:	1e43      	subs	r3, r0, #1
 80007d6:	4198      	sbcs	r0, r3
 80007d8:	2500      	movs	r5, #0
 80007da:	4310      	orrs	r0, r2
 80007dc:	e73e      	b.n	800065c <__aeabi_fadd+0x68>
 80007de:	2320      	movs	r3, #32
 80007e0:	0030      	movs	r0, r6
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	0031      	movs	r1, r6
 80007e6:	4098      	lsls	r0, r3
 80007e8:	40d1      	lsrs	r1, r2
 80007ea:	1e43      	subs	r3, r0, #1
 80007ec:	4198      	sbcs	r0, r3
 80007ee:	4308      	orrs	r0, r1
 80007f0:	e722      	b.n	8000638 <__aeabi_fadd+0x44>
 80007f2:	000c      	movs	r4, r1
 80007f4:	0003      	movs	r3, r0
 80007f6:	0015      	movs	r5, r2
 80007f8:	e7b4      	b.n	8000764 <__aeabi_fadd+0x170>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d0c1      	beq.n	8000782 <__aeabi_fadd+0x18e>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	4640      	mov	r0, r8
 8000802:	04db      	lsls	r3, r3, #19
 8000804:	4318      	orrs	r0, r3
 8000806:	4680      	mov	r8, r0
 8000808:	2a1b      	cmp	r2, #27
 800080a:	dd51      	ble.n	80008b0 <__aeabi_fadd+0x2bc>
 800080c:	2001      	movs	r0, #1
 800080e:	000c      	movs	r4, r1
 8000810:	003d      	movs	r5, r7
 8000812:	1a30      	subs	r0, r6, r0
 8000814:	e712      	b.n	800063c <__aeabi_fadd+0x48>
 8000816:	4643      	mov	r3, r8
 8000818:	1b9f      	subs	r7, r3, r6
 800081a:	017b      	lsls	r3, r7, #5
 800081c:	d42b      	bmi.n	8000876 <__aeabi_fadd+0x282>
 800081e:	2f00      	cmp	r7, #0
 8000820:	d000      	beq.n	8000824 <__aeabi_fadd+0x230>
 8000822:	e710      	b.n	8000646 <__aeabi_fadd+0x52>
 8000824:	2300      	movs	r3, #0
 8000826:	2400      	movs	r4, #0
 8000828:	2200      	movs	r2, #0
 800082a:	469c      	mov	ip, r3
 800082c:	e727      	b.n	800067e <__aeabi_fadd+0x8a>
 800082e:	2320      	movs	r3, #32
 8000830:	0032      	movs	r2, r6
 8000832:	0030      	movs	r0, r6
 8000834:	40ca      	lsrs	r2, r1
 8000836:	1a59      	subs	r1, r3, r1
 8000838:	4088      	lsls	r0, r1
 800083a:	1e43      	subs	r3, r0, #1
 800083c:	4198      	sbcs	r0, r3
 800083e:	4310      	orrs	r0, r2
 8000840:	e745      	b.n	80006ce <__aeabi_fadd+0xda>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d14a      	bne.n	80008dc <__aeabi_fadd+0x2e8>
 8000846:	4643      	mov	r3, r8
 8000848:	2b00      	cmp	r3, #0
 800084a:	d063      	beq.n	8000914 <__aeabi_fadd+0x320>
 800084c:	2200      	movs	r2, #0
 800084e:	2e00      	cmp	r6, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x260>
 8000852:	e714      	b.n	800067e <__aeabi_fadd+0x8a>
 8000854:	0030      	movs	r0, r6
 8000856:	4440      	add	r0, r8
 8000858:	0143      	lsls	r3, r0, #5
 800085a:	d400      	bmi.n	800085e <__aeabi_fadd+0x26a>
 800085c:	e77e      	b.n	800075c <__aeabi_fadd+0x168>
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <__aeabi_fadd+0x334>)
 8000860:	3501      	adds	r5, #1
 8000862:	4018      	ands	r0, r3
 8000864:	e77a      	b.n	800075c <__aeabi_fadd+0x168>
 8000866:	2fff      	cmp	r7, #255	; 0xff
 8000868:	d08c      	beq.n	8000784 <__aeabi_fadd+0x190>
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	4641      	mov	r1, r8
 800086e:	04db      	lsls	r3, r3, #19
 8000870:	4319      	orrs	r1, r3
 8000872:	4688      	mov	r8, r1
 8000874:	e79f      	b.n	80007b6 <__aeabi_fadd+0x1c2>
 8000876:	4643      	mov	r3, r8
 8000878:	000c      	movs	r4, r1
 800087a:	1af7      	subs	r7, r6, r3
 800087c:	e6e3      	b.n	8000646 <__aeabi_fadd+0x52>
 800087e:	4642      	mov	r2, r8
 8000880:	2a00      	cmp	r2, #0
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0x292>
 8000884:	e775      	b.n	8000772 <__aeabi_fadd+0x17e>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x298>
 800088a:	e77a      	b.n	8000782 <__aeabi_fadd+0x18e>
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	03db      	lsls	r3, r3, #15
 8000890:	2400      	movs	r4, #0
 8000892:	469c      	mov	ip, r3
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	e6f2      	b.n	800067e <__aeabi_fadd+0x8a>
 8000898:	0030      	movs	r0, r6
 800089a:	4440      	add	r0, r8
 800089c:	2501      	movs	r5, #1
 800089e:	0143      	lsls	r3, r0, #5
 80008a0:	d400      	bmi.n	80008a4 <__aeabi_fadd+0x2b0>
 80008a2:	e75b      	b.n	800075c <__aeabi_fadd+0x168>
 80008a4:	2502      	movs	r5, #2
 80008a6:	e718      	b.n	80006da <__aeabi_fadd+0xe6>
 80008a8:	4643      	mov	r3, r8
 80008aa:	2501      	movs	r5, #1
 80008ac:	1b98      	subs	r0, r3, r6
 80008ae:	e6c5      	b.n	800063c <__aeabi_fadd+0x48>
 80008b0:	2320      	movs	r3, #32
 80008b2:	4644      	mov	r4, r8
 80008b4:	4640      	mov	r0, r8
 80008b6:	40d4      	lsrs	r4, r2
 80008b8:	1a9a      	subs	r2, r3, r2
 80008ba:	4090      	lsls	r0, r2
 80008bc:	1e43      	subs	r3, r0, #1
 80008be:	4198      	sbcs	r0, r3
 80008c0:	4320      	orrs	r0, r4
 80008c2:	e7a4      	b.n	800080e <__aeabi_fadd+0x21a>
 80008c4:	000d      	movs	r5, r1
 80008c6:	e74d      	b.n	8000764 <__aeabi_fadd+0x170>
 80008c8:	2320      	movs	r3, #32
 80008ca:	4641      	mov	r1, r8
 80008cc:	4640      	mov	r0, r8
 80008ce:	40d1      	lsrs	r1, r2
 80008d0:	1a9a      	subs	r2, r3, r2
 80008d2:	4090      	lsls	r0, r2
 80008d4:	1e43      	subs	r3, r0, #1
 80008d6:	4198      	sbcs	r0, r3
 80008d8:	4308      	orrs	r0, r1
 80008da:	e770      	b.n	80007be <__aeabi_fadd+0x1ca>
 80008dc:	4642      	mov	r2, r8
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fadd+0x2f0>
 80008e2:	e74f      	b.n	8000784 <__aeabi_fadd+0x190>
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2f6>
 80008e8:	e74d      	b.n	8000786 <__aeabi_fadd+0x192>
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	03d2      	lsls	r2, r2, #15
 80008ee:	4213      	tst	r3, r2
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x300>
 80008f2:	e748      	b.n	8000786 <__aeabi_fadd+0x192>
 80008f4:	4210      	tst	r0, r2
 80008f6:	d000      	beq.n	80008fa <__aeabi_fadd+0x306>
 80008f8:	e745      	b.n	8000786 <__aeabi_fadd+0x192>
 80008fa:	0003      	movs	r3, r0
 80008fc:	e743      	b.n	8000786 <__aeabi_fadd+0x192>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d090      	beq.n	8000824 <__aeabi_fadd+0x230>
 8000902:	000c      	movs	r4, r1
 8000904:	4684      	mov	ip, r0
 8000906:	2200      	movs	r2, #0
 8000908:	e6b9      	b.n	800067e <__aeabi_fadd+0x8a>
 800090a:	4643      	mov	r3, r8
 800090c:	000c      	movs	r4, r1
 800090e:	1af0      	subs	r0, r6, r3
 8000910:	3501      	adds	r5, #1
 8000912:	e693      	b.n	800063c <__aeabi_fadd+0x48>
 8000914:	4684      	mov	ip, r0
 8000916:	2200      	movs	r2, #0
 8000918:	e6b1      	b.n	800067e <__aeabi_fadd+0x8a>
 800091a:	2800      	cmp	r0, #0
 800091c:	d000      	beq.n	8000920 <__aeabi_fadd+0x32c>
 800091e:	e71d      	b.n	800075c <__aeabi_fadd+0x168>
 8000920:	2300      	movs	r3, #0
 8000922:	2400      	movs	r4, #0
 8000924:	469c      	mov	ip, r3
 8000926:	e6aa      	b.n	800067e <__aeabi_fadd+0x8a>
 8000928:	fbffffff 	.word	0xfbffffff
 800092c:	7dffffff 	.word	0x7dffffff

08000930 <__aeabi_fdiv>:
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	464f      	mov	r7, r9
 8000934:	4646      	mov	r6, r8
 8000936:	46d6      	mov	lr, sl
 8000938:	0245      	lsls	r5, r0, #9
 800093a:	b5c0      	push	{r6, r7, lr}
 800093c:	0047      	lsls	r7, r0, #1
 800093e:	1c0c      	adds	r4, r1, #0
 8000940:	0a6d      	lsrs	r5, r5, #9
 8000942:	0e3f      	lsrs	r7, r7, #24
 8000944:	0fc6      	lsrs	r6, r0, #31
 8000946:	2f00      	cmp	r7, #0
 8000948:	d100      	bne.n	800094c <__aeabi_fdiv+0x1c>
 800094a:	e070      	b.n	8000a2e <__aeabi_fdiv+0xfe>
 800094c:	2fff      	cmp	r7, #255	; 0xff
 800094e:	d100      	bne.n	8000952 <__aeabi_fdiv+0x22>
 8000950:	e075      	b.n	8000a3e <__aeabi_fdiv+0x10e>
 8000952:	00eb      	lsls	r3, r5, #3
 8000954:	2580      	movs	r5, #128	; 0x80
 8000956:	04ed      	lsls	r5, r5, #19
 8000958:	431d      	orrs	r5, r3
 800095a:	2300      	movs	r3, #0
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	3f7f      	subs	r7, #127	; 0x7f
 8000962:	0260      	lsls	r0, r4, #9
 8000964:	0a43      	lsrs	r3, r0, #9
 8000966:	4698      	mov	r8, r3
 8000968:	0063      	lsls	r3, r4, #1
 800096a:	0e1b      	lsrs	r3, r3, #24
 800096c:	0fe4      	lsrs	r4, r4, #31
 800096e:	2b00      	cmp	r3, #0
 8000970:	d04e      	beq.n	8000a10 <__aeabi_fdiv+0xe0>
 8000972:	2bff      	cmp	r3, #255	; 0xff
 8000974:	d046      	beq.n	8000a04 <__aeabi_fdiv+0xd4>
 8000976:	4642      	mov	r2, r8
 8000978:	00d0      	lsls	r0, r2, #3
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	04d2      	lsls	r2, r2, #19
 800097e:	4302      	orrs	r2, r0
 8000980:	4690      	mov	r8, r2
 8000982:	2200      	movs	r2, #0
 8000984:	3b7f      	subs	r3, #127	; 0x7f
 8000986:	0031      	movs	r1, r6
 8000988:	1aff      	subs	r7, r7, r3
 800098a:	464b      	mov	r3, r9
 800098c:	4061      	eors	r1, r4
 800098e:	b2c9      	uxtb	r1, r1
 8000990:	4313      	orrs	r3, r2
 8000992:	2b0f      	cmp	r3, #15
 8000994:	d900      	bls.n	8000998 <__aeabi_fdiv+0x68>
 8000996:	e0b5      	b.n	8000b04 <__aeabi_fdiv+0x1d4>
 8000998:	486e      	ldr	r0, [pc, #440]	; (8000b54 <__aeabi_fdiv+0x224>)
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	58c3      	ldr	r3, [r0, r3]
 800099e:	469f      	mov	pc, r3
 80009a0:	2300      	movs	r3, #0
 80009a2:	4698      	mov	r8, r3
 80009a4:	0026      	movs	r6, r4
 80009a6:	4645      	mov	r5, r8
 80009a8:	4692      	mov	sl, r2
 80009aa:	4653      	mov	r3, sl
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fdiv+0x82>
 80009b0:	e089      	b.n	8000ac6 <__aeabi_fdiv+0x196>
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fdiv+0x88>
 80009b6:	e09e      	b.n	8000af6 <__aeabi_fdiv+0x1c6>
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d018      	beq.n	80009ee <__aeabi_fdiv+0xbe>
 80009bc:	003b      	movs	r3, r7
 80009be:	337f      	adds	r3, #127	; 0x7f
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	dd69      	ble.n	8000a98 <__aeabi_fdiv+0x168>
 80009c4:	076a      	lsls	r2, r5, #29
 80009c6:	d004      	beq.n	80009d2 <__aeabi_fdiv+0xa2>
 80009c8:	220f      	movs	r2, #15
 80009ca:	402a      	ands	r2, r5
 80009cc:	2a04      	cmp	r2, #4
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fdiv+0xa2>
 80009d0:	3504      	adds	r5, #4
 80009d2:	012a      	lsls	r2, r5, #4
 80009d4:	d503      	bpl.n	80009de <__aeabi_fdiv+0xae>
 80009d6:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <__aeabi_fdiv+0x228>)
 80009d8:	401d      	ands	r5, r3
 80009da:	003b      	movs	r3, r7
 80009dc:	3380      	adds	r3, #128	; 0x80
 80009de:	2bfe      	cmp	r3, #254	; 0xfe
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_fdiv+0xb4>
 80009e2:	e070      	b.n	8000ac6 <__aeabi_fdiv+0x196>
 80009e4:	01ad      	lsls	r5, r5, #6
 80009e6:	0a6d      	lsrs	r5, r5, #9
 80009e8:	b2d8      	uxtb	r0, r3
 80009ea:	e002      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 80009ec:	000e      	movs	r6, r1
 80009ee:	2000      	movs	r0, #0
 80009f0:	2500      	movs	r5, #0
 80009f2:	05c0      	lsls	r0, r0, #23
 80009f4:	4328      	orrs	r0, r5
 80009f6:	07f6      	lsls	r6, r6, #31
 80009f8:	4330      	orrs	r0, r6
 80009fa:	bce0      	pop	{r5, r6, r7}
 80009fc:	46ba      	mov	sl, r7
 80009fe:	46b1      	mov	r9, r6
 8000a00:	46a8      	mov	r8, r5
 8000a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a04:	4643      	mov	r3, r8
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d13f      	bne.n	8000a8a <__aeabi_fdiv+0x15a>
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	3fff      	subs	r7, #255	; 0xff
 8000a0e:	e003      	b.n	8000a18 <__aeabi_fdiv+0xe8>
 8000a10:	4643      	mov	r3, r8
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d12d      	bne.n	8000a72 <__aeabi_fdiv+0x142>
 8000a16:	2201      	movs	r2, #1
 8000a18:	0031      	movs	r1, r6
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	4061      	eors	r1, r4
 8000a1e:	b2c9      	uxtb	r1, r1
 8000a20:	4313      	orrs	r3, r2
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d834      	bhi.n	8000a90 <__aeabi_fdiv+0x160>
 8000a26:	484d      	ldr	r0, [pc, #308]	; (8000b5c <__aeabi_fdiv+0x22c>)
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	58c3      	ldr	r3, [r0, r3]
 8000a2c:	469f      	mov	pc, r3
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d113      	bne.n	8000a5a <__aeabi_fdiv+0x12a>
 8000a32:	2304      	movs	r3, #4
 8000a34:	4699      	mov	r9, r3
 8000a36:	3b03      	subs	r3, #3
 8000a38:	2700      	movs	r7, #0
 8000a3a:	469a      	mov	sl, r3
 8000a3c:	e791      	b.n	8000962 <__aeabi_fdiv+0x32>
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d105      	bne.n	8000a4e <__aeabi_fdiv+0x11e>
 8000a42:	2308      	movs	r3, #8
 8000a44:	4699      	mov	r9, r3
 8000a46:	3b06      	subs	r3, #6
 8000a48:	27ff      	movs	r7, #255	; 0xff
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	e789      	b.n	8000962 <__aeabi_fdiv+0x32>
 8000a4e:	230c      	movs	r3, #12
 8000a50:	4699      	mov	r9, r3
 8000a52:	3b09      	subs	r3, #9
 8000a54:	27ff      	movs	r7, #255	; 0xff
 8000a56:	469a      	mov	sl, r3
 8000a58:	e783      	b.n	8000962 <__aeabi_fdiv+0x32>
 8000a5a:	0028      	movs	r0, r5
 8000a5c:	f002 fb4a 	bl	80030f4 <__clzsi2>
 8000a60:	2776      	movs	r7, #118	; 0x76
 8000a62:	1f43      	subs	r3, r0, #5
 8000a64:	409d      	lsls	r5, r3
 8000a66:	2300      	movs	r3, #0
 8000a68:	427f      	negs	r7, r7
 8000a6a:	4699      	mov	r9, r3
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	1a3f      	subs	r7, r7, r0
 8000a70:	e777      	b.n	8000962 <__aeabi_fdiv+0x32>
 8000a72:	4640      	mov	r0, r8
 8000a74:	f002 fb3e 	bl	80030f4 <__clzsi2>
 8000a78:	4642      	mov	r2, r8
 8000a7a:	1f43      	subs	r3, r0, #5
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	2376      	movs	r3, #118	; 0x76
 8000a80:	425b      	negs	r3, r3
 8000a82:	4690      	mov	r8, r2
 8000a84:	1a1b      	subs	r3, r3, r0
 8000a86:	2200      	movs	r2, #0
 8000a88:	e77d      	b.n	8000986 <__aeabi_fdiv+0x56>
 8000a8a:	23ff      	movs	r3, #255	; 0xff
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	e77a      	b.n	8000986 <__aeabi_fdiv+0x56>
 8000a90:	000e      	movs	r6, r1
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	2500      	movs	r5, #0
 8000a96:	e7ac      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 8000a98:	2001      	movs	r0, #1
 8000a9a:	1ac0      	subs	r0, r0, r3
 8000a9c:	281b      	cmp	r0, #27
 8000a9e:	dca6      	bgt.n	80009ee <__aeabi_fdiv+0xbe>
 8000aa0:	379e      	adds	r7, #158	; 0x9e
 8000aa2:	002a      	movs	r2, r5
 8000aa4:	40bd      	lsls	r5, r7
 8000aa6:	40c2      	lsrs	r2, r0
 8000aa8:	1e6b      	subs	r3, r5, #1
 8000aaa:	419d      	sbcs	r5, r3
 8000aac:	4315      	orrs	r5, r2
 8000aae:	076b      	lsls	r3, r5, #29
 8000ab0:	d004      	beq.n	8000abc <__aeabi_fdiv+0x18c>
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	402b      	ands	r3, r5
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fdiv+0x18c>
 8000aba:	3504      	adds	r5, #4
 8000abc:	016b      	lsls	r3, r5, #5
 8000abe:	d544      	bpl.n	8000b4a <__aeabi_fdiv+0x21a>
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	e795      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 8000ac6:	20ff      	movs	r0, #255	; 0xff
 8000ac8:	2500      	movs	r5, #0
 8000aca:	e792      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 8000acc:	2580      	movs	r5, #128	; 0x80
 8000ace:	2600      	movs	r6, #0
 8000ad0:	20ff      	movs	r0, #255	; 0xff
 8000ad2:	03ed      	lsls	r5, r5, #15
 8000ad4:	e78d      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	4698      	mov	r8, r3
 8000ada:	2080      	movs	r0, #128	; 0x80
 8000adc:	03c0      	lsls	r0, r0, #15
 8000ade:	4205      	tst	r5, r0
 8000ae0:	d009      	beq.n	8000af6 <__aeabi_fdiv+0x1c6>
 8000ae2:	4643      	mov	r3, r8
 8000ae4:	4203      	tst	r3, r0
 8000ae6:	d106      	bne.n	8000af6 <__aeabi_fdiv+0x1c6>
 8000ae8:	4645      	mov	r5, r8
 8000aea:	4305      	orrs	r5, r0
 8000aec:	026d      	lsls	r5, r5, #9
 8000aee:	0026      	movs	r6, r4
 8000af0:	20ff      	movs	r0, #255	; 0xff
 8000af2:	0a6d      	lsrs	r5, r5, #9
 8000af4:	e77d      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 8000af6:	2080      	movs	r0, #128	; 0x80
 8000af8:	03c0      	lsls	r0, r0, #15
 8000afa:	4305      	orrs	r5, r0
 8000afc:	026d      	lsls	r5, r5, #9
 8000afe:	20ff      	movs	r0, #255	; 0xff
 8000b00:	0a6d      	lsrs	r5, r5, #9
 8000b02:	e776      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 8000b04:	4642      	mov	r2, r8
 8000b06:	016b      	lsls	r3, r5, #5
 8000b08:	0150      	lsls	r0, r2, #5
 8000b0a:	4283      	cmp	r3, r0
 8000b0c:	d219      	bcs.n	8000b42 <__aeabi_fdiv+0x212>
 8000b0e:	221b      	movs	r2, #27
 8000b10:	2500      	movs	r5, #0
 8000b12:	3f01      	subs	r7, #1
 8000b14:	2601      	movs	r6, #1
 8000b16:	001c      	movs	r4, r3
 8000b18:	006d      	lsls	r5, r5, #1
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2c00      	cmp	r4, #0
 8000b1e:	db01      	blt.n	8000b24 <__aeabi_fdiv+0x1f4>
 8000b20:	4298      	cmp	r0, r3
 8000b22:	d801      	bhi.n	8000b28 <__aeabi_fdiv+0x1f8>
 8000b24:	1a1b      	subs	r3, r3, r0
 8000b26:	4335      	orrs	r5, r6
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d1f3      	bne.n	8000b16 <__aeabi_fdiv+0x1e6>
 8000b2e:	1e5a      	subs	r2, r3, #1
 8000b30:	4193      	sbcs	r3, r2
 8000b32:	431d      	orrs	r5, r3
 8000b34:	003b      	movs	r3, r7
 8000b36:	337f      	adds	r3, #127	; 0x7f
 8000b38:	000e      	movs	r6, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_fdiv+0x210>
 8000b3e:	e741      	b.n	80009c4 <__aeabi_fdiv+0x94>
 8000b40:	e7aa      	b.n	8000a98 <__aeabi_fdiv+0x168>
 8000b42:	221a      	movs	r2, #26
 8000b44:	2501      	movs	r5, #1
 8000b46:	1a1b      	subs	r3, r3, r0
 8000b48:	e7e4      	b.n	8000b14 <__aeabi_fdiv+0x1e4>
 8000b4a:	01ad      	lsls	r5, r5, #6
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	0a6d      	lsrs	r5, r5, #9
 8000b50:	e74f      	b.n	80009f2 <__aeabi_fdiv+0xc2>
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	0800fdfc 	.word	0x0800fdfc
 8000b58:	f7ffffff 	.word	0xf7ffffff
 8000b5c:	0800fe3c 	.word	0x0800fe3c

08000b60 <__eqsf2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0042      	lsls	r2, r0, #1
 8000b64:	0245      	lsls	r5, r0, #9
 8000b66:	024e      	lsls	r6, r1, #9
 8000b68:	004c      	lsls	r4, r1, #1
 8000b6a:	0fc3      	lsrs	r3, r0, #31
 8000b6c:	0a6d      	lsrs	r5, r5, #9
 8000b6e:	2001      	movs	r0, #1
 8000b70:	0e12      	lsrs	r2, r2, #24
 8000b72:	0a76      	lsrs	r6, r6, #9
 8000b74:	0e24      	lsrs	r4, r4, #24
 8000b76:	0fc9      	lsrs	r1, r1, #31
 8000b78:	2aff      	cmp	r2, #255	; 0xff
 8000b7a:	d006      	beq.n	8000b8a <__eqsf2+0x2a>
 8000b7c:	2cff      	cmp	r4, #255	; 0xff
 8000b7e:	d003      	beq.n	8000b88 <__eqsf2+0x28>
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	d101      	bne.n	8000b88 <__eqsf2+0x28>
 8000b84:	42b5      	cmp	r5, r6
 8000b86:	d006      	beq.n	8000b96 <__eqsf2+0x36>
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d1fc      	bne.n	8000b88 <__eqsf2+0x28>
 8000b8e:	2cff      	cmp	r4, #255	; 0xff
 8000b90:	d1fa      	bne.n	8000b88 <__eqsf2+0x28>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d1f8      	bne.n	8000b88 <__eqsf2+0x28>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d006      	beq.n	8000ba8 <__eqsf2+0x48>
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	d1f3      	bne.n	8000b88 <__eqsf2+0x28>
 8000ba0:	0028      	movs	r0, r5
 8000ba2:	1e43      	subs	r3, r0, #1
 8000ba4:	4198      	sbcs	r0, r3
 8000ba6:	e7ef      	b.n	8000b88 <__eqsf2+0x28>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e7ed      	b.n	8000b88 <__eqsf2+0x28>

08000bac <__gesf2>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	024e      	lsls	r6, r1, #9
 8000bb4:	004c      	lsls	r4, r1, #1
 8000bb6:	0fc3      	lsrs	r3, r0, #31
 8000bb8:	0a6d      	lsrs	r5, r5, #9
 8000bba:	0e12      	lsrs	r2, r2, #24
 8000bbc:	0a76      	lsrs	r6, r6, #9
 8000bbe:	0e24      	lsrs	r4, r4, #24
 8000bc0:	0fc8      	lsrs	r0, r1, #31
 8000bc2:	2aff      	cmp	r2, #255	; 0xff
 8000bc4:	d01b      	beq.n	8000bfe <__gesf2+0x52>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d00e      	beq.n	8000be8 <__gesf2+0x3c>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d11b      	bne.n	8000c06 <__gesf2+0x5a>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d101      	bne.n	8000bd6 <__gesf2+0x2a>
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d01c      	beq.n	8000c10 <__gesf2+0x64>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d00c      	beq.n	8000bf4 <__gesf2+0x48>
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	d01c      	beq.n	8000c18 <__gesf2+0x6c>
 8000bde:	2102      	movs	r1, #2
 8000be0:	1e58      	subs	r0, r3, #1
 8000be2:	4008      	ands	r0, r1
 8000be4:	3801      	subs	r0, #1
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d122      	bne.n	8000c32 <__gesf2+0x86>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d1f4      	bne.n	8000bda <__gesf2+0x2e>
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d1f2      	bne.n	8000bda <__gesf2+0x2e>
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d1f6      	bne.n	8000be6 <__gesf2+0x3a>
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	e7f3      	b.n	8000be6 <__gesf2+0x3a>
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d117      	bne.n	8000c32 <__gesf2+0x86>
 8000c02:	2cff      	cmp	r4, #255	; 0xff
 8000c04:	d0f0      	beq.n	8000be8 <__gesf2+0x3c>
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d1e7      	bne.n	8000bda <__gesf2+0x2e>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d1e5      	bne.n	8000bda <__gesf2+0x2e>
 8000c0e:	e7e6      	b.n	8000bde <__gesf2+0x32>
 8000c10:	2000      	movs	r0, #0
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e7      	beq.n	8000be6 <__gesf2+0x3a>
 8000c16:	e7e2      	b.n	8000bde <__gesf2+0x32>
 8000c18:	42a2      	cmp	r2, r4
 8000c1a:	dc05      	bgt.n	8000c28 <__gesf2+0x7c>
 8000c1c:	dbea      	blt.n	8000bf4 <__gesf2+0x48>
 8000c1e:	42b5      	cmp	r5, r6
 8000c20:	d802      	bhi.n	8000c28 <__gesf2+0x7c>
 8000c22:	d3e7      	bcc.n	8000bf4 <__gesf2+0x48>
 8000c24:	2000      	movs	r0, #0
 8000c26:	e7de      	b.n	8000be6 <__gesf2+0x3a>
 8000c28:	4243      	negs	r3, r0
 8000c2a:	4158      	adcs	r0, r3
 8000c2c:	0040      	lsls	r0, r0, #1
 8000c2e:	3801      	subs	r0, #1
 8000c30:	e7d9      	b.n	8000be6 <__gesf2+0x3a>
 8000c32:	2002      	movs	r0, #2
 8000c34:	4240      	negs	r0, r0
 8000c36:	e7d6      	b.n	8000be6 <__gesf2+0x3a>

08000c38 <__lesf2>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	0042      	lsls	r2, r0, #1
 8000c3c:	0245      	lsls	r5, r0, #9
 8000c3e:	024e      	lsls	r6, r1, #9
 8000c40:	004c      	lsls	r4, r1, #1
 8000c42:	0fc3      	lsrs	r3, r0, #31
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	0e12      	lsrs	r2, r2, #24
 8000c48:	0a76      	lsrs	r6, r6, #9
 8000c4a:	0e24      	lsrs	r4, r4, #24
 8000c4c:	0fc8      	lsrs	r0, r1, #31
 8000c4e:	2aff      	cmp	r2, #255	; 0xff
 8000c50:	d00b      	beq.n	8000c6a <__lesf2+0x32>
 8000c52:	2cff      	cmp	r4, #255	; 0xff
 8000c54:	d00d      	beq.n	8000c72 <__lesf2+0x3a>
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d11f      	bne.n	8000c9a <__lesf2+0x62>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d116      	bne.n	8000c8c <__lesf2+0x54>
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d114      	bne.n	8000c8c <__lesf2+0x54>
 8000c62:	2000      	movs	r0, #0
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	d010      	beq.n	8000c8a <__lesf2+0x52>
 8000c68:	e009      	b.n	8000c7e <__lesf2+0x46>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d10c      	bne.n	8000c88 <__lesf2+0x50>
 8000c6e:	2cff      	cmp	r4, #255	; 0xff
 8000c70:	d113      	bne.n	8000c9a <__lesf2+0x62>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d108      	bne.n	8000c88 <__lesf2+0x50>
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d008      	beq.n	8000c8c <__lesf2+0x54>
 8000c7a:	4283      	cmp	r3, r0
 8000c7c:	d012      	beq.n	8000ca4 <__lesf2+0x6c>
 8000c7e:	2102      	movs	r1, #2
 8000c80:	1e58      	subs	r0, r3, #1
 8000c82:	4008      	ands	r0, r1
 8000c84:	3801      	subs	r0, #1
 8000c86:	e000      	b.n	8000c8a <__lesf2+0x52>
 8000c88:	2002      	movs	r0, #2
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d1f4      	bne.n	8000c7a <__lesf2+0x42>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d1fa      	bne.n	8000c8a <__lesf2+0x52>
 8000c94:	2001      	movs	r0, #1
 8000c96:	4240      	negs	r0, r0
 8000c98:	e7f7      	b.n	8000c8a <__lesf2+0x52>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d1ed      	bne.n	8000c7a <__lesf2+0x42>
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d1eb      	bne.n	8000c7a <__lesf2+0x42>
 8000ca2:	e7ec      	b.n	8000c7e <__lesf2+0x46>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	dc05      	bgt.n	8000cb4 <__lesf2+0x7c>
 8000ca8:	dbf2      	blt.n	8000c90 <__lesf2+0x58>
 8000caa:	42b5      	cmp	r5, r6
 8000cac:	d802      	bhi.n	8000cb4 <__lesf2+0x7c>
 8000cae:	d3ef      	bcc.n	8000c90 <__lesf2+0x58>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7ea      	b.n	8000c8a <__lesf2+0x52>
 8000cb4:	4243      	negs	r3, r0
 8000cb6:	4158      	adcs	r0, r3
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	3801      	subs	r0, #1
 8000cbc:	e7e5      	b.n	8000c8a <__lesf2+0x52>
 8000cbe:	46c0      	nop			; (mov r8, r8)

08000cc0 <__aeabi_fmul>:
 8000cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc2:	464f      	mov	r7, r9
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	46d6      	mov	lr, sl
 8000cc8:	0244      	lsls	r4, r0, #9
 8000cca:	0045      	lsls	r5, r0, #1
 8000ccc:	b5c0      	push	{r6, r7, lr}
 8000cce:	0a64      	lsrs	r4, r4, #9
 8000cd0:	1c0f      	adds	r7, r1, #0
 8000cd2:	0e2d      	lsrs	r5, r5, #24
 8000cd4:	0fc6      	lsrs	r6, r0, #31
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fmul+0x1c>
 8000cda:	e08d      	b.n	8000df8 <__aeabi_fmul+0x138>
 8000cdc:	2dff      	cmp	r5, #255	; 0xff
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fmul+0x22>
 8000ce0:	e092      	b.n	8000e08 <__aeabi_fmul+0x148>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	2080      	movs	r0, #128	; 0x80
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	469a      	mov	sl, r3
 8000cea:	00e4      	lsls	r4, r4, #3
 8000cec:	04c0      	lsls	r0, r0, #19
 8000cee:	4304      	orrs	r4, r0
 8000cf0:	3d7f      	subs	r5, #127	; 0x7f
 8000cf2:	0278      	lsls	r0, r7, #9
 8000cf4:	0a43      	lsrs	r3, r0, #9
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	007b      	lsls	r3, r7, #1
 8000cfa:	0e1b      	lsrs	r3, r3, #24
 8000cfc:	0fff      	lsrs	r7, r7, #31
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fmul+0x44>
 8000d02:	e070      	b.n	8000de6 <__aeabi_fmul+0x126>
 8000d04:	2bff      	cmp	r3, #255	; 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fmul+0x4a>
 8000d08:	e086      	b.n	8000e18 <__aeabi_fmul+0x158>
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	00d0      	lsls	r0, r2, #3
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	3b7f      	subs	r3, #127	; 0x7f
 8000d12:	18ed      	adds	r5, r5, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	04d2      	lsls	r2, r2, #19
 8000d18:	4302      	orrs	r2, r0
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	0031      	movs	r1, r6
 8000d20:	464b      	mov	r3, r9
 8000d22:	4079      	eors	r1, r7
 8000d24:	1c68      	adds	r0, r5, #1
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d81c      	bhi.n	8000d64 <__aeabi_fmul+0xa4>
 8000d2a:	4a76      	ldr	r2, [pc, #472]	; (8000f04 <__aeabi_fmul+0x244>)
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	58d3      	ldr	r3, [r2, r3]
 8000d30:	469f      	mov	pc, r3
 8000d32:	0039      	movs	r1, r7
 8000d34:	4644      	mov	r4, r8
 8000d36:	46e2      	mov	sl, ip
 8000d38:	4653      	mov	r3, sl
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d00f      	beq.n	8000d5e <__aeabi_fmul+0x9e>
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fmul+0x84>
 8000d42:	e0d7      	b.n	8000ef4 <__aeabi_fmul+0x234>
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d137      	bne.n	8000db8 <__aeabi_fmul+0xf8>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	05c0      	lsls	r0, r0, #23
 8000d4e:	4320      	orrs	r0, r4
 8000d50:	07c9      	lsls	r1, r1, #31
 8000d52:	4308      	orrs	r0, r1
 8000d54:	bce0      	pop	{r5, r6, r7}
 8000d56:	46ba      	mov	sl, r7
 8000d58:	46b1      	mov	r9, r6
 8000d5a:	46a8      	mov	r8, r5
 8000d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5e:	20ff      	movs	r0, #255	; 0xff
 8000d60:	2400      	movs	r4, #0
 8000d62:	e7f3      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000d64:	0c26      	lsrs	r6, r4, #16
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	0c22      	lsrs	r2, r4, #16
 8000d6a:	4644      	mov	r4, r8
 8000d6c:	0424      	lsls	r4, r4, #16
 8000d6e:	0c24      	lsrs	r4, r4, #16
 8000d70:	4643      	mov	r3, r8
 8000d72:	0027      	movs	r7, r4
 8000d74:	0c1b      	lsrs	r3, r3, #16
 8000d76:	4357      	muls	r7, r2
 8000d78:	4374      	muls	r4, r6
 8000d7a:	435a      	muls	r2, r3
 8000d7c:	435e      	muls	r6, r3
 8000d7e:	1912      	adds	r2, r2, r4
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	189b      	adds	r3, r3, r2
 8000d84:	429c      	cmp	r4, r3
 8000d86:	d903      	bls.n	8000d90 <__aeabi_fmul+0xd0>
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	0252      	lsls	r2, r2, #9
 8000d8c:	4694      	mov	ip, r2
 8000d8e:	4466      	add	r6, ip
 8000d90:	043f      	lsls	r7, r7, #16
 8000d92:	041a      	lsls	r2, r3, #16
 8000d94:	0c3f      	lsrs	r7, r7, #16
 8000d96:	19d2      	adds	r2, r2, r7
 8000d98:	0194      	lsls	r4, r2, #6
 8000d9a:	1e67      	subs	r7, r4, #1
 8000d9c:	41bc      	sbcs	r4, r7
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	0e92      	lsrs	r2, r2, #26
 8000da2:	199b      	adds	r3, r3, r6
 8000da4:	4314      	orrs	r4, r2
 8000da6:	019b      	lsls	r3, r3, #6
 8000da8:	431c      	orrs	r4, r3
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	d400      	bmi.n	8000db0 <__aeabi_fmul+0xf0>
 8000dae:	e09b      	b.n	8000ee8 <__aeabi_fmul+0x228>
 8000db0:	2301      	movs	r3, #1
 8000db2:	0862      	lsrs	r2, r4, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	4314      	orrs	r4, r2
 8000db8:	0002      	movs	r2, r0
 8000dba:	327f      	adds	r2, #127	; 0x7f
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	dd64      	ble.n	8000e8a <__aeabi_fmul+0x1ca>
 8000dc0:	0763      	lsls	r3, r4, #29
 8000dc2:	d004      	beq.n	8000dce <__aeabi_fmul+0x10e>
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	4023      	ands	r3, r4
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d000      	beq.n	8000dce <__aeabi_fmul+0x10e>
 8000dcc:	3404      	adds	r4, #4
 8000dce:	0123      	lsls	r3, r4, #4
 8000dd0:	d503      	bpl.n	8000dda <__aeabi_fmul+0x11a>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <__aeabi_fmul+0x248>)
 8000dd6:	3280      	adds	r2, #128	; 0x80
 8000dd8:	401c      	ands	r4, r3
 8000dda:	2afe      	cmp	r2, #254	; 0xfe
 8000ddc:	dcbf      	bgt.n	8000d5e <__aeabi_fmul+0x9e>
 8000dde:	01a4      	lsls	r4, r4, #6
 8000de0:	0a64      	lsrs	r4, r4, #9
 8000de2:	b2d0      	uxtb	r0, r2
 8000de4:	e7b2      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000de6:	4643      	mov	r3, r8
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d13d      	bne.n	8000e68 <__aeabi_fmul+0x1a8>
 8000dec:	464a      	mov	r2, r9
 8000dee:	3301      	adds	r3, #1
 8000df0:	431a      	orrs	r2, r3
 8000df2:	4691      	mov	r9, r2
 8000df4:	469c      	mov	ip, r3
 8000df6:	e792      	b.n	8000d1e <__aeabi_fmul+0x5e>
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d129      	bne.n	8000e50 <__aeabi_fmul+0x190>
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	4699      	mov	r9, r3
 8000e00:	3b03      	subs	r3, #3
 8000e02:	2500      	movs	r5, #0
 8000e04:	469a      	mov	sl, r3
 8000e06:	e774      	b.n	8000cf2 <__aeabi_fmul+0x32>
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d11b      	bne.n	8000e44 <__aeabi_fmul+0x184>
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	4699      	mov	r9, r3
 8000e10:	3b06      	subs	r3, #6
 8000e12:	25ff      	movs	r5, #255	; 0xff
 8000e14:	469a      	mov	sl, r3
 8000e16:	e76c      	b.n	8000cf2 <__aeabi_fmul+0x32>
 8000e18:	4643      	mov	r3, r8
 8000e1a:	35ff      	adds	r5, #255	; 0xff
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10b      	bne.n	8000e38 <__aeabi_fmul+0x178>
 8000e20:	2302      	movs	r3, #2
 8000e22:	464a      	mov	r2, r9
 8000e24:	431a      	orrs	r2, r3
 8000e26:	4691      	mov	r9, r2
 8000e28:	469c      	mov	ip, r3
 8000e2a:	e778      	b.n	8000d1e <__aeabi_fmul+0x5e>
 8000e2c:	4653      	mov	r3, sl
 8000e2e:	0031      	movs	r1, r6
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d000      	beq.n	8000e36 <__aeabi_fmul+0x176>
 8000e34:	e783      	b.n	8000d3e <__aeabi_fmul+0x7e>
 8000e36:	e792      	b.n	8000d5e <__aeabi_fmul+0x9e>
 8000e38:	2303      	movs	r3, #3
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	4691      	mov	r9, r2
 8000e40:	469c      	mov	ip, r3
 8000e42:	e76c      	b.n	8000d1e <__aeabi_fmul+0x5e>
 8000e44:	230c      	movs	r3, #12
 8000e46:	4699      	mov	r9, r3
 8000e48:	3b09      	subs	r3, #9
 8000e4a:	25ff      	movs	r5, #255	; 0xff
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	e750      	b.n	8000cf2 <__aeabi_fmul+0x32>
 8000e50:	0020      	movs	r0, r4
 8000e52:	f002 f94f 	bl	80030f4 <__clzsi2>
 8000e56:	2576      	movs	r5, #118	; 0x76
 8000e58:	1f43      	subs	r3, r0, #5
 8000e5a:	409c      	lsls	r4, r3
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	426d      	negs	r5, r5
 8000e60:	4699      	mov	r9, r3
 8000e62:	469a      	mov	sl, r3
 8000e64:	1a2d      	subs	r5, r5, r0
 8000e66:	e744      	b.n	8000cf2 <__aeabi_fmul+0x32>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	f002 f943 	bl	80030f4 <__clzsi2>
 8000e6e:	4642      	mov	r2, r8
 8000e70:	1f43      	subs	r3, r0, #5
 8000e72:	409a      	lsls	r2, r3
 8000e74:	2300      	movs	r3, #0
 8000e76:	1a2d      	subs	r5, r5, r0
 8000e78:	4690      	mov	r8, r2
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	3d76      	subs	r5, #118	; 0x76
 8000e7e:	e74e      	b.n	8000d1e <__aeabi_fmul+0x5e>
 8000e80:	2480      	movs	r4, #128	; 0x80
 8000e82:	2100      	movs	r1, #0
 8000e84:	20ff      	movs	r0, #255	; 0xff
 8000e86:	03e4      	lsls	r4, r4, #15
 8000e88:	e760      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	1a9b      	subs	r3, r3, r2
 8000e8e:	2b1b      	cmp	r3, #27
 8000e90:	dd00      	ble.n	8000e94 <__aeabi_fmul+0x1d4>
 8000e92:	e759      	b.n	8000d48 <__aeabi_fmul+0x88>
 8000e94:	0022      	movs	r2, r4
 8000e96:	309e      	adds	r0, #158	; 0x9e
 8000e98:	40da      	lsrs	r2, r3
 8000e9a:	4084      	lsls	r4, r0
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	1e62      	subs	r2, r4, #1
 8000ea0:	4194      	sbcs	r4, r2
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	0763      	lsls	r3, r4, #29
 8000ea6:	d004      	beq.n	8000eb2 <__aeabi_fmul+0x1f2>
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	4023      	ands	r3, r4
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fmul+0x1f2>
 8000eb0:	3404      	adds	r4, #4
 8000eb2:	0163      	lsls	r3, r4, #5
 8000eb4:	d51a      	bpl.n	8000eec <__aeabi_fmul+0x22c>
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	2400      	movs	r4, #0
 8000eba:	e747      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000ebc:	2080      	movs	r0, #128	; 0x80
 8000ebe:	03c0      	lsls	r0, r0, #15
 8000ec0:	4204      	tst	r4, r0
 8000ec2:	d009      	beq.n	8000ed8 <__aeabi_fmul+0x218>
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	4203      	tst	r3, r0
 8000ec8:	d106      	bne.n	8000ed8 <__aeabi_fmul+0x218>
 8000eca:	4644      	mov	r4, r8
 8000ecc:	4304      	orrs	r4, r0
 8000ece:	0264      	lsls	r4, r4, #9
 8000ed0:	0039      	movs	r1, r7
 8000ed2:	20ff      	movs	r0, #255	; 0xff
 8000ed4:	0a64      	lsrs	r4, r4, #9
 8000ed6:	e739      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000ed8:	2080      	movs	r0, #128	; 0x80
 8000eda:	03c0      	lsls	r0, r0, #15
 8000edc:	4304      	orrs	r4, r0
 8000ede:	0264      	lsls	r4, r4, #9
 8000ee0:	0031      	movs	r1, r6
 8000ee2:	20ff      	movs	r0, #255	; 0xff
 8000ee4:	0a64      	lsrs	r4, r4, #9
 8000ee6:	e731      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000ee8:	0028      	movs	r0, r5
 8000eea:	e765      	b.n	8000db8 <__aeabi_fmul+0xf8>
 8000eec:	01a4      	lsls	r4, r4, #6
 8000eee:	2000      	movs	r0, #0
 8000ef0:	0a64      	lsrs	r4, r4, #9
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000ef4:	2080      	movs	r0, #128	; 0x80
 8000ef6:	03c0      	lsls	r0, r0, #15
 8000ef8:	4304      	orrs	r4, r0
 8000efa:	0264      	lsls	r4, r4, #9
 8000efc:	20ff      	movs	r0, #255	; 0xff
 8000efe:	0a64      	lsrs	r4, r4, #9
 8000f00:	e724      	b.n	8000d4c <__aeabi_fmul+0x8c>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	0800fe7c 	.word	0x0800fe7c
 8000f08:	f7ffffff 	.word	0xf7ffffff

08000f0c <__aeabi_fsub>:
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	46ce      	mov	lr, r9
 8000f10:	4647      	mov	r7, r8
 8000f12:	0243      	lsls	r3, r0, #9
 8000f14:	0a5b      	lsrs	r3, r3, #9
 8000f16:	024e      	lsls	r6, r1, #9
 8000f18:	00da      	lsls	r2, r3, #3
 8000f1a:	4694      	mov	ip, r2
 8000f1c:	0a72      	lsrs	r2, r6, #9
 8000f1e:	4691      	mov	r9, r2
 8000f20:	0045      	lsls	r5, r0, #1
 8000f22:	004a      	lsls	r2, r1, #1
 8000f24:	b580      	push	{r7, lr}
 8000f26:	0e2d      	lsrs	r5, r5, #24
 8000f28:	001f      	movs	r7, r3
 8000f2a:	0fc4      	lsrs	r4, r0, #31
 8000f2c:	0e12      	lsrs	r2, r2, #24
 8000f2e:	0fc9      	lsrs	r1, r1, #31
 8000f30:	09b6      	lsrs	r6, r6, #6
 8000f32:	2aff      	cmp	r2, #255	; 0xff
 8000f34:	d05b      	beq.n	8000fee <__aeabi_fsub+0xe2>
 8000f36:	2001      	movs	r0, #1
 8000f38:	4041      	eors	r1, r0
 8000f3a:	428c      	cmp	r4, r1
 8000f3c:	d039      	beq.n	8000fb2 <__aeabi_fsub+0xa6>
 8000f3e:	1aa8      	subs	r0, r5, r2
 8000f40:	2800      	cmp	r0, #0
 8000f42:	dd5a      	ble.n	8000ffa <__aeabi_fsub+0xee>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d06a      	beq.n	800101e <__aeabi_fsub+0x112>
 8000f48:	2dff      	cmp	r5, #255	; 0xff
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x42>
 8000f4c:	e0d9      	b.n	8001102 <__aeabi_fsub+0x1f6>
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	04d2      	lsls	r2, r2, #19
 8000f52:	4316      	orrs	r6, r2
 8000f54:	281b      	cmp	r0, #27
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_fsub+0x4e>
 8000f58:	e0e9      	b.n	800112e <__aeabi_fsub+0x222>
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	1a18      	subs	r0, r3, r0
 8000f60:	0143      	lsls	r3, r0, #5
 8000f62:	d400      	bmi.n	8000f66 <__aeabi_fsub+0x5a>
 8000f64:	e0b4      	b.n	80010d0 <__aeabi_fsub+0x1c4>
 8000f66:	0180      	lsls	r0, r0, #6
 8000f68:	0987      	lsrs	r7, r0, #6
 8000f6a:	0038      	movs	r0, r7
 8000f6c:	f002 f8c2 	bl	80030f4 <__clzsi2>
 8000f70:	3805      	subs	r0, #5
 8000f72:	4087      	lsls	r7, r0
 8000f74:	4285      	cmp	r5, r0
 8000f76:	dc00      	bgt.n	8000f7a <__aeabi_fsub+0x6e>
 8000f78:	e0cc      	b.n	8001114 <__aeabi_fsub+0x208>
 8000f7a:	1a2d      	subs	r5, r5, r0
 8000f7c:	48b5      	ldr	r0, [pc, #724]	; (8001254 <__aeabi_fsub+0x348>)
 8000f7e:	4038      	ands	r0, r7
 8000f80:	0743      	lsls	r3, r0, #29
 8000f82:	d004      	beq.n	8000f8e <__aeabi_fsub+0x82>
 8000f84:	230f      	movs	r3, #15
 8000f86:	4003      	ands	r3, r0
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d000      	beq.n	8000f8e <__aeabi_fsub+0x82>
 8000f8c:	3004      	adds	r0, #4
 8000f8e:	0143      	lsls	r3, r0, #5
 8000f90:	d400      	bmi.n	8000f94 <__aeabi_fsub+0x88>
 8000f92:	e0a0      	b.n	80010d6 <__aeabi_fsub+0x1ca>
 8000f94:	1c6a      	adds	r2, r5, #1
 8000f96:	2dfe      	cmp	r5, #254	; 0xfe
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x90>
 8000f9a:	e08d      	b.n	80010b8 <__aeabi_fsub+0x1ac>
 8000f9c:	0180      	lsls	r0, r0, #6
 8000f9e:	0a47      	lsrs	r7, r0, #9
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	05d0      	lsls	r0, r2, #23
 8000fa4:	4338      	orrs	r0, r7
 8000fa6:	07e4      	lsls	r4, r4, #31
 8000fa8:	4320      	orrs	r0, r4
 8000faa:	bcc0      	pop	{r6, r7}
 8000fac:	46b9      	mov	r9, r7
 8000fae:	46b0      	mov	r8, r6
 8000fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb2:	1aa8      	subs	r0, r5, r2
 8000fb4:	4680      	mov	r8, r0
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	dd45      	ble.n	8001046 <__aeabi_fsub+0x13a>
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d070      	beq.n	80010a0 <__aeabi_fsub+0x194>
 8000fbe:	2dff      	cmp	r5, #255	; 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0xb8>
 8000fc2:	e09e      	b.n	8001102 <__aeabi_fsub+0x1f6>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	04db      	lsls	r3, r3, #19
 8000fc8:	431e      	orrs	r6, r3
 8000fca:	4643      	mov	r3, r8
 8000fcc:	2b1b      	cmp	r3, #27
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_fsub+0xc6>
 8000fd0:	e0d2      	b.n	8001178 <__aeabi_fsub+0x26c>
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	4460      	add	r0, ip
 8000fd6:	0143      	lsls	r3, r0, #5
 8000fd8:	d57a      	bpl.n	80010d0 <__aeabi_fsub+0x1c4>
 8000fda:	3501      	adds	r5, #1
 8000fdc:	2dff      	cmp	r5, #255	; 0xff
 8000fde:	d06b      	beq.n	80010b8 <__aeabi_fsub+0x1ac>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	4a9d      	ldr	r2, [pc, #628]	; (8001258 <__aeabi_fsub+0x34c>)
 8000fe4:	4003      	ands	r3, r0
 8000fe6:	0840      	lsrs	r0, r0, #1
 8000fe8:	4010      	ands	r0, r2
 8000fea:	4318      	orrs	r0, r3
 8000fec:	e7c8      	b.n	8000f80 <__aeabi_fsub+0x74>
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d020      	beq.n	8001034 <__aeabi_fsub+0x128>
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	d023      	beq.n	800103e <__aeabi_fsub+0x132>
 8000ff6:	0028      	movs	r0, r5
 8000ff8:	38ff      	subs	r0, #255	; 0xff
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d039      	beq.n	8001072 <__aeabi_fsub+0x166>
 8000ffe:	1b57      	subs	r7, r2, r5
 8001000:	2d00      	cmp	r5, #0
 8001002:	d000      	beq.n	8001006 <__aeabi_fsub+0xfa>
 8001004:	e09d      	b.n	8001142 <__aeabi_fsub+0x236>
 8001006:	4663      	mov	r3, ip
 8001008:	2b00      	cmp	r3, #0
 800100a:	d100      	bne.n	800100e <__aeabi_fsub+0x102>
 800100c:	e0db      	b.n	80011c6 <__aeabi_fsub+0x2ba>
 800100e:	1e7b      	subs	r3, r7, #1
 8001010:	2f01      	cmp	r7, #1
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x10a>
 8001014:	e10d      	b.n	8001232 <__aeabi_fsub+0x326>
 8001016:	2fff      	cmp	r7, #255	; 0xff
 8001018:	d071      	beq.n	80010fe <__aeabi_fsub+0x1f2>
 800101a:	001f      	movs	r7, r3
 800101c:	e098      	b.n	8001150 <__aeabi_fsub+0x244>
 800101e:	2e00      	cmp	r6, #0
 8001020:	d100      	bne.n	8001024 <__aeabi_fsub+0x118>
 8001022:	e0a7      	b.n	8001174 <__aeabi_fsub+0x268>
 8001024:	1e42      	subs	r2, r0, #1
 8001026:	2801      	cmp	r0, #1
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x120>
 800102a:	e0e6      	b.n	80011fa <__aeabi_fsub+0x2ee>
 800102c:	28ff      	cmp	r0, #255	; 0xff
 800102e:	d068      	beq.n	8001102 <__aeabi_fsub+0x1f6>
 8001030:	0010      	movs	r0, r2
 8001032:	e78f      	b.n	8000f54 <__aeabi_fsub+0x48>
 8001034:	2001      	movs	r0, #1
 8001036:	4041      	eors	r1, r0
 8001038:	42a1      	cmp	r1, r4
 800103a:	d000      	beq.n	800103e <__aeabi_fsub+0x132>
 800103c:	e77f      	b.n	8000f3e <__aeabi_fsub+0x32>
 800103e:	20ff      	movs	r0, #255	; 0xff
 8001040:	4240      	negs	r0, r0
 8001042:	4680      	mov	r8, r0
 8001044:	44a8      	add	r8, r5
 8001046:	4640      	mov	r0, r8
 8001048:	2800      	cmp	r0, #0
 800104a:	d038      	beq.n	80010be <__aeabi_fsub+0x1b2>
 800104c:	1b51      	subs	r1, r2, r5
 800104e:	2d00      	cmp	r5, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_fsub+0x148>
 8001052:	e0ae      	b.n	80011b2 <__aeabi_fsub+0x2a6>
 8001054:	2aff      	cmp	r2, #255	; 0xff
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x14e>
 8001058:	e0df      	b.n	800121a <__aeabi_fsub+0x30e>
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	4660      	mov	r0, ip
 800105e:	04db      	lsls	r3, r3, #19
 8001060:	4318      	orrs	r0, r3
 8001062:	4684      	mov	ip, r0
 8001064:	291b      	cmp	r1, #27
 8001066:	dc00      	bgt.n	800106a <__aeabi_fsub+0x15e>
 8001068:	e0d9      	b.n	800121e <__aeabi_fsub+0x312>
 800106a:	2001      	movs	r0, #1
 800106c:	0015      	movs	r5, r2
 800106e:	1980      	adds	r0, r0, r6
 8001070:	e7b1      	b.n	8000fd6 <__aeabi_fsub+0xca>
 8001072:	20fe      	movs	r0, #254	; 0xfe
 8001074:	1c6a      	adds	r2, r5, #1
 8001076:	4210      	tst	r0, r2
 8001078:	d171      	bne.n	800115e <__aeabi_fsub+0x252>
 800107a:	2d00      	cmp	r5, #0
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x174>
 800107e:	e0a6      	b.n	80011ce <__aeabi_fsub+0x2c2>
 8001080:	4663      	mov	r3, ip
 8001082:	2b00      	cmp	r3, #0
 8001084:	d100      	bne.n	8001088 <__aeabi_fsub+0x17c>
 8001086:	e0d9      	b.n	800123c <__aeabi_fsub+0x330>
 8001088:	2200      	movs	r2, #0
 800108a:	2e00      	cmp	r6, #0
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x184>
 800108e:	e788      	b.n	8000fa2 <__aeabi_fsub+0x96>
 8001090:	1b98      	subs	r0, r3, r6
 8001092:	0143      	lsls	r3, r0, #5
 8001094:	d400      	bmi.n	8001098 <__aeabi_fsub+0x18c>
 8001096:	e0e1      	b.n	800125c <__aeabi_fsub+0x350>
 8001098:	4663      	mov	r3, ip
 800109a:	000c      	movs	r4, r1
 800109c:	1af0      	subs	r0, r6, r3
 800109e:	e76f      	b.n	8000f80 <__aeabi_fsub+0x74>
 80010a0:	2e00      	cmp	r6, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x19a>
 80010a4:	e0b7      	b.n	8001216 <__aeabi_fsub+0x30a>
 80010a6:	0002      	movs	r2, r0
 80010a8:	3a01      	subs	r2, #1
 80010aa:	2801      	cmp	r0, #1
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x1a4>
 80010ae:	e09c      	b.n	80011ea <__aeabi_fsub+0x2de>
 80010b0:	28ff      	cmp	r0, #255	; 0xff
 80010b2:	d026      	beq.n	8001102 <__aeabi_fsub+0x1f6>
 80010b4:	4690      	mov	r8, r2
 80010b6:	e788      	b.n	8000fca <__aeabi_fsub+0xbe>
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	2700      	movs	r7, #0
 80010bc:	e771      	b.n	8000fa2 <__aeabi_fsub+0x96>
 80010be:	20fe      	movs	r0, #254	; 0xfe
 80010c0:	1c6a      	adds	r2, r5, #1
 80010c2:	4210      	tst	r0, r2
 80010c4:	d064      	beq.n	8001190 <__aeabi_fsub+0x284>
 80010c6:	2aff      	cmp	r2, #255	; 0xff
 80010c8:	d0f6      	beq.n	80010b8 <__aeabi_fsub+0x1ac>
 80010ca:	0015      	movs	r5, r2
 80010cc:	4466      	add	r6, ip
 80010ce:	0870      	lsrs	r0, r6, #1
 80010d0:	0743      	lsls	r3, r0, #29
 80010d2:	d000      	beq.n	80010d6 <__aeabi_fsub+0x1ca>
 80010d4:	e756      	b.n	8000f84 <__aeabi_fsub+0x78>
 80010d6:	08c3      	lsrs	r3, r0, #3
 80010d8:	2dff      	cmp	r5, #255	; 0xff
 80010da:	d012      	beq.n	8001102 <__aeabi_fsub+0x1f6>
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	0a5f      	lsrs	r7, r3, #9
 80010e0:	b2ea      	uxtb	r2, r5
 80010e2:	e75e      	b.n	8000fa2 <__aeabi_fsub+0x96>
 80010e4:	4662      	mov	r2, ip
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x1e0>
 80010ea:	e096      	b.n	800121a <__aeabi_fsub+0x30e>
 80010ec:	2e00      	cmp	r6, #0
 80010ee:	d008      	beq.n	8001102 <__aeabi_fsub+0x1f6>
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	03d2      	lsls	r2, r2, #15
 80010f4:	4213      	tst	r3, r2
 80010f6:	d004      	beq.n	8001102 <__aeabi_fsub+0x1f6>
 80010f8:	4648      	mov	r0, r9
 80010fa:	4210      	tst	r0, r2
 80010fc:	d101      	bne.n	8001102 <__aeabi_fsub+0x1f6>
 80010fe:	000c      	movs	r4, r1
 8001100:	464b      	mov	r3, r9
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0d8      	beq.n	80010b8 <__aeabi_fsub+0x1ac>
 8001106:	2780      	movs	r7, #128	; 0x80
 8001108:	03ff      	lsls	r7, r7, #15
 800110a:	431f      	orrs	r7, r3
 800110c:	027f      	lsls	r7, r7, #9
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	0a7f      	lsrs	r7, r7, #9
 8001112:	e746      	b.n	8000fa2 <__aeabi_fsub+0x96>
 8001114:	2320      	movs	r3, #32
 8001116:	003a      	movs	r2, r7
 8001118:	1b45      	subs	r5, r0, r5
 800111a:	0038      	movs	r0, r7
 800111c:	3501      	adds	r5, #1
 800111e:	40ea      	lsrs	r2, r5
 8001120:	1b5d      	subs	r5, r3, r5
 8001122:	40a8      	lsls	r0, r5
 8001124:	1e43      	subs	r3, r0, #1
 8001126:	4198      	sbcs	r0, r3
 8001128:	2500      	movs	r5, #0
 800112a:	4310      	orrs	r0, r2
 800112c:	e728      	b.n	8000f80 <__aeabi_fsub+0x74>
 800112e:	2320      	movs	r3, #32
 8001130:	1a1b      	subs	r3, r3, r0
 8001132:	0032      	movs	r2, r6
 8001134:	409e      	lsls	r6, r3
 8001136:	40c2      	lsrs	r2, r0
 8001138:	0030      	movs	r0, r6
 800113a:	1e43      	subs	r3, r0, #1
 800113c:	4198      	sbcs	r0, r3
 800113e:	4310      	orrs	r0, r2
 8001140:	e70c      	b.n	8000f5c <__aeabi_fsub+0x50>
 8001142:	2aff      	cmp	r2, #255	; 0xff
 8001144:	d0db      	beq.n	80010fe <__aeabi_fsub+0x1f2>
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	4660      	mov	r0, ip
 800114a:	04db      	lsls	r3, r3, #19
 800114c:	4318      	orrs	r0, r3
 800114e:	4684      	mov	ip, r0
 8001150:	2f1b      	cmp	r7, #27
 8001152:	dd56      	ble.n	8001202 <__aeabi_fsub+0x2f6>
 8001154:	2001      	movs	r0, #1
 8001156:	000c      	movs	r4, r1
 8001158:	0015      	movs	r5, r2
 800115a:	1a30      	subs	r0, r6, r0
 800115c:	e700      	b.n	8000f60 <__aeabi_fsub+0x54>
 800115e:	4663      	mov	r3, ip
 8001160:	1b9f      	subs	r7, r3, r6
 8001162:	017b      	lsls	r3, r7, #5
 8001164:	d43d      	bmi.n	80011e2 <__aeabi_fsub+0x2d6>
 8001166:	2f00      	cmp	r7, #0
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x260>
 800116a:	e6fe      	b.n	8000f6a <__aeabi_fsub+0x5e>
 800116c:	2400      	movs	r4, #0
 800116e:	2200      	movs	r2, #0
 8001170:	2700      	movs	r7, #0
 8001172:	e716      	b.n	8000fa2 <__aeabi_fsub+0x96>
 8001174:	0005      	movs	r5, r0
 8001176:	e7af      	b.n	80010d8 <__aeabi_fsub+0x1cc>
 8001178:	0032      	movs	r2, r6
 800117a:	4643      	mov	r3, r8
 800117c:	4641      	mov	r1, r8
 800117e:	40da      	lsrs	r2, r3
 8001180:	2320      	movs	r3, #32
 8001182:	1a5b      	subs	r3, r3, r1
 8001184:	409e      	lsls	r6, r3
 8001186:	0030      	movs	r0, r6
 8001188:	1e43      	subs	r3, r0, #1
 800118a:	4198      	sbcs	r0, r3
 800118c:	4310      	orrs	r0, r2
 800118e:	e721      	b.n	8000fd4 <__aeabi_fsub+0xc8>
 8001190:	2d00      	cmp	r5, #0
 8001192:	d1a7      	bne.n	80010e4 <__aeabi_fsub+0x1d8>
 8001194:	4663      	mov	r3, ip
 8001196:	2b00      	cmp	r3, #0
 8001198:	d059      	beq.n	800124e <__aeabi_fsub+0x342>
 800119a:	2200      	movs	r2, #0
 800119c:	2e00      	cmp	r6, #0
 800119e:	d100      	bne.n	80011a2 <__aeabi_fsub+0x296>
 80011a0:	e6ff      	b.n	8000fa2 <__aeabi_fsub+0x96>
 80011a2:	0030      	movs	r0, r6
 80011a4:	4460      	add	r0, ip
 80011a6:	0143      	lsls	r3, r0, #5
 80011a8:	d592      	bpl.n	80010d0 <__aeabi_fsub+0x1c4>
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <__aeabi_fsub+0x348>)
 80011ac:	3501      	adds	r5, #1
 80011ae:	4018      	ands	r0, r3
 80011b0:	e78e      	b.n	80010d0 <__aeabi_fsub+0x1c4>
 80011b2:	4663      	mov	r3, ip
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d047      	beq.n	8001248 <__aeabi_fsub+0x33c>
 80011b8:	1e4b      	subs	r3, r1, #1
 80011ba:	2901      	cmp	r1, #1
 80011bc:	d015      	beq.n	80011ea <__aeabi_fsub+0x2de>
 80011be:	29ff      	cmp	r1, #255	; 0xff
 80011c0:	d02b      	beq.n	800121a <__aeabi_fsub+0x30e>
 80011c2:	0019      	movs	r1, r3
 80011c4:	e74e      	b.n	8001064 <__aeabi_fsub+0x158>
 80011c6:	000c      	movs	r4, r1
 80011c8:	464b      	mov	r3, r9
 80011ca:	003d      	movs	r5, r7
 80011cc:	e784      	b.n	80010d8 <__aeabi_fsub+0x1cc>
 80011ce:	4662      	mov	r2, ip
 80011d0:	2a00      	cmp	r2, #0
 80011d2:	d18b      	bne.n	80010ec <__aeabi_fsub+0x1e0>
 80011d4:	2e00      	cmp	r6, #0
 80011d6:	d192      	bne.n	80010fe <__aeabi_fsub+0x1f2>
 80011d8:	2780      	movs	r7, #128	; 0x80
 80011da:	2400      	movs	r4, #0
 80011dc:	22ff      	movs	r2, #255	; 0xff
 80011de:	03ff      	lsls	r7, r7, #15
 80011e0:	e6df      	b.n	8000fa2 <__aeabi_fsub+0x96>
 80011e2:	4663      	mov	r3, ip
 80011e4:	000c      	movs	r4, r1
 80011e6:	1af7      	subs	r7, r6, r3
 80011e8:	e6bf      	b.n	8000f6a <__aeabi_fsub+0x5e>
 80011ea:	0030      	movs	r0, r6
 80011ec:	4460      	add	r0, ip
 80011ee:	2501      	movs	r5, #1
 80011f0:	0143      	lsls	r3, r0, #5
 80011f2:	d400      	bmi.n	80011f6 <__aeabi_fsub+0x2ea>
 80011f4:	e76c      	b.n	80010d0 <__aeabi_fsub+0x1c4>
 80011f6:	2502      	movs	r5, #2
 80011f8:	e6f2      	b.n	8000fe0 <__aeabi_fsub+0xd4>
 80011fa:	4663      	mov	r3, ip
 80011fc:	2501      	movs	r5, #1
 80011fe:	1b98      	subs	r0, r3, r6
 8001200:	e6ae      	b.n	8000f60 <__aeabi_fsub+0x54>
 8001202:	2320      	movs	r3, #32
 8001204:	4664      	mov	r4, ip
 8001206:	4660      	mov	r0, ip
 8001208:	40fc      	lsrs	r4, r7
 800120a:	1bdf      	subs	r7, r3, r7
 800120c:	40b8      	lsls	r0, r7
 800120e:	1e43      	subs	r3, r0, #1
 8001210:	4198      	sbcs	r0, r3
 8001212:	4320      	orrs	r0, r4
 8001214:	e79f      	b.n	8001156 <__aeabi_fsub+0x24a>
 8001216:	0005      	movs	r5, r0
 8001218:	e75e      	b.n	80010d8 <__aeabi_fsub+0x1cc>
 800121a:	464b      	mov	r3, r9
 800121c:	e771      	b.n	8001102 <__aeabi_fsub+0x1f6>
 800121e:	2320      	movs	r3, #32
 8001220:	4665      	mov	r5, ip
 8001222:	4660      	mov	r0, ip
 8001224:	40cd      	lsrs	r5, r1
 8001226:	1a59      	subs	r1, r3, r1
 8001228:	4088      	lsls	r0, r1
 800122a:	1e43      	subs	r3, r0, #1
 800122c:	4198      	sbcs	r0, r3
 800122e:	4328      	orrs	r0, r5
 8001230:	e71c      	b.n	800106c <__aeabi_fsub+0x160>
 8001232:	4663      	mov	r3, ip
 8001234:	000c      	movs	r4, r1
 8001236:	2501      	movs	r5, #1
 8001238:	1af0      	subs	r0, r6, r3
 800123a:	e691      	b.n	8000f60 <__aeabi_fsub+0x54>
 800123c:	2e00      	cmp	r6, #0
 800123e:	d095      	beq.n	800116c <__aeabi_fsub+0x260>
 8001240:	000c      	movs	r4, r1
 8001242:	464f      	mov	r7, r9
 8001244:	2200      	movs	r2, #0
 8001246:	e6ac      	b.n	8000fa2 <__aeabi_fsub+0x96>
 8001248:	464b      	mov	r3, r9
 800124a:	000d      	movs	r5, r1
 800124c:	e744      	b.n	80010d8 <__aeabi_fsub+0x1cc>
 800124e:	464f      	mov	r7, r9
 8001250:	2200      	movs	r2, #0
 8001252:	e6a6      	b.n	8000fa2 <__aeabi_fsub+0x96>
 8001254:	fbffffff 	.word	0xfbffffff
 8001258:	7dffffff 	.word	0x7dffffff
 800125c:	2800      	cmp	r0, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_fsub+0x356>
 8001260:	e736      	b.n	80010d0 <__aeabi_fsub+0x1c4>
 8001262:	2400      	movs	r4, #0
 8001264:	2700      	movs	r7, #0
 8001266:	e69c      	b.n	8000fa2 <__aeabi_fsub+0x96>

08001268 <__aeabi_i2f>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	2800      	cmp	r0, #0
 800126c:	d013      	beq.n	8001296 <__aeabi_i2f+0x2e>
 800126e:	17c3      	asrs	r3, r0, #31
 8001270:	18c6      	adds	r6, r0, r3
 8001272:	405e      	eors	r6, r3
 8001274:	0fc4      	lsrs	r4, r0, #31
 8001276:	0030      	movs	r0, r6
 8001278:	f001 ff3c 	bl	80030f4 <__clzsi2>
 800127c:	239e      	movs	r3, #158	; 0x9e
 800127e:	0005      	movs	r5, r0
 8001280:	1a1b      	subs	r3, r3, r0
 8001282:	2b96      	cmp	r3, #150	; 0x96
 8001284:	dc0f      	bgt.n	80012a6 <__aeabi_i2f+0x3e>
 8001286:	2808      	cmp	r0, #8
 8001288:	dd01      	ble.n	800128e <__aeabi_i2f+0x26>
 800128a:	3d08      	subs	r5, #8
 800128c:	40ae      	lsls	r6, r5
 800128e:	0276      	lsls	r6, r6, #9
 8001290:	0a76      	lsrs	r6, r6, #9
 8001292:	b2d8      	uxtb	r0, r3
 8001294:	e002      	b.n	800129c <__aeabi_i2f+0x34>
 8001296:	2400      	movs	r4, #0
 8001298:	2000      	movs	r0, #0
 800129a:	2600      	movs	r6, #0
 800129c:	05c0      	lsls	r0, r0, #23
 800129e:	4330      	orrs	r0, r6
 80012a0:	07e4      	lsls	r4, r4, #31
 80012a2:	4320      	orrs	r0, r4
 80012a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a6:	2b99      	cmp	r3, #153	; 0x99
 80012a8:	dd0c      	ble.n	80012c4 <__aeabi_i2f+0x5c>
 80012aa:	2205      	movs	r2, #5
 80012ac:	0031      	movs	r1, r6
 80012ae:	1a12      	subs	r2, r2, r0
 80012b0:	40d1      	lsrs	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	0001      	movs	r1, r0
 80012b6:	0030      	movs	r0, r6
 80012b8:	311b      	adds	r1, #27
 80012ba:	4088      	lsls	r0, r1
 80012bc:	1e41      	subs	r1, r0, #1
 80012be:	4188      	sbcs	r0, r1
 80012c0:	4302      	orrs	r2, r0
 80012c2:	0016      	movs	r6, r2
 80012c4:	2d05      	cmp	r5, #5
 80012c6:	dc12      	bgt.n	80012ee <__aeabi_i2f+0x86>
 80012c8:	0031      	movs	r1, r6
 80012ca:	4f0d      	ldr	r7, [pc, #52]	; (8001300 <__aeabi_i2f+0x98>)
 80012cc:	4039      	ands	r1, r7
 80012ce:	0772      	lsls	r2, r6, #29
 80012d0:	d009      	beq.n	80012e6 <__aeabi_i2f+0x7e>
 80012d2:	200f      	movs	r0, #15
 80012d4:	4030      	ands	r0, r6
 80012d6:	2804      	cmp	r0, #4
 80012d8:	d005      	beq.n	80012e6 <__aeabi_i2f+0x7e>
 80012da:	3104      	adds	r1, #4
 80012dc:	014a      	lsls	r2, r1, #5
 80012de:	d502      	bpl.n	80012e6 <__aeabi_i2f+0x7e>
 80012e0:	239f      	movs	r3, #159	; 0x9f
 80012e2:	4039      	ands	r1, r7
 80012e4:	1b5b      	subs	r3, r3, r5
 80012e6:	0189      	lsls	r1, r1, #6
 80012e8:	0a4e      	lsrs	r6, r1, #9
 80012ea:	b2d8      	uxtb	r0, r3
 80012ec:	e7d6      	b.n	800129c <__aeabi_i2f+0x34>
 80012ee:	1f6a      	subs	r2, r5, #5
 80012f0:	4096      	lsls	r6, r2
 80012f2:	0031      	movs	r1, r6
 80012f4:	4f02      	ldr	r7, [pc, #8]	; (8001300 <__aeabi_i2f+0x98>)
 80012f6:	4039      	ands	r1, r7
 80012f8:	0772      	lsls	r2, r6, #29
 80012fa:	d0f4      	beq.n	80012e6 <__aeabi_i2f+0x7e>
 80012fc:	e7e9      	b.n	80012d2 <__aeabi_i2f+0x6a>
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	fbffffff 	.word	0xfbffffff

08001304 <__aeabi_ui2f>:
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	1e05      	subs	r5, r0, #0
 8001308:	d00e      	beq.n	8001328 <__aeabi_ui2f+0x24>
 800130a:	f001 fef3 	bl	80030f4 <__clzsi2>
 800130e:	239e      	movs	r3, #158	; 0x9e
 8001310:	0004      	movs	r4, r0
 8001312:	1a1b      	subs	r3, r3, r0
 8001314:	2b96      	cmp	r3, #150	; 0x96
 8001316:	dc0c      	bgt.n	8001332 <__aeabi_ui2f+0x2e>
 8001318:	2808      	cmp	r0, #8
 800131a:	dd01      	ble.n	8001320 <__aeabi_ui2f+0x1c>
 800131c:	3c08      	subs	r4, #8
 800131e:	40a5      	lsls	r5, r4
 8001320:	026d      	lsls	r5, r5, #9
 8001322:	0a6d      	lsrs	r5, r5, #9
 8001324:	b2d8      	uxtb	r0, r3
 8001326:	e001      	b.n	800132c <__aeabi_ui2f+0x28>
 8001328:	2000      	movs	r0, #0
 800132a:	2500      	movs	r5, #0
 800132c:	05c0      	lsls	r0, r0, #23
 800132e:	4328      	orrs	r0, r5
 8001330:	bd70      	pop	{r4, r5, r6, pc}
 8001332:	2b99      	cmp	r3, #153	; 0x99
 8001334:	dd09      	ble.n	800134a <__aeabi_ui2f+0x46>
 8001336:	0002      	movs	r2, r0
 8001338:	0029      	movs	r1, r5
 800133a:	321b      	adds	r2, #27
 800133c:	4091      	lsls	r1, r2
 800133e:	1e4a      	subs	r2, r1, #1
 8001340:	4191      	sbcs	r1, r2
 8001342:	2205      	movs	r2, #5
 8001344:	1a12      	subs	r2, r2, r0
 8001346:	40d5      	lsrs	r5, r2
 8001348:	430d      	orrs	r5, r1
 800134a:	2c05      	cmp	r4, #5
 800134c:	dc12      	bgt.n	8001374 <__aeabi_ui2f+0x70>
 800134e:	0029      	movs	r1, r5
 8001350:	4e0c      	ldr	r6, [pc, #48]	; (8001384 <__aeabi_ui2f+0x80>)
 8001352:	4031      	ands	r1, r6
 8001354:	076a      	lsls	r2, r5, #29
 8001356:	d009      	beq.n	800136c <__aeabi_ui2f+0x68>
 8001358:	200f      	movs	r0, #15
 800135a:	4028      	ands	r0, r5
 800135c:	2804      	cmp	r0, #4
 800135e:	d005      	beq.n	800136c <__aeabi_ui2f+0x68>
 8001360:	3104      	adds	r1, #4
 8001362:	014a      	lsls	r2, r1, #5
 8001364:	d502      	bpl.n	800136c <__aeabi_ui2f+0x68>
 8001366:	239f      	movs	r3, #159	; 0x9f
 8001368:	4031      	ands	r1, r6
 800136a:	1b1b      	subs	r3, r3, r4
 800136c:	0189      	lsls	r1, r1, #6
 800136e:	0a4d      	lsrs	r5, r1, #9
 8001370:	b2d8      	uxtb	r0, r3
 8001372:	e7db      	b.n	800132c <__aeabi_ui2f+0x28>
 8001374:	1f62      	subs	r2, r4, #5
 8001376:	4095      	lsls	r5, r2
 8001378:	0029      	movs	r1, r5
 800137a:	4e02      	ldr	r6, [pc, #8]	; (8001384 <__aeabi_ui2f+0x80>)
 800137c:	4031      	ands	r1, r6
 800137e:	076a      	lsls	r2, r5, #29
 8001380:	d0f4      	beq.n	800136c <__aeabi_ui2f+0x68>
 8001382:	e7e9      	b.n	8001358 <__aeabi_ui2f+0x54>
 8001384:	fbffffff 	.word	0xfbffffff

08001388 <__aeabi_dadd>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	464f      	mov	r7, r9
 800138c:	4646      	mov	r6, r8
 800138e:	46d6      	mov	lr, sl
 8001390:	000d      	movs	r5, r1
 8001392:	0004      	movs	r4, r0
 8001394:	b5c0      	push	{r6, r7, lr}
 8001396:	001f      	movs	r7, r3
 8001398:	0011      	movs	r1, r2
 800139a:	0328      	lsls	r0, r5, #12
 800139c:	0f62      	lsrs	r2, r4, #29
 800139e:	0a40      	lsrs	r0, r0, #9
 80013a0:	4310      	orrs	r0, r2
 80013a2:	007a      	lsls	r2, r7, #1
 80013a4:	0d52      	lsrs	r2, r2, #21
 80013a6:	00e3      	lsls	r3, r4, #3
 80013a8:	033c      	lsls	r4, r7, #12
 80013aa:	4691      	mov	r9, r2
 80013ac:	0a64      	lsrs	r4, r4, #9
 80013ae:	0ffa      	lsrs	r2, r7, #31
 80013b0:	0f4f      	lsrs	r7, r1, #29
 80013b2:	006e      	lsls	r6, r5, #1
 80013b4:	4327      	orrs	r7, r4
 80013b6:	4692      	mov	sl, r2
 80013b8:	46b8      	mov	r8, r7
 80013ba:	0d76      	lsrs	r6, r6, #21
 80013bc:	0fed      	lsrs	r5, r5, #31
 80013be:	00c9      	lsls	r1, r1, #3
 80013c0:	4295      	cmp	r5, r2
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x3e>
 80013c4:	e099      	b.n	80014fa <__aeabi_dadd+0x172>
 80013c6:	464c      	mov	r4, r9
 80013c8:	1b34      	subs	r4, r6, r4
 80013ca:	46a4      	mov	ip, r4
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	dc00      	bgt.n	80013d2 <__aeabi_dadd+0x4a>
 80013d0:	e07c      	b.n	80014cc <__aeabi_dadd+0x144>
 80013d2:	464a      	mov	r2, r9
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x52>
 80013d8:	e0b8      	b.n	800154c <__aeabi_dadd+0x1c4>
 80013da:	4ac5      	ldr	r2, [pc, #788]	; (80016f0 <__aeabi_dadd+0x368>)
 80013dc:	4296      	cmp	r6, r2
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x5a>
 80013e0:	e11c      	b.n	800161c <__aeabi_dadd+0x294>
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	003c      	movs	r4, r7
 80013e6:	0412      	lsls	r2, r2, #16
 80013e8:	4314      	orrs	r4, r2
 80013ea:	46a0      	mov	r8, r4
 80013ec:	4662      	mov	r2, ip
 80013ee:	2a38      	cmp	r2, #56	; 0x38
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x6c>
 80013f2:	e161      	b.n	80016b8 <__aeabi_dadd+0x330>
 80013f4:	2a1f      	cmp	r2, #31
 80013f6:	dd00      	ble.n	80013fa <__aeabi_dadd+0x72>
 80013f8:	e1cc      	b.n	8001794 <__aeabi_dadd+0x40c>
 80013fa:	4664      	mov	r4, ip
 80013fc:	2220      	movs	r2, #32
 80013fe:	1b12      	subs	r2, r2, r4
 8001400:	4644      	mov	r4, r8
 8001402:	4094      	lsls	r4, r2
 8001404:	000f      	movs	r7, r1
 8001406:	46a1      	mov	r9, r4
 8001408:	4664      	mov	r4, ip
 800140a:	4091      	lsls	r1, r2
 800140c:	40e7      	lsrs	r7, r4
 800140e:	464c      	mov	r4, r9
 8001410:	1e4a      	subs	r2, r1, #1
 8001412:	4191      	sbcs	r1, r2
 8001414:	433c      	orrs	r4, r7
 8001416:	4642      	mov	r2, r8
 8001418:	4321      	orrs	r1, r4
 800141a:	4664      	mov	r4, ip
 800141c:	40e2      	lsrs	r2, r4
 800141e:	1a80      	subs	r0, r0, r2
 8001420:	1a5c      	subs	r4, r3, r1
 8001422:	42a3      	cmp	r3, r4
 8001424:	419b      	sbcs	r3, r3
 8001426:	425f      	negs	r7, r3
 8001428:	1bc7      	subs	r7, r0, r7
 800142a:	023b      	lsls	r3, r7, #8
 800142c:	d400      	bmi.n	8001430 <__aeabi_dadd+0xa8>
 800142e:	e0d0      	b.n	80015d2 <__aeabi_dadd+0x24a>
 8001430:	027f      	lsls	r7, r7, #9
 8001432:	0a7f      	lsrs	r7, r7, #9
 8001434:	2f00      	cmp	r7, #0
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0xb2>
 8001438:	e0ff      	b.n	800163a <__aeabi_dadd+0x2b2>
 800143a:	0038      	movs	r0, r7
 800143c:	f001 fe5a 	bl	80030f4 <__clzsi2>
 8001440:	0001      	movs	r1, r0
 8001442:	3908      	subs	r1, #8
 8001444:	2320      	movs	r3, #32
 8001446:	0022      	movs	r2, r4
 8001448:	1a5b      	subs	r3, r3, r1
 800144a:	408f      	lsls	r7, r1
 800144c:	40da      	lsrs	r2, r3
 800144e:	408c      	lsls	r4, r1
 8001450:	4317      	orrs	r7, r2
 8001452:	42b1      	cmp	r1, r6
 8001454:	da00      	bge.n	8001458 <__aeabi_dadd+0xd0>
 8001456:	e0ff      	b.n	8001658 <__aeabi_dadd+0x2d0>
 8001458:	1b89      	subs	r1, r1, r6
 800145a:	1c4b      	adds	r3, r1, #1
 800145c:	2b1f      	cmp	r3, #31
 800145e:	dd00      	ble.n	8001462 <__aeabi_dadd+0xda>
 8001460:	e0a8      	b.n	80015b4 <__aeabi_dadd+0x22c>
 8001462:	2220      	movs	r2, #32
 8001464:	0039      	movs	r1, r7
 8001466:	1ad2      	subs	r2, r2, r3
 8001468:	0020      	movs	r0, r4
 800146a:	4094      	lsls	r4, r2
 800146c:	4091      	lsls	r1, r2
 800146e:	40d8      	lsrs	r0, r3
 8001470:	1e62      	subs	r2, r4, #1
 8001472:	4194      	sbcs	r4, r2
 8001474:	40df      	lsrs	r7, r3
 8001476:	2600      	movs	r6, #0
 8001478:	4301      	orrs	r1, r0
 800147a:	430c      	orrs	r4, r1
 800147c:	0763      	lsls	r3, r4, #29
 800147e:	d009      	beq.n	8001494 <__aeabi_dadd+0x10c>
 8001480:	230f      	movs	r3, #15
 8001482:	4023      	ands	r3, r4
 8001484:	2b04      	cmp	r3, #4
 8001486:	d005      	beq.n	8001494 <__aeabi_dadd+0x10c>
 8001488:	1d23      	adds	r3, r4, #4
 800148a:	42a3      	cmp	r3, r4
 800148c:	41a4      	sbcs	r4, r4
 800148e:	4264      	negs	r4, r4
 8001490:	193f      	adds	r7, r7, r4
 8001492:	001c      	movs	r4, r3
 8001494:	023b      	lsls	r3, r7, #8
 8001496:	d400      	bmi.n	800149a <__aeabi_dadd+0x112>
 8001498:	e09e      	b.n	80015d8 <__aeabi_dadd+0x250>
 800149a:	4b95      	ldr	r3, [pc, #596]	; (80016f0 <__aeabi_dadd+0x368>)
 800149c:	3601      	adds	r6, #1
 800149e:	429e      	cmp	r6, r3
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dadd+0x11c>
 80014a2:	e0b7      	b.n	8001614 <__aeabi_dadd+0x28c>
 80014a4:	4a93      	ldr	r2, [pc, #588]	; (80016f4 <__aeabi_dadd+0x36c>)
 80014a6:	08e4      	lsrs	r4, r4, #3
 80014a8:	4017      	ands	r7, r2
 80014aa:	077b      	lsls	r3, r7, #29
 80014ac:	0571      	lsls	r1, r6, #21
 80014ae:	027f      	lsls	r7, r7, #9
 80014b0:	4323      	orrs	r3, r4
 80014b2:	0b3f      	lsrs	r7, r7, #12
 80014b4:	0d4a      	lsrs	r2, r1, #21
 80014b6:	0512      	lsls	r2, r2, #20
 80014b8:	433a      	orrs	r2, r7
 80014ba:	07ed      	lsls	r5, r5, #31
 80014bc:	432a      	orrs	r2, r5
 80014be:	0018      	movs	r0, r3
 80014c0:	0011      	movs	r1, r2
 80014c2:	bce0      	pop	{r5, r6, r7}
 80014c4:	46ba      	mov	sl, r7
 80014c6:	46b1      	mov	r9, r6
 80014c8:	46a8      	mov	r8, r5
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d04b      	beq.n	8001568 <__aeabi_dadd+0x1e0>
 80014d0:	464c      	mov	r4, r9
 80014d2:	1ba4      	subs	r4, r4, r6
 80014d4:	46a4      	mov	ip, r4
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d000      	beq.n	80014dc <__aeabi_dadd+0x154>
 80014da:	e123      	b.n	8001724 <__aeabi_dadd+0x39c>
 80014dc:	0004      	movs	r4, r0
 80014de:	431c      	orrs	r4, r3
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0x15c>
 80014e2:	e1af      	b.n	8001844 <__aeabi_dadd+0x4bc>
 80014e4:	4662      	mov	r2, ip
 80014e6:	1e54      	subs	r4, r2, #1
 80014e8:	2a01      	cmp	r2, #1
 80014ea:	d100      	bne.n	80014ee <__aeabi_dadd+0x166>
 80014ec:	e215      	b.n	800191a <__aeabi_dadd+0x592>
 80014ee:	4d80      	ldr	r5, [pc, #512]	; (80016f0 <__aeabi_dadd+0x368>)
 80014f0:	45ac      	cmp	ip, r5
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x16e>
 80014f4:	e1c8      	b.n	8001888 <__aeabi_dadd+0x500>
 80014f6:	46a4      	mov	ip, r4
 80014f8:	e11b      	b.n	8001732 <__aeabi_dadd+0x3aa>
 80014fa:	464a      	mov	r2, r9
 80014fc:	1ab2      	subs	r2, r6, r2
 80014fe:	4694      	mov	ip, r2
 8001500:	2a00      	cmp	r2, #0
 8001502:	dc00      	bgt.n	8001506 <__aeabi_dadd+0x17e>
 8001504:	e0ac      	b.n	8001660 <__aeabi_dadd+0x2d8>
 8001506:	464a      	mov	r2, r9
 8001508:	2a00      	cmp	r2, #0
 800150a:	d043      	beq.n	8001594 <__aeabi_dadd+0x20c>
 800150c:	4a78      	ldr	r2, [pc, #480]	; (80016f0 <__aeabi_dadd+0x368>)
 800150e:	4296      	cmp	r6, r2
 8001510:	d100      	bne.n	8001514 <__aeabi_dadd+0x18c>
 8001512:	e1af      	b.n	8001874 <__aeabi_dadd+0x4ec>
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	003c      	movs	r4, r7
 8001518:	0412      	lsls	r2, r2, #16
 800151a:	4314      	orrs	r4, r2
 800151c:	46a0      	mov	r8, r4
 800151e:	4662      	mov	r2, ip
 8001520:	2a38      	cmp	r2, #56	; 0x38
 8001522:	dc67      	bgt.n	80015f4 <__aeabi_dadd+0x26c>
 8001524:	2a1f      	cmp	r2, #31
 8001526:	dc00      	bgt.n	800152a <__aeabi_dadd+0x1a2>
 8001528:	e15f      	b.n	80017ea <__aeabi_dadd+0x462>
 800152a:	4647      	mov	r7, r8
 800152c:	3a20      	subs	r2, #32
 800152e:	40d7      	lsrs	r7, r2
 8001530:	4662      	mov	r2, ip
 8001532:	2a20      	cmp	r2, #32
 8001534:	d005      	beq.n	8001542 <__aeabi_dadd+0x1ba>
 8001536:	4664      	mov	r4, ip
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	1b12      	subs	r2, r2, r4
 800153c:	4644      	mov	r4, r8
 800153e:	4094      	lsls	r4, r2
 8001540:	4321      	orrs	r1, r4
 8001542:	1e4a      	subs	r2, r1, #1
 8001544:	4191      	sbcs	r1, r2
 8001546:	000c      	movs	r4, r1
 8001548:	433c      	orrs	r4, r7
 800154a:	e057      	b.n	80015fc <__aeabi_dadd+0x274>
 800154c:	003a      	movs	r2, r7
 800154e:	430a      	orrs	r2, r1
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x1cc>
 8001552:	e105      	b.n	8001760 <__aeabi_dadd+0x3d8>
 8001554:	0022      	movs	r2, r4
 8001556:	3a01      	subs	r2, #1
 8001558:	2c01      	cmp	r4, #1
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x1d6>
 800155c:	e182      	b.n	8001864 <__aeabi_dadd+0x4dc>
 800155e:	4c64      	ldr	r4, [pc, #400]	; (80016f0 <__aeabi_dadd+0x368>)
 8001560:	45a4      	cmp	ip, r4
 8001562:	d05b      	beq.n	800161c <__aeabi_dadd+0x294>
 8001564:	4694      	mov	ip, r2
 8001566:	e741      	b.n	80013ec <__aeabi_dadd+0x64>
 8001568:	4c63      	ldr	r4, [pc, #396]	; (80016f8 <__aeabi_dadd+0x370>)
 800156a:	1c77      	adds	r7, r6, #1
 800156c:	4227      	tst	r7, r4
 800156e:	d000      	beq.n	8001572 <__aeabi_dadd+0x1ea>
 8001570:	e0c4      	b.n	80016fc <__aeabi_dadd+0x374>
 8001572:	0004      	movs	r4, r0
 8001574:	431c      	orrs	r4, r3
 8001576:	2e00      	cmp	r6, #0
 8001578:	d000      	beq.n	800157c <__aeabi_dadd+0x1f4>
 800157a:	e169      	b.n	8001850 <__aeabi_dadd+0x4c8>
 800157c:	2c00      	cmp	r4, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x1fa>
 8001580:	e1bf      	b.n	8001902 <__aeabi_dadd+0x57a>
 8001582:	4644      	mov	r4, r8
 8001584:	430c      	orrs	r4, r1
 8001586:	d000      	beq.n	800158a <__aeabi_dadd+0x202>
 8001588:	e1d0      	b.n	800192c <__aeabi_dadd+0x5a4>
 800158a:	0742      	lsls	r2, r0, #29
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	4313      	orrs	r3, r2
 8001590:	08c0      	lsrs	r0, r0, #3
 8001592:	e029      	b.n	80015e8 <__aeabi_dadd+0x260>
 8001594:	003a      	movs	r2, r7
 8001596:	430a      	orrs	r2, r1
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x214>
 800159a:	e170      	b.n	800187e <__aeabi_dadd+0x4f6>
 800159c:	4662      	mov	r2, ip
 800159e:	4664      	mov	r4, ip
 80015a0:	3a01      	subs	r2, #1
 80015a2:	2c01      	cmp	r4, #1
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x220>
 80015a6:	e0e0      	b.n	800176a <__aeabi_dadd+0x3e2>
 80015a8:	4c51      	ldr	r4, [pc, #324]	; (80016f0 <__aeabi_dadd+0x368>)
 80015aa:	45a4      	cmp	ip, r4
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x228>
 80015ae:	e161      	b.n	8001874 <__aeabi_dadd+0x4ec>
 80015b0:	4694      	mov	ip, r2
 80015b2:	e7b4      	b.n	800151e <__aeabi_dadd+0x196>
 80015b4:	003a      	movs	r2, r7
 80015b6:	391f      	subs	r1, #31
 80015b8:	40ca      	lsrs	r2, r1
 80015ba:	0011      	movs	r1, r2
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d003      	beq.n	80015c8 <__aeabi_dadd+0x240>
 80015c0:	2240      	movs	r2, #64	; 0x40
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	409f      	lsls	r7, r3
 80015c6:	433c      	orrs	r4, r7
 80015c8:	1e63      	subs	r3, r4, #1
 80015ca:	419c      	sbcs	r4, r3
 80015cc:	2700      	movs	r7, #0
 80015ce:	2600      	movs	r6, #0
 80015d0:	430c      	orrs	r4, r1
 80015d2:	0763      	lsls	r3, r4, #29
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dadd+0x250>
 80015d6:	e753      	b.n	8001480 <__aeabi_dadd+0xf8>
 80015d8:	46b4      	mov	ip, r6
 80015da:	08e4      	lsrs	r4, r4, #3
 80015dc:	077b      	lsls	r3, r7, #29
 80015de:	4323      	orrs	r3, r4
 80015e0:	08f8      	lsrs	r0, r7, #3
 80015e2:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <__aeabi_dadd+0x368>)
 80015e4:	4594      	cmp	ip, r2
 80015e6:	d01d      	beq.n	8001624 <__aeabi_dadd+0x29c>
 80015e8:	4662      	mov	r2, ip
 80015ea:	0307      	lsls	r7, r0, #12
 80015ec:	0552      	lsls	r2, r2, #21
 80015ee:	0b3f      	lsrs	r7, r7, #12
 80015f0:	0d52      	lsrs	r2, r2, #21
 80015f2:	e760      	b.n	80014b6 <__aeabi_dadd+0x12e>
 80015f4:	4644      	mov	r4, r8
 80015f6:	430c      	orrs	r4, r1
 80015f8:	1e62      	subs	r2, r4, #1
 80015fa:	4194      	sbcs	r4, r2
 80015fc:	18e4      	adds	r4, r4, r3
 80015fe:	429c      	cmp	r4, r3
 8001600:	419b      	sbcs	r3, r3
 8001602:	425f      	negs	r7, r3
 8001604:	183f      	adds	r7, r7, r0
 8001606:	023b      	lsls	r3, r7, #8
 8001608:	d5e3      	bpl.n	80015d2 <__aeabi_dadd+0x24a>
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <__aeabi_dadd+0x368>)
 800160c:	3601      	adds	r6, #1
 800160e:	429e      	cmp	r6, r3
 8001610:	d000      	beq.n	8001614 <__aeabi_dadd+0x28c>
 8001612:	e0b5      	b.n	8001780 <__aeabi_dadd+0x3f8>
 8001614:	0032      	movs	r2, r6
 8001616:	2700      	movs	r7, #0
 8001618:	2300      	movs	r3, #0
 800161a:	e74c      	b.n	80014b6 <__aeabi_dadd+0x12e>
 800161c:	0742      	lsls	r2, r0, #29
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	4313      	orrs	r3, r2
 8001622:	08c0      	lsrs	r0, r0, #3
 8001624:	001a      	movs	r2, r3
 8001626:	4302      	orrs	r2, r0
 8001628:	d100      	bne.n	800162c <__aeabi_dadd+0x2a4>
 800162a:	e1e1      	b.n	80019f0 <__aeabi_dadd+0x668>
 800162c:	2780      	movs	r7, #128	; 0x80
 800162e:	033f      	lsls	r7, r7, #12
 8001630:	4307      	orrs	r7, r0
 8001632:	033f      	lsls	r7, r7, #12
 8001634:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <__aeabi_dadd+0x368>)
 8001636:	0b3f      	lsrs	r7, r7, #12
 8001638:	e73d      	b.n	80014b6 <__aeabi_dadd+0x12e>
 800163a:	0020      	movs	r0, r4
 800163c:	f001 fd5a 	bl	80030f4 <__clzsi2>
 8001640:	0001      	movs	r1, r0
 8001642:	3118      	adds	r1, #24
 8001644:	291f      	cmp	r1, #31
 8001646:	dc00      	bgt.n	800164a <__aeabi_dadd+0x2c2>
 8001648:	e6fc      	b.n	8001444 <__aeabi_dadd+0xbc>
 800164a:	3808      	subs	r0, #8
 800164c:	4084      	lsls	r4, r0
 800164e:	0027      	movs	r7, r4
 8001650:	2400      	movs	r4, #0
 8001652:	42b1      	cmp	r1, r6
 8001654:	db00      	blt.n	8001658 <__aeabi_dadd+0x2d0>
 8001656:	e6ff      	b.n	8001458 <__aeabi_dadd+0xd0>
 8001658:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <__aeabi_dadd+0x36c>)
 800165a:	1a76      	subs	r6, r6, r1
 800165c:	4017      	ands	r7, r2
 800165e:	e70d      	b.n	800147c <__aeabi_dadd+0xf4>
 8001660:	2a00      	cmp	r2, #0
 8001662:	d02f      	beq.n	80016c4 <__aeabi_dadd+0x33c>
 8001664:	464a      	mov	r2, r9
 8001666:	1b92      	subs	r2, r2, r6
 8001668:	4694      	mov	ip, r2
 800166a:	2e00      	cmp	r6, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dadd+0x2e8>
 800166e:	e0ad      	b.n	80017cc <__aeabi_dadd+0x444>
 8001670:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <__aeabi_dadd+0x368>)
 8001672:	4591      	cmp	r9, r2
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x2f0>
 8001676:	e10f      	b.n	8001898 <__aeabi_dadd+0x510>
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	0412      	lsls	r2, r2, #16
 800167c:	4310      	orrs	r0, r2
 800167e:	4662      	mov	r2, ip
 8001680:	2a38      	cmp	r2, #56	; 0x38
 8001682:	dd00      	ble.n	8001686 <__aeabi_dadd+0x2fe>
 8001684:	e10f      	b.n	80018a6 <__aeabi_dadd+0x51e>
 8001686:	2a1f      	cmp	r2, #31
 8001688:	dd00      	ble.n	800168c <__aeabi_dadd+0x304>
 800168a:	e180      	b.n	800198e <__aeabi_dadd+0x606>
 800168c:	4664      	mov	r4, ip
 800168e:	2220      	movs	r2, #32
 8001690:	001e      	movs	r6, r3
 8001692:	1b12      	subs	r2, r2, r4
 8001694:	4667      	mov	r7, ip
 8001696:	0004      	movs	r4, r0
 8001698:	4093      	lsls	r3, r2
 800169a:	4094      	lsls	r4, r2
 800169c:	40fe      	lsrs	r6, r7
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	4193      	sbcs	r3, r2
 80016a2:	40f8      	lsrs	r0, r7
 80016a4:	4334      	orrs	r4, r6
 80016a6:	431c      	orrs	r4, r3
 80016a8:	4480      	add	r8, r0
 80016aa:	1864      	adds	r4, r4, r1
 80016ac:	428c      	cmp	r4, r1
 80016ae:	41bf      	sbcs	r7, r7
 80016b0:	427f      	negs	r7, r7
 80016b2:	464e      	mov	r6, r9
 80016b4:	4447      	add	r7, r8
 80016b6:	e7a6      	b.n	8001606 <__aeabi_dadd+0x27e>
 80016b8:	4642      	mov	r2, r8
 80016ba:	430a      	orrs	r2, r1
 80016bc:	0011      	movs	r1, r2
 80016be:	1e4a      	subs	r2, r1, #1
 80016c0:	4191      	sbcs	r1, r2
 80016c2:	e6ad      	b.n	8001420 <__aeabi_dadd+0x98>
 80016c4:	4c0c      	ldr	r4, [pc, #48]	; (80016f8 <__aeabi_dadd+0x370>)
 80016c6:	1c72      	adds	r2, r6, #1
 80016c8:	4222      	tst	r2, r4
 80016ca:	d000      	beq.n	80016ce <__aeabi_dadd+0x346>
 80016cc:	e0a1      	b.n	8001812 <__aeabi_dadd+0x48a>
 80016ce:	0002      	movs	r2, r0
 80016d0:	431a      	orrs	r2, r3
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	d000      	beq.n	80016d8 <__aeabi_dadd+0x350>
 80016d6:	e0fa      	b.n	80018ce <__aeabi_dadd+0x546>
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x356>
 80016dc:	e145      	b.n	800196a <__aeabi_dadd+0x5e2>
 80016de:	003a      	movs	r2, r7
 80016e0:	430a      	orrs	r2, r1
 80016e2:	d000      	beq.n	80016e6 <__aeabi_dadd+0x35e>
 80016e4:	e146      	b.n	8001974 <__aeabi_dadd+0x5ec>
 80016e6:	0742      	lsls	r2, r0, #29
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	08c0      	lsrs	r0, r0, #3
 80016ee:	e77b      	b.n	80015e8 <__aeabi_dadd+0x260>
 80016f0:	000007ff 	.word	0x000007ff
 80016f4:	ff7fffff 	.word	0xff7fffff
 80016f8:	000007fe 	.word	0x000007fe
 80016fc:	4647      	mov	r7, r8
 80016fe:	1a5c      	subs	r4, r3, r1
 8001700:	1bc2      	subs	r2, r0, r7
 8001702:	42a3      	cmp	r3, r4
 8001704:	41bf      	sbcs	r7, r7
 8001706:	427f      	negs	r7, r7
 8001708:	46b9      	mov	r9, r7
 800170a:	0017      	movs	r7, r2
 800170c:	464a      	mov	r2, r9
 800170e:	1abf      	subs	r7, r7, r2
 8001710:	023a      	lsls	r2, r7, #8
 8001712:	d500      	bpl.n	8001716 <__aeabi_dadd+0x38e>
 8001714:	e08d      	b.n	8001832 <__aeabi_dadd+0x4aa>
 8001716:	0023      	movs	r3, r4
 8001718:	433b      	orrs	r3, r7
 800171a:	d000      	beq.n	800171e <__aeabi_dadd+0x396>
 800171c:	e68a      	b.n	8001434 <__aeabi_dadd+0xac>
 800171e:	2000      	movs	r0, #0
 8001720:	2500      	movs	r5, #0
 8001722:	e761      	b.n	80015e8 <__aeabi_dadd+0x260>
 8001724:	4cb4      	ldr	r4, [pc, #720]	; (80019f8 <__aeabi_dadd+0x670>)
 8001726:	45a1      	cmp	r9, r4
 8001728:	d100      	bne.n	800172c <__aeabi_dadd+0x3a4>
 800172a:	e0ad      	b.n	8001888 <__aeabi_dadd+0x500>
 800172c:	2480      	movs	r4, #128	; 0x80
 800172e:	0424      	lsls	r4, r4, #16
 8001730:	4320      	orrs	r0, r4
 8001732:	4664      	mov	r4, ip
 8001734:	2c38      	cmp	r4, #56	; 0x38
 8001736:	dc3d      	bgt.n	80017b4 <__aeabi_dadd+0x42c>
 8001738:	4662      	mov	r2, ip
 800173a:	2c1f      	cmp	r4, #31
 800173c:	dd00      	ble.n	8001740 <__aeabi_dadd+0x3b8>
 800173e:	e0b7      	b.n	80018b0 <__aeabi_dadd+0x528>
 8001740:	2520      	movs	r5, #32
 8001742:	001e      	movs	r6, r3
 8001744:	1b2d      	subs	r5, r5, r4
 8001746:	0004      	movs	r4, r0
 8001748:	40ab      	lsls	r3, r5
 800174a:	40ac      	lsls	r4, r5
 800174c:	40d6      	lsrs	r6, r2
 800174e:	40d0      	lsrs	r0, r2
 8001750:	4642      	mov	r2, r8
 8001752:	1e5d      	subs	r5, r3, #1
 8001754:	41ab      	sbcs	r3, r5
 8001756:	4334      	orrs	r4, r6
 8001758:	1a12      	subs	r2, r2, r0
 800175a:	4690      	mov	r8, r2
 800175c:	4323      	orrs	r3, r4
 800175e:	e02c      	b.n	80017ba <__aeabi_dadd+0x432>
 8001760:	0742      	lsls	r2, r0, #29
 8001762:	08db      	lsrs	r3, r3, #3
 8001764:	4313      	orrs	r3, r2
 8001766:	08c0      	lsrs	r0, r0, #3
 8001768:	e73b      	b.n	80015e2 <__aeabi_dadd+0x25a>
 800176a:	185c      	adds	r4, r3, r1
 800176c:	429c      	cmp	r4, r3
 800176e:	419b      	sbcs	r3, r3
 8001770:	4440      	add	r0, r8
 8001772:	425b      	negs	r3, r3
 8001774:	18c7      	adds	r7, r0, r3
 8001776:	2601      	movs	r6, #1
 8001778:	023b      	lsls	r3, r7, #8
 800177a:	d400      	bmi.n	800177e <__aeabi_dadd+0x3f6>
 800177c:	e729      	b.n	80015d2 <__aeabi_dadd+0x24a>
 800177e:	2602      	movs	r6, #2
 8001780:	4a9e      	ldr	r2, [pc, #632]	; (80019fc <__aeabi_dadd+0x674>)
 8001782:	0863      	lsrs	r3, r4, #1
 8001784:	4017      	ands	r7, r2
 8001786:	2201      	movs	r2, #1
 8001788:	4014      	ands	r4, r2
 800178a:	431c      	orrs	r4, r3
 800178c:	07fb      	lsls	r3, r7, #31
 800178e:	431c      	orrs	r4, r3
 8001790:	087f      	lsrs	r7, r7, #1
 8001792:	e673      	b.n	800147c <__aeabi_dadd+0xf4>
 8001794:	4644      	mov	r4, r8
 8001796:	3a20      	subs	r2, #32
 8001798:	40d4      	lsrs	r4, r2
 800179a:	4662      	mov	r2, ip
 800179c:	2a20      	cmp	r2, #32
 800179e:	d005      	beq.n	80017ac <__aeabi_dadd+0x424>
 80017a0:	4667      	mov	r7, ip
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	1bd2      	subs	r2, r2, r7
 80017a6:	4647      	mov	r7, r8
 80017a8:	4097      	lsls	r7, r2
 80017aa:	4339      	orrs	r1, r7
 80017ac:	1e4a      	subs	r2, r1, #1
 80017ae:	4191      	sbcs	r1, r2
 80017b0:	4321      	orrs	r1, r4
 80017b2:	e635      	b.n	8001420 <__aeabi_dadd+0x98>
 80017b4:	4303      	orrs	r3, r0
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	4183      	sbcs	r3, r0
 80017ba:	1acc      	subs	r4, r1, r3
 80017bc:	42a1      	cmp	r1, r4
 80017be:	41bf      	sbcs	r7, r7
 80017c0:	4643      	mov	r3, r8
 80017c2:	427f      	negs	r7, r7
 80017c4:	4655      	mov	r5, sl
 80017c6:	464e      	mov	r6, r9
 80017c8:	1bdf      	subs	r7, r3, r7
 80017ca:	e62e      	b.n	800142a <__aeabi_dadd+0xa2>
 80017cc:	0002      	movs	r2, r0
 80017ce:	431a      	orrs	r2, r3
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dadd+0x44c>
 80017d2:	e0bd      	b.n	8001950 <__aeabi_dadd+0x5c8>
 80017d4:	4662      	mov	r2, ip
 80017d6:	4664      	mov	r4, ip
 80017d8:	3a01      	subs	r2, #1
 80017da:	2c01      	cmp	r4, #1
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dadd+0x458>
 80017de:	e0e5      	b.n	80019ac <__aeabi_dadd+0x624>
 80017e0:	4c85      	ldr	r4, [pc, #532]	; (80019f8 <__aeabi_dadd+0x670>)
 80017e2:	45a4      	cmp	ip, r4
 80017e4:	d058      	beq.n	8001898 <__aeabi_dadd+0x510>
 80017e6:	4694      	mov	ip, r2
 80017e8:	e749      	b.n	800167e <__aeabi_dadd+0x2f6>
 80017ea:	4664      	mov	r4, ip
 80017ec:	2220      	movs	r2, #32
 80017ee:	1b12      	subs	r2, r2, r4
 80017f0:	4644      	mov	r4, r8
 80017f2:	4094      	lsls	r4, r2
 80017f4:	000f      	movs	r7, r1
 80017f6:	46a1      	mov	r9, r4
 80017f8:	4664      	mov	r4, ip
 80017fa:	4091      	lsls	r1, r2
 80017fc:	40e7      	lsrs	r7, r4
 80017fe:	464c      	mov	r4, r9
 8001800:	1e4a      	subs	r2, r1, #1
 8001802:	4191      	sbcs	r1, r2
 8001804:	433c      	orrs	r4, r7
 8001806:	4642      	mov	r2, r8
 8001808:	430c      	orrs	r4, r1
 800180a:	4661      	mov	r1, ip
 800180c:	40ca      	lsrs	r2, r1
 800180e:	1880      	adds	r0, r0, r2
 8001810:	e6f4      	b.n	80015fc <__aeabi_dadd+0x274>
 8001812:	4c79      	ldr	r4, [pc, #484]	; (80019f8 <__aeabi_dadd+0x670>)
 8001814:	42a2      	cmp	r2, r4
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x492>
 8001818:	e6fd      	b.n	8001616 <__aeabi_dadd+0x28e>
 800181a:	1859      	adds	r1, r3, r1
 800181c:	4299      	cmp	r1, r3
 800181e:	419b      	sbcs	r3, r3
 8001820:	4440      	add	r0, r8
 8001822:	425f      	negs	r7, r3
 8001824:	19c7      	adds	r7, r0, r7
 8001826:	07fc      	lsls	r4, r7, #31
 8001828:	0849      	lsrs	r1, r1, #1
 800182a:	0016      	movs	r6, r2
 800182c:	430c      	orrs	r4, r1
 800182e:	087f      	lsrs	r7, r7, #1
 8001830:	e6cf      	b.n	80015d2 <__aeabi_dadd+0x24a>
 8001832:	1acc      	subs	r4, r1, r3
 8001834:	42a1      	cmp	r1, r4
 8001836:	41bf      	sbcs	r7, r7
 8001838:	4643      	mov	r3, r8
 800183a:	427f      	negs	r7, r7
 800183c:	1a18      	subs	r0, r3, r0
 800183e:	4655      	mov	r5, sl
 8001840:	1bc7      	subs	r7, r0, r7
 8001842:	e5f7      	b.n	8001434 <__aeabi_dadd+0xac>
 8001844:	08c9      	lsrs	r1, r1, #3
 8001846:	077b      	lsls	r3, r7, #29
 8001848:	4655      	mov	r5, sl
 800184a:	430b      	orrs	r3, r1
 800184c:	08f8      	lsrs	r0, r7, #3
 800184e:	e6c8      	b.n	80015e2 <__aeabi_dadd+0x25a>
 8001850:	2c00      	cmp	r4, #0
 8001852:	d000      	beq.n	8001856 <__aeabi_dadd+0x4ce>
 8001854:	e081      	b.n	800195a <__aeabi_dadd+0x5d2>
 8001856:	4643      	mov	r3, r8
 8001858:	430b      	orrs	r3, r1
 800185a:	d115      	bne.n	8001888 <__aeabi_dadd+0x500>
 800185c:	2080      	movs	r0, #128	; 0x80
 800185e:	2500      	movs	r5, #0
 8001860:	0300      	lsls	r0, r0, #12
 8001862:	e6e3      	b.n	800162c <__aeabi_dadd+0x2a4>
 8001864:	1a5c      	subs	r4, r3, r1
 8001866:	42a3      	cmp	r3, r4
 8001868:	419b      	sbcs	r3, r3
 800186a:	1bc7      	subs	r7, r0, r7
 800186c:	425b      	negs	r3, r3
 800186e:	2601      	movs	r6, #1
 8001870:	1aff      	subs	r7, r7, r3
 8001872:	e5da      	b.n	800142a <__aeabi_dadd+0xa2>
 8001874:	0742      	lsls	r2, r0, #29
 8001876:	08db      	lsrs	r3, r3, #3
 8001878:	4313      	orrs	r3, r2
 800187a:	08c0      	lsrs	r0, r0, #3
 800187c:	e6d2      	b.n	8001624 <__aeabi_dadd+0x29c>
 800187e:	0742      	lsls	r2, r0, #29
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	4313      	orrs	r3, r2
 8001884:	08c0      	lsrs	r0, r0, #3
 8001886:	e6ac      	b.n	80015e2 <__aeabi_dadd+0x25a>
 8001888:	4643      	mov	r3, r8
 800188a:	4642      	mov	r2, r8
 800188c:	08c9      	lsrs	r1, r1, #3
 800188e:	075b      	lsls	r3, r3, #29
 8001890:	4655      	mov	r5, sl
 8001892:	430b      	orrs	r3, r1
 8001894:	08d0      	lsrs	r0, r2, #3
 8001896:	e6c5      	b.n	8001624 <__aeabi_dadd+0x29c>
 8001898:	4643      	mov	r3, r8
 800189a:	4642      	mov	r2, r8
 800189c:	075b      	lsls	r3, r3, #29
 800189e:	08c9      	lsrs	r1, r1, #3
 80018a0:	430b      	orrs	r3, r1
 80018a2:	08d0      	lsrs	r0, r2, #3
 80018a4:	e6be      	b.n	8001624 <__aeabi_dadd+0x29c>
 80018a6:	4303      	orrs	r3, r0
 80018a8:	001c      	movs	r4, r3
 80018aa:	1e63      	subs	r3, r4, #1
 80018ac:	419c      	sbcs	r4, r3
 80018ae:	e6fc      	b.n	80016aa <__aeabi_dadd+0x322>
 80018b0:	0002      	movs	r2, r0
 80018b2:	3c20      	subs	r4, #32
 80018b4:	40e2      	lsrs	r2, r4
 80018b6:	0014      	movs	r4, r2
 80018b8:	4662      	mov	r2, ip
 80018ba:	2a20      	cmp	r2, #32
 80018bc:	d003      	beq.n	80018c6 <__aeabi_dadd+0x53e>
 80018be:	2540      	movs	r5, #64	; 0x40
 80018c0:	1aad      	subs	r5, r5, r2
 80018c2:	40a8      	lsls	r0, r5
 80018c4:	4303      	orrs	r3, r0
 80018c6:	1e58      	subs	r0, r3, #1
 80018c8:	4183      	sbcs	r3, r0
 80018ca:	4323      	orrs	r3, r4
 80018cc:	e775      	b.n	80017ba <__aeabi_dadd+0x432>
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d0e2      	beq.n	8001898 <__aeabi_dadd+0x510>
 80018d2:	003a      	movs	r2, r7
 80018d4:	430a      	orrs	r2, r1
 80018d6:	d0cd      	beq.n	8001874 <__aeabi_dadd+0x4ec>
 80018d8:	0742      	lsls	r2, r0, #29
 80018da:	08db      	lsrs	r3, r3, #3
 80018dc:	4313      	orrs	r3, r2
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	08c0      	lsrs	r0, r0, #3
 80018e2:	0312      	lsls	r2, r2, #12
 80018e4:	4210      	tst	r0, r2
 80018e6:	d006      	beq.n	80018f6 <__aeabi_dadd+0x56e>
 80018e8:	08fc      	lsrs	r4, r7, #3
 80018ea:	4214      	tst	r4, r2
 80018ec:	d103      	bne.n	80018f6 <__aeabi_dadd+0x56e>
 80018ee:	0020      	movs	r0, r4
 80018f0:	08cb      	lsrs	r3, r1, #3
 80018f2:	077a      	lsls	r2, r7, #29
 80018f4:	4313      	orrs	r3, r2
 80018f6:	0f5a      	lsrs	r2, r3, #29
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	0752      	lsls	r2, r2, #29
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	4313      	orrs	r3, r2
 8001900:	e690      	b.n	8001624 <__aeabi_dadd+0x29c>
 8001902:	4643      	mov	r3, r8
 8001904:	430b      	orrs	r3, r1
 8001906:	d100      	bne.n	800190a <__aeabi_dadd+0x582>
 8001908:	e709      	b.n	800171e <__aeabi_dadd+0x396>
 800190a:	4643      	mov	r3, r8
 800190c:	4642      	mov	r2, r8
 800190e:	08c9      	lsrs	r1, r1, #3
 8001910:	075b      	lsls	r3, r3, #29
 8001912:	4655      	mov	r5, sl
 8001914:	430b      	orrs	r3, r1
 8001916:	08d0      	lsrs	r0, r2, #3
 8001918:	e666      	b.n	80015e8 <__aeabi_dadd+0x260>
 800191a:	1acc      	subs	r4, r1, r3
 800191c:	42a1      	cmp	r1, r4
 800191e:	4189      	sbcs	r1, r1
 8001920:	1a3f      	subs	r7, r7, r0
 8001922:	4249      	negs	r1, r1
 8001924:	4655      	mov	r5, sl
 8001926:	2601      	movs	r6, #1
 8001928:	1a7f      	subs	r7, r7, r1
 800192a:	e57e      	b.n	800142a <__aeabi_dadd+0xa2>
 800192c:	4642      	mov	r2, r8
 800192e:	1a5c      	subs	r4, r3, r1
 8001930:	1a87      	subs	r7, r0, r2
 8001932:	42a3      	cmp	r3, r4
 8001934:	4192      	sbcs	r2, r2
 8001936:	4252      	negs	r2, r2
 8001938:	1abf      	subs	r7, r7, r2
 800193a:	023a      	lsls	r2, r7, #8
 800193c:	d53d      	bpl.n	80019ba <__aeabi_dadd+0x632>
 800193e:	1acc      	subs	r4, r1, r3
 8001940:	42a1      	cmp	r1, r4
 8001942:	4189      	sbcs	r1, r1
 8001944:	4643      	mov	r3, r8
 8001946:	4249      	negs	r1, r1
 8001948:	1a1f      	subs	r7, r3, r0
 800194a:	4655      	mov	r5, sl
 800194c:	1a7f      	subs	r7, r7, r1
 800194e:	e595      	b.n	800147c <__aeabi_dadd+0xf4>
 8001950:	077b      	lsls	r3, r7, #29
 8001952:	08c9      	lsrs	r1, r1, #3
 8001954:	430b      	orrs	r3, r1
 8001956:	08f8      	lsrs	r0, r7, #3
 8001958:	e643      	b.n	80015e2 <__aeabi_dadd+0x25a>
 800195a:	4644      	mov	r4, r8
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	430c      	orrs	r4, r1
 8001960:	d130      	bne.n	80019c4 <__aeabi_dadd+0x63c>
 8001962:	0742      	lsls	r2, r0, #29
 8001964:	4313      	orrs	r3, r2
 8001966:	08c0      	lsrs	r0, r0, #3
 8001968:	e65c      	b.n	8001624 <__aeabi_dadd+0x29c>
 800196a:	077b      	lsls	r3, r7, #29
 800196c:	08c9      	lsrs	r1, r1, #3
 800196e:	430b      	orrs	r3, r1
 8001970:	08f8      	lsrs	r0, r7, #3
 8001972:	e639      	b.n	80015e8 <__aeabi_dadd+0x260>
 8001974:	185c      	adds	r4, r3, r1
 8001976:	429c      	cmp	r4, r3
 8001978:	419b      	sbcs	r3, r3
 800197a:	4440      	add	r0, r8
 800197c:	425b      	negs	r3, r3
 800197e:	18c7      	adds	r7, r0, r3
 8001980:	023b      	lsls	r3, r7, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dadd+0x5fe>
 8001984:	e625      	b.n	80015d2 <__aeabi_dadd+0x24a>
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <__aeabi_dadd+0x674>)
 8001988:	2601      	movs	r6, #1
 800198a:	401f      	ands	r7, r3
 800198c:	e621      	b.n	80015d2 <__aeabi_dadd+0x24a>
 800198e:	0004      	movs	r4, r0
 8001990:	3a20      	subs	r2, #32
 8001992:	40d4      	lsrs	r4, r2
 8001994:	4662      	mov	r2, ip
 8001996:	2a20      	cmp	r2, #32
 8001998:	d004      	beq.n	80019a4 <__aeabi_dadd+0x61c>
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	4666      	mov	r6, ip
 800199e:	1b92      	subs	r2, r2, r6
 80019a0:	4090      	lsls	r0, r2
 80019a2:	4303      	orrs	r3, r0
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	4193      	sbcs	r3, r2
 80019a8:	431c      	orrs	r4, r3
 80019aa:	e67e      	b.n	80016aa <__aeabi_dadd+0x322>
 80019ac:	185c      	adds	r4, r3, r1
 80019ae:	428c      	cmp	r4, r1
 80019b0:	4189      	sbcs	r1, r1
 80019b2:	4440      	add	r0, r8
 80019b4:	4249      	negs	r1, r1
 80019b6:	1847      	adds	r7, r0, r1
 80019b8:	e6dd      	b.n	8001776 <__aeabi_dadd+0x3ee>
 80019ba:	0023      	movs	r3, r4
 80019bc:	433b      	orrs	r3, r7
 80019be:	d100      	bne.n	80019c2 <__aeabi_dadd+0x63a>
 80019c0:	e6ad      	b.n	800171e <__aeabi_dadd+0x396>
 80019c2:	e606      	b.n	80015d2 <__aeabi_dadd+0x24a>
 80019c4:	0744      	lsls	r4, r0, #29
 80019c6:	4323      	orrs	r3, r4
 80019c8:	2480      	movs	r4, #128	; 0x80
 80019ca:	08c0      	lsrs	r0, r0, #3
 80019cc:	0324      	lsls	r4, r4, #12
 80019ce:	4220      	tst	r0, r4
 80019d0:	d008      	beq.n	80019e4 <__aeabi_dadd+0x65c>
 80019d2:	4642      	mov	r2, r8
 80019d4:	08d6      	lsrs	r6, r2, #3
 80019d6:	4226      	tst	r6, r4
 80019d8:	d104      	bne.n	80019e4 <__aeabi_dadd+0x65c>
 80019da:	4655      	mov	r5, sl
 80019dc:	0030      	movs	r0, r6
 80019de:	08cb      	lsrs	r3, r1, #3
 80019e0:	0751      	lsls	r1, r2, #29
 80019e2:	430b      	orrs	r3, r1
 80019e4:	0f5a      	lsrs	r2, r3, #29
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	0752      	lsls	r2, r2, #29
 80019ec:	4313      	orrs	r3, r2
 80019ee:	e619      	b.n	8001624 <__aeabi_dadd+0x29c>
 80019f0:	2300      	movs	r3, #0
 80019f2:	4a01      	ldr	r2, [pc, #4]	; (80019f8 <__aeabi_dadd+0x670>)
 80019f4:	001f      	movs	r7, r3
 80019f6:	e55e      	b.n	80014b6 <__aeabi_dadd+0x12e>
 80019f8:	000007ff 	.word	0x000007ff
 80019fc:	ff7fffff 	.word	0xff7fffff

08001a00 <__aeabi_ddiv>:
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	4657      	mov	r7, sl
 8001a04:	464e      	mov	r6, r9
 8001a06:	4645      	mov	r5, r8
 8001a08:	46de      	mov	lr, fp
 8001a0a:	b5e0      	push	{r5, r6, r7, lr}
 8001a0c:	4681      	mov	r9, r0
 8001a0e:	0005      	movs	r5, r0
 8001a10:	030c      	lsls	r4, r1, #12
 8001a12:	0048      	lsls	r0, r1, #1
 8001a14:	4692      	mov	sl, r2
 8001a16:	001f      	movs	r7, r3
 8001a18:	b085      	sub	sp, #20
 8001a1a:	0b24      	lsrs	r4, r4, #12
 8001a1c:	0d40      	lsrs	r0, r0, #21
 8001a1e:	0fce      	lsrs	r6, r1, #31
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d100      	bne.n	8001a26 <__aeabi_ddiv+0x26>
 8001a24:	e156      	b.n	8001cd4 <__aeabi_ddiv+0x2d4>
 8001a26:	4bd4      	ldr	r3, [pc, #848]	; (8001d78 <__aeabi_ddiv+0x378>)
 8001a28:	4298      	cmp	r0, r3
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_ddiv+0x2e>
 8001a2c:	e172      	b.n	8001d14 <__aeabi_ddiv+0x314>
 8001a2e:	0f6b      	lsrs	r3, r5, #29
 8001a30:	00e4      	lsls	r4, r4, #3
 8001a32:	431c      	orrs	r4, r3
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	4323      	orrs	r3, r4
 8001a3a:	4698      	mov	r8, r3
 8001a3c:	4bcf      	ldr	r3, [pc, #828]	; (8001d7c <__aeabi_ddiv+0x37c>)
 8001a3e:	00ed      	lsls	r5, r5, #3
 8001a40:	469b      	mov	fp, r3
 8001a42:	2300      	movs	r3, #0
 8001a44:	4699      	mov	r9, r3
 8001a46:	4483      	add	fp, r0
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	033c      	lsls	r4, r7, #12
 8001a4c:	007b      	lsls	r3, r7, #1
 8001a4e:	4650      	mov	r0, sl
 8001a50:	0b24      	lsrs	r4, r4, #12
 8001a52:	0d5b      	lsrs	r3, r3, #21
 8001a54:	0fff      	lsrs	r7, r7, #31
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0x5c>
 8001a5a:	e11f      	b.n	8001c9c <__aeabi_ddiv+0x29c>
 8001a5c:	4ac6      	ldr	r2, [pc, #792]	; (8001d78 <__aeabi_ddiv+0x378>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d100      	bne.n	8001a64 <__aeabi_ddiv+0x64>
 8001a62:	e162      	b.n	8001d2a <__aeabi_ddiv+0x32a>
 8001a64:	49c5      	ldr	r1, [pc, #788]	; (8001d7c <__aeabi_ddiv+0x37c>)
 8001a66:	0f42      	lsrs	r2, r0, #29
 8001a68:	468c      	mov	ip, r1
 8001a6a:	00e4      	lsls	r4, r4, #3
 8001a6c:	4659      	mov	r1, fp
 8001a6e:	4314      	orrs	r4, r2
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	4463      	add	r3, ip
 8001a74:	0412      	lsls	r2, r2, #16
 8001a76:	1acb      	subs	r3, r1, r3
 8001a78:	4314      	orrs	r4, r2
 8001a7a:	469b      	mov	fp, r3
 8001a7c:	00c2      	lsls	r2, r0, #3
 8001a7e:	2000      	movs	r0, #0
 8001a80:	0033      	movs	r3, r6
 8001a82:	407b      	eors	r3, r7
 8001a84:	469a      	mov	sl, r3
 8001a86:	464b      	mov	r3, r9
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d827      	bhi.n	8001adc <__aeabi_ddiv+0xdc>
 8001a8c:	49bc      	ldr	r1, [pc, #752]	; (8001d80 <__aeabi_ddiv+0x380>)
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	58cb      	ldr	r3, [r1, r3]
 8001a92:	469f      	mov	pc, r3
 8001a94:	46b2      	mov	sl, r6
 8001a96:	9b00      	ldr	r3, [sp, #0]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d016      	beq.n	8001aca <__aeabi_ddiv+0xca>
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_ddiv+0xa2>
 8001aa0:	e28e      	b.n	8001fc0 <__aeabi_ddiv+0x5c0>
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d000      	beq.n	8001aa8 <__aeabi_ddiv+0xa8>
 8001aa6:	e0d9      	b.n	8001c5c <__aeabi_ddiv+0x25c>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2400      	movs	r4, #0
 8001aac:	2500      	movs	r5, #0
 8001aae:	4652      	mov	r2, sl
 8001ab0:	051b      	lsls	r3, r3, #20
 8001ab2:	4323      	orrs	r3, r4
 8001ab4:	07d2      	lsls	r2, r2, #31
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	0028      	movs	r0, r5
 8001aba:	0019      	movs	r1, r3
 8001abc:	b005      	add	sp, #20
 8001abe:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac0:	46bb      	mov	fp, r7
 8001ac2:	46b2      	mov	sl, r6
 8001ac4:	46a9      	mov	r9, r5
 8001ac6:	46a0      	mov	r8, r4
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aca:	2400      	movs	r4, #0
 8001acc:	2500      	movs	r5, #0
 8001ace:	4baa      	ldr	r3, [pc, #680]	; (8001d78 <__aeabi_ddiv+0x378>)
 8001ad0:	e7ed      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001ad2:	46ba      	mov	sl, r7
 8001ad4:	46a0      	mov	r8, r4
 8001ad6:	0015      	movs	r5, r2
 8001ad8:	9000      	str	r0, [sp, #0]
 8001ada:	e7dc      	b.n	8001a96 <__aeabi_ddiv+0x96>
 8001adc:	4544      	cmp	r4, r8
 8001ade:	d200      	bcs.n	8001ae2 <__aeabi_ddiv+0xe2>
 8001ae0:	e1c7      	b.n	8001e72 <__aeabi_ddiv+0x472>
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_ddiv+0xe6>
 8001ae4:	e1c2      	b.n	8001e6c <__aeabi_ddiv+0x46c>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	425b      	negs	r3, r3
 8001aea:	469c      	mov	ip, r3
 8001aec:	002e      	movs	r6, r5
 8001aee:	4640      	mov	r0, r8
 8001af0:	2500      	movs	r5, #0
 8001af2:	44e3      	add	fp, ip
 8001af4:	0223      	lsls	r3, r4, #8
 8001af6:	0e14      	lsrs	r4, r2, #24
 8001af8:	431c      	orrs	r4, r3
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	4699      	mov	r9, r3
 8001afe:	0423      	lsls	r3, r4, #16
 8001b00:	0c1f      	lsrs	r7, r3, #16
 8001b02:	0212      	lsls	r2, r2, #8
 8001b04:	4649      	mov	r1, r9
 8001b06:	9200      	str	r2, [sp, #0]
 8001b08:	9701      	str	r7, [sp, #4]
 8001b0a:	f7fe fb9b 	bl	8000244 <__aeabi_uidivmod>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	437a      	muls	r2, r7
 8001b12:	040b      	lsls	r3, r1, #16
 8001b14:	0c31      	lsrs	r1, r6, #16
 8001b16:	4680      	mov	r8, r0
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	428a      	cmp	r2, r1
 8001b1c:	d907      	bls.n	8001b2e <__aeabi_ddiv+0x12e>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	425b      	negs	r3, r3
 8001b22:	469c      	mov	ip, r3
 8001b24:	1909      	adds	r1, r1, r4
 8001b26:	44e0      	add	r8, ip
 8001b28:	428c      	cmp	r4, r1
 8001b2a:	d800      	bhi.n	8001b2e <__aeabi_ddiv+0x12e>
 8001b2c:	e207      	b.n	8001f3e <__aeabi_ddiv+0x53e>
 8001b2e:	1a88      	subs	r0, r1, r2
 8001b30:	4649      	mov	r1, r9
 8001b32:	f7fe fb87 	bl	8000244 <__aeabi_uidivmod>
 8001b36:	0409      	lsls	r1, r1, #16
 8001b38:	468c      	mov	ip, r1
 8001b3a:	0431      	lsls	r1, r6, #16
 8001b3c:	4666      	mov	r6, ip
 8001b3e:	9a01      	ldr	r2, [sp, #4]
 8001b40:	0c09      	lsrs	r1, r1, #16
 8001b42:	4342      	muls	r2, r0
 8001b44:	0003      	movs	r3, r0
 8001b46:	4331      	orrs	r1, r6
 8001b48:	428a      	cmp	r2, r1
 8001b4a:	d904      	bls.n	8001b56 <__aeabi_ddiv+0x156>
 8001b4c:	1909      	adds	r1, r1, r4
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	428c      	cmp	r4, r1
 8001b52:	d800      	bhi.n	8001b56 <__aeabi_ddiv+0x156>
 8001b54:	e1ed      	b.n	8001f32 <__aeabi_ddiv+0x532>
 8001b56:	1a88      	subs	r0, r1, r2
 8001b58:	4642      	mov	r2, r8
 8001b5a:	0412      	lsls	r2, r2, #16
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4641      	mov	r1, r8
 8001b62:	9b00      	ldr	r3, [sp, #0]
 8001b64:	040e      	lsls	r6, r1, #16
 8001b66:	0c1b      	lsrs	r3, r3, #16
 8001b68:	001f      	movs	r7, r3
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	9b00      	ldr	r3, [sp, #0]
 8001b6e:	0c36      	lsrs	r6, r6, #16
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	0c19      	lsrs	r1, r3, #16
 8001b74:	000b      	movs	r3, r1
 8001b76:	4373      	muls	r3, r6
 8001b78:	0c12      	lsrs	r2, r2, #16
 8001b7a:	437e      	muls	r6, r7
 8001b7c:	9103      	str	r1, [sp, #12]
 8001b7e:	4351      	muls	r1, r2
 8001b80:	437a      	muls	r2, r7
 8001b82:	0c1f      	lsrs	r7, r3, #16
 8001b84:	46bc      	mov	ip, r7
 8001b86:	1876      	adds	r6, r6, r1
 8001b88:	4466      	add	r6, ip
 8001b8a:	42b1      	cmp	r1, r6
 8001b8c:	d903      	bls.n	8001b96 <__aeabi_ddiv+0x196>
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	0249      	lsls	r1, r1, #9
 8001b92:	468c      	mov	ip, r1
 8001b94:	4462      	add	r2, ip
 8001b96:	0c31      	lsrs	r1, r6, #16
 8001b98:	188a      	adds	r2, r1, r2
 8001b9a:	0431      	lsls	r1, r6, #16
 8001b9c:	041e      	lsls	r6, r3, #16
 8001b9e:	0c36      	lsrs	r6, r6, #16
 8001ba0:	198e      	adds	r6, r1, r6
 8001ba2:	4290      	cmp	r0, r2
 8001ba4:	d302      	bcc.n	8001bac <__aeabi_ddiv+0x1ac>
 8001ba6:	d112      	bne.n	8001bce <__aeabi_ddiv+0x1ce>
 8001ba8:	42b5      	cmp	r5, r6
 8001baa:	d210      	bcs.n	8001bce <__aeabi_ddiv+0x1ce>
 8001bac:	4643      	mov	r3, r8
 8001bae:	1e59      	subs	r1, r3, #1
 8001bb0:	9b00      	ldr	r3, [sp, #0]
 8001bb2:	469c      	mov	ip, r3
 8001bb4:	4465      	add	r5, ip
 8001bb6:	001f      	movs	r7, r3
 8001bb8:	429d      	cmp	r5, r3
 8001bba:	419b      	sbcs	r3, r3
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	191b      	adds	r3, r3, r4
 8001bc0:	18c0      	adds	r0, r0, r3
 8001bc2:	4284      	cmp	r4, r0
 8001bc4:	d200      	bcs.n	8001bc8 <__aeabi_ddiv+0x1c8>
 8001bc6:	e1a0      	b.n	8001f0a <__aeabi_ddiv+0x50a>
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x1cc>
 8001bca:	e19b      	b.n	8001f04 <__aeabi_ddiv+0x504>
 8001bcc:	4688      	mov	r8, r1
 8001bce:	1bae      	subs	r6, r5, r6
 8001bd0:	42b5      	cmp	r5, r6
 8001bd2:	41ad      	sbcs	r5, r5
 8001bd4:	1a80      	subs	r0, r0, r2
 8001bd6:	426d      	negs	r5, r5
 8001bd8:	1b40      	subs	r0, r0, r5
 8001bda:	4284      	cmp	r4, r0
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_ddiv+0x1e0>
 8001bde:	e1d5      	b.n	8001f8c <__aeabi_ddiv+0x58c>
 8001be0:	4649      	mov	r1, r9
 8001be2:	f7fe fb2f 	bl	8000244 <__aeabi_uidivmod>
 8001be6:	9a01      	ldr	r2, [sp, #4]
 8001be8:	040b      	lsls	r3, r1, #16
 8001bea:	4342      	muls	r2, r0
 8001bec:	0c31      	lsrs	r1, r6, #16
 8001bee:	0005      	movs	r5, r0
 8001bf0:	4319      	orrs	r1, r3
 8001bf2:	428a      	cmp	r2, r1
 8001bf4:	d900      	bls.n	8001bf8 <__aeabi_ddiv+0x1f8>
 8001bf6:	e16c      	b.n	8001ed2 <__aeabi_ddiv+0x4d2>
 8001bf8:	1a88      	subs	r0, r1, r2
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	f7fe fb22 	bl	8000244 <__aeabi_uidivmod>
 8001c00:	9a01      	ldr	r2, [sp, #4]
 8001c02:	0436      	lsls	r6, r6, #16
 8001c04:	4342      	muls	r2, r0
 8001c06:	0409      	lsls	r1, r1, #16
 8001c08:	0c36      	lsrs	r6, r6, #16
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	430e      	orrs	r6, r1
 8001c0e:	42b2      	cmp	r2, r6
 8001c10:	d900      	bls.n	8001c14 <__aeabi_ddiv+0x214>
 8001c12:	e153      	b.n	8001ebc <__aeabi_ddiv+0x4bc>
 8001c14:	9803      	ldr	r0, [sp, #12]
 8001c16:	1ab6      	subs	r6, r6, r2
 8001c18:	0002      	movs	r2, r0
 8001c1a:	042d      	lsls	r5, r5, #16
 8001c1c:	431d      	orrs	r5, r3
 8001c1e:	9f02      	ldr	r7, [sp, #8]
 8001c20:	042b      	lsls	r3, r5, #16
 8001c22:	0c1b      	lsrs	r3, r3, #16
 8001c24:	435a      	muls	r2, r3
 8001c26:	437b      	muls	r3, r7
 8001c28:	469c      	mov	ip, r3
 8001c2a:	0c29      	lsrs	r1, r5, #16
 8001c2c:	4348      	muls	r0, r1
 8001c2e:	0c13      	lsrs	r3, r2, #16
 8001c30:	4484      	add	ip, r0
 8001c32:	4463      	add	r3, ip
 8001c34:	4379      	muls	r1, r7
 8001c36:	4298      	cmp	r0, r3
 8001c38:	d903      	bls.n	8001c42 <__aeabi_ddiv+0x242>
 8001c3a:	2080      	movs	r0, #128	; 0x80
 8001c3c:	0240      	lsls	r0, r0, #9
 8001c3e:	4684      	mov	ip, r0
 8001c40:	4461      	add	r1, ip
 8001c42:	0c18      	lsrs	r0, r3, #16
 8001c44:	0412      	lsls	r2, r2, #16
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	0c12      	lsrs	r2, r2, #16
 8001c4a:	1841      	adds	r1, r0, r1
 8001c4c:	189b      	adds	r3, r3, r2
 8001c4e:	428e      	cmp	r6, r1
 8001c50:	d200      	bcs.n	8001c54 <__aeabi_ddiv+0x254>
 8001c52:	e0ff      	b.n	8001e54 <__aeabi_ddiv+0x454>
 8001c54:	d100      	bne.n	8001c58 <__aeabi_ddiv+0x258>
 8001c56:	e0fa      	b.n	8001e4e <__aeabi_ddiv+0x44e>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	431d      	orrs	r5, r3
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <__aeabi_ddiv+0x384>)
 8001c5e:	445a      	add	r2, fp
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	dc00      	bgt.n	8001c66 <__aeabi_ddiv+0x266>
 8001c64:	e0aa      	b.n	8001dbc <__aeabi_ddiv+0x3bc>
 8001c66:	076b      	lsls	r3, r5, #29
 8001c68:	d000      	beq.n	8001c6c <__aeabi_ddiv+0x26c>
 8001c6a:	e13d      	b.n	8001ee8 <__aeabi_ddiv+0x4e8>
 8001c6c:	08ed      	lsrs	r5, r5, #3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	01db      	lsls	r3, r3, #7
 8001c72:	d506      	bpl.n	8001c82 <__aeabi_ddiv+0x282>
 8001c74:	4642      	mov	r2, r8
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <__aeabi_ddiv+0x388>)
 8001c78:	401a      	ands	r2, r3
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	00d2      	lsls	r2, r2, #3
 8001c80:	445a      	add	r2, fp
 8001c82:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <__aeabi_ddiv+0x38c>)
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dd00      	ble.n	8001c8a <__aeabi_ddiv+0x28a>
 8001c88:	e71f      	b.n	8001aca <__aeabi_ddiv+0xca>
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	075b      	lsls	r3, r3, #29
 8001c8e:	431d      	orrs	r5, r3
 8001c90:	4643      	mov	r3, r8
 8001c92:	0552      	lsls	r2, r2, #21
 8001c94:	025c      	lsls	r4, r3, #9
 8001c96:	0b24      	lsrs	r4, r4, #12
 8001c98:	0d53      	lsrs	r3, r2, #21
 8001c9a:	e708      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001c9c:	4652      	mov	r2, sl
 8001c9e:	4322      	orrs	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x2a4>
 8001ca2:	e07b      	b.n	8001d9c <__aeabi_ddiv+0x39c>
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_ddiv+0x2aa>
 8001ca8:	e0fa      	b.n	8001ea0 <__aeabi_ddiv+0x4a0>
 8001caa:	0020      	movs	r0, r4
 8001cac:	f001 fa22 	bl	80030f4 <__clzsi2>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	3a0b      	subs	r2, #11
 8001cb4:	231d      	movs	r3, #29
 8001cb6:	0001      	movs	r1, r0
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	4652      	mov	r2, sl
 8001cbc:	3908      	subs	r1, #8
 8001cbe:	40da      	lsrs	r2, r3
 8001cc0:	408c      	lsls	r4, r1
 8001cc2:	4314      	orrs	r4, r2
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	408a      	lsls	r2, r1
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <__aeabi_ddiv+0x390>)
 8001cca:	4458      	add	r0, fp
 8001ccc:	469b      	mov	fp, r3
 8001cce:	4483      	add	fp, r0
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	e6d5      	b.n	8001a80 <__aeabi_ddiv+0x80>
 8001cd4:	464b      	mov	r3, r9
 8001cd6:	4323      	orrs	r3, r4
 8001cd8:	4698      	mov	r8, r3
 8001cda:	d044      	beq.n	8001d66 <__aeabi_ddiv+0x366>
 8001cdc:	2c00      	cmp	r4, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_ddiv+0x2e2>
 8001ce0:	e0ce      	b.n	8001e80 <__aeabi_ddiv+0x480>
 8001ce2:	0020      	movs	r0, r4
 8001ce4:	f001 fa06 	bl	80030f4 <__clzsi2>
 8001ce8:	0001      	movs	r1, r0
 8001cea:	0002      	movs	r2, r0
 8001cec:	390b      	subs	r1, #11
 8001cee:	231d      	movs	r3, #29
 8001cf0:	1a5b      	subs	r3, r3, r1
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	40d9      	lsrs	r1, r3
 8001cf8:	3808      	subs	r0, #8
 8001cfa:	4084      	lsls	r4, r0
 8001cfc:	000b      	movs	r3, r1
 8001cfe:	464d      	mov	r5, r9
 8001d00:	4323      	orrs	r3, r4
 8001d02:	4698      	mov	r8, r3
 8001d04:	4085      	lsls	r5, r0
 8001d06:	4823      	ldr	r0, [pc, #140]	; (8001d94 <__aeabi_ddiv+0x394>)
 8001d08:	1a83      	subs	r3, r0, r2
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4699      	mov	r9, r3
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	e69a      	b.n	8001a4a <__aeabi_ddiv+0x4a>
 8001d14:	464b      	mov	r3, r9
 8001d16:	4323      	orrs	r3, r4
 8001d18:	4698      	mov	r8, r3
 8001d1a:	d11d      	bne.n	8001d58 <__aeabi_ddiv+0x358>
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	4699      	mov	r9, r3
 8001d20:	3b06      	subs	r3, #6
 8001d22:	2500      	movs	r5, #0
 8001d24:	4683      	mov	fp, r0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	e68f      	b.n	8001a4a <__aeabi_ddiv+0x4a>
 8001d2a:	4652      	mov	r2, sl
 8001d2c:	4322      	orrs	r2, r4
 8001d2e:	d109      	bne.n	8001d44 <__aeabi_ddiv+0x344>
 8001d30:	2302      	movs	r3, #2
 8001d32:	4649      	mov	r1, r9
 8001d34:	4319      	orrs	r1, r3
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <__aeabi_ddiv+0x398>)
 8001d38:	4689      	mov	r9, r1
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	2400      	movs	r4, #0
 8001d3e:	2002      	movs	r0, #2
 8001d40:	44e3      	add	fp, ip
 8001d42:	e69d      	b.n	8001a80 <__aeabi_ddiv+0x80>
 8001d44:	2303      	movs	r3, #3
 8001d46:	464a      	mov	r2, r9
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <__aeabi_ddiv+0x398>)
 8001d4c:	4691      	mov	r9, r2
 8001d4e:	469c      	mov	ip, r3
 8001d50:	4652      	mov	r2, sl
 8001d52:	2003      	movs	r0, #3
 8001d54:	44e3      	add	fp, ip
 8001d56:	e693      	b.n	8001a80 <__aeabi_ddiv+0x80>
 8001d58:	230c      	movs	r3, #12
 8001d5a:	4699      	mov	r9, r3
 8001d5c:	3b09      	subs	r3, #9
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	4683      	mov	fp, r0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	e671      	b.n	8001a4a <__aeabi_ddiv+0x4a>
 8001d66:	2304      	movs	r3, #4
 8001d68:	4699      	mov	r9, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	469b      	mov	fp, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	2500      	movs	r5, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	e669      	b.n	8001a4a <__aeabi_ddiv+0x4a>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	000007ff 	.word	0x000007ff
 8001d7c:	fffffc01 	.word	0xfffffc01
 8001d80:	0800febc 	.word	0x0800febc
 8001d84:	000003ff 	.word	0x000003ff
 8001d88:	feffffff 	.word	0xfeffffff
 8001d8c:	000007fe 	.word	0x000007fe
 8001d90:	000003f3 	.word	0x000003f3
 8001d94:	fffffc0d 	.word	0xfffffc0d
 8001d98:	fffff801 	.word	0xfffff801
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4319      	orrs	r1, r3
 8001da2:	4689      	mov	r9, r1
 8001da4:	2400      	movs	r4, #0
 8001da6:	2001      	movs	r0, #1
 8001da8:	e66a      	b.n	8001a80 <__aeabi_ddiv+0x80>
 8001daa:	2300      	movs	r3, #0
 8001dac:	2480      	movs	r4, #128	; 0x80
 8001dae:	469a      	mov	sl, r3
 8001db0:	2500      	movs	r5, #0
 8001db2:	4b8a      	ldr	r3, [pc, #552]	; (8001fdc <__aeabi_ddiv+0x5dc>)
 8001db4:	0324      	lsls	r4, r4, #12
 8001db6:	e67a      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001db8:	2501      	movs	r5, #1
 8001dba:	426d      	negs	r5, r5
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	2b38      	cmp	r3, #56	; 0x38
 8001dc2:	dd00      	ble.n	8001dc6 <__aeabi_ddiv+0x3c6>
 8001dc4:	e670      	b.n	8001aa8 <__aeabi_ddiv+0xa8>
 8001dc6:	2b1f      	cmp	r3, #31
 8001dc8:	dc00      	bgt.n	8001dcc <__aeabi_ddiv+0x3cc>
 8001dca:	e0bf      	b.n	8001f4c <__aeabi_ddiv+0x54c>
 8001dcc:	211f      	movs	r1, #31
 8001dce:	4249      	negs	r1, r1
 8001dd0:	1a8a      	subs	r2, r1, r2
 8001dd2:	4641      	mov	r1, r8
 8001dd4:	40d1      	lsrs	r1, r2
 8001dd6:	000a      	movs	r2, r1
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d004      	beq.n	8001de6 <__aeabi_ddiv+0x3e6>
 8001ddc:	4641      	mov	r1, r8
 8001dde:	4b80      	ldr	r3, [pc, #512]	; (8001fe0 <__aeabi_ddiv+0x5e0>)
 8001de0:	445b      	add	r3, fp
 8001de2:	4099      	lsls	r1, r3
 8001de4:	430d      	orrs	r5, r1
 8001de6:	1e6b      	subs	r3, r5, #1
 8001de8:	419d      	sbcs	r5, r3
 8001dea:	2307      	movs	r3, #7
 8001dec:	432a      	orrs	r2, r5
 8001dee:	001d      	movs	r5, r3
 8001df0:	2400      	movs	r4, #0
 8001df2:	4015      	ands	r5, r2
 8001df4:	4213      	tst	r3, r2
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0x3fa>
 8001df8:	e0d4      	b.n	8001fa4 <__aeabi_ddiv+0x5a4>
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	4011      	ands	r1, r2
 8001e00:	2904      	cmp	r1, #4
 8001e02:	d100      	bne.n	8001e06 <__aeabi_ddiv+0x406>
 8001e04:	e0cb      	b.n	8001f9e <__aeabi_ddiv+0x59e>
 8001e06:	1d11      	adds	r1, r2, #4
 8001e08:	4291      	cmp	r1, r2
 8001e0a:	4192      	sbcs	r2, r2
 8001e0c:	4252      	negs	r2, r2
 8001e0e:	189b      	adds	r3, r3, r2
 8001e10:	000a      	movs	r2, r1
 8001e12:	0219      	lsls	r1, r3, #8
 8001e14:	d400      	bmi.n	8001e18 <__aeabi_ddiv+0x418>
 8001e16:	e0c2      	b.n	8001f9e <__aeabi_ddiv+0x59e>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2400      	movs	r4, #0
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	e646      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	4641      	mov	r1, r8
 8001e24:	031b      	lsls	r3, r3, #12
 8001e26:	4219      	tst	r1, r3
 8001e28:	d008      	beq.n	8001e3c <__aeabi_ddiv+0x43c>
 8001e2a:	421c      	tst	r4, r3
 8001e2c:	d106      	bne.n	8001e3c <__aeabi_ddiv+0x43c>
 8001e2e:	431c      	orrs	r4, r3
 8001e30:	0324      	lsls	r4, r4, #12
 8001e32:	46ba      	mov	sl, r7
 8001e34:	0015      	movs	r5, r2
 8001e36:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <__aeabi_ddiv+0x5dc>)
 8001e38:	0b24      	lsrs	r4, r4, #12
 8001e3a:	e638      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001e3c:	2480      	movs	r4, #128	; 0x80
 8001e3e:	4643      	mov	r3, r8
 8001e40:	0324      	lsls	r4, r4, #12
 8001e42:	431c      	orrs	r4, r3
 8001e44:	0324      	lsls	r4, r4, #12
 8001e46:	46b2      	mov	sl, r6
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <__aeabi_ddiv+0x5dc>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e62f      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d100      	bne.n	8001e54 <__aeabi_ddiv+0x454>
 8001e52:	e703      	b.n	8001c5c <__aeabi_ddiv+0x25c>
 8001e54:	19a6      	adds	r6, r4, r6
 8001e56:	1e68      	subs	r0, r5, #1
 8001e58:	42a6      	cmp	r6, r4
 8001e5a:	d200      	bcs.n	8001e5e <__aeabi_ddiv+0x45e>
 8001e5c:	e08d      	b.n	8001f7a <__aeabi_ddiv+0x57a>
 8001e5e:	428e      	cmp	r6, r1
 8001e60:	d200      	bcs.n	8001e64 <__aeabi_ddiv+0x464>
 8001e62:	e0a3      	b.n	8001fac <__aeabi_ddiv+0x5ac>
 8001e64:	d100      	bne.n	8001e68 <__aeabi_ddiv+0x468>
 8001e66:	e0b3      	b.n	8001fd0 <__aeabi_ddiv+0x5d0>
 8001e68:	0005      	movs	r5, r0
 8001e6a:	e6f5      	b.n	8001c58 <__aeabi_ddiv+0x258>
 8001e6c:	42aa      	cmp	r2, r5
 8001e6e:	d900      	bls.n	8001e72 <__aeabi_ddiv+0x472>
 8001e70:	e639      	b.n	8001ae6 <__aeabi_ddiv+0xe6>
 8001e72:	4643      	mov	r3, r8
 8001e74:	07de      	lsls	r6, r3, #31
 8001e76:	0858      	lsrs	r0, r3, #1
 8001e78:	086b      	lsrs	r3, r5, #1
 8001e7a:	431e      	orrs	r6, r3
 8001e7c:	07ed      	lsls	r5, r5, #31
 8001e7e:	e639      	b.n	8001af4 <__aeabi_ddiv+0xf4>
 8001e80:	4648      	mov	r0, r9
 8001e82:	f001 f937 	bl	80030f4 <__clzsi2>
 8001e86:	0001      	movs	r1, r0
 8001e88:	0002      	movs	r2, r0
 8001e8a:	3115      	adds	r1, #21
 8001e8c:	3220      	adds	r2, #32
 8001e8e:	291c      	cmp	r1, #28
 8001e90:	dc00      	bgt.n	8001e94 <__aeabi_ddiv+0x494>
 8001e92:	e72c      	b.n	8001cee <__aeabi_ddiv+0x2ee>
 8001e94:	464b      	mov	r3, r9
 8001e96:	3808      	subs	r0, #8
 8001e98:	4083      	lsls	r3, r0
 8001e9a:	2500      	movs	r5, #0
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	e732      	b.n	8001d06 <__aeabi_ddiv+0x306>
 8001ea0:	f001 f928 	bl	80030f4 <__clzsi2>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	3215      	adds	r2, #21
 8001eaa:	3020      	adds	r0, #32
 8001eac:	2a1c      	cmp	r2, #28
 8001eae:	dc00      	bgt.n	8001eb2 <__aeabi_ddiv+0x4b2>
 8001eb0:	e700      	b.n	8001cb4 <__aeabi_ddiv+0x2b4>
 8001eb2:	4654      	mov	r4, sl
 8001eb4:	3b08      	subs	r3, #8
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	409c      	lsls	r4, r3
 8001eba:	e705      	b.n	8001cc8 <__aeabi_ddiv+0x2c8>
 8001ebc:	1936      	adds	r6, r6, r4
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	42b4      	cmp	r4, r6
 8001ec2:	d900      	bls.n	8001ec6 <__aeabi_ddiv+0x4c6>
 8001ec4:	e6a6      	b.n	8001c14 <__aeabi_ddiv+0x214>
 8001ec6:	42b2      	cmp	r2, r6
 8001ec8:	d800      	bhi.n	8001ecc <__aeabi_ddiv+0x4cc>
 8001eca:	e6a3      	b.n	8001c14 <__aeabi_ddiv+0x214>
 8001ecc:	1e83      	subs	r3, r0, #2
 8001ece:	1936      	adds	r6, r6, r4
 8001ed0:	e6a0      	b.n	8001c14 <__aeabi_ddiv+0x214>
 8001ed2:	1909      	adds	r1, r1, r4
 8001ed4:	3d01      	subs	r5, #1
 8001ed6:	428c      	cmp	r4, r1
 8001ed8:	d900      	bls.n	8001edc <__aeabi_ddiv+0x4dc>
 8001eda:	e68d      	b.n	8001bf8 <__aeabi_ddiv+0x1f8>
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d800      	bhi.n	8001ee2 <__aeabi_ddiv+0x4e2>
 8001ee0:	e68a      	b.n	8001bf8 <__aeabi_ddiv+0x1f8>
 8001ee2:	1e85      	subs	r5, r0, #2
 8001ee4:	1909      	adds	r1, r1, r4
 8001ee6:	e687      	b.n	8001bf8 <__aeabi_ddiv+0x1f8>
 8001ee8:	230f      	movs	r3, #15
 8001eea:	402b      	ands	r3, r5
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_ddiv+0x4f2>
 8001ef0:	e6bc      	b.n	8001c6c <__aeabi_ddiv+0x26c>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	42ab      	cmp	r3, r5
 8001ef8:	419b      	sbcs	r3, r3
 8001efa:	3504      	adds	r5, #4
 8001efc:	425b      	negs	r3, r3
 8001efe:	08ed      	lsrs	r5, r5, #3
 8001f00:	4498      	add	r8, r3
 8001f02:	e6b4      	b.n	8001c6e <__aeabi_ddiv+0x26e>
 8001f04:	42af      	cmp	r7, r5
 8001f06:	d900      	bls.n	8001f0a <__aeabi_ddiv+0x50a>
 8001f08:	e660      	b.n	8001bcc <__aeabi_ddiv+0x1cc>
 8001f0a:	4282      	cmp	r2, r0
 8001f0c:	d804      	bhi.n	8001f18 <__aeabi_ddiv+0x518>
 8001f0e:	d000      	beq.n	8001f12 <__aeabi_ddiv+0x512>
 8001f10:	e65c      	b.n	8001bcc <__aeabi_ddiv+0x1cc>
 8001f12:	42ae      	cmp	r6, r5
 8001f14:	d800      	bhi.n	8001f18 <__aeabi_ddiv+0x518>
 8001f16:	e659      	b.n	8001bcc <__aeabi_ddiv+0x1cc>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	425b      	negs	r3, r3
 8001f1c:	469c      	mov	ip, r3
 8001f1e:	9b00      	ldr	r3, [sp, #0]
 8001f20:	44e0      	add	r8, ip
 8001f22:	469c      	mov	ip, r3
 8001f24:	4465      	add	r5, ip
 8001f26:	429d      	cmp	r5, r3
 8001f28:	419b      	sbcs	r3, r3
 8001f2a:	425b      	negs	r3, r3
 8001f2c:	191b      	adds	r3, r3, r4
 8001f2e:	18c0      	adds	r0, r0, r3
 8001f30:	e64d      	b.n	8001bce <__aeabi_ddiv+0x1ce>
 8001f32:	428a      	cmp	r2, r1
 8001f34:	d800      	bhi.n	8001f38 <__aeabi_ddiv+0x538>
 8001f36:	e60e      	b.n	8001b56 <__aeabi_ddiv+0x156>
 8001f38:	1e83      	subs	r3, r0, #2
 8001f3a:	1909      	adds	r1, r1, r4
 8001f3c:	e60b      	b.n	8001b56 <__aeabi_ddiv+0x156>
 8001f3e:	428a      	cmp	r2, r1
 8001f40:	d800      	bhi.n	8001f44 <__aeabi_ddiv+0x544>
 8001f42:	e5f4      	b.n	8001b2e <__aeabi_ddiv+0x12e>
 8001f44:	1e83      	subs	r3, r0, #2
 8001f46:	4698      	mov	r8, r3
 8001f48:	1909      	adds	r1, r1, r4
 8001f4a:	e5f0      	b.n	8001b2e <__aeabi_ddiv+0x12e>
 8001f4c:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <__aeabi_ddiv+0x5e4>)
 8001f4e:	0028      	movs	r0, r5
 8001f50:	4459      	add	r1, fp
 8001f52:	408d      	lsls	r5, r1
 8001f54:	4642      	mov	r2, r8
 8001f56:	408a      	lsls	r2, r1
 8001f58:	1e69      	subs	r1, r5, #1
 8001f5a:	418d      	sbcs	r5, r1
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	40d8      	lsrs	r0, r3
 8001f60:	40d9      	lsrs	r1, r3
 8001f62:	4302      	orrs	r2, r0
 8001f64:	432a      	orrs	r2, r5
 8001f66:	000b      	movs	r3, r1
 8001f68:	0751      	lsls	r1, r2, #29
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_ddiv+0x56e>
 8001f6c:	e751      	b.n	8001e12 <__aeabi_ddiv+0x412>
 8001f6e:	210f      	movs	r1, #15
 8001f70:	4011      	ands	r1, r2
 8001f72:	2904      	cmp	r1, #4
 8001f74:	d000      	beq.n	8001f78 <__aeabi_ddiv+0x578>
 8001f76:	e746      	b.n	8001e06 <__aeabi_ddiv+0x406>
 8001f78:	e74b      	b.n	8001e12 <__aeabi_ddiv+0x412>
 8001f7a:	0005      	movs	r5, r0
 8001f7c:	428e      	cmp	r6, r1
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_ddiv+0x582>
 8001f80:	e66a      	b.n	8001c58 <__aeabi_ddiv+0x258>
 8001f82:	9a00      	ldr	r2, [sp, #0]
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d000      	beq.n	8001f8a <__aeabi_ddiv+0x58a>
 8001f88:	e666      	b.n	8001c58 <__aeabi_ddiv+0x258>
 8001f8a:	e667      	b.n	8001c5c <__aeabi_ddiv+0x25c>
 8001f8c:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <__aeabi_ddiv+0x5e8>)
 8001f8e:	445a      	add	r2, fp
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_ddiv+0x596>
 8001f94:	e710      	b.n	8001db8 <__aeabi_ddiv+0x3b8>
 8001f96:	2301      	movs	r3, #1
 8001f98:	2500      	movs	r5, #0
 8001f9a:	4498      	add	r8, r3
 8001f9c:	e667      	b.n	8001c6e <__aeabi_ddiv+0x26e>
 8001f9e:	075d      	lsls	r5, r3, #29
 8001fa0:	025b      	lsls	r3, r3, #9
 8001fa2:	0b1c      	lsrs	r4, r3, #12
 8001fa4:	08d2      	lsrs	r2, r2, #3
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	4315      	orrs	r5, r2
 8001faa:	e580      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001fac:	9800      	ldr	r0, [sp, #0]
 8001fae:	3d02      	subs	r5, #2
 8001fb0:	0042      	lsls	r2, r0, #1
 8001fb2:	4282      	cmp	r2, r0
 8001fb4:	41bf      	sbcs	r7, r7
 8001fb6:	427f      	negs	r7, r7
 8001fb8:	193c      	adds	r4, r7, r4
 8001fba:	1936      	adds	r6, r6, r4
 8001fbc:	9200      	str	r2, [sp, #0]
 8001fbe:	e7dd      	b.n	8001f7c <__aeabi_ddiv+0x57c>
 8001fc0:	2480      	movs	r4, #128	; 0x80
 8001fc2:	4643      	mov	r3, r8
 8001fc4:	0324      	lsls	r4, r4, #12
 8001fc6:	431c      	orrs	r4, r3
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__aeabi_ddiv+0x5dc>)
 8001fcc:	0b24      	lsrs	r4, r4, #12
 8001fce:	e56e      	b.n	8001aae <__aeabi_ddiv+0xae>
 8001fd0:	9a00      	ldr	r2, [sp, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3ea      	bcc.n	8001fac <__aeabi_ddiv+0x5ac>
 8001fd6:	0005      	movs	r5, r0
 8001fd8:	e7d3      	b.n	8001f82 <__aeabi_ddiv+0x582>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff
 8001fe0:	0000043e 	.word	0x0000043e
 8001fe4:	0000041e 	.word	0x0000041e
 8001fe8:	000003ff 	.word	0x000003ff

08001fec <__eqdf2>:
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	464e      	mov	r6, r9
 8001ff0:	4645      	mov	r5, r8
 8001ff2:	46de      	mov	lr, fp
 8001ff4:	4657      	mov	r7, sl
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	b5e0      	push	{r5, r6, r7, lr}
 8001ffa:	0017      	movs	r7, r2
 8001ffc:	031a      	lsls	r2, r3, #12
 8001ffe:	0b12      	lsrs	r2, r2, #12
 8002000:	0005      	movs	r5, r0
 8002002:	4684      	mov	ip, r0
 8002004:	4819      	ldr	r0, [pc, #100]	; (800206c <__eqdf2+0x80>)
 8002006:	030e      	lsls	r6, r1, #12
 8002008:	004c      	lsls	r4, r1, #1
 800200a:	4691      	mov	r9, r2
 800200c:	005a      	lsls	r2, r3, #1
 800200e:	0fdb      	lsrs	r3, r3, #31
 8002010:	469b      	mov	fp, r3
 8002012:	0b36      	lsrs	r6, r6, #12
 8002014:	0d64      	lsrs	r4, r4, #21
 8002016:	0fc9      	lsrs	r1, r1, #31
 8002018:	0d52      	lsrs	r2, r2, #21
 800201a:	4284      	cmp	r4, r0
 800201c:	d019      	beq.n	8002052 <__eqdf2+0x66>
 800201e:	4282      	cmp	r2, r0
 8002020:	d010      	beq.n	8002044 <__eqdf2+0x58>
 8002022:	2001      	movs	r0, #1
 8002024:	4294      	cmp	r4, r2
 8002026:	d10e      	bne.n	8002046 <__eqdf2+0x5a>
 8002028:	454e      	cmp	r6, r9
 800202a:	d10c      	bne.n	8002046 <__eqdf2+0x5a>
 800202c:	2001      	movs	r0, #1
 800202e:	45c4      	cmp	ip, r8
 8002030:	d109      	bne.n	8002046 <__eqdf2+0x5a>
 8002032:	4559      	cmp	r1, fp
 8002034:	d017      	beq.n	8002066 <__eqdf2+0x7a>
 8002036:	2c00      	cmp	r4, #0
 8002038:	d105      	bne.n	8002046 <__eqdf2+0x5a>
 800203a:	0030      	movs	r0, r6
 800203c:	4328      	orrs	r0, r5
 800203e:	1e43      	subs	r3, r0, #1
 8002040:	4198      	sbcs	r0, r3
 8002042:	e000      	b.n	8002046 <__eqdf2+0x5a>
 8002044:	2001      	movs	r0, #1
 8002046:	bcf0      	pop	{r4, r5, r6, r7}
 8002048:	46bb      	mov	fp, r7
 800204a:	46b2      	mov	sl, r6
 800204c:	46a9      	mov	r9, r5
 800204e:	46a0      	mov	r8, r4
 8002050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002052:	0033      	movs	r3, r6
 8002054:	2001      	movs	r0, #1
 8002056:	432b      	orrs	r3, r5
 8002058:	d1f5      	bne.n	8002046 <__eqdf2+0x5a>
 800205a:	42a2      	cmp	r2, r4
 800205c:	d1f3      	bne.n	8002046 <__eqdf2+0x5a>
 800205e:	464b      	mov	r3, r9
 8002060:	433b      	orrs	r3, r7
 8002062:	d1f0      	bne.n	8002046 <__eqdf2+0x5a>
 8002064:	e7e2      	b.n	800202c <__eqdf2+0x40>
 8002066:	2000      	movs	r0, #0
 8002068:	e7ed      	b.n	8002046 <__eqdf2+0x5a>
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	000007ff 	.word	0x000007ff

08002070 <__gedf2>:
 8002070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002072:	4647      	mov	r7, r8
 8002074:	46ce      	mov	lr, r9
 8002076:	0004      	movs	r4, r0
 8002078:	0018      	movs	r0, r3
 800207a:	0016      	movs	r6, r2
 800207c:	031b      	lsls	r3, r3, #12
 800207e:	0b1b      	lsrs	r3, r3, #12
 8002080:	4d2d      	ldr	r5, [pc, #180]	; (8002138 <__gedf2+0xc8>)
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	4699      	mov	r9, r3
 8002086:	b580      	push	{r7, lr}
 8002088:	0043      	lsls	r3, r0, #1
 800208a:	030f      	lsls	r7, r1, #12
 800208c:	46a4      	mov	ip, r4
 800208e:	46b0      	mov	r8, r6
 8002090:	0b3f      	lsrs	r7, r7, #12
 8002092:	0d52      	lsrs	r2, r2, #21
 8002094:	0fc9      	lsrs	r1, r1, #31
 8002096:	0d5b      	lsrs	r3, r3, #21
 8002098:	0fc0      	lsrs	r0, r0, #31
 800209a:	42aa      	cmp	r2, r5
 800209c:	d021      	beq.n	80020e2 <__gedf2+0x72>
 800209e:	42ab      	cmp	r3, r5
 80020a0:	d013      	beq.n	80020ca <__gedf2+0x5a>
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d122      	bne.n	80020ec <__gedf2+0x7c>
 80020a6:	433c      	orrs	r4, r7
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <__gedf2+0x42>
 80020ac:	464d      	mov	r5, r9
 80020ae:	432e      	orrs	r6, r5
 80020b0:	d022      	beq.n	80020f8 <__gedf2+0x88>
 80020b2:	2c00      	cmp	r4, #0
 80020b4:	d010      	beq.n	80020d8 <__gedf2+0x68>
 80020b6:	4281      	cmp	r1, r0
 80020b8:	d022      	beq.n	8002100 <__gedf2+0x90>
 80020ba:	2002      	movs	r0, #2
 80020bc:	3901      	subs	r1, #1
 80020be:	4008      	ands	r0, r1
 80020c0:	3801      	subs	r0, #1
 80020c2:	bcc0      	pop	{r6, r7}
 80020c4:	46b9      	mov	r9, r7
 80020c6:	46b0      	mov	r8, r6
 80020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ca:	464d      	mov	r5, r9
 80020cc:	432e      	orrs	r6, r5
 80020ce:	d129      	bne.n	8002124 <__gedf2+0xb4>
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	d1f0      	bne.n	80020b6 <__gedf2+0x46>
 80020d4:	433c      	orrs	r4, r7
 80020d6:	d1ee      	bne.n	80020b6 <__gedf2+0x46>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d1f2      	bne.n	80020c2 <__gedf2+0x52>
 80020dc:	2001      	movs	r0, #1
 80020de:	4240      	negs	r0, r0
 80020e0:	e7ef      	b.n	80020c2 <__gedf2+0x52>
 80020e2:	003d      	movs	r5, r7
 80020e4:	4325      	orrs	r5, r4
 80020e6:	d11d      	bne.n	8002124 <__gedf2+0xb4>
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d0ee      	beq.n	80020ca <__gedf2+0x5a>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e2      	bne.n	80020b6 <__gedf2+0x46>
 80020f0:	464c      	mov	r4, r9
 80020f2:	4326      	orrs	r6, r4
 80020f4:	d1df      	bne.n	80020b6 <__gedf2+0x46>
 80020f6:	e7e0      	b.n	80020ba <__gedf2+0x4a>
 80020f8:	2000      	movs	r0, #0
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d0e1      	beq.n	80020c2 <__gedf2+0x52>
 80020fe:	e7dc      	b.n	80020ba <__gedf2+0x4a>
 8002100:	429a      	cmp	r2, r3
 8002102:	dc0a      	bgt.n	800211a <__gedf2+0xaa>
 8002104:	dbe8      	blt.n	80020d8 <__gedf2+0x68>
 8002106:	454f      	cmp	r7, r9
 8002108:	d8d7      	bhi.n	80020ba <__gedf2+0x4a>
 800210a:	d00e      	beq.n	800212a <__gedf2+0xba>
 800210c:	2000      	movs	r0, #0
 800210e:	454f      	cmp	r7, r9
 8002110:	d2d7      	bcs.n	80020c2 <__gedf2+0x52>
 8002112:	2900      	cmp	r1, #0
 8002114:	d0e2      	beq.n	80020dc <__gedf2+0x6c>
 8002116:	0008      	movs	r0, r1
 8002118:	e7d3      	b.n	80020c2 <__gedf2+0x52>
 800211a:	4243      	negs	r3, r0
 800211c:	4158      	adcs	r0, r3
 800211e:	0040      	lsls	r0, r0, #1
 8002120:	3801      	subs	r0, #1
 8002122:	e7ce      	b.n	80020c2 <__gedf2+0x52>
 8002124:	2002      	movs	r0, #2
 8002126:	4240      	negs	r0, r0
 8002128:	e7cb      	b.n	80020c2 <__gedf2+0x52>
 800212a:	45c4      	cmp	ip, r8
 800212c:	d8c5      	bhi.n	80020ba <__gedf2+0x4a>
 800212e:	2000      	movs	r0, #0
 8002130:	45c4      	cmp	ip, r8
 8002132:	d2c6      	bcs.n	80020c2 <__gedf2+0x52>
 8002134:	e7ed      	b.n	8002112 <__gedf2+0xa2>
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	000007ff 	.word	0x000007ff

0800213c <__ledf2>:
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	4647      	mov	r7, r8
 8002140:	46ce      	mov	lr, r9
 8002142:	0004      	movs	r4, r0
 8002144:	0018      	movs	r0, r3
 8002146:	0016      	movs	r6, r2
 8002148:	031b      	lsls	r3, r3, #12
 800214a:	0b1b      	lsrs	r3, r3, #12
 800214c:	4d2c      	ldr	r5, [pc, #176]	; (8002200 <__ledf2+0xc4>)
 800214e:	004a      	lsls	r2, r1, #1
 8002150:	4699      	mov	r9, r3
 8002152:	b580      	push	{r7, lr}
 8002154:	0043      	lsls	r3, r0, #1
 8002156:	030f      	lsls	r7, r1, #12
 8002158:	46a4      	mov	ip, r4
 800215a:	46b0      	mov	r8, r6
 800215c:	0b3f      	lsrs	r7, r7, #12
 800215e:	0d52      	lsrs	r2, r2, #21
 8002160:	0fc9      	lsrs	r1, r1, #31
 8002162:	0d5b      	lsrs	r3, r3, #21
 8002164:	0fc0      	lsrs	r0, r0, #31
 8002166:	42aa      	cmp	r2, r5
 8002168:	d00d      	beq.n	8002186 <__ledf2+0x4a>
 800216a:	42ab      	cmp	r3, r5
 800216c:	d010      	beq.n	8002190 <__ledf2+0x54>
 800216e:	2a00      	cmp	r2, #0
 8002170:	d127      	bne.n	80021c2 <__ledf2+0x86>
 8002172:	433c      	orrs	r4, r7
 8002174:	2b00      	cmp	r3, #0
 8002176:	d111      	bne.n	800219c <__ledf2+0x60>
 8002178:	464d      	mov	r5, r9
 800217a:	432e      	orrs	r6, r5
 800217c:	d10e      	bne.n	800219c <__ledf2+0x60>
 800217e:	2000      	movs	r0, #0
 8002180:	2c00      	cmp	r4, #0
 8002182:	d015      	beq.n	80021b0 <__ledf2+0x74>
 8002184:	e00e      	b.n	80021a4 <__ledf2+0x68>
 8002186:	003d      	movs	r5, r7
 8002188:	4325      	orrs	r5, r4
 800218a:	d110      	bne.n	80021ae <__ledf2+0x72>
 800218c:	4293      	cmp	r3, r2
 800218e:	d118      	bne.n	80021c2 <__ledf2+0x86>
 8002190:	464d      	mov	r5, r9
 8002192:	432e      	orrs	r6, r5
 8002194:	d10b      	bne.n	80021ae <__ledf2+0x72>
 8002196:	2a00      	cmp	r2, #0
 8002198:	d102      	bne.n	80021a0 <__ledf2+0x64>
 800219a:	433c      	orrs	r4, r7
 800219c:	2c00      	cmp	r4, #0
 800219e:	d00b      	beq.n	80021b8 <__ledf2+0x7c>
 80021a0:	4281      	cmp	r1, r0
 80021a2:	d014      	beq.n	80021ce <__ledf2+0x92>
 80021a4:	2002      	movs	r0, #2
 80021a6:	3901      	subs	r1, #1
 80021a8:	4008      	ands	r0, r1
 80021aa:	3801      	subs	r0, #1
 80021ac:	e000      	b.n	80021b0 <__ledf2+0x74>
 80021ae:	2002      	movs	r0, #2
 80021b0:	bcc0      	pop	{r6, r7}
 80021b2:	46b9      	mov	r9, r7
 80021b4:	46b0      	mov	r8, r6
 80021b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d1f9      	bne.n	80021b0 <__ledf2+0x74>
 80021bc:	2001      	movs	r0, #1
 80021be:	4240      	negs	r0, r0
 80021c0:	e7f6      	b.n	80021b0 <__ledf2+0x74>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ec      	bne.n	80021a0 <__ledf2+0x64>
 80021c6:	464c      	mov	r4, r9
 80021c8:	4326      	orrs	r6, r4
 80021ca:	d1e9      	bne.n	80021a0 <__ledf2+0x64>
 80021cc:	e7ea      	b.n	80021a4 <__ledf2+0x68>
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dd04      	ble.n	80021dc <__ledf2+0xa0>
 80021d2:	4243      	negs	r3, r0
 80021d4:	4158      	adcs	r0, r3
 80021d6:	0040      	lsls	r0, r0, #1
 80021d8:	3801      	subs	r0, #1
 80021da:	e7e9      	b.n	80021b0 <__ledf2+0x74>
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbeb      	blt.n	80021b8 <__ledf2+0x7c>
 80021e0:	454f      	cmp	r7, r9
 80021e2:	d8df      	bhi.n	80021a4 <__ledf2+0x68>
 80021e4:	d006      	beq.n	80021f4 <__ledf2+0xb8>
 80021e6:	2000      	movs	r0, #0
 80021e8:	454f      	cmp	r7, r9
 80021ea:	d2e1      	bcs.n	80021b0 <__ledf2+0x74>
 80021ec:	2900      	cmp	r1, #0
 80021ee:	d0e5      	beq.n	80021bc <__ledf2+0x80>
 80021f0:	0008      	movs	r0, r1
 80021f2:	e7dd      	b.n	80021b0 <__ledf2+0x74>
 80021f4:	45c4      	cmp	ip, r8
 80021f6:	d8d5      	bhi.n	80021a4 <__ledf2+0x68>
 80021f8:	2000      	movs	r0, #0
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d2d8      	bcs.n	80021b0 <__ledf2+0x74>
 80021fe:	e7f5      	b.n	80021ec <__ledf2+0xb0>
 8002200:	000007ff 	.word	0x000007ff

08002204 <__aeabi_dmul>:
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	4657      	mov	r7, sl
 8002208:	464e      	mov	r6, r9
 800220a:	4645      	mov	r5, r8
 800220c:	46de      	mov	lr, fp
 800220e:	b5e0      	push	{r5, r6, r7, lr}
 8002210:	4698      	mov	r8, r3
 8002212:	030c      	lsls	r4, r1, #12
 8002214:	004b      	lsls	r3, r1, #1
 8002216:	0006      	movs	r6, r0
 8002218:	4692      	mov	sl, r2
 800221a:	b087      	sub	sp, #28
 800221c:	0b24      	lsrs	r4, r4, #12
 800221e:	0d5b      	lsrs	r3, r3, #21
 8002220:	0fcf      	lsrs	r7, r1, #31
 8002222:	2b00      	cmp	r3, #0
 8002224:	d100      	bne.n	8002228 <__aeabi_dmul+0x24>
 8002226:	e15c      	b.n	80024e2 <__aeabi_dmul+0x2de>
 8002228:	4ad9      	ldr	r2, [pc, #868]	; (8002590 <__aeabi_dmul+0x38c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d100      	bne.n	8002230 <__aeabi_dmul+0x2c>
 800222e:	e175      	b.n	800251c <__aeabi_dmul+0x318>
 8002230:	0f42      	lsrs	r2, r0, #29
 8002232:	00e4      	lsls	r4, r4, #3
 8002234:	4314      	orrs	r4, r2
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	0412      	lsls	r2, r2, #16
 800223a:	4314      	orrs	r4, r2
 800223c:	4ad5      	ldr	r2, [pc, #852]	; (8002594 <__aeabi_dmul+0x390>)
 800223e:	00c5      	lsls	r5, r0, #3
 8002240:	4694      	mov	ip, r2
 8002242:	4463      	add	r3, ip
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2300      	movs	r3, #0
 8002248:	4699      	mov	r9, r3
 800224a:	469b      	mov	fp, r3
 800224c:	4643      	mov	r3, r8
 800224e:	4642      	mov	r2, r8
 8002250:	031e      	lsls	r6, r3, #12
 8002252:	0fd2      	lsrs	r2, r2, #31
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4650      	mov	r0, sl
 8002258:	4690      	mov	r8, r2
 800225a:	0b36      	lsrs	r6, r6, #12
 800225c:	0d5b      	lsrs	r3, r3, #21
 800225e:	d100      	bne.n	8002262 <__aeabi_dmul+0x5e>
 8002260:	e120      	b.n	80024a4 <__aeabi_dmul+0x2a0>
 8002262:	4acb      	ldr	r2, [pc, #812]	; (8002590 <__aeabi_dmul+0x38c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d100      	bne.n	800226a <__aeabi_dmul+0x66>
 8002268:	e162      	b.n	8002530 <__aeabi_dmul+0x32c>
 800226a:	49ca      	ldr	r1, [pc, #808]	; (8002594 <__aeabi_dmul+0x390>)
 800226c:	0f42      	lsrs	r2, r0, #29
 800226e:	468c      	mov	ip, r1
 8002270:	9900      	ldr	r1, [sp, #0]
 8002272:	4463      	add	r3, ip
 8002274:	00f6      	lsls	r6, r6, #3
 8002276:	468c      	mov	ip, r1
 8002278:	4316      	orrs	r6, r2
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	449c      	add	ip, r3
 800227e:	0412      	lsls	r2, r2, #16
 8002280:	4663      	mov	r3, ip
 8002282:	4316      	orrs	r6, r2
 8002284:	00c2      	lsls	r2, r0, #3
 8002286:	2000      	movs	r0, #0
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	9900      	ldr	r1, [sp, #0]
 800228c:	4643      	mov	r3, r8
 800228e:	3101      	adds	r1, #1
 8002290:	468c      	mov	ip, r1
 8002292:	4649      	mov	r1, r9
 8002294:	407b      	eors	r3, r7
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	290f      	cmp	r1, #15
 800229a:	d826      	bhi.n	80022ea <__aeabi_dmul+0xe6>
 800229c:	4bbe      	ldr	r3, [pc, #760]	; (8002598 <__aeabi_dmul+0x394>)
 800229e:	0089      	lsls	r1, r1, #2
 80022a0:	5859      	ldr	r1, [r3, r1]
 80022a2:	468f      	mov	pc, r1
 80022a4:	4643      	mov	r3, r8
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	0034      	movs	r4, r6
 80022aa:	0015      	movs	r5, r2
 80022ac:	4683      	mov	fp, r0
 80022ae:	465b      	mov	r3, fp
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d016      	beq.n	80022e2 <__aeabi_dmul+0xde>
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d100      	bne.n	80022ba <__aeabi_dmul+0xb6>
 80022b8:	e203      	b.n	80026c2 <__aeabi_dmul+0x4be>
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d000      	beq.n	80022c0 <__aeabi_dmul+0xbc>
 80022be:	e0cd      	b.n	800245c <__aeabi_dmul+0x258>
 80022c0:	2200      	movs	r2, #0
 80022c2:	2400      	movs	r4, #0
 80022c4:	2500      	movs	r5, #0
 80022c6:	9b01      	ldr	r3, [sp, #4]
 80022c8:	0512      	lsls	r2, r2, #20
 80022ca:	4322      	orrs	r2, r4
 80022cc:	07db      	lsls	r3, r3, #31
 80022ce:	431a      	orrs	r2, r3
 80022d0:	0028      	movs	r0, r5
 80022d2:	0011      	movs	r1, r2
 80022d4:	b007      	add	sp, #28
 80022d6:	bcf0      	pop	{r4, r5, r6, r7}
 80022d8:	46bb      	mov	fp, r7
 80022da:	46b2      	mov	sl, r6
 80022dc:	46a9      	mov	r9, r5
 80022de:	46a0      	mov	r8, r4
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	2400      	movs	r4, #0
 80022e4:	2500      	movs	r5, #0
 80022e6:	4aaa      	ldr	r2, [pc, #680]	; (8002590 <__aeabi_dmul+0x38c>)
 80022e8:	e7ed      	b.n	80022c6 <__aeabi_dmul+0xc2>
 80022ea:	0c28      	lsrs	r0, r5, #16
 80022ec:	042d      	lsls	r5, r5, #16
 80022ee:	0c2d      	lsrs	r5, r5, #16
 80022f0:	002b      	movs	r3, r5
 80022f2:	0c11      	lsrs	r1, r2, #16
 80022f4:	0412      	lsls	r2, r2, #16
 80022f6:	0c12      	lsrs	r2, r2, #16
 80022f8:	4353      	muls	r3, r2
 80022fa:	4698      	mov	r8, r3
 80022fc:	0013      	movs	r3, r2
 80022fe:	002f      	movs	r7, r5
 8002300:	4343      	muls	r3, r0
 8002302:	4699      	mov	r9, r3
 8002304:	434f      	muls	r7, r1
 8002306:	444f      	add	r7, r9
 8002308:	46bb      	mov	fp, r7
 800230a:	4647      	mov	r7, r8
 800230c:	000b      	movs	r3, r1
 800230e:	0c3f      	lsrs	r7, r7, #16
 8002310:	46ba      	mov	sl, r7
 8002312:	4343      	muls	r3, r0
 8002314:	44da      	add	sl, fp
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	45d1      	cmp	r9, sl
 800231a:	d904      	bls.n	8002326 <__aeabi_dmul+0x122>
 800231c:	2780      	movs	r7, #128	; 0x80
 800231e:	027f      	lsls	r7, r7, #9
 8002320:	46b9      	mov	r9, r7
 8002322:	444b      	add	r3, r9
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	4653      	mov	r3, sl
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	469b      	mov	fp, r3
 800232c:	4653      	mov	r3, sl
 800232e:	041f      	lsls	r7, r3, #16
 8002330:	4643      	mov	r3, r8
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	4698      	mov	r8, r3
 8002338:	003b      	movs	r3, r7
 800233a:	4443      	add	r3, r8
 800233c:	9304      	str	r3, [sp, #16]
 800233e:	0c33      	lsrs	r3, r6, #16
 8002340:	0436      	lsls	r6, r6, #16
 8002342:	0c36      	lsrs	r6, r6, #16
 8002344:	4698      	mov	r8, r3
 8002346:	0033      	movs	r3, r6
 8002348:	4343      	muls	r3, r0
 800234a:	4699      	mov	r9, r3
 800234c:	4643      	mov	r3, r8
 800234e:	4343      	muls	r3, r0
 8002350:	002f      	movs	r7, r5
 8002352:	469a      	mov	sl, r3
 8002354:	4643      	mov	r3, r8
 8002356:	4377      	muls	r7, r6
 8002358:	435d      	muls	r5, r3
 800235a:	0c38      	lsrs	r0, r7, #16
 800235c:	444d      	add	r5, r9
 800235e:	1945      	adds	r5, r0, r5
 8002360:	45a9      	cmp	r9, r5
 8002362:	d903      	bls.n	800236c <__aeabi_dmul+0x168>
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	025b      	lsls	r3, r3, #9
 8002368:	4699      	mov	r9, r3
 800236a:	44ca      	add	sl, r9
 800236c:	043f      	lsls	r7, r7, #16
 800236e:	0c28      	lsrs	r0, r5, #16
 8002370:	0c3f      	lsrs	r7, r7, #16
 8002372:	042d      	lsls	r5, r5, #16
 8002374:	19ed      	adds	r5, r5, r7
 8002376:	0c27      	lsrs	r7, r4, #16
 8002378:	0424      	lsls	r4, r4, #16
 800237a:	0c24      	lsrs	r4, r4, #16
 800237c:	0003      	movs	r3, r0
 800237e:	0020      	movs	r0, r4
 8002380:	4350      	muls	r0, r2
 8002382:	437a      	muls	r2, r7
 8002384:	4691      	mov	r9, r2
 8002386:	003a      	movs	r2, r7
 8002388:	4453      	add	r3, sl
 800238a:	9305      	str	r3, [sp, #20]
 800238c:	0c03      	lsrs	r3, r0, #16
 800238e:	469a      	mov	sl, r3
 8002390:	434a      	muls	r2, r1
 8002392:	4361      	muls	r1, r4
 8002394:	4449      	add	r1, r9
 8002396:	4451      	add	r1, sl
 8002398:	44ab      	add	fp, r5
 800239a:	4589      	cmp	r9, r1
 800239c:	d903      	bls.n	80023a6 <__aeabi_dmul+0x1a2>
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	025b      	lsls	r3, r3, #9
 80023a2:	4699      	mov	r9, r3
 80023a4:	444a      	add	r2, r9
 80023a6:	0400      	lsls	r0, r0, #16
 80023a8:	0c0b      	lsrs	r3, r1, #16
 80023aa:	0c00      	lsrs	r0, r0, #16
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	1809      	adds	r1, r1, r0
 80023b0:	0020      	movs	r0, r4
 80023b2:	4699      	mov	r9, r3
 80023b4:	4643      	mov	r3, r8
 80023b6:	4370      	muls	r0, r6
 80023b8:	435c      	muls	r4, r3
 80023ba:	437e      	muls	r6, r7
 80023bc:	435f      	muls	r7, r3
 80023be:	0c03      	lsrs	r3, r0, #16
 80023c0:	4698      	mov	r8, r3
 80023c2:	19a4      	adds	r4, r4, r6
 80023c4:	4444      	add	r4, r8
 80023c6:	444a      	add	r2, r9
 80023c8:	9703      	str	r7, [sp, #12]
 80023ca:	42a6      	cmp	r6, r4
 80023cc:	d904      	bls.n	80023d8 <__aeabi_dmul+0x1d4>
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	4698      	mov	r8, r3
 80023d4:	4447      	add	r7, r8
 80023d6:	9703      	str	r7, [sp, #12]
 80023d8:	0423      	lsls	r3, r4, #16
 80023da:	9e02      	ldr	r6, [sp, #8]
 80023dc:	469a      	mov	sl, r3
 80023de:	9b05      	ldr	r3, [sp, #20]
 80023e0:	445e      	add	r6, fp
 80023e2:	4698      	mov	r8, r3
 80023e4:	42ae      	cmp	r6, r5
 80023e6:	41ad      	sbcs	r5, r5
 80023e8:	1876      	adds	r6, r6, r1
 80023ea:	428e      	cmp	r6, r1
 80023ec:	4189      	sbcs	r1, r1
 80023ee:	0400      	lsls	r0, r0, #16
 80023f0:	0c00      	lsrs	r0, r0, #16
 80023f2:	4450      	add	r0, sl
 80023f4:	4440      	add	r0, r8
 80023f6:	426d      	negs	r5, r5
 80023f8:	1947      	adds	r7, r0, r5
 80023fa:	46b8      	mov	r8, r7
 80023fc:	4693      	mov	fp, r2
 80023fe:	4249      	negs	r1, r1
 8002400:	4689      	mov	r9, r1
 8002402:	44c3      	add	fp, r8
 8002404:	44d9      	add	r9, fp
 8002406:	4298      	cmp	r0, r3
 8002408:	4180      	sbcs	r0, r0
 800240a:	45a8      	cmp	r8, r5
 800240c:	41ad      	sbcs	r5, r5
 800240e:	4593      	cmp	fp, r2
 8002410:	4192      	sbcs	r2, r2
 8002412:	4589      	cmp	r9, r1
 8002414:	4189      	sbcs	r1, r1
 8002416:	426d      	negs	r5, r5
 8002418:	4240      	negs	r0, r0
 800241a:	4328      	orrs	r0, r5
 800241c:	0c24      	lsrs	r4, r4, #16
 800241e:	4252      	negs	r2, r2
 8002420:	4249      	negs	r1, r1
 8002422:	430a      	orrs	r2, r1
 8002424:	9b03      	ldr	r3, [sp, #12]
 8002426:	1900      	adds	r0, r0, r4
 8002428:	1880      	adds	r0, r0, r2
 800242a:	18c7      	adds	r7, r0, r3
 800242c:	464b      	mov	r3, r9
 800242e:	0ddc      	lsrs	r4, r3, #23
 8002430:	9b04      	ldr	r3, [sp, #16]
 8002432:	0275      	lsls	r5, r6, #9
 8002434:	431d      	orrs	r5, r3
 8002436:	1e6a      	subs	r2, r5, #1
 8002438:	4195      	sbcs	r5, r2
 800243a:	464b      	mov	r3, r9
 800243c:	0df6      	lsrs	r6, r6, #23
 800243e:	027f      	lsls	r7, r7, #9
 8002440:	4335      	orrs	r5, r6
 8002442:	025a      	lsls	r2, r3, #9
 8002444:	433c      	orrs	r4, r7
 8002446:	4315      	orrs	r5, r2
 8002448:	01fb      	lsls	r3, r7, #7
 800244a:	d400      	bmi.n	800244e <__aeabi_dmul+0x24a>
 800244c:	e11c      	b.n	8002688 <__aeabi_dmul+0x484>
 800244e:	2101      	movs	r1, #1
 8002450:	086a      	lsrs	r2, r5, #1
 8002452:	400d      	ands	r5, r1
 8002454:	4315      	orrs	r5, r2
 8002456:	07e2      	lsls	r2, r4, #31
 8002458:	4315      	orrs	r5, r2
 800245a:	0864      	lsrs	r4, r4, #1
 800245c:	494f      	ldr	r1, [pc, #316]	; (800259c <__aeabi_dmul+0x398>)
 800245e:	4461      	add	r1, ip
 8002460:	2900      	cmp	r1, #0
 8002462:	dc00      	bgt.n	8002466 <__aeabi_dmul+0x262>
 8002464:	e0b0      	b.n	80025c8 <__aeabi_dmul+0x3c4>
 8002466:	076b      	lsls	r3, r5, #29
 8002468:	d009      	beq.n	800247e <__aeabi_dmul+0x27a>
 800246a:	220f      	movs	r2, #15
 800246c:	402a      	ands	r2, r5
 800246e:	2a04      	cmp	r2, #4
 8002470:	d005      	beq.n	800247e <__aeabi_dmul+0x27a>
 8002472:	1d2a      	adds	r2, r5, #4
 8002474:	42aa      	cmp	r2, r5
 8002476:	41ad      	sbcs	r5, r5
 8002478:	426d      	negs	r5, r5
 800247a:	1964      	adds	r4, r4, r5
 800247c:	0015      	movs	r5, r2
 800247e:	01e3      	lsls	r3, r4, #7
 8002480:	d504      	bpl.n	800248c <__aeabi_dmul+0x288>
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <__aeabi_dmul+0x39c>)
 8002486:	00c9      	lsls	r1, r1, #3
 8002488:	4014      	ands	r4, r2
 800248a:	4461      	add	r1, ip
 800248c:	4a45      	ldr	r2, [pc, #276]	; (80025a4 <__aeabi_dmul+0x3a0>)
 800248e:	4291      	cmp	r1, r2
 8002490:	dd00      	ble.n	8002494 <__aeabi_dmul+0x290>
 8002492:	e726      	b.n	80022e2 <__aeabi_dmul+0xde>
 8002494:	0762      	lsls	r2, r4, #29
 8002496:	08ed      	lsrs	r5, r5, #3
 8002498:	0264      	lsls	r4, r4, #9
 800249a:	0549      	lsls	r1, r1, #21
 800249c:	4315      	orrs	r5, r2
 800249e:	0b24      	lsrs	r4, r4, #12
 80024a0:	0d4a      	lsrs	r2, r1, #21
 80024a2:	e710      	b.n	80022c6 <__aeabi_dmul+0xc2>
 80024a4:	4652      	mov	r2, sl
 80024a6:	4332      	orrs	r2, r6
 80024a8:	d100      	bne.n	80024ac <__aeabi_dmul+0x2a8>
 80024aa:	e07f      	b.n	80025ac <__aeabi_dmul+0x3a8>
 80024ac:	2e00      	cmp	r6, #0
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dmul+0x2ae>
 80024b0:	e0dc      	b.n	800266c <__aeabi_dmul+0x468>
 80024b2:	0030      	movs	r0, r6
 80024b4:	f000 fe1e 	bl	80030f4 <__clzsi2>
 80024b8:	0002      	movs	r2, r0
 80024ba:	3a0b      	subs	r2, #11
 80024bc:	231d      	movs	r3, #29
 80024be:	0001      	movs	r1, r0
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	4652      	mov	r2, sl
 80024c4:	3908      	subs	r1, #8
 80024c6:	40da      	lsrs	r2, r3
 80024c8:	408e      	lsls	r6, r1
 80024ca:	4316      	orrs	r6, r2
 80024cc:	4652      	mov	r2, sl
 80024ce:	408a      	lsls	r2, r1
 80024d0:	9b00      	ldr	r3, [sp, #0]
 80024d2:	4935      	ldr	r1, [pc, #212]	; (80025a8 <__aeabi_dmul+0x3a4>)
 80024d4:	1a18      	subs	r0, r3, r0
 80024d6:	0003      	movs	r3, r0
 80024d8:	468c      	mov	ip, r1
 80024da:	4463      	add	r3, ip
 80024dc:	2000      	movs	r0, #0
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	e6d3      	b.n	800228a <__aeabi_dmul+0x86>
 80024e2:	0025      	movs	r5, r4
 80024e4:	4305      	orrs	r5, r0
 80024e6:	d04a      	beq.n	800257e <__aeabi_dmul+0x37a>
 80024e8:	2c00      	cmp	r4, #0
 80024ea:	d100      	bne.n	80024ee <__aeabi_dmul+0x2ea>
 80024ec:	e0b0      	b.n	8002650 <__aeabi_dmul+0x44c>
 80024ee:	0020      	movs	r0, r4
 80024f0:	f000 fe00 	bl	80030f4 <__clzsi2>
 80024f4:	0001      	movs	r1, r0
 80024f6:	0002      	movs	r2, r0
 80024f8:	390b      	subs	r1, #11
 80024fa:	231d      	movs	r3, #29
 80024fc:	0010      	movs	r0, r2
 80024fe:	1a5b      	subs	r3, r3, r1
 8002500:	0031      	movs	r1, r6
 8002502:	0035      	movs	r5, r6
 8002504:	3808      	subs	r0, #8
 8002506:	4084      	lsls	r4, r0
 8002508:	40d9      	lsrs	r1, r3
 800250a:	4085      	lsls	r5, r0
 800250c:	430c      	orrs	r4, r1
 800250e:	4826      	ldr	r0, [pc, #152]	; (80025a8 <__aeabi_dmul+0x3a4>)
 8002510:	1a83      	subs	r3, r0, r2
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	4699      	mov	r9, r3
 8002518:	469b      	mov	fp, r3
 800251a:	e697      	b.n	800224c <__aeabi_dmul+0x48>
 800251c:	0005      	movs	r5, r0
 800251e:	4325      	orrs	r5, r4
 8002520:	d126      	bne.n	8002570 <__aeabi_dmul+0x36c>
 8002522:	2208      	movs	r2, #8
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2302      	movs	r3, #2
 8002528:	2400      	movs	r4, #0
 800252a:	4691      	mov	r9, r2
 800252c:	469b      	mov	fp, r3
 800252e:	e68d      	b.n	800224c <__aeabi_dmul+0x48>
 8002530:	4652      	mov	r2, sl
 8002532:	9b00      	ldr	r3, [sp, #0]
 8002534:	4332      	orrs	r2, r6
 8002536:	d110      	bne.n	800255a <__aeabi_dmul+0x356>
 8002538:	4915      	ldr	r1, [pc, #84]	; (8002590 <__aeabi_dmul+0x38c>)
 800253a:	2600      	movs	r6, #0
 800253c:	468c      	mov	ip, r1
 800253e:	4463      	add	r3, ip
 8002540:	4649      	mov	r1, r9
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2302      	movs	r3, #2
 8002546:	4319      	orrs	r1, r3
 8002548:	4689      	mov	r9, r1
 800254a:	2002      	movs	r0, #2
 800254c:	e69d      	b.n	800228a <__aeabi_dmul+0x86>
 800254e:	465b      	mov	r3, fp
 8002550:	9701      	str	r7, [sp, #4]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d000      	beq.n	8002558 <__aeabi_dmul+0x354>
 8002556:	e6ad      	b.n	80022b4 <__aeabi_dmul+0xb0>
 8002558:	e6c3      	b.n	80022e2 <__aeabi_dmul+0xde>
 800255a:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <__aeabi_dmul+0x38c>)
 800255c:	2003      	movs	r0, #3
 800255e:	4694      	mov	ip, r2
 8002560:	4463      	add	r3, ip
 8002562:	464a      	mov	r2, r9
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2303      	movs	r3, #3
 8002568:	431a      	orrs	r2, r3
 800256a:	4691      	mov	r9, r2
 800256c:	4652      	mov	r2, sl
 800256e:	e68c      	b.n	800228a <__aeabi_dmul+0x86>
 8002570:	220c      	movs	r2, #12
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2303      	movs	r3, #3
 8002576:	0005      	movs	r5, r0
 8002578:	4691      	mov	r9, r2
 800257a:	469b      	mov	fp, r3
 800257c:	e666      	b.n	800224c <__aeabi_dmul+0x48>
 800257e:	2304      	movs	r3, #4
 8002580:	4699      	mov	r9, r3
 8002582:	2300      	movs	r3, #0
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	2400      	movs	r4, #0
 800258a:	469b      	mov	fp, r3
 800258c:	e65e      	b.n	800224c <__aeabi_dmul+0x48>
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	000007ff 	.word	0x000007ff
 8002594:	fffffc01 	.word	0xfffffc01
 8002598:	0800fefc 	.word	0x0800fefc
 800259c:	000003ff 	.word	0x000003ff
 80025a0:	feffffff 	.word	0xfeffffff
 80025a4:	000007fe 	.word	0x000007fe
 80025a8:	fffffc0d 	.word	0xfffffc0d
 80025ac:	4649      	mov	r1, r9
 80025ae:	2301      	movs	r3, #1
 80025b0:	4319      	orrs	r1, r3
 80025b2:	4689      	mov	r9, r1
 80025b4:	2600      	movs	r6, #0
 80025b6:	2001      	movs	r0, #1
 80025b8:	e667      	b.n	800228a <__aeabi_dmul+0x86>
 80025ba:	2300      	movs	r3, #0
 80025bc:	2480      	movs	r4, #128	; 0x80
 80025be:	2500      	movs	r5, #0
 80025c0:	4a43      	ldr	r2, [pc, #268]	; (80026d0 <__aeabi_dmul+0x4cc>)
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	0324      	lsls	r4, r4, #12
 80025c6:	e67e      	b.n	80022c6 <__aeabi_dmul+0xc2>
 80025c8:	2001      	movs	r0, #1
 80025ca:	1a40      	subs	r0, r0, r1
 80025cc:	2838      	cmp	r0, #56	; 0x38
 80025ce:	dd00      	ble.n	80025d2 <__aeabi_dmul+0x3ce>
 80025d0:	e676      	b.n	80022c0 <__aeabi_dmul+0xbc>
 80025d2:	281f      	cmp	r0, #31
 80025d4:	dd5b      	ble.n	800268e <__aeabi_dmul+0x48a>
 80025d6:	221f      	movs	r2, #31
 80025d8:	0023      	movs	r3, r4
 80025da:	4252      	negs	r2, r2
 80025dc:	1a51      	subs	r1, r2, r1
 80025de:	40cb      	lsrs	r3, r1
 80025e0:	0019      	movs	r1, r3
 80025e2:	2820      	cmp	r0, #32
 80025e4:	d003      	beq.n	80025ee <__aeabi_dmul+0x3ea>
 80025e6:	4a3b      	ldr	r2, [pc, #236]	; (80026d4 <__aeabi_dmul+0x4d0>)
 80025e8:	4462      	add	r2, ip
 80025ea:	4094      	lsls	r4, r2
 80025ec:	4325      	orrs	r5, r4
 80025ee:	1e6a      	subs	r2, r5, #1
 80025f0:	4195      	sbcs	r5, r2
 80025f2:	002a      	movs	r2, r5
 80025f4:	430a      	orrs	r2, r1
 80025f6:	2107      	movs	r1, #7
 80025f8:	000d      	movs	r5, r1
 80025fa:	2400      	movs	r4, #0
 80025fc:	4015      	ands	r5, r2
 80025fe:	4211      	tst	r1, r2
 8002600:	d05b      	beq.n	80026ba <__aeabi_dmul+0x4b6>
 8002602:	210f      	movs	r1, #15
 8002604:	2400      	movs	r4, #0
 8002606:	4011      	ands	r1, r2
 8002608:	2904      	cmp	r1, #4
 800260a:	d053      	beq.n	80026b4 <__aeabi_dmul+0x4b0>
 800260c:	1d11      	adds	r1, r2, #4
 800260e:	4291      	cmp	r1, r2
 8002610:	4192      	sbcs	r2, r2
 8002612:	4252      	negs	r2, r2
 8002614:	18a4      	adds	r4, r4, r2
 8002616:	000a      	movs	r2, r1
 8002618:	0223      	lsls	r3, r4, #8
 800261a:	d54b      	bpl.n	80026b4 <__aeabi_dmul+0x4b0>
 800261c:	2201      	movs	r2, #1
 800261e:	2400      	movs	r4, #0
 8002620:	2500      	movs	r5, #0
 8002622:	e650      	b.n	80022c6 <__aeabi_dmul+0xc2>
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	031b      	lsls	r3, r3, #12
 8002628:	421c      	tst	r4, r3
 800262a:	d009      	beq.n	8002640 <__aeabi_dmul+0x43c>
 800262c:	421e      	tst	r6, r3
 800262e:	d107      	bne.n	8002640 <__aeabi_dmul+0x43c>
 8002630:	4333      	orrs	r3, r6
 8002632:	031c      	lsls	r4, r3, #12
 8002634:	4643      	mov	r3, r8
 8002636:	0015      	movs	r5, r2
 8002638:	0b24      	lsrs	r4, r4, #12
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <__aeabi_dmul+0x4cc>)
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	e642      	b.n	80022c6 <__aeabi_dmul+0xc2>
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	0312      	lsls	r2, r2, #12
 8002644:	4314      	orrs	r4, r2
 8002646:	0324      	lsls	r4, r4, #12
 8002648:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <__aeabi_dmul+0x4cc>)
 800264a:	0b24      	lsrs	r4, r4, #12
 800264c:	9701      	str	r7, [sp, #4]
 800264e:	e63a      	b.n	80022c6 <__aeabi_dmul+0xc2>
 8002650:	f000 fd50 	bl	80030f4 <__clzsi2>
 8002654:	0001      	movs	r1, r0
 8002656:	0002      	movs	r2, r0
 8002658:	3115      	adds	r1, #21
 800265a:	3220      	adds	r2, #32
 800265c:	291c      	cmp	r1, #28
 800265e:	dc00      	bgt.n	8002662 <__aeabi_dmul+0x45e>
 8002660:	e74b      	b.n	80024fa <__aeabi_dmul+0x2f6>
 8002662:	0034      	movs	r4, r6
 8002664:	3808      	subs	r0, #8
 8002666:	2500      	movs	r5, #0
 8002668:	4084      	lsls	r4, r0
 800266a:	e750      	b.n	800250e <__aeabi_dmul+0x30a>
 800266c:	f000 fd42 	bl	80030f4 <__clzsi2>
 8002670:	0003      	movs	r3, r0
 8002672:	001a      	movs	r2, r3
 8002674:	3215      	adds	r2, #21
 8002676:	3020      	adds	r0, #32
 8002678:	2a1c      	cmp	r2, #28
 800267a:	dc00      	bgt.n	800267e <__aeabi_dmul+0x47a>
 800267c:	e71e      	b.n	80024bc <__aeabi_dmul+0x2b8>
 800267e:	4656      	mov	r6, sl
 8002680:	3b08      	subs	r3, #8
 8002682:	2200      	movs	r2, #0
 8002684:	409e      	lsls	r6, r3
 8002686:	e723      	b.n	80024d0 <__aeabi_dmul+0x2cc>
 8002688:	9b00      	ldr	r3, [sp, #0]
 800268a:	469c      	mov	ip, r3
 800268c:	e6e6      	b.n	800245c <__aeabi_dmul+0x258>
 800268e:	4912      	ldr	r1, [pc, #72]	; (80026d8 <__aeabi_dmul+0x4d4>)
 8002690:	0022      	movs	r2, r4
 8002692:	4461      	add	r1, ip
 8002694:	002e      	movs	r6, r5
 8002696:	408d      	lsls	r5, r1
 8002698:	408a      	lsls	r2, r1
 800269a:	40c6      	lsrs	r6, r0
 800269c:	1e69      	subs	r1, r5, #1
 800269e:	418d      	sbcs	r5, r1
 80026a0:	4332      	orrs	r2, r6
 80026a2:	432a      	orrs	r2, r5
 80026a4:	40c4      	lsrs	r4, r0
 80026a6:	0753      	lsls	r3, r2, #29
 80026a8:	d0b6      	beq.n	8002618 <__aeabi_dmul+0x414>
 80026aa:	210f      	movs	r1, #15
 80026ac:	4011      	ands	r1, r2
 80026ae:	2904      	cmp	r1, #4
 80026b0:	d1ac      	bne.n	800260c <__aeabi_dmul+0x408>
 80026b2:	e7b1      	b.n	8002618 <__aeabi_dmul+0x414>
 80026b4:	0765      	lsls	r5, r4, #29
 80026b6:	0264      	lsls	r4, r4, #9
 80026b8:	0b24      	lsrs	r4, r4, #12
 80026ba:	08d2      	lsrs	r2, r2, #3
 80026bc:	4315      	orrs	r5, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	e601      	b.n	80022c6 <__aeabi_dmul+0xc2>
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	0312      	lsls	r2, r2, #12
 80026c6:	4314      	orrs	r4, r2
 80026c8:	0324      	lsls	r4, r4, #12
 80026ca:	4a01      	ldr	r2, [pc, #4]	; (80026d0 <__aeabi_dmul+0x4cc>)
 80026cc:	0b24      	lsrs	r4, r4, #12
 80026ce:	e5fa      	b.n	80022c6 <__aeabi_dmul+0xc2>
 80026d0:	000007ff 	.word	0x000007ff
 80026d4:	0000043e 	.word	0x0000043e
 80026d8:	0000041e 	.word	0x0000041e

080026dc <__aeabi_dsub>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	4657      	mov	r7, sl
 80026e0:	464e      	mov	r6, r9
 80026e2:	4645      	mov	r5, r8
 80026e4:	46de      	mov	lr, fp
 80026e6:	b5e0      	push	{r5, r6, r7, lr}
 80026e8:	001e      	movs	r6, r3
 80026ea:	0017      	movs	r7, r2
 80026ec:	004a      	lsls	r2, r1, #1
 80026ee:	030b      	lsls	r3, r1, #12
 80026f0:	0d52      	lsrs	r2, r2, #21
 80026f2:	0a5b      	lsrs	r3, r3, #9
 80026f4:	4690      	mov	r8, r2
 80026f6:	0f42      	lsrs	r2, r0, #29
 80026f8:	431a      	orrs	r2, r3
 80026fa:	0fcd      	lsrs	r5, r1, #31
 80026fc:	4ccd      	ldr	r4, [pc, #820]	; (8002a34 <__aeabi_dsub+0x358>)
 80026fe:	0331      	lsls	r1, r6, #12
 8002700:	00c3      	lsls	r3, r0, #3
 8002702:	4694      	mov	ip, r2
 8002704:	0070      	lsls	r0, r6, #1
 8002706:	0f7a      	lsrs	r2, r7, #29
 8002708:	0a49      	lsrs	r1, r1, #9
 800270a:	00ff      	lsls	r7, r7, #3
 800270c:	469a      	mov	sl, r3
 800270e:	46b9      	mov	r9, r7
 8002710:	0d40      	lsrs	r0, r0, #21
 8002712:	0ff6      	lsrs	r6, r6, #31
 8002714:	4311      	orrs	r1, r2
 8002716:	42a0      	cmp	r0, r4
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x40>
 800271a:	e0b1      	b.n	8002880 <__aeabi_dsub+0x1a4>
 800271c:	2201      	movs	r2, #1
 800271e:	4056      	eors	r6, r2
 8002720:	46b3      	mov	fp, r6
 8002722:	42b5      	cmp	r5, r6
 8002724:	d100      	bne.n	8002728 <__aeabi_dsub+0x4c>
 8002726:	e088      	b.n	800283a <__aeabi_dsub+0x15e>
 8002728:	4642      	mov	r2, r8
 800272a:	1a12      	subs	r2, r2, r0
 800272c:	2a00      	cmp	r2, #0
 800272e:	dc00      	bgt.n	8002732 <__aeabi_dsub+0x56>
 8002730:	e0ae      	b.n	8002890 <__aeabi_dsub+0x1b4>
 8002732:	2800      	cmp	r0, #0
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x5c>
 8002736:	e0c1      	b.n	80028bc <__aeabi_dsub+0x1e0>
 8002738:	48be      	ldr	r0, [pc, #760]	; (8002a34 <__aeabi_dsub+0x358>)
 800273a:	4580      	cmp	r8, r0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x64>
 800273e:	e151      	b.n	80029e4 <__aeabi_dsub+0x308>
 8002740:	2080      	movs	r0, #128	; 0x80
 8002742:	0400      	lsls	r0, r0, #16
 8002744:	4301      	orrs	r1, r0
 8002746:	2a38      	cmp	r2, #56	; 0x38
 8002748:	dd00      	ble.n	800274c <__aeabi_dsub+0x70>
 800274a:	e17b      	b.n	8002a44 <__aeabi_dsub+0x368>
 800274c:	2a1f      	cmp	r2, #31
 800274e:	dd00      	ble.n	8002752 <__aeabi_dsub+0x76>
 8002750:	e1ee      	b.n	8002b30 <__aeabi_dsub+0x454>
 8002752:	2020      	movs	r0, #32
 8002754:	003e      	movs	r6, r7
 8002756:	1a80      	subs	r0, r0, r2
 8002758:	000c      	movs	r4, r1
 800275a:	40d6      	lsrs	r6, r2
 800275c:	40d1      	lsrs	r1, r2
 800275e:	4087      	lsls	r7, r0
 8002760:	4662      	mov	r2, ip
 8002762:	4084      	lsls	r4, r0
 8002764:	1a52      	subs	r2, r2, r1
 8002766:	1e78      	subs	r0, r7, #1
 8002768:	4187      	sbcs	r7, r0
 800276a:	4694      	mov	ip, r2
 800276c:	4334      	orrs	r4, r6
 800276e:	4327      	orrs	r7, r4
 8002770:	1bdc      	subs	r4, r3, r7
 8002772:	42a3      	cmp	r3, r4
 8002774:	419b      	sbcs	r3, r3
 8002776:	4662      	mov	r2, ip
 8002778:	425b      	negs	r3, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4699      	mov	r9, r3
 800277e:	464b      	mov	r3, r9
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	d400      	bmi.n	8002786 <__aeabi_dsub+0xaa>
 8002784:	e118      	b.n	80029b8 <__aeabi_dsub+0x2dc>
 8002786:	464b      	mov	r3, r9
 8002788:	0258      	lsls	r0, r3, #9
 800278a:	0a43      	lsrs	r3, r0, #9
 800278c:	4699      	mov	r9, r3
 800278e:	464b      	mov	r3, r9
 8002790:	2b00      	cmp	r3, #0
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0xba>
 8002794:	e137      	b.n	8002a06 <__aeabi_dsub+0x32a>
 8002796:	4648      	mov	r0, r9
 8002798:	f000 fcac 	bl	80030f4 <__clzsi2>
 800279c:	0001      	movs	r1, r0
 800279e:	3908      	subs	r1, #8
 80027a0:	2320      	movs	r3, #32
 80027a2:	0022      	movs	r2, r4
 80027a4:	4648      	mov	r0, r9
 80027a6:	1a5b      	subs	r3, r3, r1
 80027a8:	40da      	lsrs	r2, r3
 80027aa:	4088      	lsls	r0, r1
 80027ac:	408c      	lsls	r4, r1
 80027ae:	4643      	mov	r3, r8
 80027b0:	4310      	orrs	r0, r2
 80027b2:	4588      	cmp	r8, r1
 80027b4:	dd00      	ble.n	80027b8 <__aeabi_dsub+0xdc>
 80027b6:	e136      	b.n	8002a26 <__aeabi_dsub+0x34a>
 80027b8:	1ac9      	subs	r1, r1, r3
 80027ba:	1c4b      	adds	r3, r1, #1
 80027bc:	2b1f      	cmp	r3, #31
 80027be:	dd00      	ble.n	80027c2 <__aeabi_dsub+0xe6>
 80027c0:	e0ea      	b.n	8002998 <__aeabi_dsub+0x2bc>
 80027c2:	2220      	movs	r2, #32
 80027c4:	0026      	movs	r6, r4
 80027c6:	1ad2      	subs	r2, r2, r3
 80027c8:	0001      	movs	r1, r0
 80027ca:	4094      	lsls	r4, r2
 80027cc:	40de      	lsrs	r6, r3
 80027ce:	40d8      	lsrs	r0, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	4091      	lsls	r1, r2
 80027d4:	1e62      	subs	r2, r4, #1
 80027d6:	4194      	sbcs	r4, r2
 80027d8:	4681      	mov	r9, r0
 80027da:	4698      	mov	r8, r3
 80027dc:	4331      	orrs	r1, r6
 80027de:	430c      	orrs	r4, r1
 80027e0:	0763      	lsls	r3, r4, #29
 80027e2:	d009      	beq.n	80027f8 <__aeabi_dsub+0x11c>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4023      	ands	r3, r4
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d005      	beq.n	80027f8 <__aeabi_dsub+0x11c>
 80027ec:	1d23      	adds	r3, r4, #4
 80027ee:	42a3      	cmp	r3, r4
 80027f0:	41a4      	sbcs	r4, r4
 80027f2:	4264      	negs	r4, r4
 80027f4:	44a1      	add	r9, r4
 80027f6:	001c      	movs	r4, r3
 80027f8:	464b      	mov	r3, r9
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	d400      	bmi.n	8002800 <__aeabi_dsub+0x124>
 80027fe:	e0de      	b.n	80029be <__aeabi_dsub+0x2e2>
 8002800:	4641      	mov	r1, r8
 8002802:	4b8c      	ldr	r3, [pc, #560]	; (8002a34 <__aeabi_dsub+0x358>)
 8002804:	3101      	adds	r1, #1
 8002806:	4299      	cmp	r1, r3
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x130>
 800280a:	e0e7      	b.n	80029dc <__aeabi_dsub+0x300>
 800280c:	464b      	mov	r3, r9
 800280e:	488a      	ldr	r0, [pc, #552]	; (8002a38 <__aeabi_dsub+0x35c>)
 8002810:	08e4      	lsrs	r4, r4, #3
 8002812:	4003      	ands	r3, r0
 8002814:	0018      	movs	r0, r3
 8002816:	0549      	lsls	r1, r1, #21
 8002818:	075b      	lsls	r3, r3, #29
 800281a:	0240      	lsls	r0, r0, #9
 800281c:	4323      	orrs	r3, r4
 800281e:	0d4a      	lsrs	r2, r1, #21
 8002820:	0b04      	lsrs	r4, r0, #12
 8002822:	0512      	lsls	r2, r2, #20
 8002824:	07ed      	lsls	r5, r5, #31
 8002826:	4322      	orrs	r2, r4
 8002828:	432a      	orrs	r2, r5
 800282a:	0018      	movs	r0, r3
 800282c:	0011      	movs	r1, r2
 800282e:	bcf0      	pop	{r4, r5, r6, r7}
 8002830:	46bb      	mov	fp, r7
 8002832:	46b2      	mov	sl, r6
 8002834:	46a9      	mov	r9, r5
 8002836:	46a0      	mov	r8, r4
 8002838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800283a:	4642      	mov	r2, r8
 800283c:	1a12      	subs	r2, r2, r0
 800283e:	2a00      	cmp	r2, #0
 8002840:	dd52      	ble.n	80028e8 <__aeabi_dsub+0x20c>
 8002842:	2800      	cmp	r0, #0
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x16c>
 8002846:	e09c      	b.n	8002982 <__aeabi_dsub+0x2a6>
 8002848:	45a0      	cmp	r8, r4
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x172>
 800284c:	e0ca      	b.n	80029e4 <__aeabi_dsub+0x308>
 800284e:	2080      	movs	r0, #128	; 0x80
 8002850:	0400      	lsls	r0, r0, #16
 8002852:	4301      	orrs	r1, r0
 8002854:	2a38      	cmp	r2, #56	; 0x38
 8002856:	dd00      	ble.n	800285a <__aeabi_dsub+0x17e>
 8002858:	e149      	b.n	8002aee <__aeabi_dsub+0x412>
 800285a:	2a1f      	cmp	r2, #31
 800285c:	dc00      	bgt.n	8002860 <__aeabi_dsub+0x184>
 800285e:	e197      	b.n	8002b90 <__aeabi_dsub+0x4b4>
 8002860:	0010      	movs	r0, r2
 8002862:	000e      	movs	r6, r1
 8002864:	3820      	subs	r0, #32
 8002866:	40c6      	lsrs	r6, r0
 8002868:	2a20      	cmp	r2, #32
 800286a:	d004      	beq.n	8002876 <__aeabi_dsub+0x19a>
 800286c:	2040      	movs	r0, #64	; 0x40
 800286e:	1a82      	subs	r2, r0, r2
 8002870:	4091      	lsls	r1, r2
 8002872:	430f      	orrs	r7, r1
 8002874:	46b9      	mov	r9, r7
 8002876:	464c      	mov	r4, r9
 8002878:	1e62      	subs	r2, r4, #1
 800287a:	4194      	sbcs	r4, r2
 800287c:	4334      	orrs	r4, r6
 800287e:	e13a      	b.n	8002af6 <__aeabi_dsub+0x41a>
 8002880:	000a      	movs	r2, r1
 8002882:	433a      	orrs	r2, r7
 8002884:	d028      	beq.n	80028d8 <__aeabi_dsub+0x1fc>
 8002886:	46b3      	mov	fp, r6
 8002888:	42b5      	cmp	r5, r6
 800288a:	d02b      	beq.n	80028e4 <__aeabi_dsub+0x208>
 800288c:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <__aeabi_dsub+0x360>)
 800288e:	4442      	add	r2, r8
 8002890:	2a00      	cmp	r2, #0
 8002892:	d05d      	beq.n	8002950 <__aeabi_dsub+0x274>
 8002894:	4642      	mov	r2, r8
 8002896:	4644      	mov	r4, r8
 8002898:	1a82      	subs	r2, r0, r2
 800289a:	2c00      	cmp	r4, #0
 800289c:	d000      	beq.n	80028a0 <__aeabi_dsub+0x1c4>
 800289e:	e0f5      	b.n	8002a8c <__aeabi_dsub+0x3b0>
 80028a0:	4665      	mov	r5, ip
 80028a2:	431d      	orrs	r5, r3
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x1cc>
 80028a6:	e19c      	b.n	8002be2 <__aeabi_dsub+0x506>
 80028a8:	1e55      	subs	r5, r2, #1
 80028aa:	2a01      	cmp	r2, #1
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x1d4>
 80028ae:	e1fb      	b.n	8002ca8 <__aeabi_dsub+0x5cc>
 80028b0:	4c60      	ldr	r4, [pc, #384]	; (8002a34 <__aeabi_dsub+0x358>)
 80028b2:	42a2      	cmp	r2, r4
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x1dc>
 80028b6:	e1bd      	b.n	8002c34 <__aeabi_dsub+0x558>
 80028b8:	002a      	movs	r2, r5
 80028ba:	e0f0      	b.n	8002a9e <__aeabi_dsub+0x3c2>
 80028bc:	0008      	movs	r0, r1
 80028be:	4338      	orrs	r0, r7
 80028c0:	d100      	bne.n	80028c4 <__aeabi_dsub+0x1e8>
 80028c2:	e0c3      	b.n	8002a4c <__aeabi_dsub+0x370>
 80028c4:	1e50      	subs	r0, r2, #1
 80028c6:	2a01      	cmp	r2, #1
 80028c8:	d100      	bne.n	80028cc <__aeabi_dsub+0x1f0>
 80028ca:	e1a8      	b.n	8002c1e <__aeabi_dsub+0x542>
 80028cc:	4c59      	ldr	r4, [pc, #356]	; (8002a34 <__aeabi_dsub+0x358>)
 80028ce:	42a2      	cmp	r2, r4
 80028d0:	d100      	bne.n	80028d4 <__aeabi_dsub+0x1f8>
 80028d2:	e087      	b.n	80029e4 <__aeabi_dsub+0x308>
 80028d4:	0002      	movs	r2, r0
 80028d6:	e736      	b.n	8002746 <__aeabi_dsub+0x6a>
 80028d8:	2201      	movs	r2, #1
 80028da:	4056      	eors	r6, r2
 80028dc:	46b3      	mov	fp, r6
 80028de:	42b5      	cmp	r5, r6
 80028e0:	d000      	beq.n	80028e4 <__aeabi_dsub+0x208>
 80028e2:	e721      	b.n	8002728 <__aeabi_dsub+0x4c>
 80028e4:	4a55      	ldr	r2, [pc, #340]	; (8002a3c <__aeabi_dsub+0x360>)
 80028e6:	4442      	add	r2, r8
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x212>
 80028ec:	e0b5      	b.n	8002a5a <__aeabi_dsub+0x37e>
 80028ee:	4642      	mov	r2, r8
 80028f0:	4644      	mov	r4, r8
 80028f2:	1a82      	subs	r2, r0, r2
 80028f4:	2c00      	cmp	r4, #0
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x21e>
 80028f8:	e138      	b.n	8002b6c <__aeabi_dsub+0x490>
 80028fa:	4e4e      	ldr	r6, [pc, #312]	; (8002a34 <__aeabi_dsub+0x358>)
 80028fc:	42b0      	cmp	r0, r6
 80028fe:	d100      	bne.n	8002902 <__aeabi_dsub+0x226>
 8002900:	e1de      	b.n	8002cc0 <__aeabi_dsub+0x5e4>
 8002902:	2680      	movs	r6, #128	; 0x80
 8002904:	4664      	mov	r4, ip
 8002906:	0436      	lsls	r6, r6, #16
 8002908:	4334      	orrs	r4, r6
 800290a:	46a4      	mov	ip, r4
 800290c:	2a38      	cmp	r2, #56	; 0x38
 800290e:	dd00      	ble.n	8002912 <__aeabi_dsub+0x236>
 8002910:	e196      	b.n	8002c40 <__aeabi_dsub+0x564>
 8002912:	2a1f      	cmp	r2, #31
 8002914:	dd00      	ble.n	8002918 <__aeabi_dsub+0x23c>
 8002916:	e224      	b.n	8002d62 <__aeabi_dsub+0x686>
 8002918:	2620      	movs	r6, #32
 800291a:	1ab4      	subs	r4, r6, r2
 800291c:	46a2      	mov	sl, r4
 800291e:	4664      	mov	r4, ip
 8002920:	4656      	mov	r6, sl
 8002922:	40b4      	lsls	r4, r6
 8002924:	46a1      	mov	r9, r4
 8002926:	001c      	movs	r4, r3
 8002928:	464e      	mov	r6, r9
 800292a:	40d4      	lsrs	r4, r2
 800292c:	4326      	orrs	r6, r4
 800292e:	0034      	movs	r4, r6
 8002930:	4656      	mov	r6, sl
 8002932:	40b3      	lsls	r3, r6
 8002934:	1e5e      	subs	r6, r3, #1
 8002936:	41b3      	sbcs	r3, r6
 8002938:	431c      	orrs	r4, r3
 800293a:	4663      	mov	r3, ip
 800293c:	40d3      	lsrs	r3, r2
 800293e:	18c9      	adds	r1, r1, r3
 8002940:	19e4      	adds	r4, r4, r7
 8002942:	42bc      	cmp	r4, r7
 8002944:	41bf      	sbcs	r7, r7
 8002946:	427f      	negs	r7, r7
 8002948:	46b9      	mov	r9, r7
 800294a:	4680      	mov	r8, r0
 800294c:	4489      	add	r9, r1
 800294e:	e0d8      	b.n	8002b02 <__aeabi_dsub+0x426>
 8002950:	4640      	mov	r0, r8
 8002952:	4c3b      	ldr	r4, [pc, #236]	; (8002a40 <__aeabi_dsub+0x364>)
 8002954:	3001      	adds	r0, #1
 8002956:	4220      	tst	r0, r4
 8002958:	d000      	beq.n	800295c <__aeabi_dsub+0x280>
 800295a:	e0b4      	b.n	8002ac6 <__aeabi_dsub+0x3ea>
 800295c:	4640      	mov	r0, r8
 800295e:	2800      	cmp	r0, #0
 8002960:	d000      	beq.n	8002964 <__aeabi_dsub+0x288>
 8002962:	e144      	b.n	8002bee <__aeabi_dsub+0x512>
 8002964:	4660      	mov	r0, ip
 8002966:	4318      	orrs	r0, r3
 8002968:	d100      	bne.n	800296c <__aeabi_dsub+0x290>
 800296a:	e190      	b.n	8002c8e <__aeabi_dsub+0x5b2>
 800296c:	0008      	movs	r0, r1
 800296e:	4338      	orrs	r0, r7
 8002970:	d000      	beq.n	8002974 <__aeabi_dsub+0x298>
 8002972:	e1aa      	b.n	8002cca <__aeabi_dsub+0x5ee>
 8002974:	4661      	mov	r1, ip
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	0749      	lsls	r1, r1, #29
 800297a:	430b      	orrs	r3, r1
 800297c:	4661      	mov	r1, ip
 800297e:	08cc      	lsrs	r4, r1, #3
 8002980:	e027      	b.n	80029d2 <__aeabi_dsub+0x2f6>
 8002982:	0008      	movs	r0, r1
 8002984:	4338      	orrs	r0, r7
 8002986:	d061      	beq.n	8002a4c <__aeabi_dsub+0x370>
 8002988:	1e50      	subs	r0, r2, #1
 800298a:	2a01      	cmp	r2, #1
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x2b4>
 800298e:	e139      	b.n	8002c04 <__aeabi_dsub+0x528>
 8002990:	42a2      	cmp	r2, r4
 8002992:	d027      	beq.n	80029e4 <__aeabi_dsub+0x308>
 8002994:	0002      	movs	r2, r0
 8002996:	e75d      	b.n	8002854 <__aeabi_dsub+0x178>
 8002998:	0002      	movs	r2, r0
 800299a:	391f      	subs	r1, #31
 800299c:	40ca      	lsrs	r2, r1
 800299e:	0011      	movs	r1, r2
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d003      	beq.n	80029ac <__aeabi_dsub+0x2d0>
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	4098      	lsls	r0, r3
 80029aa:	4304      	orrs	r4, r0
 80029ac:	1e63      	subs	r3, r4, #1
 80029ae:	419c      	sbcs	r4, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	4699      	mov	r9, r3
 80029b4:	4698      	mov	r8, r3
 80029b6:	430c      	orrs	r4, r1
 80029b8:	0763      	lsls	r3, r4, #29
 80029ba:	d000      	beq.n	80029be <__aeabi_dsub+0x2e2>
 80029bc:	e712      	b.n	80027e4 <__aeabi_dsub+0x108>
 80029be:	464b      	mov	r3, r9
 80029c0:	464a      	mov	r2, r9
 80029c2:	08e4      	lsrs	r4, r4, #3
 80029c4:	075b      	lsls	r3, r3, #29
 80029c6:	4323      	orrs	r3, r4
 80029c8:	08d4      	lsrs	r4, r2, #3
 80029ca:	4642      	mov	r2, r8
 80029cc:	4919      	ldr	r1, [pc, #100]	; (8002a34 <__aeabi_dsub+0x358>)
 80029ce:	428a      	cmp	r2, r1
 80029d0:	d00e      	beq.n	80029f0 <__aeabi_dsub+0x314>
 80029d2:	0324      	lsls	r4, r4, #12
 80029d4:	0552      	lsls	r2, r2, #21
 80029d6:	0b24      	lsrs	r4, r4, #12
 80029d8:	0d52      	lsrs	r2, r2, #21
 80029da:	e722      	b.n	8002822 <__aeabi_dsub+0x146>
 80029dc:	000a      	movs	r2, r1
 80029de:	2400      	movs	r4, #0
 80029e0:	2300      	movs	r3, #0
 80029e2:	e71e      	b.n	8002822 <__aeabi_dsub+0x146>
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	4662      	mov	r2, ip
 80029e8:	0752      	lsls	r2, r2, #29
 80029ea:	4313      	orrs	r3, r2
 80029ec:	4662      	mov	r2, ip
 80029ee:	08d4      	lsrs	r4, r2, #3
 80029f0:	001a      	movs	r2, r3
 80029f2:	4322      	orrs	r2, r4
 80029f4:	d100      	bne.n	80029f8 <__aeabi_dsub+0x31c>
 80029f6:	e1fc      	b.n	8002df2 <__aeabi_dsub+0x716>
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	0312      	lsls	r2, r2, #12
 80029fc:	4314      	orrs	r4, r2
 80029fe:	0324      	lsls	r4, r4, #12
 8002a00:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <__aeabi_dsub+0x358>)
 8002a02:	0b24      	lsrs	r4, r4, #12
 8002a04:	e70d      	b.n	8002822 <__aeabi_dsub+0x146>
 8002a06:	0020      	movs	r0, r4
 8002a08:	f000 fb74 	bl	80030f4 <__clzsi2>
 8002a0c:	0001      	movs	r1, r0
 8002a0e:	3118      	adds	r1, #24
 8002a10:	291f      	cmp	r1, #31
 8002a12:	dc00      	bgt.n	8002a16 <__aeabi_dsub+0x33a>
 8002a14:	e6c4      	b.n	80027a0 <__aeabi_dsub+0xc4>
 8002a16:	3808      	subs	r0, #8
 8002a18:	4084      	lsls	r4, r0
 8002a1a:	4643      	mov	r3, r8
 8002a1c:	0020      	movs	r0, r4
 8002a1e:	2400      	movs	r4, #0
 8002a20:	4588      	cmp	r8, r1
 8002a22:	dc00      	bgt.n	8002a26 <__aeabi_dsub+0x34a>
 8002a24:	e6c8      	b.n	80027b8 <__aeabi_dsub+0xdc>
 8002a26:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <__aeabi_dsub+0x35c>)
 8002a28:	1a5b      	subs	r3, r3, r1
 8002a2a:	4010      	ands	r0, r2
 8002a2c:	4698      	mov	r8, r3
 8002a2e:	4681      	mov	r9, r0
 8002a30:	e6d6      	b.n	80027e0 <__aeabi_dsub+0x104>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000007ff 	.word	0x000007ff
 8002a38:	ff7fffff 	.word	0xff7fffff
 8002a3c:	fffff801 	.word	0xfffff801
 8002a40:	000007fe 	.word	0x000007fe
 8002a44:	430f      	orrs	r7, r1
 8002a46:	1e7a      	subs	r2, r7, #1
 8002a48:	4197      	sbcs	r7, r2
 8002a4a:	e691      	b.n	8002770 <__aeabi_dsub+0x94>
 8002a4c:	4661      	mov	r1, ip
 8002a4e:	08db      	lsrs	r3, r3, #3
 8002a50:	0749      	lsls	r1, r1, #29
 8002a52:	430b      	orrs	r3, r1
 8002a54:	4661      	mov	r1, ip
 8002a56:	08cc      	lsrs	r4, r1, #3
 8002a58:	e7b8      	b.n	80029cc <__aeabi_dsub+0x2f0>
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	4cd3      	ldr	r4, [pc, #844]	; (8002dac <__aeabi_dsub+0x6d0>)
 8002a5e:	3001      	adds	r0, #1
 8002a60:	4220      	tst	r0, r4
 8002a62:	d000      	beq.n	8002a66 <__aeabi_dsub+0x38a>
 8002a64:	e0a2      	b.n	8002bac <__aeabi_dsub+0x4d0>
 8002a66:	4640      	mov	r0, r8
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d000      	beq.n	8002a6e <__aeabi_dsub+0x392>
 8002a6c:	e101      	b.n	8002c72 <__aeabi_dsub+0x596>
 8002a6e:	4660      	mov	r0, ip
 8002a70:	4318      	orrs	r0, r3
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x39a>
 8002a74:	e15e      	b.n	8002d34 <__aeabi_dsub+0x658>
 8002a76:	0008      	movs	r0, r1
 8002a78:	4338      	orrs	r0, r7
 8002a7a:	d000      	beq.n	8002a7e <__aeabi_dsub+0x3a2>
 8002a7c:	e15f      	b.n	8002d3e <__aeabi_dsub+0x662>
 8002a7e:	4661      	mov	r1, ip
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	0749      	lsls	r1, r1, #29
 8002a84:	430b      	orrs	r3, r1
 8002a86:	4661      	mov	r1, ip
 8002a88:	08cc      	lsrs	r4, r1, #3
 8002a8a:	e7a2      	b.n	80029d2 <__aeabi_dsub+0x2f6>
 8002a8c:	4dc8      	ldr	r5, [pc, #800]	; (8002db0 <__aeabi_dsub+0x6d4>)
 8002a8e:	42a8      	cmp	r0, r5
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x3b8>
 8002a92:	e0cf      	b.n	8002c34 <__aeabi_dsub+0x558>
 8002a94:	2580      	movs	r5, #128	; 0x80
 8002a96:	4664      	mov	r4, ip
 8002a98:	042d      	lsls	r5, r5, #16
 8002a9a:	432c      	orrs	r4, r5
 8002a9c:	46a4      	mov	ip, r4
 8002a9e:	2a38      	cmp	r2, #56	; 0x38
 8002aa0:	dc56      	bgt.n	8002b50 <__aeabi_dsub+0x474>
 8002aa2:	2a1f      	cmp	r2, #31
 8002aa4:	dd00      	ble.n	8002aa8 <__aeabi_dsub+0x3cc>
 8002aa6:	e0d1      	b.n	8002c4c <__aeabi_dsub+0x570>
 8002aa8:	2520      	movs	r5, #32
 8002aaa:	001e      	movs	r6, r3
 8002aac:	1aad      	subs	r5, r5, r2
 8002aae:	4664      	mov	r4, ip
 8002ab0:	40ab      	lsls	r3, r5
 8002ab2:	40ac      	lsls	r4, r5
 8002ab4:	40d6      	lsrs	r6, r2
 8002ab6:	1e5d      	subs	r5, r3, #1
 8002ab8:	41ab      	sbcs	r3, r5
 8002aba:	4334      	orrs	r4, r6
 8002abc:	4323      	orrs	r3, r4
 8002abe:	4664      	mov	r4, ip
 8002ac0:	40d4      	lsrs	r4, r2
 8002ac2:	1b09      	subs	r1, r1, r4
 8002ac4:	e049      	b.n	8002b5a <__aeabi_dsub+0x47e>
 8002ac6:	4660      	mov	r0, ip
 8002ac8:	1bdc      	subs	r4, r3, r7
 8002aca:	1a46      	subs	r6, r0, r1
 8002acc:	42a3      	cmp	r3, r4
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	4240      	negs	r0, r0
 8002ad2:	4681      	mov	r9, r0
 8002ad4:	0030      	movs	r0, r6
 8002ad6:	464e      	mov	r6, r9
 8002ad8:	1b80      	subs	r0, r0, r6
 8002ada:	4681      	mov	r9, r0
 8002adc:	0200      	lsls	r0, r0, #8
 8002ade:	d476      	bmi.n	8002bce <__aeabi_dsub+0x4f2>
 8002ae0:	464b      	mov	r3, r9
 8002ae2:	4323      	orrs	r3, r4
 8002ae4:	d000      	beq.n	8002ae8 <__aeabi_dsub+0x40c>
 8002ae6:	e652      	b.n	800278e <__aeabi_dsub+0xb2>
 8002ae8:	2400      	movs	r4, #0
 8002aea:	2500      	movs	r5, #0
 8002aec:	e771      	b.n	80029d2 <__aeabi_dsub+0x2f6>
 8002aee:	4339      	orrs	r1, r7
 8002af0:	000c      	movs	r4, r1
 8002af2:	1e62      	subs	r2, r4, #1
 8002af4:	4194      	sbcs	r4, r2
 8002af6:	18e4      	adds	r4, r4, r3
 8002af8:	429c      	cmp	r4, r3
 8002afa:	419b      	sbcs	r3, r3
 8002afc:	425b      	negs	r3, r3
 8002afe:	4463      	add	r3, ip
 8002b00:	4699      	mov	r9, r3
 8002b02:	464b      	mov	r3, r9
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	d400      	bmi.n	8002b0a <__aeabi_dsub+0x42e>
 8002b08:	e756      	b.n	80029b8 <__aeabi_dsub+0x2dc>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	469c      	mov	ip, r3
 8002b0e:	4ba8      	ldr	r3, [pc, #672]	; (8002db0 <__aeabi_dsub+0x6d4>)
 8002b10:	44e0      	add	r8, ip
 8002b12:	4598      	cmp	r8, r3
 8002b14:	d038      	beq.n	8002b88 <__aeabi_dsub+0x4ac>
 8002b16:	464b      	mov	r3, r9
 8002b18:	48a6      	ldr	r0, [pc, #664]	; (8002db4 <__aeabi_dsub+0x6d8>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4003      	ands	r3, r0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	0863      	lsrs	r3, r4, #1
 8002b22:	4014      	ands	r4, r2
 8002b24:	431c      	orrs	r4, r3
 8002b26:	07c3      	lsls	r3, r0, #31
 8002b28:	431c      	orrs	r4, r3
 8002b2a:	0843      	lsrs	r3, r0, #1
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	e657      	b.n	80027e0 <__aeabi_dsub+0x104>
 8002b30:	0010      	movs	r0, r2
 8002b32:	000e      	movs	r6, r1
 8002b34:	3820      	subs	r0, #32
 8002b36:	40c6      	lsrs	r6, r0
 8002b38:	2a20      	cmp	r2, #32
 8002b3a:	d004      	beq.n	8002b46 <__aeabi_dsub+0x46a>
 8002b3c:	2040      	movs	r0, #64	; 0x40
 8002b3e:	1a82      	subs	r2, r0, r2
 8002b40:	4091      	lsls	r1, r2
 8002b42:	430f      	orrs	r7, r1
 8002b44:	46b9      	mov	r9, r7
 8002b46:	464f      	mov	r7, r9
 8002b48:	1e7a      	subs	r2, r7, #1
 8002b4a:	4197      	sbcs	r7, r2
 8002b4c:	4337      	orrs	r7, r6
 8002b4e:	e60f      	b.n	8002770 <__aeabi_dsub+0x94>
 8002b50:	4662      	mov	r2, ip
 8002b52:	431a      	orrs	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	4193      	sbcs	r3, r2
 8002b5a:	1afc      	subs	r4, r7, r3
 8002b5c:	42a7      	cmp	r7, r4
 8002b5e:	41bf      	sbcs	r7, r7
 8002b60:	427f      	negs	r7, r7
 8002b62:	1bcb      	subs	r3, r1, r7
 8002b64:	4699      	mov	r9, r3
 8002b66:	465d      	mov	r5, fp
 8002b68:	4680      	mov	r8, r0
 8002b6a:	e608      	b.n	800277e <__aeabi_dsub+0xa2>
 8002b6c:	4666      	mov	r6, ip
 8002b6e:	431e      	orrs	r6, r3
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x498>
 8002b72:	e0be      	b.n	8002cf2 <__aeabi_dsub+0x616>
 8002b74:	1e56      	subs	r6, r2, #1
 8002b76:	2a01      	cmp	r2, #1
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x4a0>
 8002b7a:	e109      	b.n	8002d90 <__aeabi_dsub+0x6b4>
 8002b7c:	4c8c      	ldr	r4, [pc, #560]	; (8002db0 <__aeabi_dsub+0x6d4>)
 8002b7e:	42a2      	cmp	r2, r4
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x4a8>
 8002b82:	e119      	b.n	8002db8 <__aeabi_dsub+0x6dc>
 8002b84:	0032      	movs	r2, r6
 8002b86:	e6c1      	b.n	800290c <__aeabi_dsub+0x230>
 8002b88:	4642      	mov	r2, r8
 8002b8a:	2400      	movs	r4, #0
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e648      	b.n	8002822 <__aeabi_dsub+0x146>
 8002b90:	2020      	movs	r0, #32
 8002b92:	000c      	movs	r4, r1
 8002b94:	1a80      	subs	r0, r0, r2
 8002b96:	003e      	movs	r6, r7
 8002b98:	4087      	lsls	r7, r0
 8002b9a:	4084      	lsls	r4, r0
 8002b9c:	40d6      	lsrs	r6, r2
 8002b9e:	1e78      	subs	r0, r7, #1
 8002ba0:	4187      	sbcs	r7, r0
 8002ba2:	40d1      	lsrs	r1, r2
 8002ba4:	4334      	orrs	r4, r6
 8002ba6:	433c      	orrs	r4, r7
 8002ba8:	448c      	add	ip, r1
 8002baa:	e7a4      	b.n	8002af6 <__aeabi_dsub+0x41a>
 8002bac:	4a80      	ldr	r2, [pc, #512]	; (8002db0 <__aeabi_dsub+0x6d4>)
 8002bae:	4290      	cmp	r0, r2
 8002bb0:	d100      	bne.n	8002bb4 <__aeabi_dsub+0x4d8>
 8002bb2:	e0e9      	b.n	8002d88 <__aeabi_dsub+0x6ac>
 8002bb4:	19df      	adds	r7, r3, r7
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	419b      	sbcs	r3, r3
 8002bba:	4461      	add	r1, ip
 8002bbc:	425b      	negs	r3, r3
 8002bbe:	18c9      	adds	r1, r1, r3
 8002bc0:	07cc      	lsls	r4, r1, #31
 8002bc2:	087f      	lsrs	r7, r7, #1
 8002bc4:	084b      	lsrs	r3, r1, #1
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	4680      	mov	r8, r0
 8002bca:	433c      	orrs	r4, r7
 8002bcc:	e6f4      	b.n	80029b8 <__aeabi_dsub+0x2dc>
 8002bce:	1afc      	subs	r4, r7, r3
 8002bd0:	42a7      	cmp	r7, r4
 8002bd2:	41bf      	sbcs	r7, r7
 8002bd4:	4663      	mov	r3, ip
 8002bd6:	427f      	negs	r7, r7
 8002bd8:	1ac9      	subs	r1, r1, r3
 8002bda:	1bcb      	subs	r3, r1, r7
 8002bdc:	4699      	mov	r9, r3
 8002bde:	465d      	mov	r5, fp
 8002be0:	e5d5      	b.n	800278e <__aeabi_dsub+0xb2>
 8002be2:	08ff      	lsrs	r7, r7, #3
 8002be4:	074b      	lsls	r3, r1, #29
 8002be6:	465d      	mov	r5, fp
 8002be8:	433b      	orrs	r3, r7
 8002bea:	08cc      	lsrs	r4, r1, #3
 8002bec:	e6ee      	b.n	80029cc <__aeabi_dsub+0x2f0>
 8002bee:	4662      	mov	r2, ip
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	d000      	beq.n	8002bf6 <__aeabi_dsub+0x51a>
 8002bf4:	e082      	b.n	8002cfc <__aeabi_dsub+0x620>
 8002bf6:	000b      	movs	r3, r1
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	d11b      	bne.n	8002c34 <__aeabi_dsub+0x558>
 8002bfc:	2480      	movs	r4, #128	; 0x80
 8002bfe:	2500      	movs	r5, #0
 8002c00:	0324      	lsls	r4, r4, #12
 8002c02:	e6f9      	b.n	80029f8 <__aeabi_dsub+0x31c>
 8002c04:	19dc      	adds	r4, r3, r7
 8002c06:	429c      	cmp	r4, r3
 8002c08:	419b      	sbcs	r3, r3
 8002c0a:	4461      	add	r1, ip
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	425b      	negs	r3, r3
 8002c10:	4499      	add	r9, r3
 8002c12:	464b      	mov	r3, r9
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	d444      	bmi.n	8002ca2 <__aeabi_dsub+0x5c6>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4698      	mov	r8, r3
 8002c1c:	e6cc      	b.n	80029b8 <__aeabi_dsub+0x2dc>
 8002c1e:	1bdc      	subs	r4, r3, r7
 8002c20:	4662      	mov	r2, ip
 8002c22:	42a3      	cmp	r3, r4
 8002c24:	419b      	sbcs	r3, r3
 8002c26:	1a51      	subs	r1, r2, r1
 8002c28:	425b      	negs	r3, r3
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	4699      	mov	r9, r3
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4698      	mov	r8, r3
 8002c32:	e5a4      	b.n	800277e <__aeabi_dsub+0xa2>
 8002c34:	08ff      	lsrs	r7, r7, #3
 8002c36:	074b      	lsls	r3, r1, #29
 8002c38:	465d      	mov	r5, fp
 8002c3a:	433b      	orrs	r3, r7
 8002c3c:	08cc      	lsrs	r4, r1, #3
 8002c3e:	e6d7      	b.n	80029f0 <__aeabi_dsub+0x314>
 8002c40:	4662      	mov	r2, ip
 8002c42:	431a      	orrs	r2, r3
 8002c44:	0014      	movs	r4, r2
 8002c46:	1e63      	subs	r3, r4, #1
 8002c48:	419c      	sbcs	r4, r3
 8002c4a:	e679      	b.n	8002940 <__aeabi_dsub+0x264>
 8002c4c:	0015      	movs	r5, r2
 8002c4e:	4664      	mov	r4, ip
 8002c50:	3d20      	subs	r5, #32
 8002c52:	40ec      	lsrs	r4, r5
 8002c54:	46a0      	mov	r8, r4
 8002c56:	2a20      	cmp	r2, #32
 8002c58:	d005      	beq.n	8002c66 <__aeabi_dsub+0x58a>
 8002c5a:	2540      	movs	r5, #64	; 0x40
 8002c5c:	4664      	mov	r4, ip
 8002c5e:	1aaa      	subs	r2, r5, r2
 8002c60:	4094      	lsls	r4, r2
 8002c62:	4323      	orrs	r3, r4
 8002c64:	469a      	mov	sl, r3
 8002c66:	4654      	mov	r4, sl
 8002c68:	1e63      	subs	r3, r4, #1
 8002c6a:	419c      	sbcs	r4, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	e773      	b.n	8002b5a <__aeabi_dsub+0x47e>
 8002c72:	4662      	mov	r2, ip
 8002c74:	431a      	orrs	r2, r3
 8002c76:	d023      	beq.n	8002cc0 <__aeabi_dsub+0x5e4>
 8002c78:	000a      	movs	r2, r1
 8002c7a:	433a      	orrs	r2, r7
 8002c7c:	d000      	beq.n	8002c80 <__aeabi_dsub+0x5a4>
 8002c7e:	e0a0      	b.n	8002dc2 <__aeabi_dsub+0x6e6>
 8002c80:	4662      	mov	r2, ip
 8002c82:	08db      	lsrs	r3, r3, #3
 8002c84:	0752      	lsls	r2, r2, #29
 8002c86:	4313      	orrs	r3, r2
 8002c88:	4662      	mov	r2, ip
 8002c8a:	08d4      	lsrs	r4, r2, #3
 8002c8c:	e6b0      	b.n	80029f0 <__aeabi_dsub+0x314>
 8002c8e:	000b      	movs	r3, r1
 8002c90:	433b      	orrs	r3, r7
 8002c92:	d100      	bne.n	8002c96 <__aeabi_dsub+0x5ba>
 8002c94:	e728      	b.n	8002ae8 <__aeabi_dsub+0x40c>
 8002c96:	08ff      	lsrs	r7, r7, #3
 8002c98:	074b      	lsls	r3, r1, #29
 8002c9a:	465d      	mov	r5, fp
 8002c9c:	433b      	orrs	r3, r7
 8002c9e:	08cc      	lsrs	r4, r1, #3
 8002ca0:	e697      	b.n	80029d2 <__aeabi_dsub+0x2f6>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	4698      	mov	r8, r3
 8002ca6:	e736      	b.n	8002b16 <__aeabi_dsub+0x43a>
 8002ca8:	1afc      	subs	r4, r7, r3
 8002caa:	42a7      	cmp	r7, r4
 8002cac:	41bf      	sbcs	r7, r7
 8002cae:	4663      	mov	r3, ip
 8002cb0:	427f      	negs	r7, r7
 8002cb2:	1ac9      	subs	r1, r1, r3
 8002cb4:	1bcb      	subs	r3, r1, r7
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	2301      	movs	r3, #1
 8002cba:	465d      	mov	r5, fp
 8002cbc:	4698      	mov	r8, r3
 8002cbe:	e55e      	b.n	800277e <__aeabi_dsub+0xa2>
 8002cc0:	074b      	lsls	r3, r1, #29
 8002cc2:	08ff      	lsrs	r7, r7, #3
 8002cc4:	433b      	orrs	r3, r7
 8002cc6:	08cc      	lsrs	r4, r1, #3
 8002cc8:	e692      	b.n	80029f0 <__aeabi_dsub+0x314>
 8002cca:	1bdc      	subs	r4, r3, r7
 8002ccc:	4660      	mov	r0, ip
 8002cce:	42a3      	cmp	r3, r4
 8002cd0:	41b6      	sbcs	r6, r6
 8002cd2:	1a40      	subs	r0, r0, r1
 8002cd4:	4276      	negs	r6, r6
 8002cd6:	1b80      	subs	r0, r0, r6
 8002cd8:	4681      	mov	r9, r0
 8002cda:	0200      	lsls	r0, r0, #8
 8002cdc:	d560      	bpl.n	8002da0 <__aeabi_dsub+0x6c4>
 8002cde:	1afc      	subs	r4, r7, r3
 8002ce0:	42a7      	cmp	r7, r4
 8002ce2:	41bf      	sbcs	r7, r7
 8002ce4:	4663      	mov	r3, ip
 8002ce6:	427f      	negs	r7, r7
 8002ce8:	1ac9      	subs	r1, r1, r3
 8002cea:	1bcb      	subs	r3, r1, r7
 8002cec:	4699      	mov	r9, r3
 8002cee:	465d      	mov	r5, fp
 8002cf0:	e576      	b.n	80027e0 <__aeabi_dsub+0x104>
 8002cf2:	08ff      	lsrs	r7, r7, #3
 8002cf4:	074b      	lsls	r3, r1, #29
 8002cf6:	433b      	orrs	r3, r7
 8002cf8:	08cc      	lsrs	r4, r1, #3
 8002cfa:	e667      	b.n	80029cc <__aeabi_dsub+0x2f0>
 8002cfc:	000a      	movs	r2, r1
 8002cfe:	08db      	lsrs	r3, r3, #3
 8002d00:	433a      	orrs	r2, r7
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x62a>
 8002d04:	e66f      	b.n	80029e6 <__aeabi_dsub+0x30a>
 8002d06:	4662      	mov	r2, ip
 8002d08:	0752      	lsls	r2, r2, #29
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	4662      	mov	r2, ip
 8002d0e:	08d4      	lsrs	r4, r2, #3
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	0312      	lsls	r2, r2, #12
 8002d14:	4214      	tst	r4, r2
 8002d16:	d007      	beq.n	8002d28 <__aeabi_dsub+0x64c>
 8002d18:	08c8      	lsrs	r0, r1, #3
 8002d1a:	4210      	tst	r0, r2
 8002d1c:	d104      	bne.n	8002d28 <__aeabi_dsub+0x64c>
 8002d1e:	465d      	mov	r5, fp
 8002d20:	0004      	movs	r4, r0
 8002d22:	08fb      	lsrs	r3, r7, #3
 8002d24:	0749      	lsls	r1, r1, #29
 8002d26:	430b      	orrs	r3, r1
 8002d28:	0f5a      	lsrs	r2, r3, #29
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	0752      	lsls	r2, r2, #29
 8002d30:	4313      	orrs	r3, r2
 8002d32:	e65d      	b.n	80029f0 <__aeabi_dsub+0x314>
 8002d34:	074b      	lsls	r3, r1, #29
 8002d36:	08ff      	lsrs	r7, r7, #3
 8002d38:	433b      	orrs	r3, r7
 8002d3a:	08cc      	lsrs	r4, r1, #3
 8002d3c:	e649      	b.n	80029d2 <__aeabi_dsub+0x2f6>
 8002d3e:	19dc      	adds	r4, r3, r7
 8002d40:	429c      	cmp	r4, r3
 8002d42:	419b      	sbcs	r3, r3
 8002d44:	4461      	add	r1, ip
 8002d46:	4689      	mov	r9, r1
 8002d48:	425b      	negs	r3, r3
 8002d4a:	4499      	add	r9, r3
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	d400      	bmi.n	8002d54 <__aeabi_dsub+0x678>
 8002d52:	e631      	b.n	80029b8 <__aeabi_dsub+0x2dc>
 8002d54:	464a      	mov	r2, r9
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <__aeabi_dsub+0x6d8>)
 8002d58:	401a      	ands	r2, r3
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4691      	mov	r9, r2
 8002d5e:	4698      	mov	r8, r3
 8002d60:	e62a      	b.n	80029b8 <__aeabi_dsub+0x2dc>
 8002d62:	0016      	movs	r6, r2
 8002d64:	4664      	mov	r4, ip
 8002d66:	3e20      	subs	r6, #32
 8002d68:	40f4      	lsrs	r4, r6
 8002d6a:	46a0      	mov	r8, r4
 8002d6c:	2a20      	cmp	r2, #32
 8002d6e:	d005      	beq.n	8002d7c <__aeabi_dsub+0x6a0>
 8002d70:	2640      	movs	r6, #64	; 0x40
 8002d72:	4664      	mov	r4, ip
 8002d74:	1ab2      	subs	r2, r6, r2
 8002d76:	4094      	lsls	r4, r2
 8002d78:	4323      	orrs	r3, r4
 8002d7a:	469a      	mov	sl, r3
 8002d7c:	4654      	mov	r4, sl
 8002d7e:	1e63      	subs	r3, r4, #1
 8002d80:	419c      	sbcs	r4, r3
 8002d82:	4643      	mov	r3, r8
 8002d84:	431c      	orrs	r4, r3
 8002d86:	e5db      	b.n	8002940 <__aeabi_dsub+0x264>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	2400      	movs	r4, #0
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e548      	b.n	8002822 <__aeabi_dsub+0x146>
 8002d90:	19dc      	adds	r4, r3, r7
 8002d92:	42bc      	cmp	r4, r7
 8002d94:	41bf      	sbcs	r7, r7
 8002d96:	4461      	add	r1, ip
 8002d98:	4689      	mov	r9, r1
 8002d9a:	427f      	negs	r7, r7
 8002d9c:	44b9      	add	r9, r7
 8002d9e:	e738      	b.n	8002c12 <__aeabi_dsub+0x536>
 8002da0:	464b      	mov	r3, r9
 8002da2:	4323      	orrs	r3, r4
 8002da4:	d100      	bne.n	8002da8 <__aeabi_dsub+0x6cc>
 8002da6:	e69f      	b.n	8002ae8 <__aeabi_dsub+0x40c>
 8002da8:	e606      	b.n	80029b8 <__aeabi_dsub+0x2dc>
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	000007fe 	.word	0x000007fe
 8002db0:	000007ff 	.word	0x000007ff
 8002db4:	ff7fffff 	.word	0xff7fffff
 8002db8:	08ff      	lsrs	r7, r7, #3
 8002dba:	074b      	lsls	r3, r1, #29
 8002dbc:	433b      	orrs	r3, r7
 8002dbe:	08cc      	lsrs	r4, r1, #3
 8002dc0:	e616      	b.n	80029f0 <__aeabi_dsub+0x314>
 8002dc2:	4662      	mov	r2, ip
 8002dc4:	08db      	lsrs	r3, r3, #3
 8002dc6:	0752      	lsls	r2, r2, #29
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	4662      	mov	r2, ip
 8002dcc:	08d4      	lsrs	r4, r2, #3
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	0312      	lsls	r2, r2, #12
 8002dd2:	4214      	tst	r4, r2
 8002dd4:	d007      	beq.n	8002de6 <__aeabi_dsub+0x70a>
 8002dd6:	08c8      	lsrs	r0, r1, #3
 8002dd8:	4210      	tst	r0, r2
 8002dda:	d104      	bne.n	8002de6 <__aeabi_dsub+0x70a>
 8002ddc:	465d      	mov	r5, fp
 8002dde:	0004      	movs	r4, r0
 8002de0:	08fb      	lsrs	r3, r7, #3
 8002de2:	0749      	lsls	r1, r1, #29
 8002de4:	430b      	orrs	r3, r1
 8002de6:	0f5a      	lsrs	r2, r3, #29
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	0752      	lsls	r2, r2, #29
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	4313      	orrs	r3, r2
 8002df0:	e5fe      	b.n	80029f0 <__aeabi_dsub+0x314>
 8002df2:	2300      	movs	r3, #0
 8002df4:	4a01      	ldr	r2, [pc, #4]	; (8002dfc <__aeabi_dsub+0x720>)
 8002df6:	001c      	movs	r4, r3
 8002df8:	e513      	b.n	8002822 <__aeabi_dsub+0x146>
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	000007ff 	.word	0x000007ff

08002e00 <__aeabi_dcmpun>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	0005      	movs	r5, r0
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <__aeabi_dcmpun+0x38>)
 8002e06:	031c      	lsls	r4, r3, #12
 8002e08:	0016      	movs	r6, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	030a      	lsls	r2, r1, #12
 8002e0e:	0049      	lsls	r1, r1, #1
 8002e10:	0b12      	lsrs	r2, r2, #12
 8002e12:	0d49      	lsrs	r1, r1, #21
 8002e14:	0b24      	lsrs	r4, r4, #12
 8002e16:	0d5b      	lsrs	r3, r3, #21
 8002e18:	4281      	cmp	r1, r0
 8002e1a:	d008      	beq.n	8002e2e <__aeabi_dcmpun+0x2e>
 8002e1c:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <__aeabi_dcmpun+0x38>)
 8002e1e:	2000      	movs	r0, #0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d103      	bne.n	8002e2c <__aeabi_dcmpun+0x2c>
 8002e24:	0020      	movs	r0, r4
 8002e26:	4330      	orrs	r0, r6
 8002e28:	1e43      	subs	r3, r0, #1
 8002e2a:	4198      	sbcs	r0, r3
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
 8002e2e:	2001      	movs	r0, #1
 8002e30:	432a      	orrs	r2, r5
 8002e32:	d1fb      	bne.n	8002e2c <__aeabi_dcmpun+0x2c>
 8002e34:	e7f2      	b.n	8002e1c <__aeabi_dcmpun+0x1c>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	000007ff 	.word	0x000007ff

08002e3c <__aeabi_d2iz>:
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	b530      	push	{r4, r5, lr}
 8002e40:	4c13      	ldr	r4, [pc, #76]	; (8002e90 <__aeabi_d2iz+0x54>)
 8002e42:	0053      	lsls	r3, r2, #1
 8002e44:	0309      	lsls	r1, r1, #12
 8002e46:	0005      	movs	r5, r0
 8002e48:	0b09      	lsrs	r1, r1, #12
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	0d5b      	lsrs	r3, r3, #21
 8002e4e:	0fd2      	lsrs	r2, r2, #31
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	dd04      	ble.n	8002e5e <__aeabi_d2iz+0x22>
 8002e54:	480f      	ldr	r0, [pc, #60]	; (8002e94 <__aeabi_d2iz+0x58>)
 8002e56:	4283      	cmp	r3, r0
 8002e58:	dd02      	ble.n	8002e60 <__aeabi_d2iz+0x24>
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <__aeabi_d2iz+0x5c>)
 8002e5c:	18d0      	adds	r0, r2, r3
 8002e5e:	bd30      	pop	{r4, r5, pc}
 8002e60:	2080      	movs	r0, #128	; 0x80
 8002e62:	0340      	lsls	r0, r0, #13
 8002e64:	4301      	orrs	r1, r0
 8002e66:	480d      	ldr	r0, [pc, #52]	; (8002e9c <__aeabi_d2iz+0x60>)
 8002e68:	1ac0      	subs	r0, r0, r3
 8002e6a:	281f      	cmp	r0, #31
 8002e6c:	dd08      	ble.n	8002e80 <__aeabi_d2iz+0x44>
 8002e6e:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <__aeabi_d2iz+0x64>)
 8002e70:	1ac3      	subs	r3, r0, r3
 8002e72:	40d9      	lsrs	r1, r3
 8002e74:	000b      	movs	r3, r1
 8002e76:	4258      	negs	r0, r3
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	d1f0      	bne.n	8002e5e <__aeabi_d2iz+0x22>
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	e7ee      	b.n	8002e5e <__aeabi_d2iz+0x22>
 8002e80:	4c08      	ldr	r4, [pc, #32]	; (8002ea4 <__aeabi_d2iz+0x68>)
 8002e82:	40c5      	lsrs	r5, r0
 8002e84:	46a4      	mov	ip, r4
 8002e86:	4463      	add	r3, ip
 8002e88:	4099      	lsls	r1, r3
 8002e8a:	000b      	movs	r3, r1
 8002e8c:	432b      	orrs	r3, r5
 8002e8e:	e7f2      	b.n	8002e76 <__aeabi_d2iz+0x3a>
 8002e90:	000003fe 	.word	0x000003fe
 8002e94:	0000041d 	.word	0x0000041d
 8002e98:	7fffffff 	.word	0x7fffffff
 8002e9c:	00000433 	.word	0x00000433
 8002ea0:	00000413 	.word	0x00000413
 8002ea4:	fffffbed 	.word	0xfffffbed

08002ea8 <__aeabi_i2d>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d016      	beq.n	8002edc <__aeabi_i2d+0x34>
 8002eae:	17c3      	asrs	r3, r0, #31
 8002eb0:	18c5      	adds	r5, r0, r3
 8002eb2:	405d      	eors	r5, r3
 8002eb4:	0fc4      	lsrs	r4, r0, #31
 8002eb6:	0028      	movs	r0, r5
 8002eb8:	f000 f91c 	bl	80030f4 <__clzsi2>
 8002ebc:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <__aeabi_i2d+0x5c>)
 8002ebe:	1a12      	subs	r2, r2, r0
 8002ec0:	280a      	cmp	r0, #10
 8002ec2:	dc16      	bgt.n	8002ef2 <__aeabi_i2d+0x4a>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	002e      	movs	r6, r5
 8002ec8:	3315      	adds	r3, #21
 8002eca:	409e      	lsls	r6, r3
 8002ecc:	230b      	movs	r3, #11
 8002ece:	1a18      	subs	r0, r3, r0
 8002ed0:	40c5      	lsrs	r5, r0
 8002ed2:	0552      	lsls	r2, r2, #21
 8002ed4:	032d      	lsls	r5, r5, #12
 8002ed6:	0b2d      	lsrs	r5, r5, #12
 8002ed8:	0d53      	lsrs	r3, r2, #21
 8002eda:	e003      	b.n	8002ee4 <__aeabi_i2d+0x3c>
 8002edc:	2400      	movs	r4, #0
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2500      	movs	r5, #0
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	051b      	lsls	r3, r3, #20
 8002ee6:	432b      	orrs	r3, r5
 8002ee8:	07e4      	lsls	r4, r4, #31
 8002eea:	4323      	orrs	r3, r4
 8002eec:	0030      	movs	r0, r6
 8002eee:	0019      	movs	r1, r3
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
 8002ef2:	380b      	subs	r0, #11
 8002ef4:	4085      	lsls	r5, r0
 8002ef6:	0552      	lsls	r2, r2, #21
 8002ef8:	032d      	lsls	r5, r5, #12
 8002efa:	2600      	movs	r6, #0
 8002efc:	0b2d      	lsrs	r5, r5, #12
 8002efe:	0d53      	lsrs	r3, r2, #21
 8002f00:	e7f0      	b.n	8002ee4 <__aeabi_i2d+0x3c>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	0000041e 	.word	0x0000041e

08002f08 <__aeabi_ui2d>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	1e04      	subs	r4, r0, #0
 8002f0c:	d010      	beq.n	8002f30 <__aeabi_ui2d+0x28>
 8002f0e:	f000 f8f1 	bl	80030f4 <__clzsi2>
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <__aeabi_ui2d+0x48>)
 8002f14:	1a1b      	subs	r3, r3, r0
 8002f16:	280a      	cmp	r0, #10
 8002f18:	dc11      	bgt.n	8002f3e <__aeabi_ui2d+0x36>
 8002f1a:	220b      	movs	r2, #11
 8002f1c:	0021      	movs	r1, r4
 8002f1e:	1a12      	subs	r2, r2, r0
 8002f20:	40d1      	lsrs	r1, r2
 8002f22:	3015      	adds	r0, #21
 8002f24:	030a      	lsls	r2, r1, #12
 8002f26:	055b      	lsls	r3, r3, #21
 8002f28:	4084      	lsls	r4, r0
 8002f2a:	0b12      	lsrs	r2, r2, #12
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	e001      	b.n	8002f34 <__aeabi_ui2d+0x2c>
 8002f30:	2300      	movs	r3, #0
 8002f32:	2200      	movs	r2, #0
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	4313      	orrs	r3, r2
 8002f38:	0020      	movs	r0, r4
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	0022      	movs	r2, r4
 8002f40:	380b      	subs	r0, #11
 8002f42:	4082      	lsls	r2, r0
 8002f44:	055b      	lsls	r3, r3, #21
 8002f46:	0312      	lsls	r2, r2, #12
 8002f48:	2400      	movs	r4, #0
 8002f4a:	0b12      	lsrs	r2, r2, #12
 8002f4c:	0d5b      	lsrs	r3, r3, #21
 8002f4e:	e7f1      	b.n	8002f34 <__aeabi_ui2d+0x2c>
 8002f50:	0000041e 	.word	0x0000041e

08002f54 <__aeabi_f2d>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	0043      	lsls	r3, r0, #1
 8002f58:	0246      	lsls	r6, r0, #9
 8002f5a:	0fc4      	lsrs	r4, r0, #31
 8002f5c:	20fe      	movs	r0, #254	; 0xfe
 8002f5e:	0e1b      	lsrs	r3, r3, #24
 8002f60:	1c59      	adds	r1, r3, #1
 8002f62:	0a75      	lsrs	r5, r6, #9
 8002f64:	4208      	tst	r0, r1
 8002f66:	d00c      	beq.n	8002f82 <__aeabi_f2d+0x2e>
 8002f68:	22e0      	movs	r2, #224	; 0xe0
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4694      	mov	ip, r2
 8002f6e:	076d      	lsls	r5, r5, #29
 8002f70:	0b36      	lsrs	r6, r6, #12
 8002f72:	4463      	add	r3, ip
 8002f74:	051b      	lsls	r3, r3, #20
 8002f76:	4333      	orrs	r3, r6
 8002f78:	07e4      	lsls	r4, r4, #31
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	0028      	movs	r0, r5
 8002f7e:	0019      	movs	r1, r3
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d114      	bne.n	8002fb0 <__aeabi_f2d+0x5c>
 8002f86:	2d00      	cmp	r5, #0
 8002f88:	d01b      	beq.n	8002fc2 <__aeabi_f2d+0x6e>
 8002f8a:	0028      	movs	r0, r5
 8002f8c:	f000 f8b2 	bl	80030f4 <__clzsi2>
 8002f90:	280a      	cmp	r0, #10
 8002f92:	dc1c      	bgt.n	8002fce <__aeabi_f2d+0x7a>
 8002f94:	230b      	movs	r3, #11
 8002f96:	002e      	movs	r6, r5
 8002f98:	1a1b      	subs	r3, r3, r0
 8002f9a:	40de      	lsrs	r6, r3
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	3315      	adds	r3, #21
 8002fa0:	409d      	lsls	r5, r3
 8002fa2:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <__aeabi_f2d+0x88>)
 8002fa4:	0336      	lsls	r6, r6, #12
 8002fa6:	1a12      	subs	r2, r2, r0
 8002fa8:	0552      	lsls	r2, r2, #21
 8002faa:	0b36      	lsrs	r6, r6, #12
 8002fac:	0d53      	lsrs	r3, r2, #21
 8002fae:	e7e1      	b.n	8002f74 <__aeabi_f2d+0x20>
 8002fb0:	2d00      	cmp	r5, #0
 8002fb2:	d009      	beq.n	8002fc8 <__aeabi_f2d+0x74>
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	0b36      	lsrs	r6, r6, #12
 8002fb8:	0312      	lsls	r2, r2, #12
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <__aeabi_f2d+0x8c>)
 8002fbc:	076d      	lsls	r5, r5, #29
 8002fbe:	4316      	orrs	r6, r2
 8002fc0:	e7d8      	b.n	8002f74 <__aeabi_f2d+0x20>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	e7d5      	b.n	8002f74 <__aeabi_f2d+0x20>
 8002fc8:	2600      	movs	r6, #0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <__aeabi_f2d+0x8c>)
 8002fcc:	e7d2      	b.n	8002f74 <__aeabi_f2d+0x20>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	3b0b      	subs	r3, #11
 8002fd2:	409d      	lsls	r5, r3
 8002fd4:	002e      	movs	r6, r5
 8002fd6:	2500      	movs	r5, #0
 8002fd8:	e7e3      	b.n	8002fa2 <__aeabi_f2d+0x4e>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	00000389 	.word	0x00000389
 8002fe0:	000007ff 	.word	0x000007ff

08002fe4 <__aeabi_d2f>:
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	004b      	lsls	r3, r1, #1
 8002fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fea:	0d5b      	lsrs	r3, r3, #21
 8002fec:	030c      	lsls	r4, r1, #12
 8002fee:	4e3d      	ldr	r6, [pc, #244]	; (80030e4 <__aeabi_d2f+0x100>)
 8002ff0:	0a64      	lsrs	r4, r4, #9
 8002ff2:	0f40      	lsrs	r0, r0, #29
 8002ff4:	1c5f      	adds	r7, r3, #1
 8002ff6:	0fc9      	lsrs	r1, r1, #31
 8002ff8:	4304      	orrs	r4, r0
 8002ffa:	00d5      	lsls	r5, r2, #3
 8002ffc:	4237      	tst	r7, r6
 8002ffe:	d00a      	beq.n	8003016 <__aeabi_d2f+0x32>
 8003000:	4839      	ldr	r0, [pc, #228]	; (80030e8 <__aeabi_d2f+0x104>)
 8003002:	181e      	adds	r6, r3, r0
 8003004:	2efe      	cmp	r6, #254	; 0xfe
 8003006:	dd16      	ble.n	8003036 <__aeabi_d2f+0x52>
 8003008:	20ff      	movs	r0, #255	; 0xff
 800300a:	2400      	movs	r4, #0
 800300c:	05c0      	lsls	r0, r0, #23
 800300e:	4320      	orrs	r0, r4
 8003010:	07c9      	lsls	r1, r1, #31
 8003012:	4308      	orrs	r0, r1
 8003014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <__aeabi_d2f+0x44>
 800301a:	432c      	orrs	r4, r5
 800301c:	d026      	beq.n	800306c <__aeabi_d2f+0x88>
 800301e:	2205      	movs	r2, #5
 8003020:	0192      	lsls	r2, r2, #6
 8003022:	0a54      	lsrs	r4, r2, #9
 8003024:	b2d8      	uxtb	r0, r3
 8003026:	e7f1      	b.n	800300c <__aeabi_d2f+0x28>
 8003028:	4325      	orrs	r5, r4
 800302a:	d0ed      	beq.n	8003008 <__aeabi_d2f+0x24>
 800302c:	2080      	movs	r0, #128	; 0x80
 800302e:	03c0      	lsls	r0, r0, #15
 8003030:	4304      	orrs	r4, r0
 8003032:	20ff      	movs	r0, #255	; 0xff
 8003034:	e7ea      	b.n	800300c <__aeabi_d2f+0x28>
 8003036:	2e00      	cmp	r6, #0
 8003038:	dd1b      	ble.n	8003072 <__aeabi_d2f+0x8e>
 800303a:	0192      	lsls	r2, r2, #6
 800303c:	1e53      	subs	r3, r2, #1
 800303e:	419a      	sbcs	r2, r3
 8003040:	00e4      	lsls	r4, r4, #3
 8003042:	0f6d      	lsrs	r5, r5, #29
 8003044:	4322      	orrs	r2, r4
 8003046:	432a      	orrs	r2, r5
 8003048:	0753      	lsls	r3, r2, #29
 800304a:	d048      	beq.n	80030de <__aeabi_d2f+0xfa>
 800304c:	230f      	movs	r3, #15
 800304e:	4013      	ands	r3, r2
 8003050:	2b04      	cmp	r3, #4
 8003052:	d000      	beq.n	8003056 <__aeabi_d2f+0x72>
 8003054:	3204      	adds	r2, #4
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	04db      	lsls	r3, r3, #19
 800305a:	4013      	ands	r3, r2
 800305c:	d03f      	beq.n	80030de <__aeabi_d2f+0xfa>
 800305e:	1c70      	adds	r0, r6, #1
 8003060:	2efe      	cmp	r6, #254	; 0xfe
 8003062:	d0d1      	beq.n	8003008 <__aeabi_d2f+0x24>
 8003064:	0192      	lsls	r2, r2, #6
 8003066:	0a54      	lsrs	r4, r2, #9
 8003068:	b2c0      	uxtb	r0, r0
 800306a:	e7cf      	b.n	800300c <__aeabi_d2f+0x28>
 800306c:	2000      	movs	r0, #0
 800306e:	2400      	movs	r4, #0
 8003070:	e7cc      	b.n	800300c <__aeabi_d2f+0x28>
 8003072:	0032      	movs	r2, r6
 8003074:	3217      	adds	r2, #23
 8003076:	db22      	blt.n	80030be <__aeabi_d2f+0xda>
 8003078:	2080      	movs	r0, #128	; 0x80
 800307a:	0400      	lsls	r0, r0, #16
 800307c:	4320      	orrs	r0, r4
 800307e:	241e      	movs	r4, #30
 8003080:	1ba4      	subs	r4, r4, r6
 8003082:	2c1f      	cmp	r4, #31
 8003084:	dd1d      	ble.n	80030c2 <__aeabi_d2f+0xde>
 8003086:	2202      	movs	r2, #2
 8003088:	4252      	negs	r2, r2
 800308a:	1b96      	subs	r6, r2, r6
 800308c:	0002      	movs	r2, r0
 800308e:	40f2      	lsrs	r2, r6
 8003090:	0016      	movs	r6, r2
 8003092:	2c20      	cmp	r4, #32
 8003094:	d004      	beq.n	80030a0 <__aeabi_d2f+0xbc>
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <__aeabi_d2f+0x108>)
 8003098:	4694      	mov	ip, r2
 800309a:	4463      	add	r3, ip
 800309c:	4098      	lsls	r0, r3
 800309e:	4305      	orrs	r5, r0
 80030a0:	002a      	movs	r2, r5
 80030a2:	1e53      	subs	r3, r2, #1
 80030a4:	419a      	sbcs	r2, r3
 80030a6:	4332      	orrs	r2, r6
 80030a8:	2600      	movs	r6, #0
 80030aa:	0753      	lsls	r3, r2, #29
 80030ac:	d1ce      	bne.n	800304c <__aeabi_d2f+0x68>
 80030ae:	2480      	movs	r4, #128	; 0x80
 80030b0:	0013      	movs	r3, r2
 80030b2:	04e4      	lsls	r4, r4, #19
 80030b4:	2001      	movs	r0, #1
 80030b6:	4023      	ands	r3, r4
 80030b8:	4222      	tst	r2, r4
 80030ba:	d1d3      	bne.n	8003064 <__aeabi_d2f+0x80>
 80030bc:	e7b0      	b.n	8003020 <__aeabi_d2f+0x3c>
 80030be:	2300      	movs	r3, #0
 80030c0:	e7ad      	b.n	800301e <__aeabi_d2f+0x3a>
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <__aeabi_d2f+0x10c>)
 80030c4:	4694      	mov	ip, r2
 80030c6:	002a      	movs	r2, r5
 80030c8:	40e2      	lsrs	r2, r4
 80030ca:	0014      	movs	r4, r2
 80030cc:	002a      	movs	r2, r5
 80030ce:	4463      	add	r3, ip
 80030d0:	409a      	lsls	r2, r3
 80030d2:	4098      	lsls	r0, r3
 80030d4:	1e55      	subs	r5, r2, #1
 80030d6:	41aa      	sbcs	r2, r5
 80030d8:	4302      	orrs	r2, r0
 80030da:	4322      	orrs	r2, r4
 80030dc:	e7e4      	b.n	80030a8 <__aeabi_d2f+0xc4>
 80030de:	0033      	movs	r3, r6
 80030e0:	e79e      	b.n	8003020 <__aeabi_d2f+0x3c>
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	000007fe 	.word	0x000007fe
 80030e8:	fffffc80 	.word	0xfffffc80
 80030ec:	fffffca2 	.word	0xfffffca2
 80030f0:	fffffc82 	.word	0xfffffc82

080030f4 <__clzsi2>:
 80030f4:	211c      	movs	r1, #28
 80030f6:	2301      	movs	r3, #1
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	4298      	cmp	r0, r3
 80030fc:	d301      	bcc.n	8003102 <__clzsi2+0xe>
 80030fe:	0c00      	lsrs	r0, r0, #16
 8003100:	3910      	subs	r1, #16
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	4298      	cmp	r0, r3
 8003106:	d301      	bcc.n	800310c <__clzsi2+0x18>
 8003108:	0a00      	lsrs	r0, r0, #8
 800310a:	3908      	subs	r1, #8
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	4298      	cmp	r0, r3
 8003110:	d301      	bcc.n	8003116 <__clzsi2+0x22>
 8003112:	0900      	lsrs	r0, r0, #4
 8003114:	3904      	subs	r1, #4
 8003116:	a202      	add	r2, pc, #8	; (adr r2, 8003120 <__clzsi2+0x2c>)
 8003118:	5c10      	ldrb	r0, [r2, r0]
 800311a:	1840      	adds	r0, r0, r1
 800311c:	4770      	bx	lr
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	02020304 	.word	0x02020304
 8003124:	01010101 	.word	0x01010101
	...

08003130 <SCH_Update>:

void SCH_Init(void){
	// Do nothing
}

void SCH_Update(void){
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <SCH_Update+0x44>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <SCH_Update+0x44>)
 800313c:	601a      	str	r2, [r3, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800313e:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <SCH_Update+0x48>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <SCH_Update+0x3e>
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <SCH_Update+0x48>)
 8003148:	7b1b      	ldrb	r3, [r3, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <SCH_Update+0x48>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <SCH_Update+0x48>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	1e5a      	subs	r2, r3, #1
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <SCH_Update+0x48>)
 800315e:	605a      	str	r2, [r3, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <SCH_Update+0x48>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <SCH_Update+0x48>)
 800316a:	2201      	movs	r2, #1
 800316c:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200007c8 	.word	0x200007c8
 8003178:	200004a4 	.word	0x200004a4

0800317c <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8003188:	211f      	movs	r1, #31
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
	uint32_t sumDelay = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8003198:	187b      	adds	r3, r7, r1
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e15d      	b.n	800345c <SCH_Add_Task+0x2e0>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 80031a0:	201f      	movs	r0, #31
 80031a2:	183b      	adds	r3, r7, r0
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	49b7      	ldr	r1, [pc, #732]	; (8003484 <SCH_Add_Task+0x308>)
 80031a8:	0013      	movs	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	18cb      	adds	r3, r1, r3
 80031b2:	3304      	adds	r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	18d3      	adds	r3, r2, r3
 80031ba:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d800      	bhi.n	80031c6 <SCH_Add_Task+0x4a>
 80031c4:	e0da      	b.n	800337c <SCH_Add_Task+0x200>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80031c6:	183b      	adds	r3, r7, r0
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	49ae      	ldr	r1, [pc, #696]	; (8003484 <SCH_Add_Task+0x308>)
 80031cc:	0013      	movs	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	18cb      	adds	r3, r1, r3
 80031d6:	3304      	adds	r3, #4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	18d3      	adds	r3, r2, r3
 80031e2:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80031e4:	183b      	adds	r3, r7, r0
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	69b9      	ldr	r1, [r7, #24]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ac9      	subs	r1, r1, r3
 80031ee:	48a5      	ldr	r0, [pc, #660]	; (8003484 <SCH_Add_Task+0x308>)
 80031f0:	0013      	movs	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	18c3      	adds	r3, r0, r3
 80031fa:	3304      	adds	r3, #4
 80031fc:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80031fe:	2317      	movs	r3, #23
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2227      	movs	r2, #39	; 0x27
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e055      	b.n	80032b4 <SCH_Add_Task+0x138>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8003208:	2417      	movs	r4, #23
 800320a:	193b      	adds	r3, r7, r4
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	1e59      	subs	r1, r3, #1
 8003210:	193b      	adds	r3, r7, r4
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	489b      	ldr	r0, [pc, #620]	; (8003484 <SCH_Add_Task+0x308>)
 8003216:	000b      	movs	r3, r1
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	185b      	adds	r3, r3, r1
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	5818      	ldr	r0, [r3, r0]
 8003220:	4998      	ldr	r1, [pc, #608]	; (8003484 <SCH_Add_Task+0x308>)
 8003222:	0013      	movs	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	189b      	adds	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	5058      	str	r0, [r3, r1]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 800322c:	193b      	adds	r3, r7, r4
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	1e59      	subs	r1, r3, #1
 8003232:	193b      	adds	r3, r7, r4
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	4893      	ldr	r0, [pc, #588]	; (8003484 <SCH_Add_Task+0x308>)
 8003238:	000b      	movs	r3, r1
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	185b      	adds	r3, r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	18c3      	adds	r3, r0, r3
 8003242:	3308      	adds	r3, #8
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	488f      	ldr	r0, [pc, #572]	; (8003484 <SCH_Add_Task+0x308>)
 8003248:	0013      	movs	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	189b      	adds	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	18c3      	adds	r3, r0, r3
 8003252:	3308      	adds	r3, #8
 8003254:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8003256:	193b      	adds	r3, r7, r4
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	1e59      	subs	r1, r3, #1
 800325c:	193b      	adds	r3, r7, r4
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	4888      	ldr	r0, [pc, #544]	; (8003484 <SCH_Add_Task+0x308>)
 8003262:	000b      	movs	r3, r1
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	185b      	adds	r3, r3, r1
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	18c3      	adds	r3, r0, r3
 800326c:	3304      	adds	r3, #4
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	4884      	ldr	r0, [pc, #528]	; (8003484 <SCH_Add_Task+0x308>)
 8003272:	0013      	movs	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	189b      	adds	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	18c3      	adds	r3, r0, r3
 800327c:	3304      	adds	r3, #4
 800327e:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8003280:	193b      	adds	r3, r7, r4
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	1e59      	subs	r1, r3, #1
 8003286:	193b      	adds	r3, r7, r4
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	487e      	ldr	r0, [pc, #504]	; (8003484 <SCH_Add_Task+0x308>)
 800328c:	000b      	movs	r3, r1
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	185b      	adds	r3, r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	18c3      	adds	r3, r0, r3
 8003296:	3310      	adds	r3, #16
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	487a      	ldr	r0, [pc, #488]	; (8003484 <SCH_Add_Task+0x308>)
 800329c:	0013      	movs	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	18c3      	adds	r3, r0, r3
 80032a6:	3310      	adds	r3, #16
 80032a8:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	3a01      	subs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	2317      	movs	r3, #23
 80032b6:	18fa      	adds	r2, r7, r3
 80032b8:	201f      	movs	r0, #31
 80032ba:	183b      	adds	r3, r7, r0
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d8a1      	bhi.n	8003208 <SCH_Add_Task+0x8c>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80032c4:	183b      	adds	r3, r7, r0
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	496e      	ldr	r1, [pc, #440]	; (8003484 <SCH_Add_Task+0x308>)
 80032ca:	0013      	movs	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	505a      	str	r2, [r3, r1]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	496a      	ldr	r1, [pc, #424]	; (8003484 <SCH_Add_Task+0x308>)
 80032dc:	0013      	movs	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	18cb      	adds	r3, r1, r3
 80032e6:	3304      	adds	r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	4964      	ldr	r1, [pc, #400]	; (8003484 <SCH_Add_Task+0x308>)
 80032f2:	0013      	movs	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	18cb      	adds	r3, r1, r3
 80032fc:	3308      	adds	r3, #8
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8003302:	183b      	adds	r3, r7, r0
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	495f      	ldr	r1, [pc, #380]	; (8003484 <SCH_Add_Task+0x308>)
 8003308:	0013      	movs	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	189b      	adds	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	18cb      	adds	r3, r1, r3
 8003312:	3304      	adds	r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <SCH_Add_Task+0x1b6>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 800331a:	183b      	adds	r3, r7, r0
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	4959      	ldr	r1, [pc, #356]	; (8003484 <SCH_Add_Task+0x308>)
 8003320:	0013      	movs	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	189b      	adds	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	18cb      	adds	r3, r1, r3
 800332a:	330c      	adds	r3, #12
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e00b      	b.n	800334a <SCH_Add_Task+0x1ce>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8003332:	231f      	movs	r3, #31
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	4952      	ldr	r1, [pc, #328]	; (8003484 <SCH_Add_Task+0x308>)
 800333a:	0013      	movs	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	189b      	adds	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	18cb      	adds	r3, r1, r3
 8003344:	330c      	adds	r3, #12
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800334a:	251f      	movs	r5, #31
 800334c:	197b      	adds	r3, r7, r5
 800334e:	781c      	ldrb	r4, [r3, #0]
 8003350:	f000 f9e6 	bl	8003720 <Get_New_Task_ID>
 8003354:	0001      	movs	r1, r0
 8003356:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <SCH_Add_Task+0x308>)
 8003358:	0023      	movs	r3, r4
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	191b      	adds	r3, r3, r4
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	3310      	adds	r3, #16
 8003364:	6019      	str	r1, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8003366:	197b      	adds	r3, r7, r5
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	4946      	ldr	r1, [pc, #280]	; (8003484 <SCH_Add_Task+0x308>)
 800336c:	0013      	movs	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	189b      	adds	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	18cb      	adds	r3, r1, r3
 8003376:	3310      	adds	r3, #16
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	e07f      	b.n	800347c <SCH_Add_Task+0x300>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 800337c:	241f      	movs	r4, #31
 800337e:	193b      	adds	r3, r7, r4
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	4940      	ldr	r1, [pc, #256]	; (8003484 <SCH_Add_Task+0x308>)
 8003384:	0013      	movs	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	189b      	adds	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	585b      	ldr	r3, [r3, r1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d15e      	bne.n	8003450 <SCH_Add_Task+0x2d4>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8003392:	193b      	adds	r3, r7, r4
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	493b      	ldr	r1, [pc, #236]	; (8003484 <SCH_Add_Task+0x308>)
 8003398:	0013      	movs	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	189b      	adds	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	505a      	str	r2, [r3, r1]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ac9      	subs	r1, r1, r3
 80033ae:	4835      	ldr	r0, [pc, #212]	; (8003484 <SCH_Add_Task+0x308>)
 80033b0:	0013      	movs	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	18c3      	adds	r3, r0, r3
 80033ba:	3304      	adds	r3, #4
 80033bc:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80033be:	0020      	movs	r0, r4
 80033c0:	183b      	adds	r3, r7, r0
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	492f      	ldr	r1, [pc, #188]	; (8003484 <SCH_Add_Task+0x308>)
 80033c6:	0013      	movs	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	18cb      	adds	r3, r1, r3
 80033d0:	3308      	adds	r3, #8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80033d6:	183b      	adds	r3, r7, r0
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	492a      	ldr	r1, [pc, #168]	; (8003484 <SCH_Add_Task+0x308>)
 80033dc:	0013      	movs	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	189b      	adds	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	18cb      	adds	r3, r1, r3
 80033e6:	3304      	adds	r3, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <SCH_Add_Task+0x28a>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	4924      	ldr	r1, [pc, #144]	; (8003484 <SCH_Add_Task+0x308>)
 80033f4:	0013      	movs	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	189b      	adds	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	18cb      	adds	r3, r1, r3
 80033fe:	330c      	adds	r3, #12
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e00b      	b.n	800341e <SCH_Add_Task+0x2a2>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8003406:	231f      	movs	r3, #31
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	491d      	ldr	r1, [pc, #116]	; (8003484 <SCH_Add_Task+0x308>)
 800340e:	0013      	movs	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	189b      	adds	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	18cb      	adds	r3, r1, r3
 8003418:	330c      	adds	r3, #12
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800341e:	251f      	movs	r5, #31
 8003420:	197b      	adds	r3, r7, r5
 8003422:	781c      	ldrb	r4, [r3, #0]
 8003424:	f000 f97c 	bl	8003720 <Get_New_Task_ID>
 8003428:	0001      	movs	r1, r0
 800342a:	4a16      	ldr	r2, [pc, #88]	; (8003484 <SCH_Add_Task+0x308>)
 800342c:	0023      	movs	r3, r4
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	191b      	adds	r3, r3, r4
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	18d3      	adds	r3, r2, r3
 8003436:	3310      	adds	r3, #16
 8003438:	6019      	str	r1, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 800343a:	197b      	adds	r3, r7, r5
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	4911      	ldr	r1, [pc, #68]	; (8003484 <SCH_Add_Task+0x308>)
 8003440:	0013      	movs	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	189b      	adds	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	18cb      	adds	r3, r1, r3
 800344a:	3310      	adds	r3, #16
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	e015      	b.n	800347c <SCH_Add_Task+0x300>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8003450:	211f      	movs	r1, #31
 8003452:	187b      	adds	r3, r7, r1
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	187b      	adds	r3, r7, r1
 8003458:	3201      	adds	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	221f      	movs	r2, #31
 800345e:	18bb      	adds	r3, r7, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b27      	cmp	r3, #39	; 0x27
 8003464:	d800      	bhi.n	8003468 <SCH_Add_Task+0x2ec>
 8003466:	e69b      	b.n	80031a0 <SCH_Add_Task+0x24>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8003468:	18bb      	adds	r3, r7, r2
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	4905      	ldr	r1, [pc, #20]	; (8003484 <SCH_Add_Task+0x308>)
 800346e:	0013      	movs	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	189b      	adds	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	18cb      	adds	r3, r1, r3
 8003478:	3310      	adds	r3, #16
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b008      	add	sp, #32
 8003482:	bdb0      	pop	{r4, r5, r7, pc}
 8003484:	200004a4 	.word	0x200004a4

08003488 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8003490:	230d      	movs	r3, #13
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d100      	bne.n	80034a0 <SCH_Delete_Task+0x18>
 800349e:	e109      	b.n	80036b4 <SCH_Delete_Task+0x22c>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80034a0:	230f      	movs	r3, #15
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e0fe      	b.n	80036a8 <SCH_Delete_Task+0x220>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 80034aa:	200f      	movs	r0, #15
 80034ac:	183b      	adds	r3, r7, r0
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	4984      	ldr	r1, [pc, #528]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80034b2:	0013      	movs	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	18cb      	adds	r3, r1, r3
 80034bc:	3310      	adds	r3, #16
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d000      	beq.n	80034c8 <SCH_Delete_Task+0x40>
 80034c6:	e0e9      	b.n	800369c <SCH_Delete_Task+0x214>
				Return_code = 1;
 80034c8:	230d      	movs	r3, #13
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80034d0:	183b      	adds	r3, r7, r0
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d030      	beq.n	800353a <SCH_Delete_Task+0xb2>
 80034d8:	183b      	adds	r3, r7, r0
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b26      	cmp	r3, #38	; 0x26
 80034de:	d82c      	bhi.n	800353a <SCH_Delete_Task+0xb2>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 80034e0:	183b      	adds	r3, r7, r0
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	4977      	ldr	r1, [pc, #476]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80034e8:	0013      	movs	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	189b      	adds	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	585b      	ldr	r3, [r3, r1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d021      	beq.n	800353a <SCH_Delete_Task+0xb2>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80034f6:	183b      	adds	r3, r7, r0
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	4971      	ldr	r1, [pc, #452]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80034fe:	0013      	movs	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	189b      	adds	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	18cb      	adds	r3, r1, r3
 8003508:	3304      	adds	r3, #4
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	0004      	movs	r4, r0
 800350e:	183b      	adds	r3, r7, r0
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	486c      	ldr	r0, [pc, #432]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003514:	0013      	movs	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	189b      	adds	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	18c3      	adds	r3, r0, r3
 800351e:	3304      	adds	r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	193a      	adds	r2, r7, r4
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	3201      	adds	r2, #1
 8003528:	18c9      	adds	r1, r1, r3
 800352a:	4866      	ldr	r0, [pc, #408]	; (80036c4 <SCH_Delete_Task+0x23c>)
 800352c:	0013      	movs	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	189b      	adds	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	18c3      	adds	r3, r0, r3
 8003536:	3304      	adds	r3, #4
 8003538:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 800353a:	230e      	movs	r3, #14
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	220f      	movs	r2, #15
 8003540:	18ba      	adds	r2, r7, r2
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e06b      	b.n	8003620 <SCH_Delete_Task+0x198>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8003548:	240e      	movs	r4, #14
 800354a:	193b      	adds	r3, r7, r4
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	193b      	adds	r3, r7, r4
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	485b      	ldr	r0, [pc, #364]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003556:	000b      	movs	r3, r1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	185b      	adds	r3, r3, r1
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	5818      	ldr	r0, [r3, r0]
 8003560:	4958      	ldr	r1, [pc, #352]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003562:	0013      	movs	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	189b      	adds	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	5058      	str	r0, [r3, r1]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 800356c:	193b      	adds	r3, r7, r4
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	1c59      	adds	r1, r3, #1
 8003572:	193b      	adds	r3, r7, r4
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	4853      	ldr	r0, [pc, #332]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003578:	000b      	movs	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	185b      	adds	r3, r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	18c3      	adds	r3, r0, r3
 8003582:	3308      	adds	r3, #8
 8003584:	6819      	ldr	r1, [r3, #0]
 8003586:	484f      	ldr	r0, [pc, #316]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003588:	0013      	movs	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	189b      	adds	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	18c3      	adds	r3, r0, r3
 8003592:	3308      	adds	r3, #8
 8003594:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8003596:	193b      	adds	r3, r7, r4
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	193b      	adds	r3, r7, r4
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	4848      	ldr	r0, [pc, #288]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80035a2:	000b      	movs	r3, r1
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	185b      	adds	r3, r3, r1
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	18c3      	adds	r3, r0, r3
 80035ac:	3304      	adds	r3, #4
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	4844      	ldr	r0, [pc, #272]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80035b2:	0013      	movs	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	189b      	adds	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	18c3      	adds	r3, r0, r3
 80035bc:	3304      	adds	r3, #4
 80035be:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 80035c0:	193b      	adds	r3, r7, r4
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	1c59      	adds	r1, r3, #1
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	483e      	ldr	r0, [pc, #248]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80035cc:	000b      	movs	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	185b      	adds	r3, r3, r1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	18c3      	adds	r3, r0, r3
 80035d6:	330c      	adds	r3, #12
 80035d8:	7818      	ldrb	r0, [r3, #0]
 80035da:	493a      	ldr	r1, [pc, #232]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80035dc:	0013      	movs	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	18cb      	adds	r3, r1, r3
 80035e6:	330c      	adds	r3, #12
 80035e8:	1c02      	adds	r2, r0, #0
 80035ea:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 80035ec:	193b      	adds	r3, r7, r4
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	1c59      	adds	r1, r3, #1
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	4833      	ldr	r0, [pc, #204]	; (80036c4 <SCH_Delete_Task+0x23c>)
 80035f8:	000b      	movs	r3, r1
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	185b      	adds	r3, r3, r1
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	18c3      	adds	r3, r0, r3
 8003602:	3310      	adds	r3, #16
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	482f      	ldr	r0, [pc, #188]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003608:	0013      	movs	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	189b      	adds	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	18c3      	adds	r3, r0, r3
 8003612:	3310      	adds	r3, #16
 8003614:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8003616:	193b      	adds	r3, r7, r4
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	193b      	adds	r3, r7, r4
 800361c:	3201      	adds	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	200e      	movs	r0, #14
 8003622:	183b      	adds	r3, r7, r0
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b26      	cmp	r3, #38	; 0x26
 8003628:	d98e      	bls.n	8003548 <SCH_Delete_Task+0xc0>
				}
				SCH_tasks_G[j].pTask = 0;
 800362a:	183b      	adds	r3, r7, r0
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	4925      	ldr	r1, [pc, #148]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003630:	0013      	movs	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	189b      	adds	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	2200      	movs	r2, #0
 800363a:	505a      	str	r2, [r3, r1]
				SCH_tasks_G[j].Period = 0;
 800363c:	183b      	adds	r3, r7, r0
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	4920      	ldr	r1, [pc, #128]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003642:	0013      	movs	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	189b      	adds	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	18cb      	adds	r3, r1, r3
 800364c:	3308      	adds	r3, #8
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8003652:	183b      	adds	r3, r7, r0
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	491b      	ldr	r1, [pc, #108]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003658:	0013      	movs	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	189b      	adds	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	18cb      	adds	r3, r1, r3
 8003662:	3304      	adds	r3, #4
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8003668:	183b      	adds	r3, r7, r0
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	4915      	ldr	r1, [pc, #84]	; (80036c4 <SCH_Delete_Task+0x23c>)
 800366e:	0013      	movs	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	189b      	adds	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	18cb      	adds	r3, r1, r3
 8003678:	330c      	adds	r3, #12
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 800367e:	183b      	adds	r3, r7, r0
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	4910      	ldr	r1, [pc, #64]	; (80036c4 <SCH_Delete_Task+0x23c>)
 8003684:	0013      	movs	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	189b      	adds	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	18cb      	adds	r3, r1, r3
 800368e:	3310      	adds	r3, #16
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
				return Return_code;
 8003694:	230d      	movs	r3, #13
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	e00e      	b.n	80036ba <SCH_Delete_Task+0x232>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 800369c:	210f      	movs	r1, #15
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	3201      	adds	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	230f      	movs	r3, #15
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b27      	cmp	r3, #39	; 0x27
 80036b0:	d800      	bhi.n	80036b4 <SCH_Delete_Task+0x22c>
 80036b2:	e6fa      	b.n	80034aa <SCH_Delete_Task+0x22>
			}
		}
	}
	return Return_code; // return status
 80036b4:	230d      	movs	r3, #13
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	781b      	ldrb	r3, [r3, #0]
}
 80036ba:	0018      	movs	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	b005      	add	sp, #20
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	200004a4 	.word	0x200004a4

080036c8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <SCH_Dispatch_Tasks+0x54>)
 80036d0:	7b1b      	ldrb	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01d      	beq.n	8003712 <SCH_Dispatch_Tasks+0x4a>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <SCH_Dispatch_Tasks+0x54>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <SCH_Dispatch_Tasks+0x54>)
 80036de:	2200      	movs	r2, #0
 80036e0:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <SCH_Dispatch_Tasks+0x54>)
 80036e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036e8:	c313      	stmia	r3!, {r0, r1, r4}
 80036ea:	ca03      	ldmia	r2!, {r0, r1}
 80036ec:	c303      	stmia	r3!, {r0, r1}
		SCH_Delete_Task(temtask.TaskID);
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f7ff fec8 	bl	8003488 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <SCH_Dispatch_Tasks+0x4a>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8003700:	1d3b      	adds	r3, r7, #4
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	6899      	ldr	r1, [r3, #8]
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	001a      	movs	r2, r3
 800370e:	f7ff fd35 	bl	800317c <SCH_Add_Task>
		}
	}
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b007      	add	sp, #28
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	200004a4 	.word	0x200004a4

08003720 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	newTaskID++;
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <Get_New_Task_ID+0x2c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <Get_New_Task_ID+0x2c>)
 800372c:	601a      	str	r2, [r3, #0]
	if(newTaskID == NO_TASK_ID){
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <Get_New_Task_ID+0x2c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <Get_New_Task_ID+0x20>
		newTaskID++;
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <Get_New_Task_ID+0x2c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <Get_New_Task_ID+0x2c>)
 800373e:	601a      	str	r2, [r3, #0]
	}
	return newTaskID;
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <Get_New_Task_ID+0x2c>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	200007c4 	.word	0x200007c4

08003750 <utils_buffer_init>:
 * 
 * @param buffer Pointer to Buffer Object
 * @return true if OK
 * @return false if Failed
 */
bool utils_buffer_init(utils_buffer_t * buffer, uint16_t sizeOfObject){
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	000a      	movs	r2, r1
 800375a:	1cbb      	adds	r3, r7, #2
 800375c:	801a      	strh	r2, [r3, #0]
    buffer->head = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
    buffer->tail = 0;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
    buffer->count = 0;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
    buffer->size = sizeOfObject;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1cba      	adds	r2, r7, #2
 8003774:	4907      	ldr	r1, [pc, #28]	; (8003794 <utils_buffer_init+0x44>)
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	525a      	strh	r2, [r3, r1]
    memset(buffer->buffer , 0, sizeof(buffer->buffer));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	330c      	adds	r3, #12
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	2100      	movs	r1, #0
 8003784:	0018      	movs	r0, r3
 8003786:	f007 fcd4 	bl	800b132 <memset>
    return true;
 800378a:	2301      	movs	r3, #1
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}
 8003794:	0000080c 	.word	0x0000080c

08003798 <utils_buffer_push>:
 * @param data Pointer to data in
 * @param data_size Data Size
 * @return true if OK
 * @return false if Failed
 */
bool utils_buffer_push(utils_buffer_t * buffer, void * object){
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	uint8_t * data_p = (uint8_t*) object;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	60bb      	str	r3, [r7, #8]
	if(utils_buffer_is_full(buffer)){
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 f883 	bl	80038b4 <utils_buffer_is_full>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d001      	beq.n	80037b6 <utils_buffer_push+0x1e>
		return false;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e01e      	b.n	80037f4 <utils_buffer_push+0x5c>
	}
    for (size_t i = 0; i < buffer->size; i++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e013      	b.n	80037e4 <utils_buffer_push+0x4c>
    {
        buffer->buffer[buffer->head] = data_p[i];
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	7811      	ldrb	r1, [r2, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	18d3      	adds	r3, r2, r3
 80037cc:	1c0a      	adds	r2, r1, #0
 80037ce:	731a      	strb	r2, [r3, #12]
        buffer->head = (buffer->head + 1) % BUFFER_MAX_SIZE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	3301      	adds	r3, #1
 80037d6:	055b      	lsls	r3, r3, #21
 80037d8:	0d5a      	lsrs	r2, r3, #21
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < buffer->size; i++)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3301      	adds	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <utils_buffer_push+0x64>)
 80037e8:	5a9b      	ldrh	r3, [r3, r2]
 80037ea:	001a      	movs	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d3e4      	bcc.n	80037bc <utils_buffer_push+0x24>
    }
    return true;
 80037f2:	2301      	movs	r3, #1
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	0000080c 	.word	0x0000080c

08003800 <utils_buffer_pop>:
 * @param data Pointer to data out
 * @param data_size Data size
 * @return true If OK
 * @return false If failed
 */
bool utils_buffer_pop(utils_buffer_t  * buffer, void *object){
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	uint8_t * data_p = (uint8_t *)object;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < buffer->size; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e012      	b.n	800383a <utils_buffer_pop+0x3a>
    {
        /* code */
    	data_p[i] = buffer->buffer[buffer->tail];
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	18cb      	adds	r3, r1, r3
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	188a      	adds	r2, r1, r2
 8003822:	7b12      	ldrb	r2, [r2, #12]
 8003824:	701a      	strb	r2, [r3, #0]
        buffer->tail = (buffer->tail + 1) % BUFFER_MAX_SIZE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	055b      	lsls	r3, r3, #21
 800382e:	0d5a      	lsrs	r2, r3, #21
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < buffer->size; i++)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a05      	ldr	r2, [pc, #20]	; (8003854 <utils_buffer_pop+0x54>)
 800383e:	5a9b      	ldrh	r3, [r3, r2]
 8003840:	001a      	movs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4293      	cmp	r3, r2
 8003846:	d3e5      	bcc.n	8003814 <utils_buffer_pop+0x14>
    }
    return true;
 8003848:	2301      	movs	r3, #1
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b004      	add	sp, #16
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	0000080c 	.word	0x0000080c

08003858 <utils_buffer_is_available>:
 * @param buffer Pointer to buffer
 * @return true if buffer available
 * @return false if buffer not available
 */

bool utils_buffer_is_available(utils_buffer_t * buffer){
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
    if(buffer->head >= buffer->tail){
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d30d      	bcc.n	8003888 <utils_buffer_is_available+0x30>
        return (buffer->head - buffer->tail >= buffer->size);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1ad2      	subs	r2, r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	490d      	ldr	r1, [pc, #52]	; (80038b0 <utils_buffer_is_available+0x58>)
 800387a:	5a5b      	ldrh	r3, [r3, r1]
 800387c:	0019      	movs	r1, r3
 800387e:	2300      	movs	r3, #0
 8003880:	428a      	cmp	r2, r1
 8003882:	415b      	adcs	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e00f      	b.n	80038a8 <utils_buffer_is_available+0x50>
    }else{
    	return (BUFFER_MAX_SIZE - buffer->tail + buffer->head >= buffer->size);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	0112      	lsls	r2, r2, #4
 8003896:	189a      	adds	r2, r3, r2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4905      	ldr	r1, [pc, #20]	; (80038b0 <utils_buffer_is_available+0x58>)
 800389c:	5a5b      	ldrh	r3, [r3, r1]
 800389e:	0019      	movs	r1, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	428a      	cmp	r2, r1
 80038a4:	415b      	adcs	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
    }
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0000080c 	.word	0x0000080c

080038b4 <utils_buffer_is_full>:
        return false;
    }
    memcpy(object, &buffer->buffer[buffer->size], buffer->size);
}

bool utils_buffer_is_full(utils_buffer_t * buffer){
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	size_t remain;
	if(buffer->head >= buffer->tail){
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d30a      	bcc.n	80038de <utils_buffer_is_full+0x2a>
		remain = BUFFER_MAX_SIZE - (buffer->head - buffer->tail);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	4694      	mov	ip, r2
 80038d8:	4463      	add	r3, ip
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e005      	b.n	80038ea <utils_buffer_is_full+0x36>
	}else{
		remain = buffer->tail - buffer->head;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	60fb      	str	r3, [r7, #12]
	}
	if(remain >= buffer->size){
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a06      	ldr	r2, [pc, #24]	; (8003908 <utils_buffer_is_full+0x54>)
 80038ee:	5a9b      	ldrh	r3, [r3, r2]
 80038f0:	001a      	movs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d301      	bcc.n	80038fc <utils_buffer_is_full+0x48>
		return false;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <utils_buffer_is_full+0x4a>
	}else{
		return true;
 80038fc:	2301      	movs	r3, #1
	}
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	0000080c 	.word	0x0000080c

0800390c <utils_string_to_int>:
 *
 * @param buffer Pointer to buffer
 * @param buffer_length Buffer Len
 * @return true Interger
 */
uint16_t utils_string_to_int(char * buffer , uint16_t buffer_length){
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	000a      	movs	r2, r1
 8003916:	1cbb      	adds	r3, r7, #2
 8003918:	801a      	strh	r2, [r3, #0]
	uint16_t result = 0;
 800391a:	230e      	movs	r3, #14
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	2200      	movs	r2, #0
 8003920:	801a      	strh	r2, [r3, #0]
	for (uint16_t var = 0; var < buffer_length; ++var) {
 8003922:	230c      	movs	r3, #12
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	2200      	movs	r2, #0
 8003928:	801a      	strh	r2, [r3, #0]
 800392a:	e018      	b.n	800395e <utils_string_to_int+0x52>
		result = result*10 + (uint8_t)buffer[var] - 48;
 800392c:	240e      	movs	r4, #14
 800392e:	193b      	adds	r3, r7, r4
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	1c1a      	adds	r2, r3, #0
 8003934:	0092      	lsls	r2, r2, #2
 8003936:	18d3      	adds	r3, r2, r3
 8003938:	18db      	adds	r3, r3, r3
 800393a:	b29a      	uxth	r2, r3
 800393c:	200c      	movs	r0, #12
 800393e:	183b      	adds	r3, r7, r0
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	18cb      	adds	r3, r1, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	18d3      	adds	r3, r2, r3
 800394c:	b29a      	uxth	r2, r3
 800394e:	193b      	adds	r3, r7, r4
 8003950:	3a30      	subs	r2, #48	; 0x30
 8003952:	801a      	strh	r2, [r3, #0]
	for (uint16_t var = 0; var < buffer_length; ++var) {
 8003954:	183b      	adds	r3, r7, r0
 8003956:	183a      	adds	r2, r7, r0
 8003958:	8812      	ldrh	r2, [r2, #0]
 800395a:	3201      	adds	r2, #1
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	230c      	movs	r3, #12
 8003960:	18fa      	adds	r2, r7, r3
 8003962:	1cbb      	adds	r3, r7, #2
 8003964:	8812      	ldrh	r2, [r2, #0]
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d3df      	bcc.n	800392c <utils_string_to_int+0x20>
	}
	return result;
 800396c:	230e      	movs	r3, #14
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	881b      	ldrh	r3, [r3, #0]
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b005      	add	sp, #20
 8003978:	bd90      	pop	{r4, r7, pc}
	...

0800397c <SERIAL_get_command_run>:
static void clear_buffer();
static void timeout_fn();
static void refresh_timeout();
static void respone_command(uint8_t mess);

void SERIAL_get_command_run(){
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	af00      	add	r7, sp, #0
	switch (state) {
 8003980:	4b8e      	ldr	r3, [pc, #568]	; (8003bbc <SERIAL_get_command_run+0x240>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d069      	beq.n	8003a5c <SERIAL_get_command_run+0xe0>
 8003988:	dd00      	ble.n	800398c <SERIAL_get_command_run+0x10>
 800398a:	e10f      	b.n	8003bac <SERIAL_get_command_run+0x230>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <SERIAL_get_command_run+0x1a>
 8003990:	2b01      	cmp	r3, #1
 8003992:	d021      	beq.n	80039d8 <SERIAL_get_command_run+0x5c>
			}
			clear_buffer();
			state =  WAIT_FOR_COMMAND;
			break;
		default:
			break;
 8003994:	e10a      	b.n	8003bac <SERIAL_get_command_run+0x230>
			if(UART_receive_available(UART_PORT)){
 8003996:	2002      	movs	r0, #2
 8003998:	f002 f884 	bl	8005aa4 <UART_receive_available>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d100      	bne.n	80039a2 <SERIAL_get_command_run+0x26>
 80039a0:	e106      	b.n	8003bb0 <SERIAL_get_command_run+0x234>
				if(UART_receive_data(UART_PORT) == '!'){
 80039a2:	2002      	movs	r0, #2
 80039a4:	f002 f898 	bl	8005ad8 <UART_receive_data>
 80039a8:	0003      	movs	r3, r0
 80039aa:	2b21      	cmp	r3, #33	; 0x21
 80039ac:	d000      	beq.n	80039b0 <SERIAL_get_command_run+0x34>
 80039ae:	e0ff      	b.n	8003bb0 <SERIAL_get_command_run+0x234>
					buffer[0] = '!';
 80039b0:	4b83      	ldr	r3, [pc, #524]	; (8003bc0 <SERIAL_get_command_run+0x244>)
 80039b2:	2221      	movs	r2, #33	; 0x21
 80039b4:	701a      	strb	r2, [r3, #0]
					length = 1;
 80039b6:	4b83      	ldr	r3, [pc, #524]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
					task_id = SCH_Add_Task(timeout_fn, TIMEOUT_DURATION, 0);
 80039bc:	23fa      	movs	r3, #250	; 0xfa
 80039be:	0099      	lsls	r1, r3, #2
 80039c0:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <SERIAL_get_command_run+0x24c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7ff fbd9 	bl	800317c <SCH_Add_Task>
 80039ca:	0002      	movs	r2, r0
 80039cc:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <SERIAL_get_command_run+0x250>)
 80039ce:	601a      	str	r2, [r3, #0]
					state =  GET_COMMAND;
 80039d0:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <SERIAL_get_command_run+0x240>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
			break;
 80039d6:	e0eb      	b.n	8003bb0 <SERIAL_get_command_run+0x234>
			if(timeout){
 80039d8:	4b7d      	ldr	r3, [pc, #500]	; (8003bd0 <SERIAL_get_command_run+0x254>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <SERIAL_get_command_run+0x74>
				timeout = false;
 80039e0:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <SERIAL_get_command_run+0x254>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
				clear_buffer();
 80039e6:	f000 f8ff 	bl	8003be8 <clear_buffer>
				state =  WAIT_FOR_COMMAND;
 80039ea:	4b74      	ldr	r3, [pc, #464]	; (8003bbc <SERIAL_get_command_run+0x240>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
			if(length >= MAX_SIZE_BUFF){
 80039f0:	4b74      	ldr	r3, [pc, #464]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b09      	cmp	r3, #9
 80039f6:	d909      	bls.n	8003a0c <SERIAL_get_command_run+0x90>
				clear_buffer();
 80039f8:	f000 f8f6 	bl	8003be8 <clear_buffer>
				SCH_Delete_Task(task_id);
 80039fc:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <SERIAL_get_command_run+0x250>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff fd41 	bl	8003488 <SCH_Delete_Task>
				state =  WAIT_FOR_COMMAND;
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <SERIAL_get_command_run+0x240>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
			if(UART_receive_available(UART_PORT)){
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	f002 f849 	bl	8005aa4 <UART_receive_available>
 8003a12:	1e03      	subs	r3, r0, #0
 8003a14:	d100      	bne.n	8003a18 <SERIAL_get_command_run+0x9c>
 8003a16:	e0cd      	b.n	8003bb4 <SERIAL_get_command_run+0x238>
				refresh_timeout();
 8003a18:	f000 f8fa 	bl	8003c10 <refresh_timeout>
				buffer[length] = UART_receive_data(UART_PORT);
 8003a1c:	4b69      	ldr	r3, [pc, #420]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	001c      	movs	r4, r3
 8003a22:	2002      	movs	r0, #2
 8003a24:	f002 f858 	bl	8005ad8 <UART_receive_data>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	4b64      	ldr	r3, [pc, #400]	; (8003bc0 <SERIAL_get_command_run+0x244>)
 8003a2e:	551a      	strb	r2, [r3, r4]
				if(buffer[length] == '#'){
 8003a30:	4b64      	ldr	r3, [pc, #400]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	001a      	movs	r2, r3
 8003a36:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <SERIAL_get_command_run+0x244>)
 8003a38:	5c9b      	ldrb	r3, [r3, r2]
 8003a3a:	2b23      	cmp	r3, #35	; 0x23
 8003a3c:	d107      	bne.n	8003a4e <SERIAL_get_command_run+0xd2>
					SCH_Delete_Task(task_id);
 8003a3e:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <SERIAL_get_command_run+0x250>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7ff fd20 	bl	8003488 <SCH_Delete_Task>
					state =  CONSTRUE_COMMAND;
 8003a48:	4b5c      	ldr	r3, [pc, #368]	; (8003bbc <SERIAL_get_command_run+0x240>)
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]
				length++;
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 8003a58:	701a      	strb	r2, [r3, #0]
			break;
 8003a5a:	e0ab      	b.n	8003bb4 <SERIAL_get_command_run+0x238>
			switch (buffer[1]) {
 8003a5c:	4b58      	ldr	r3, [pc, #352]	; (8003bc0 <SERIAL_get_command_run+0x244>)
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	2b44      	cmp	r3, #68	; 0x44
 8003a62:	d002      	beq.n	8003a6a <SERIAL_get_command_run+0xee>
 8003a64:	2b53      	cmp	r3, #83	; 0x53
 8003a66:	d052      	beq.n	8003b0e <SERIAL_get_command_run+0x192>
 8003a68:	e093      	b.n	8003b92 <SERIAL_get_command_run+0x216>
					for(i = 0; i <= 0; ++i){
 8003a6a:	4b5a      	ldr	r3, [pc, #360]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e041      	b.n	8003af6 <SERIAL_get_command_run+0x17a>
						if(buffer[2] == table_command_device[i].sign){
 8003a72:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <SERIAL_get_command_run+0x244>)
 8003a74:	789a      	ldrb	r2, [r3, #2]
 8003a76:	4b57      	ldr	r3, [pc, #348]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	4b57      	ldr	r3, [pc, #348]	; (8003bd8 <SERIAL_get_command_run+0x25c>)
 8003a7c:	0089      	lsls	r1, r1, #2
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d133      	bne.n	8003aec <SERIAL_get_command_run+0x170>
							if(buffer[3] == 'X'){
 8003a84:	4b4e      	ldr	r3, [pc, #312]	; (8003bc0 <SERIAL_get_command_run+0x244>)
 8003a86:	78db      	ldrb	r3, [r3, #3]
 8003a88:	2b58      	cmp	r3, #88	; 0x58
 8003a8a:	d10e      	bne.n	8003aaa <SERIAL_get_command_run+0x12e>
								DEVICE_MANAGER_clear_under_remote_control(table_command_device[i].name);
 8003a8c:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a51      	ldr	r2, [pc, #324]	; (8003bd8 <SERIAL_get_command_run+0x25c>)
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	3302      	adds	r3, #2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 fe71 	bl	8004784 <DEVICE_MANAGER_clear_under_remote_control>
								respone_command(COMMAND_OK);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f000 f8cc 	bl	8003c40 <respone_command>
							break;
 8003aa8:	e029      	b.n	8003afe <SERIAL_get_command_run+0x182>
								value = utils_string_to_int(&buffer[3], length - 4);
 8003aaa:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b04      	subs	r3, #4
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <SERIAL_get_command_run+0x260>)
 8003ab6:	0011      	movs	r1, r2
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7ff ff27 	bl	800390c <utils_string_to_int>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <SERIAL_get_command_run+0x264>)
 8003ac4:	801a      	strh	r2, [r3, #0]
								DEVICE_MANAGER_under_remote_control(table_command_device[i].name, value);
 8003ac6:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a43      	ldr	r2, [pc, #268]	; (8003bd8 <SERIAL_get_command_run+0x25c>)
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	18d3      	adds	r3, r2, r3
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <SERIAL_get_command_run+0x264>)
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	0019      	movs	r1, r3
 8003ade:	0010      	movs	r0, r2
 8003ae0:	f000 fe7c 	bl	80047dc <DEVICE_MANAGER_under_remote_control>
								respone_command(COMMAND_OK);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f000 f8ab 	bl	8003c40 <respone_command>
							break;
 8003aea:	e008      	b.n	8003afe <SERIAL_get_command_run+0x182>
					for(i = 0; i <= 0; ++i){
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	4b38      	ldr	r3, [pc, #224]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	4b37      	ldr	r3, [pc, #220]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	ddb9      	ble.n	8003a72 <SERIAL_get_command_run+0xf6>
					if( i == 5 ){
 8003afe:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	d149      	bne.n	8003b9a <SERIAL_get_command_run+0x21e>
						respone_command(COMMAND_ER);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f000 f89a 	bl	8003c40 <respone_command>
					break;
 8003b0c:	e045      	b.n	8003b9a <SERIAL_get_command_run+0x21e>
					for(i = 0; i <= 2; ++i){
 8003b0e:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e031      	b.n	8003b7a <SERIAL_get_command_run+0x1fe>
						if(buffer[2] == table_command_condition[i].sign){
 8003b16:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <SERIAL_get_command_run+0x244>)
 8003b18:	789a      	ldrb	r2, [r3, #2]
 8003b1a:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <SERIAL_get_command_run+0x268>)
 8003b20:	0089      	lsls	r1, r1, #2
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d123      	bne.n	8003b70 <SERIAL_get_command_run+0x1f4>
							value = utils_string_to_int(&buffer[3], length - 4);
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <SERIAL_get_command_run+0x248>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b04      	subs	r3, #4
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <SERIAL_get_command_run+0x260>)
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7ff fee8 	bl	800390c <utils_string_to_int>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	001a      	movs	r2, r3
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <SERIAL_get_command_run+0x264>)
 8003b42:	801a      	strh	r2, [r3, #0]
							DEVICE_MANAGER_change_setpoint(table_command_condition[i].name, value);
 8003b44:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a26      	ldr	r2, [pc, #152]	; (8003be4 <SERIAL_get_command_run+0x268>)
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	3302      	adds	r3, #2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b2dc      	uxtb	r4, r3
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <SERIAL_get_command_run+0x264>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fd fbd3 	bl	8001304 <__aeabi_ui2f>
 8003b5e:	1c03      	adds	r3, r0, #0
 8003b60:	1c19      	adds	r1, r3, #0
 8003b62:	0020      	movs	r0, r4
 8003b64:	f000 fd36 	bl	80045d4 <DEVICE_MANAGER_change_setpoint>
							respone_command(COMMAND_OK);
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f000 f869 	bl	8003c40 <respone_command>
							break;
 8003b6e:	e008      	b.n	8003b82 <SERIAL_get_command_run+0x206>
					for(i = 0; i <= 2; ++i){
 8003b70:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	ddc9      	ble.n	8003b16 <SERIAL_get_command_run+0x19a>
					if( i == 6 ){
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <SERIAL_get_command_run+0x258>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d109      	bne.n	8003b9e <SERIAL_get_command_run+0x222>
						respone_command(COMMAND_ER);
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f000 f858 	bl	8003c40 <respone_command>
					break;
 8003b90:	e005      	b.n	8003b9e <SERIAL_get_command_run+0x222>
					respone_command(COMMAND_ER);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f000 f854 	bl	8003c40 <respone_command>
					break;
 8003b98:	e002      	b.n	8003ba0 <SERIAL_get_command_run+0x224>
					break;
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	e000      	b.n	8003ba0 <SERIAL_get_command_run+0x224>
					break;
 8003b9e:	46c0      	nop			; (mov r8, r8)
			clear_buffer();
 8003ba0:	f000 f822 	bl	8003be8 <clear_buffer>
			state =  WAIT_FOR_COMMAND;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <SERIAL_get_command_run+0x240>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
			break;
 8003baa:	e004      	b.n	8003bb6 <SERIAL_get_command_run+0x23a>
			break;
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	e002      	b.n	8003bb6 <SERIAL_get_command_run+0x23a>
			break;
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	e000      	b.n	8003bb6 <SERIAL_get_command_run+0x23a>
			break;
 8003bb4:	46c0      	nop			; (mov r8, r8)
	}
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bdb0      	pop	{r4, r5, r7, pc}
 8003bbc:	200007cc 	.word	0x200007cc
 8003bc0:	200007d0 	.word	0x200007d0
 8003bc4:	200007da 	.word	0x200007da
 8003bc8:	08003bfd 	.word	0x08003bfd
 8003bcc:	200007dc 	.word	0x200007dc
 8003bd0:	200007db 	.word	0x200007db
 8003bd4:	200007e4 	.word	0x200007e4
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	200007d3 	.word	0x200007d3
 8003be0:	200007e0 	.word	0x200007e0
 8003be4:	20000004 	.word	0x20000004

08003be8 <clear_buffer>:

static void clear_buffer(){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	length = 0;
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <clear_buffer+0x10>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200007da 	.word	0x200007da

08003bfc <timeout_fn>:
static void timeout_fn(){
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	timeout = true;
 8003c00:	4b02      	ldr	r3, [pc, #8]	; (8003c0c <timeout_fn+0x10>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	200007db 	.word	0x200007db

08003c10 <refresh_timeout>:
static void refresh_timeout(){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
	SCH_Delete_Task(task_id);
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <refresh_timeout+0x28>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7ff fc35 	bl	8003488 <SCH_Delete_Task>
	task_id = SCH_Add_Task(timeout_fn, TIMEOUT_DURATION, 0);
 8003c1e:	23fa      	movs	r3, #250	; 0xfa
 8003c20:	0099      	lsls	r1, r3, #2
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <refresh_timeout+0x2c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7ff faa8 	bl	800317c <SCH_Add_Task>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <refresh_timeout+0x28>)
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200007dc 	.word	0x200007dc
 8003c3c:	08003bfd 	.word	0x08003bfd

08003c40 <respone_command>:
static void respone_command(uint8_t mess){
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	0002      	movs	r2, r0
 8003c48:	1dfb      	adds	r3, r7, #7
 8003c4a:	701a      	strb	r2, [r3, #0]
//		UART_send(UART_PORT, " ER\r\n", sizeof(" ER\r\n"));
//	}else if(mess =  COMMAND_OK){
//		UART_send(UART_PORT, buffer, length);
//		UART_send(UART_PORT, " OK\r\n", sizeof(" OK\r\n"));
//	}
	clear_buffer();
 8003c4c:	f7ff ffcc 	bl	8003be8 <clear_buffer>
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <SCHEDULERPORT_init>:
#include "App/schedulerport.h"
#include "Lib/scheduler/scheduler.h"
#include "Hal/timer.h"

void SCHEDULERPORT_init(){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	TIMER_attach_intr_1ms(SCH_Update);
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <SCHEDULERPORT_init+0x14>)
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f001 fe1c 	bl	800589c <TIMER_attach_intr_1ms>
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	08003131 	.word	0x08003131

08003c70 <calculate_crc>:
 */

#include "Device/SHT30.h"

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8003c7a:	2317      	movs	r3, #23
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	22ff      	movs	r2, #255	; 0xff
 8003c80:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e02a      	b.n	8003cde <calculate_crc+0x6e>
		crc ^= data[i];
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	18d3      	adds	r3, r2, r3
 8003c8e:	7819      	ldrb	r1, [r3, #0]
 8003c90:	2217      	movs	r2, #23
 8003c92:	18bb      	adds	r3, r7, r2
 8003c94:	18ba      	adds	r2, r7, r2
 8003c96:	7812      	ldrb	r2, [r2, #0]
 8003c98:	404a      	eors	r2, r1
 8003c9a:	701a      	strb	r2, [r3, #0]
		for (size_t j = 0; j < 8; j++) {
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e017      	b.n	8003cd2 <calculate_crc+0x62>
			if ((crc & 0x80u) != 0) {
 8003ca2:	2117      	movs	r1, #23
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da08      	bge.n	8003cc0 <calculate_crc+0x50>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	18db      	adds	r3, r3, r3
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	2131      	movs	r1, #49	; 0x31
 8003cba:	404a      	eors	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e005      	b.n	8003ccc <calculate_crc+0x5c>
			} else {
				crc <<= 1u;
 8003cc0:	2317      	movs	r3, #23
 8003cc2:	18fa      	adds	r2, r7, r3
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	18db      	adds	r3, r3, r3
 8003cca:	7013      	strb	r3, [r2, #0]
		for (size_t j = 0; j < 8; j++) {
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b07      	cmp	r3, #7
 8003cd6:	d9e4      	bls.n	8003ca2 <calculate_crc+0x32>
	for (size_t i = 0; i < length; i++) {
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3d0      	bcc.n	8003c88 <calculate_crc+0x18>
			}
		}
	}
	return crc;
 8003ce6:	2317      	movs	r3, #23
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b006      	add	sp, #24
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <SHT30_Init>:
void SHT30_Init(SHT30_HandleTypeDef* SHT,  I2C_HandleTypeDef* hi2c, uint8_t Address){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	1dfb      	adds	r3, r7, #7
 8003d00:	701a      	strb	r2, [r3, #0]
	 SHT->hi2c = hi2c;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	601a      	str	r2, [r3, #0]
	 SHT->Address = Address;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1dfa      	adds	r2, r7, #7
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	711a      	strb	r2, [r3, #4]
	 SHT->Temp = 0;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
	 SHT->Humi = 0;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	60da      	str	r2, [r3, #12]
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b004      	add	sp, #16
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <SHT30_Send_Command>:
static uint8_t SHT30_Send_Command(SHT30_HandleTypeDef* SHT, uint16_t command){
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	000a      	movs	r2, r1
 8003d2e:	1cbb      	adds	r3, r7, #2
 8003d30:	801a      	strh	r2, [r3, #0]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8003d32:	1cbb      	adds	r3, r7, #2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	240c      	movs	r4, #12
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	1cbb      	adds	r3, r7, #2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	193b      	adds	r3, r7, r4
 8003d4a:	705a      	strb	r2, [r3, #1]

		if (HAL_I2C_Master_Transmit(SHT->hi2c, SHT->Address << 1u, command_buffer, sizeof(command_buffer),
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	791b      	ldrb	r3, [r3, #4]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	18db      	adds	r3, r3, r3
 8003d58:	b299      	uxth	r1, r3
 8003d5a:	193a      	adds	r2, r7, r4
 8003d5c:	231e      	movs	r3, #30
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2302      	movs	r3, #2
 8003d62:	f002 feb7 	bl	8006ad4 <HAL_I2C_Master_Transmit>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d001      	beq.n	8003d6e <SHT30_Send_Command+0x4a>
		                            SHT30_I2C_Timeout) != HAL_OK) {
			return 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <SHT30_Send_Command+0x4c>
		}

		return 1;
 8003d6e:	2301      	movs	r3, #1
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b005      	add	sp, #20
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <SHT30_Read_Temperature_And_Humidity>:
		return   SHT30_Send_Command(SHT,Heater_Disable);
	}
}


uint8_t SHT30_Read_Temperature_And_Humidity(SHT30_HandleTypeDef * SHT, uint16_t mode){
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	b089      	sub	sp, #36	; 0x24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	000a      	movs	r2, r1
 8003d82:	1cbb      	adds	r3, r7, #2
 8003d84:	801a      	strh	r2, [r3, #0]
	 SHT30_Send_Command( SHT, mode);
 8003d86:	1cbb      	adds	r3, r7, #2
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff ffc8 	bl	8003d24 <SHT30_Send_Command>
	 HAL_Delay(1);
 8003d94:	2001      	movs	r0, #1
 8003d96:	f002 fab7 	bl	8006308 <HAL_Delay>
	 uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(SHT->hi2c, SHT->Address << 1, buffer, sizeof(buffer), SHT30_I2C_Timeout) != HAL_OK) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	791b      	ldrb	r3, [r3, #4]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	18db      	adds	r3, r3, r3
 8003da6:	b299      	uxth	r1, r3
 8003da8:	230c      	movs	r3, #12
 8003daa:	18fa      	adds	r2, r7, r3
 8003dac:	231e      	movs	r3, #30
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2306      	movs	r3, #6
 8003db2:	f002 ff97 	bl	8006ce4 <HAL_I2C_Master_Receive>
 8003db6:	1e03      	subs	r3, r0, #0
 8003db8:	d001      	beq.n	8003dbe <SHT30_Read_Temperature_And_Humidity+0x46>
		return 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e068      	b.n	8003e90 <SHT30_Read_Temperature_And_Humidity+0x118>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8003dbe:	2617      	movs	r6, #23
 8003dc0:	19bc      	adds	r4, r7, r6
 8003dc2:	250c      	movs	r5, #12
 8003dc4:	197b      	adds	r3, r7, r5
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff ff51 	bl	8003c70 <calculate_crc>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	7023      	strb	r3, [r4, #0]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8003dd2:	197b      	adds	r3, r7, r5
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	2216      	movs	r2, #22
 8003dd8:	18bc      	adds	r4, r7, r2
 8003dda:	2102      	movs	r1, #2
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7ff ff47 	bl	8003c70 <calculate_crc>
 8003de2:	0003      	movs	r3, r0
 8003de4:	7023      	strb	r3, [r4, #0]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8003de6:	0029      	movs	r1, r5
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	789b      	ldrb	r3, [r3, #2]
 8003dec:	19ba      	adds	r2, r7, r6
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d106      	bne.n	8003e02 <SHT30_Read_Temperature_And_Humidity+0x8a>
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	795b      	ldrb	r3, [r3, #5]
 8003df8:	2216      	movs	r2, #22
 8003dfa:	18ba      	adds	r2, r7, r2
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d001      	beq.n	8003e06 <SHT30_Read_Temperature_And_Humidity+0x8e>
		return 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e044      	b.n	8003e90 <SHT30_Read_Temperature_And_Humidity+0x118>
	}
	uint16_t temperature_raw = (buffer[0]<< 8) | buffer[1] ;
 8003e06:	210c      	movs	r1, #12
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	b21a      	sxth	r2, r3
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	785b      	ldrb	r3, [r3, #1]
 8003e14:	b21b      	sxth	r3, r3
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	2014      	movs	r0, #20
 8003e1c:	183b      	adds	r3, r7, r0
 8003e1e:	801a      	strh	r2, [r3, #0]
	uint16_t humidity_raw = ( buffer[3] << 8) | buffer[4];
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	b21a      	sxth	r2, r3
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	791b      	ldrb	r3, [r3, #4]
 8003e2c:	b21b      	sxth	r3, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b21a      	sxth	r2, r3
 8003e32:	2412      	movs	r4, #18
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	801a      	strh	r2, [r3, #0]

	SHT->Temp = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fd fa61 	bl	8001304 <__aeabi_ui2f>
 8003e42:	1c03      	adds	r3, r0, #0
 8003e44:	4914      	ldr	r1, [pc, #80]	; (8003e98 <SHT30_Read_Temperature_And_Humidity+0x120>)
 8003e46:	1c18      	adds	r0, r3, #0
 8003e48:	f7fc ff3a 	bl	8000cc0 <__aeabi_fmul>
 8003e4c:	1c03      	adds	r3, r0, #0
 8003e4e:	4913      	ldr	r1, [pc, #76]	; (8003e9c <SHT30_Read_Temperature_And_Humidity+0x124>)
 8003e50:	1c18      	adds	r0, r3, #0
 8003e52:	f7fc fd6d 	bl	8000930 <__aeabi_fdiv>
 8003e56:	1c03      	adds	r3, r0, #0
 8003e58:	4911      	ldr	r1, [pc, #68]	; (8003ea0 <SHT30_Read_Temperature_And_Humidity+0x128>)
 8003e5a:	1c18      	adds	r0, r3, #0
 8003e5c:	f7fd f856 	bl	8000f0c <__aeabi_fsub>
 8003e60:	1c03      	adds	r3, r0, #0
 8003e62:	1c1a      	adds	r2, r3, #0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
	SHT->Humi  = 100.0f * (float)humidity_raw / 65535.0f;
 8003e68:	193b      	adds	r3, r7, r4
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fd fa49 	bl	8001304 <__aeabi_ui2f>
 8003e72:	1c03      	adds	r3, r0, #0
 8003e74:	490b      	ldr	r1, [pc, #44]	; (8003ea4 <SHT30_Read_Temperature_And_Humidity+0x12c>)
 8003e76:	1c18      	adds	r0, r3, #0
 8003e78:	f7fc ff22 	bl	8000cc0 <__aeabi_fmul>
 8003e7c:	1c03      	adds	r3, r0, #0
 8003e7e:	4907      	ldr	r1, [pc, #28]	; (8003e9c <SHT30_Read_Temperature_And_Humidity+0x124>)
 8003e80:	1c18      	adds	r0, r3, #0
 8003e82:	f7fc fd55 	bl	8000930 <__aeabi_fdiv>
 8003e86:	1c03      	adds	r3, r0, #0
 8003e88:	1c1a      	adds	r2, r3, #0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60da      	str	r2, [r3, #12]
	return 1;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b007      	add	sp, #28
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e98:	432f0000 	.word	0x432f0000
 8003e9c:	477fff00 	.word	0x477fff00
 8003ea0:	42340000 	.word	0x42340000
 8003ea4:	42c80000 	.word	0x42c80000

08003ea8 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <BH1750_Init+0x30>)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
	if(BH1750_OK == BH1750_Reset())
 8003eb6:	f000 f811 	bl	8003edc <BH1750_Reset>
 8003eba:	1e03      	subs	r3, r0, #0
 8003ebc:	d106      	bne.n	8003ecc <BH1750_Init+0x24>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8003ebe:	2045      	movs	r0, #69	; 0x45
 8003ec0:	f000 f87e 	bl	8003fc0 <BH1750_SetMtreg>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d101      	bne.n	8003ecc <BH1750_Init+0x24>
			return BH1750_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <BH1750_Init+0x26>
	}
	return BH1750_ERROR;
 8003ecc:	2301      	movs	r3, #1
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	200007e8 	.word	0x200007e8

08003edc <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8003ee2:	1dfb      	adds	r3, r7, #7
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <BH1750_Reset+0x30>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	1dfa      	adds	r2, r7, #7
 8003eee:	230a      	movs	r3, #10
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	2146      	movs	r1, #70	; 0x46
 8003ef6:	f002 fded 	bl	8006ad4 <HAL_I2C_Master_Transmit>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d101      	bne.n	8003f02 <BH1750_Reset+0x26>
		return BH1750_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8003f02:	2301      	movs	r3, #1
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200007e8 	.word	0x200007e8

08003f10 <BH1750_PowerState>:
//	Set the power state.
//	0 - sleep, low power.
//	1 - running.
//
BH1750_STATUS BH1750_PowerState(uint8_t PowerOn)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	0002      	movs	r2, r0
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	701a      	strb	r2, [r3, #0]
	PowerOn = (PowerOn? 1:0);
 8003f1c:	1dfb      	adds	r3, r7, #7
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	4193      	sbcs	r3, r2
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	001a      	movs	r2, r3
 8003f28:	1dfb      	adds	r3, r7, #7
 8003f2a:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &PowerOn, 1, 10))
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <BH1750_PowerState+0x40>)
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	1dfa      	adds	r2, r7, #7
 8003f32:	230a      	movs	r3, #10
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2301      	movs	r3, #1
 8003f38:	2146      	movs	r1, #70	; 0x46
 8003f3a:	f002 fdcb 	bl	8006ad4 <HAL_I2C_Master_Transmit>
 8003f3e:	1e03      	subs	r3, r0, #0
 8003f40:	d101      	bne.n	8003f46 <BH1750_PowerState+0x36>
		return BH1750_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <BH1750_PowerState+0x38>

	return BH1750_ERROR;
 8003f46:	2301      	movs	r3, #1
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200007e8 	.word	0x200007e8

08003f54 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	1dfb      	adds	r3, r7, #7
 8003f5e:	701a      	strb	r2, [r3, #0]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d107      	bne.n	8003f7c <BH1750_SetMode+0x28>
 8003f6c:	1dfb      	adds	r3, r7, #7
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <BH1750_SetMode+0x28>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e019      	b.n	8003fb0 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8003f7c:	1dfb      	adds	r3, r7, #7
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	001a      	movs	r2, r3
 8003f82:	230c      	movs	r3, #12
 8003f84:	4013      	ands	r3, r2
 8003f86:	d001      	beq.n	8003f8c <BH1750_SetMode+0x38>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e011      	b.n	8003fb0 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <BH1750_SetMode+0x64>)
 8003f92:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <BH1750_SetMode+0x68>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	1dfa      	adds	r2, r7, #7
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	2146      	movs	r1, #70	; 0x46
 8003fa2:	f002 fd97 	bl	8006ad4 <HAL_I2C_Master_Transmit>
 8003fa6:	1e03      	subs	r3, r0, #0
 8003fa8:	d101      	bne.n	8003fae <BH1750_SetMode+0x5a>
		return BH1750_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <BH1750_SetMode+0x5c>

	return BH1750_ERROR;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200007ec 	.word	0x200007ec
 8003fbc:	200007e8 	.word	0x200007e8

08003fc0 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8003fc0:	b5b0      	push	{r4, r5, r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	1dfb      	adds	r3, r7, #7
 8003fca:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8003fcc:	1dfb      	adds	r3, r7, #7
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b1e      	cmp	r3, #30
 8003fd2:	d903      	bls.n	8003fdc <BH1750_SetMtreg+0x1c>
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2bff      	cmp	r3, #255	; 0xff
 8003fda:	d101      	bne.n	8003fe0 <BH1750_SetMtreg+0x20>
		return BH1750_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e042      	b.n	8004066 <BH1750_SetMtreg+0xa6>
	}

	Bh1750_Mtreg = Mtreg;
 8003fe0:	4b23      	ldr	r3, [pc, #140]	; (8004070 <BH1750_SetMtreg+0xb0>)
 8003fe2:	1dfa      	adds	r2, r7, #7
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	701a      	strb	r2, [r3, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8003fe8:	1dfb      	adds	r3, r7, #7
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2240      	movs	r2, #64	; 0x40
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	210c      	movs	r1, #12
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	701a      	strb	r2, [r3, #0]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8003ffc:	1dfb      	adds	r3, r7, #7
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b25b      	sxtb	r3, r3
 8004002:	221f      	movs	r2, #31
 8004004:	4013      	ands	r3, r2
 8004006:	b25b      	sxtb	r3, r3
 8004008:	2260      	movs	r2, #96	; 0x60
 800400a:	4313      	orrs	r3, r2
 800400c:	b25b      	sxtb	r3, r3
 800400e:	b2da      	uxtb	r2, r3
 8004010:	187b      	adds	r3, r7, r1
 8004012:	705a      	strb	r2, [r3, #1]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <BH1750_SetMtreg+0xb4>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	250f      	movs	r5, #15
 800401a:	197c      	adds	r4, r7, r5
 800401c:	187a      	adds	r2, r7, r1
 800401e:	230a      	movs	r3, #10
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2301      	movs	r3, #1
 8004024:	2146      	movs	r1, #70	; 0x46
 8004026:	f002 fd55 	bl	8006ad4 <HAL_I2C_Master_Transmit>
 800402a:	0003      	movs	r3, r0
 800402c:	7023      	strb	r3, [r4, #0]
	if (HAL_OK != retCode) {
 800402e:	197b      	adds	r3, r7, r5
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <BH1750_SetMtreg+0x7a>
		return BH1750_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e015      	b.n	8004066 <BH1750_SetMtreg+0xa6>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <BH1750_SetMtreg+0xb4>)
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	250f      	movs	r5, #15
 8004040:	197c      	adds	r4, r7, r5
 8004042:	230c      	movs	r3, #12
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	230a      	movs	r3, #10
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2301      	movs	r3, #1
 800404e:	2146      	movs	r1, #70	; 0x46
 8004050:	f002 fd40 	bl	8006ad4 <HAL_I2C_Master_Transmit>
 8004054:	0003      	movs	r3, r0
 8004056:	7023      	strb	r3, [r4, #0]
	if (HAL_OK == retCode) {
 8004058:	197b      	adds	r3, r7, r5
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <BH1750_SetMtreg+0xa4>
		return BH1750_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e000      	b.n	8004066 <BH1750_SetMtreg+0xa6>
	}

	return BH1750_ERROR;
 8004064:	2301      	movs	r3, #1
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bdb0      	pop	{r4, r5, r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	200007ed 	.word	0x200007ed
 8004074:	200007e8 	.word	0x200007e8

08004078 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b087      	sub	sp, #28
 800407c:	af02      	add	r7, sp, #8
 800407e:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8004080:	4b24      	ldr	r3, [pc, #144]	; (8004114 <BH1750_ReadLight+0x9c>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	2408      	movs	r4, #8
 8004086:	193a      	adds	r2, r7, r4
 8004088:	230a      	movs	r3, #10
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2302      	movs	r3, #2
 800408e:	2146      	movs	r1, #70	; 0x46
 8004090:	f002 fe28 	bl	8006ce4 <HAL_I2C_Master_Receive>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d138      	bne.n	800410a <BH1750_ReadLight+0x92>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8004098:	193b      	adds	r3, r7, r4
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	193a      	adds	r2, r7, r4
 80040a0:	7852      	ldrb	r2, [r2, #1]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fd f8df 	bl	8001268 <__aeabi_i2f>
 80040aa:	1c03      	adds	r3, r0, #0
 80040ac:	60fb      	str	r3, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80040ae:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <BH1750_ReadLight+0xa0>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b45      	cmp	r3, #69	; 0x45
 80040b4:	d010      	beq.n	80040d8 <BH1750_ReadLight+0x60>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <BH1750_ReadLight+0xa0>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7fd f922 	bl	8001304 <__aeabi_ui2f>
 80040c0:	1c03      	adds	r3, r0, #0
 80040c2:	1c19      	adds	r1, r3, #0
 80040c4:	4815      	ldr	r0, [pc, #84]	; (800411c <BH1750_ReadLight+0xa4>)
 80040c6:	f7fc fc33 	bl	8000930 <__aeabi_fdiv>
 80040ca:	1c03      	adds	r3, r0, #0
 80040cc:	1c19      	adds	r1, r3, #0
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7fc fdf6 	bl	8000cc0 <__aeabi_fmul>
 80040d4:	1c03      	adds	r3, r0, #0
 80040d6:	60fb      	str	r3, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <BH1750_ReadLight+0xa8>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b21      	cmp	r3, #33	; 0x21
 80040de:	d003      	beq.n	80040e8 <BH1750_ReadLight+0x70>
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <BH1750_ReadLight+0xa8>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b11      	cmp	r3, #17
 80040e6:	d106      	bne.n	80040f6 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 80040e8:	2180      	movs	r1, #128	; 0x80
 80040ea:	05c9      	lsls	r1, r1, #23
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7fc fc1f 	bl	8000930 <__aeabi_fdiv>
 80040f2:	1c03      	adds	r3, r0, #0
 80040f4:	60fb      	str	r3, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 80040f6:	490b      	ldr	r1, [pc, #44]	; (8004124 <BH1750_ReadLight+0xac>)
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7fc fc19 	bl	8000930 <__aeabi_fdiv>
 80040fe:	1c03      	adds	r3, r0, #0
 8004100:	1c1a      	adds	r2, r3, #0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	601a      	str	r2, [r3, #0]
		return BH1750_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <BH1750_ReadLight+0x94>
	}
	return BH1750_ERROR;
 800410a:	2301      	movs	r3, #1
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b005      	add	sp, #20
 8004112:	bd90      	pop	{r4, r7, pc}
 8004114:	200007e8 	.word	0x200007e8
 8004118:	200007ed 	.word	0x200007ed
 800411c:	428a0000 	.word	0x428a0000
 8004120:	200007ec 	.word	0x200007ec
 8004124:	3f99999a 	.word	0x3f99999a

08004128 <LCD_I2C_Delay>:
 */


#include "Device/lcd_i2c.h"
//#include "main.h"
static void LCD_I2C_Delay(uint16_t time){
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	0002      	movs	r2, r0
 8004130:	1dbb      	adds	r3, r7, #6
 8004132:	801a      	strh	r2, [r3, #0]
	HAL_Delay(time);
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	0018      	movs	r0, r3
 800413a:	f002 f8e5 	bl	8006308 <HAL_Delay>
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}

08004146 <LCD_I2C_Write>:

static void LCD_I2C_Write(  LCD_I2C_DEVICE* LCD, uint8_t data, uint8_t mode){
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b087      	sub	sp, #28
 800414a:	af02      	add	r7, sp, #8
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	0008      	movs	r0, r1
 8004150:	0011      	movs	r1, r2
 8004152:	1cfb      	adds	r3, r7, #3
 8004154:	1c02      	adds	r2, r0, #0
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	1cbb      	adds	r3, r7, #2
 800415a:	1c0a      	adds	r2, r1, #0
 800415c:	701a      	strb	r2, [r3, #0]
	uint8_t dataUpper = data & 0xF0;
 800415e:	200f      	movs	r0, #15
 8004160:	183b      	adds	r3, r7, r0
 8004162:	1cfa      	adds	r2, r7, #3
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	210f      	movs	r1, #15
 8004168:	438a      	bics	r2, r1
 800416a:	701a      	strb	r2, [r3, #0]
	uint8_t dataLower = (data<<4) & 0xF0;
 800416c:	1cfb      	adds	r3, r7, #3
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	011a      	lsls	r2, r3, #4
 8004172:	240e      	movs	r4, #14
 8004174:	193b      	adds	r3, r7, r4
 8004176:	701a      	strb	r2, [r3, #0]
	uint8_t dataBuffer[4];
	if( LCD->backLight)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7adb      	ldrb	r3, [r3, #11]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <LCD_I2C_Write+0x52>
	{
		dataUpper |= LCD_BACKLIGHT;
 8004180:	183b      	adds	r3, r7, r0
 8004182:	183a      	adds	r2, r7, r0
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	2108      	movs	r1, #8
 8004188:	430a      	orrs	r2, r1
 800418a:	701a      	strb	r2, [r3, #0]
		dataLower |= LCD_BACKLIGHT;
 800418c:	193b      	adds	r3, r7, r4
 800418e:	193a      	adds	r2, r7, r4
 8004190:	7812      	ldrb	r2, [r2, #0]
 8004192:	2108      	movs	r1, #8
 8004194:	430a      	orrs	r2, r1
 8004196:	701a      	strb	r2, [r3, #0]
	}
	if(mode == LCD_DATA)
 8004198:	1cbb      	adds	r3, r7, #2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10e      	bne.n	80041be <LCD_I2C_Write+0x78>
	{
		dataUpper |= LCD_RS;
 80041a0:	220f      	movs	r2, #15
 80041a2:	18bb      	adds	r3, r7, r2
 80041a4:	18ba      	adds	r2, r7, r2
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	430a      	orrs	r2, r1
 80041ac:	701a      	strb	r2, [r3, #0]
		dataLower |= LCD_RS;
 80041ae:	220e      	movs	r2, #14
 80041b0:	18bb      	adds	r3, r7, r2
 80041b2:	18ba      	adds	r2, r7, r2
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	430a      	orrs	r2, r1
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	e011      	b.n	80041e2 <LCD_I2C_Write+0x9c>
	}
	else if(mode == LCD_COMMAND)
 80041be:	1cbb      	adds	r3, r7, #2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <LCD_I2C_Write+0x9c>
	{
		dataUpper &= ~LCD_RS;
 80041c6:	220f      	movs	r2, #15
 80041c8:	18bb      	adds	r3, r7, r2
 80041ca:	18ba      	adds	r2, r7, r2
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	2101      	movs	r1, #1
 80041d0:	438a      	bics	r2, r1
 80041d2:	701a      	strb	r2, [r3, #0]
		dataLower &= ~LCD_RS;
 80041d4:	220e      	movs	r2, #14
 80041d6:	18bb      	adds	r3, r7, r2
 80041d8:	18ba      	adds	r2, r7, r2
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	2101      	movs	r1, #1
 80041de:	438a      	bics	r2, r1
 80041e0:	701a      	strb	r2, [r3, #0]
	}
	//send 4 bit upper
	dataBuffer[0] = dataUpper | LCD_EN ; 				//set EN bit =1;
 80041e2:	200f      	movs	r0, #15
 80041e4:	183b      	adds	r3, r7, r0
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2204      	movs	r2, #4
 80041ea:	4313      	orrs	r3, r2
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	2108      	movs	r1, #8
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	701a      	strb	r2, [r3, #0]
//	LCD_I2C_Delay(1);
	dataBuffer[1] =dataUpper ;	// set EN bit = 0
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	183a      	adds	r2, r7, r0
 80041f8:	7812      	ldrb	r2, [r2, #0]
 80041fa:	705a      	strb	r2, [r3, #1]

	//send 4 bit lower
	dataBuffer[2] = dataLower | LCD_EN;					//set EN bit =1;
 80041fc:	200e      	movs	r0, #14
 80041fe:	183b      	adds	r3, r7, r0
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2204      	movs	r2, #4
 8004204:	4313      	orrs	r3, r2
 8004206:	b2da      	uxtb	r2, r3
 8004208:	187b      	adds	r3, r7, r1
 800420a:	709a      	strb	r2, [r3, #2]
//	LCD_I2C_Delay(1);
	dataBuffer[3] = dataLower;								//set EN bit =0;
 800420c:	000c      	movs	r4, r1
 800420e:	187b      	adds	r3, r7, r1
 8004210:	183a      	adds	r2, r7, r0
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit(LCD->hi2c, LCD->address,(uint8_t*) dataBuffer, sizeof(dataBuffer), 100);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	b299      	uxth	r1, r3
 8004220:	193a      	adds	r2, r7, r4
 8004222:	2364      	movs	r3, #100	; 0x64
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2304      	movs	r3, #4
 8004228:	f002 fc54 	bl	8006ad4 <HAL_I2C_Master_Transmit>
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b005      	add	sp, #20
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <LCD_I2C_Init>:
void LCD_I2C_Init(LCD_I2C_DEVICE* LCD, I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t colums, uint8_t rows){
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	0019      	movs	r1, r3
 8004240:	1dfb      	adds	r3, r7, #7
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	1dbb      	adds	r3, r7, #6
 8004246:	1c0a      	adds	r2, r1, #0
 8004248:	701a      	strb	r2, [r3, #0]
	LCD->hi2c 			= hi2c;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	601a      	str	r2, [r3, #0]
	LCD->address 		= address;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1dfa      	adds	r2, r7, #7
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	711a      	strb	r2, [r3, #4]
	LCD->colums 		= colums;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1dba      	adds	r2, r7, #6
 800425c:	7812      	ldrb	r2, [r2, #0]
 800425e:	715a      	strb	r2, [r3, #5]
	LCD->rows 			= rows;
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	2318      	movs	r3, #24
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	7193      	strb	r3, [r2, #6]
	// set LCD to 4bit mode, display 2 line, cell is 5x8 dots
	LCD->functionSet 	= LCD_FUNCTION_SET | LCD_4BITMODE |	LCD_2LINE | LCD_5x8DOTS;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2228      	movs	r2, #40	; 0x28
 800426e:	729a      	strb	r2, [r3, #10]
	LCD->entryMode 		= LCD_ENTRY_MODE_SET	| LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2206      	movs	r2, #6
 8004274:	71da      	strb	r2, [r3, #7]
	//set LCD to display on, cursor off , blink off
	LCD->displayCtrl		= LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON	| LCD_CURSOR_OFF | LCD_BLINK_OFF;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	220c      	movs	r2, #12
 800427a:	721a      	strb	r2, [r3, #8]
	LCD->cursorShift		= LCD_CURSOR_SHIFT	| LCD_CURSOR_MOVE	| LCD_MOVE_RIGHT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2214      	movs	r2, #20
 8004280:	725a      	strb	r2, [r3, #9]
	LCD->backLight 		= LCD_BACKLIGHT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2208      	movs	r2, #8
 8004286:	72da      	strb	r2, [r3, #11]

		LCD_I2C_Delay(50);
 8004288:	2032      	movs	r0, #50	; 0x32
 800428a:	f7ff ff4d 	bl	8004128 <LCD_I2C_Delay>

		LCD_I2C_Write(LCD, 0x33, LCD_COMMAND);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	2133      	movs	r1, #51	; 0x33
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff ff56 	bl	8004146 <LCD_I2C_Write>
	//	CLCD_Delay(5);
		LCD_I2C_Write(LCD, 0x33, LCD_COMMAND);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	2133      	movs	r1, #51	; 0x33
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7ff ff50 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 80042a6:	2005      	movs	r0, #5
 80042a8:	f7ff ff3e 	bl	8004128 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, 0x32, LCD_COMMAND);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2132      	movs	r1, #50	; 0x32
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff ff47 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 80042b8:	2005      	movs	r0, #5
 80042ba:	f7ff ff35 	bl	8004128 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, 0x20, LCD_COMMAND);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2120      	movs	r1, #32
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff ff3e 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 80042ca:	2005      	movs	r0, #5
 80042cc:	f7ff ff2c 	bl	8004128 <LCD_I2C_Delay>

		LCD_I2C_Write(LCD, LCD->entryMode, LCD_COMMAND);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	79d9      	ldrb	r1, [r3, #7]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	0018      	movs	r0, r3
 80042da:	f7ff ff34 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 80042de:	2002      	movs	r0, #2
 80042e0:	f7ff ff22 	bl	8004128 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD->displayCtrl, LCD_COMMAND);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	7a19      	ldrb	r1, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7ff ff2a 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 80042f2:	2002      	movs	r0, #2
 80042f4:	f7ff ff18 	bl	8004128 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD->cursorShift, LCD_COMMAND);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	7a59      	ldrb	r1, [r3, #9]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	0018      	movs	r0, r3
 8004302:	f7ff ff20 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 8004306:	2002      	movs	r0, #2
 8004308:	f7ff ff0e 	bl	8004128 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD->functionSet, LCD_COMMAND);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	7a99      	ldrb	r1, [r3, #10]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff ff16 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 800431a:	2002      	movs	r0, #2
 800431c:	f7ff ff04 	bl	8004128 <LCD_I2C_Delay>

		LCD_I2C_Write(LCD, LCD_CLEAR_DISPLAY, LCD_COMMAND);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	2101      	movs	r1, #1
 8004326:	0018      	movs	r0, r3
 8004328:	f7ff ff0d 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 800432c:	2005      	movs	r0, #5
 800432e:	f7ff fefb 	bl	8004128 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD_RETURN_HOME, LCD_COMMAND);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	2102      	movs	r1, #2
 8004338:	0018      	movs	r0, r3
 800433a:	f7ff ff04 	bl	8004146 <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 800433e:	2005      	movs	r0, #5
 8004340:	f7ff fef2 	bl	8004128 <LCD_I2C_Delay>

}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b004      	add	sp, #16
 800434a:	bd80      	pop	{r7, pc}

0800434c <LCD_I2C_SetCursor>:



 void LCD_I2C_SetCursor(LCD_I2C_DEVICE* LCD, uint8_t Xpos, uint8_t Ypos){
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	0008      	movs	r0, r1
 8004356:	0011      	movs	r1, r2
 8004358:	1cfb      	adds	r3, r7, #3
 800435a:	1c02      	adds	r2, r0, #0
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	1cbb      	adds	r3, r7, #2
 8004360:	1c0a      	adds	r2, r1, #0
 8004362:	701a      	strb	r2, [r3, #0]
	uint8_t DRAM_ADDRESS = 0x00;
 8004364:	230f      	movs	r3, #15
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
	// if x position is greater than colums number so set position is (col-1);
	if(Xpos >= LCD->colums)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	795b      	ldrb	r3, [r3, #5]
 8004370:	1cfa      	adds	r2, r7, #3
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d304      	bcc.n	8004382 <LCD_I2C_SetCursor+0x36>
	{
		Xpos = LCD->colums - 1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	795a      	ldrb	r2, [r3, #5]
 800437c:	1cfb      	adds	r3, r7, #3
 800437e:	3a01      	subs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
	}
	// if x position is greater than rows number so set position is (row-1);
	if(Ypos >= LCD->rows)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	799b      	ldrb	r3, [r3, #6]
 8004386:	1cba      	adds	r2, r7, #2
 8004388:	7812      	ldrb	r2, [r2, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d304      	bcc.n	8004398 <LCD_I2C_SetCursor+0x4c>
	{
		Ypos = LCD->rows -1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	799a      	ldrb	r2, [r3, #6]
 8004392:	1cbb      	adds	r3, r7, #2
 8004394:	3a01      	subs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
	}
	// assign DRAM_ADDRESS to address of cell(row 1: 0x00 -> 0x0F, row2 : 0x40 -> 0x4F) in LCD
	if(Ypos == 0)
 8004398:	1cbb      	adds	r3, r7, #2
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <LCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80043a0:	230f      	movs	r3, #15
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	1cfa      	adds	r2, r7, #3
 80043a6:	7812      	ldrb	r2, [r2, #0]
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e009      	b.n	80043c0 <LCD_I2C_SetCursor+0x74>
	}
	else if(Ypos == 1)
 80043ac:	1cbb      	adds	r3, r7, #2
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <LCD_I2C_SetCursor+0x74>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 80043b4:	230f      	movs	r3, #15
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	1cfa      	adds	r2, r7, #3
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	3240      	adds	r2, #64	; 0x40
 80043be:	701a      	strb	r2, [r3, #0]
	}


	LCD_I2C_Write(LCD,  LCD_SET_DDRAM_ADDR | DRAM_ADDRESS, LCD_COMMAND);
 80043c0:	230f      	movs	r3, #15
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	4252      	negs	r2, r2
 80043ca:	4313      	orrs	r3, r2
 80043cc:	b2d9      	uxtb	r1, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7ff feb7 	bl	8004146 <LCD_I2C_Write>
}
 80043d8:	46c0      	nop			; (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}

080043e0 <LCD_I2C_Clear>:
void LCD_I2C_Clear(LCD_I2C_DEVICE* LCD){
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	LCD_I2C_Write(LCD, LCD_CLEAR_DISPLAY, LCD_COMMAND);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2101      	movs	r1, #1
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7ff fea9 	bl	8004146 <LCD_I2C_Write>
	LCD_I2C_Delay(5);
 80043f4:	2005      	movs	r0, #5
 80043f6:	f7ff fe97 	bl	8004128 <LCD_I2C_Delay>
}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b002      	add	sp, #8
 8004400:	bd80      	pop	{r7, pc}

08004402 <LCD_I2C_WriteChar>:
void LCD_I2C_Return_Home(LCD_I2C_DEVICE* LCD){
	LCD_I2C_Write(LCD, LCD_RETURN_HOME, LCD_COMMAND);
	LCD_I2C_Delay(5);
}
void LCD_I2C_WriteChar(  LCD_I2C_DEVICE* LCD,char character){
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	000a      	movs	r2, r1
 800440c:	1cfb      	adds	r3, r7, #3
 800440e:	701a      	strb	r2, [r3, #0]
	LCD_I2C_Write(LCD, character, LCD_DATA);
 8004410:	1cfb      	adds	r3, r7, #3
 8004412:	7819      	ldrb	r1, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	0018      	movs	r0, r3
 800441a:	f7ff fe94 	bl	8004146 <LCD_I2C_Write>
}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b002      	add	sp, #8
 8004424:	bd80      	pop	{r7, pc}

08004426 <LCD_I2C_WriteString>:

void LCD_I2C_WriteString( LCD_I2C_DEVICE* LCD, char *String){
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
	while(*String)   LCD_I2C_WriteChar(LCD, *String++);
 8004430:	e008      	b.n	8004444 <LCD_I2C_WriteString+0x1e>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	603a      	str	r2, [r7, #0]
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0011      	movs	r1, r2
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff ffdf 	bl	8004402 <LCD_I2C_WriteChar>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f2      	bne.n	8004432 <LCD_I2C_WriteString+0xc>
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b002      	add	sp, #8
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <publish_state>:


static void (*func_ptr[NUM_DEVICE])() = {
		[PUMP] = PUMP_get_humi_value,
};
static void publish_state(){
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b093      	sub	sp, #76	; 0x4c
 800445c:	af02      	add	r7, sp, #8
	char buff[60];
	int size = sprintf(buff,"PUMP STATE =%d - %.2f\n" ,DEVICE_state[PUMP],value_condition[SOIL_HUMI]);
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <publish_state+0x38>)
 8004460:	681c      	ldr	r4, [r3, #0]
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <publish_state+0x3c>)
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	490b      	ldr	r1, [pc, #44]	; (8004498 <publish_state+0x40>)
 800446a:	0038      	movs	r0, r7
 800446c:	9200      	str	r2, [sp, #0]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	0022      	movs	r2, r4
 8004472:	f007 fce1 	bl	800be38 <siprintf>
 8004476:	0003      	movs	r3, r0
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
	UART_send(UART_3, buff, size);
 800447a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800447c:	003b      	movs	r3, r7
 800447e:	0019      	movs	r1, r3
 8004480:	2002      	movs	r0, #2
 8004482:	f001 faef 	bl	8005a64 <UART_send>
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b011      	add	sp, #68	; 0x44
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	2000085c 	.word	0x2000085c
 8004494:	20000838 	.word	0x20000838
 8004498:	0800fd50 	.word	0x0800fd50

0800449c <DEVICE_MANAGER_init>:
void DEVICE_MANAGER_init(){
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0

// INIT SET POINT AND THRESHOLD
	setpoint[LUX] = 950;
 80044a2:	493a      	ldr	r1, [pc, #232]	; (800458c <DEVICE_MANAGER_init+0xf0>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <DEVICE_MANAGER_init+0xf4>)
 80044a8:	600a      	str	r2, [r1, #0]
 80044aa:	604b      	str	r3, [r1, #4]
	setpoint[SOIL_HUMI] = 85;
 80044ac:	4937      	ldr	r1, [pc, #220]	; (800458c <DEVICE_MANAGER_init+0xf0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	4b38      	ldr	r3, [pc, #224]	; (8004594 <DEVICE_MANAGER_init+0xf8>)
 80044b2:	610a      	str	r2, [r1, #16]
 80044b4:	614b      	str	r3, [r1, #20]
	setpoint[SOIL_TEMP] = 25;
 80044b6:	4935      	ldr	r1, [pc, #212]	; (800458c <DEVICE_MANAGER_init+0xf0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <DEVICE_MANAGER_init+0xfc>)
 80044bc:	608a      	str	r2, [r1, #8]
 80044be:	60cb      	str	r3, [r1, #12]


	threshold[CEILING_LEVEL][LUX] = 1000;
 80044c0:	4936      	ldr	r1, [pc, #216]	; (800459c <DEVICE_MANAGER_init+0x100>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <DEVICE_MANAGER_init+0x104>)
 80044c6:	600a      	str	r2, [r1, #0]
 80044c8:	604b      	str	r3, [r1, #4]
	threshold[CEILING_LEVEL][SOIL_HUMI] = 90;
 80044ca:	4934      	ldr	r1, [pc, #208]	; (800459c <DEVICE_MANAGER_init+0x100>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <DEVICE_MANAGER_init+0x108>)
 80044d0:	610a      	str	r2, [r1, #16]
 80044d2:	614b      	str	r3, [r1, #20]
	threshold[CEILING_LEVEL][SOIL_TEMP] = 27;
 80044d4:	4931      	ldr	r1, [pc, #196]	; (800459c <DEVICE_MANAGER_init+0x100>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <DEVICE_MANAGER_init+0x10c>)
 80044da:	608a      	str	r2, [r1, #8]
 80044dc:	60cb      	str	r3, [r1, #12]


	threshold[FLOOR_LEVEL][LUX] = 900;
 80044de:	492f      	ldr	r1, [pc, #188]	; (800459c <DEVICE_MANAGER_init+0x100>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	4b32      	ldr	r3, [pc, #200]	; (80045ac <DEVICE_MANAGER_init+0x110>)
 80044e4:	618a      	str	r2, [r1, #24]
 80044e6:	61cb      	str	r3, [r1, #28]
	threshold[FLOOR_LEVEL][SOIL_HUMI] = 80;
 80044e8:	492c      	ldr	r1, [pc, #176]	; (800459c <DEVICE_MANAGER_init+0x100>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <DEVICE_MANAGER_init+0x114>)
 80044ee:	628a      	str	r2, [r1, #40]	; 0x28
 80044f0:	62cb      	str	r3, [r1, #44]	; 0x2c
	threshold[FLOOR_LEVEL][SOIL_TEMP] = 23;
 80044f2:	492a      	ldr	r1, [pc, #168]	; (800459c <DEVICE_MANAGER_init+0x100>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <DEVICE_MANAGER_init+0x118>)
 80044f8:	620a      	str	r2, [r1, #32]
 80044fa:	624b      	str	r3, [r1, #36]	; 0x24

	SCH_Add_Task(publish_state, 500, 1000);
 80044fc:	23fa      	movs	r3, #250	; 0xfa
 80044fe:	009a      	lsls	r2, r3, #2
 8004500:	23fa      	movs	r3, #250	; 0xfa
 8004502:	0059      	lsls	r1, r3, #1
 8004504:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <DEVICE_MANAGER_init+0x11c>)
 8004506:	0018      	movs	r0, r3
 8004508:	f7fe fe38 	bl	800317c <SCH_Add_Task>

// INIT GPIO
	int nb_io = sizeof(gpio_table)/sizeof(GPIO_info_t);
 800450c:	2301      	movs	r3, #1
 800450e:	603b      	str	r3, [r7, #0]
	for (uint8_t var = 0; var < nb_io; ++var) {
 8004510:	1dfb      	adds	r3, r7, #7
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e02f      	b.n	8004578 <DEVICE_MANAGER_init+0xdc>
			HAL_GPIO_Init(gpio_table[var].port, &gpio_table[var].init_info);
 8004518:	1dfb      	adds	r3, r7, #7
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	4927      	ldr	r1, [pc, #156]	; (80045bc <DEVICE_MANAGER_init+0x120>)
 800451e:	0013      	movs	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	189b      	adds	r3, r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	5858      	ldr	r0, [r3, r1]
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	781a      	ldrb	r2, [r3, #0]
 800452c:	0013      	movs	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	189b      	adds	r3, r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4a21      	ldr	r2, [pc, #132]	; (80045bc <DEVICE_MANAGER_init+0x120>)
 8004536:	189b      	adds	r3, r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	0019      	movs	r1, r3
 800453c:	f002 f8b2 	bl	80066a4 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(gpio_table[var].port, gpio_table[var].init_info.Pin, OFF);
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	781a      	ldrb	r2, [r3, #0]
 8004544:	491d      	ldr	r1, [pc, #116]	; (80045bc <DEVICE_MANAGER_init+0x120>)
 8004546:	0013      	movs	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	189b      	adds	r3, r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	5858      	ldr	r0, [r3, r1]
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	4919      	ldr	r1, [pc, #100]	; (80045bc <DEVICE_MANAGER_init+0x120>)
 8004556:	0013      	movs	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	189b      	adds	r3, r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	18cb      	adds	r3, r1, r3
 8004560:	3304      	adds	r3, #4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	2201      	movs	r2, #1
 8004568:	0019      	movs	r1, r3
 800456a:	f002 f9ff 	bl	800696c <HAL_GPIO_WritePin>
	for (uint8_t var = 0; var < nb_io; ++var) {
 800456e:	1dfb      	adds	r3, r7, #7
 8004570:	1dfa      	adds	r2, r7, #7
 8004572:	7812      	ldrb	r2, [r2, #0]
 8004574:	3201      	adds	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	dcca      	bgt.n	8004518 <DEVICE_MANAGER_init+0x7c>
	}
}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	200007f0 	.word	0x200007f0
 8004590:	408db000 	.word	0x408db000
 8004594:	40554000 	.word	0x40554000
 8004598:	40390000 	.word	0x40390000
 800459c:	20000808 	.word	0x20000808
 80045a0:	408f4000 	.word	0x408f4000
 80045a4:	40568000 	.word	0x40568000
 80045a8:	403b0000 	.word	0x403b0000
 80045ac:	408c2000 	.word	0x408c2000
 80045b0:	40540000 	.word	0x40540000
 80045b4:	40370000 	.word	0x40370000
 80045b8:	08004459 	.word	0x08004459
 80045bc:	20000010 	.word	0x20000010

080045c0 <DEVICE_MANAGER_run>:

void DEVICE_MANAGER_run(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
	CONTROL_pump();
 80045c4:	f000 f942 	bl	800484c <CONTROL_pump>
	PUMP_run();
 80045c8:	f000 f9b4 	bl	8004934 <PUMP_run>

}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <DEVICE_MANAGER_change_setpoint>:
	* value = (float)value_condition[condition];
}
float DEVICE_MANAGER_get_setpoint( uint8_t condition){
	return setpoint[condition];
}
void DEVICE_MANAGER_change_setpoint(uint8_t condition, float value){
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	0002      	movs	r2, r0
 80045dc:	6039      	str	r1, [r7, #0]
 80045de:	1dfb      	adds	r3, r7, #7
 80045e0:	701a      	strb	r2, [r3, #0]
	setpoint[condition] = value;
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	781c      	ldrb	r4, [r3, #0]
 80045e6:	6838      	ldr	r0, [r7, #0]
 80045e8:	f7fe fcb4 	bl	8002f54 <__aeabi_f2d>
 80045ec:	0002      	movs	r2, r0
 80045ee:	000b      	movs	r3, r1
 80045f0:	484c      	ldr	r0, [pc, #304]	; (8004724 <DEVICE_MANAGER_change_setpoint+0x150>)
 80045f2:	00e1      	lsls	r1, r4, #3
 80045f4:	1841      	adds	r1, r0, r1
 80045f6:	600a      	str	r2, [r1, #0]
 80045f8:	604b      	str	r3, [r1, #4]
	switch (condition) {
 80045fa:	1dfb      	adds	r3, r7, #7
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d03a      	beq.n	8004678 <DEVICE_MANAGER_change_setpoint+0xa4>
 8004602:	dd00      	ble.n	8004606 <DEVICE_MANAGER_change_setpoint+0x32>
 8004604:	e087      	b.n	8004716 <DEVICE_MANAGER_change_setpoint+0x142>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <DEVICE_MANAGER_change_setpoint+0x3e>
 800460a:	2b01      	cmp	r3, #1
 800460c:	d100      	bne.n	8004610 <DEVICE_MANAGER_change_setpoint+0x3c>
 800460e:	e084      	b.n	800471a <DEVICE_MANAGER_change_setpoint+0x146>
			HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, SET);
			SCH_Delete_Task(task_id[PUMP]);
			task_id[PUMP] = SCH_Add_Task(func_ptr[PUMP], READ_HUMI_SENSOR_DURATION, 0);
			break;
		default:
			break;
 8004610:	e081      	b.n	8004716 <DEVICE_MANAGER_change_setpoint+0x142>
			threshold[CEILING_LEVEL][condition] = value + 50;
 8004612:	4945      	ldr	r1, [pc, #276]	; (8004728 <DEVICE_MANAGER_change_setpoint+0x154>)
 8004614:	6838      	ldr	r0, [r7, #0]
 8004616:	f7fb ffed 	bl	80005f4 <__aeabi_fadd>
 800461a:	1c03      	adds	r3, r0, #0
 800461c:	1c1a      	adds	r2, r3, #0
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	781c      	ldrb	r4, [r3, #0]
 8004622:	1c10      	adds	r0, r2, #0
 8004624:	f7fe fc96 	bl	8002f54 <__aeabi_f2d>
 8004628:	0002      	movs	r2, r0
 800462a:	000b      	movs	r3, r1
 800462c:	483f      	ldr	r0, [pc, #252]	; (800472c <DEVICE_MANAGER_change_setpoint+0x158>)
 800462e:	00e1      	lsls	r1, r4, #3
 8004630:	1841      	adds	r1, r0, r1
 8004632:	600a      	str	r2, [r1, #0]
 8004634:	604b      	str	r3, [r1, #4]
			threshold[FLOOR_LEVEL][condition] = (value - 50 >= 0) ? value - 50 : 0;
 8004636:	493c      	ldr	r1, [pc, #240]	; (8004728 <DEVICE_MANAGER_change_setpoint+0x154>)
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f7fc fc67 	bl	8000f0c <__aeabi_fsub>
 800463e:	1c03      	adds	r3, r0, #0
 8004640:	2100      	movs	r1, #0
 8004642:	1c18      	adds	r0, r3, #0
 8004644:	f7fb ff5c 	bl	8000500 <__aeabi_fcmpge>
 8004648:	1e03      	subs	r3, r0, #0
 800464a:	d00a      	beq.n	8004662 <DEVICE_MANAGER_change_setpoint+0x8e>
 800464c:	4936      	ldr	r1, [pc, #216]	; (8004728 <DEVICE_MANAGER_change_setpoint+0x154>)
 800464e:	6838      	ldr	r0, [r7, #0]
 8004650:	f7fc fc5c 	bl	8000f0c <__aeabi_fsub>
 8004654:	1c03      	adds	r3, r0, #0
 8004656:	1c18      	adds	r0, r3, #0
 8004658:	f7fe fc7c 	bl	8002f54 <__aeabi_f2d>
 800465c:	0002      	movs	r2, r0
 800465e:	000b      	movs	r3, r1
 8004660:	e001      	b.n	8004666 <DEVICE_MANAGER_change_setpoint+0x92>
 8004662:	2200      	movs	r2, #0
 8004664:	2300      	movs	r3, #0
 8004666:	1df9      	adds	r1, r7, #7
 8004668:	7809      	ldrb	r1, [r1, #0]
 800466a:	4830      	ldr	r0, [pc, #192]	; (800472c <DEVICE_MANAGER_change_setpoint+0x158>)
 800466c:	3103      	adds	r1, #3
 800466e:	00c9      	lsls	r1, r1, #3
 8004670:	1841      	adds	r1, r0, r1
 8004672:	600a      	str	r2, [r1, #0]
 8004674:	604b      	str	r3, [r1, #4]
			break;
 8004676:	e051      	b.n	800471c <DEVICE_MANAGER_change_setpoint+0x148>
			threshold[CEILING_LEVEL][condition] = value + 5;
 8004678:	492d      	ldr	r1, [pc, #180]	; (8004730 <DEVICE_MANAGER_change_setpoint+0x15c>)
 800467a:	6838      	ldr	r0, [r7, #0]
 800467c:	f7fb ffba 	bl	80005f4 <__aeabi_fadd>
 8004680:	1c03      	adds	r3, r0, #0
 8004682:	1c1a      	adds	r2, r3, #0
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	781c      	ldrb	r4, [r3, #0]
 8004688:	1c10      	adds	r0, r2, #0
 800468a:	f7fe fc63 	bl	8002f54 <__aeabi_f2d>
 800468e:	0002      	movs	r2, r0
 8004690:	000b      	movs	r3, r1
 8004692:	4826      	ldr	r0, [pc, #152]	; (800472c <DEVICE_MANAGER_change_setpoint+0x158>)
 8004694:	00e1      	lsls	r1, r4, #3
 8004696:	1841      	adds	r1, r0, r1
 8004698:	600a      	str	r2, [r1, #0]
 800469a:	604b      	str	r3, [r1, #4]
			threshold[FLOOR_LEVEL][condition] = (value - 5 >= 0) ? value - 5 : 0;
 800469c:	4924      	ldr	r1, [pc, #144]	; (8004730 <DEVICE_MANAGER_change_setpoint+0x15c>)
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	f7fc fc34 	bl	8000f0c <__aeabi_fsub>
 80046a4:	1c03      	adds	r3, r0, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	1c18      	adds	r0, r3, #0
 80046aa:	f7fb ff29 	bl	8000500 <__aeabi_fcmpge>
 80046ae:	1e03      	subs	r3, r0, #0
 80046b0:	d00a      	beq.n	80046c8 <DEVICE_MANAGER_change_setpoint+0xf4>
 80046b2:	491f      	ldr	r1, [pc, #124]	; (8004730 <DEVICE_MANAGER_change_setpoint+0x15c>)
 80046b4:	6838      	ldr	r0, [r7, #0]
 80046b6:	f7fc fc29 	bl	8000f0c <__aeabi_fsub>
 80046ba:	1c03      	adds	r3, r0, #0
 80046bc:	1c18      	adds	r0, r3, #0
 80046be:	f7fe fc49 	bl	8002f54 <__aeabi_f2d>
 80046c2:	0002      	movs	r2, r0
 80046c4:	000b      	movs	r3, r1
 80046c6:	e001      	b.n	80046cc <DEVICE_MANAGER_change_setpoint+0xf8>
 80046c8:	2200      	movs	r2, #0
 80046ca:	2300      	movs	r3, #0
 80046cc:	1df9      	adds	r1, r7, #7
 80046ce:	7809      	ldrb	r1, [r1, #0]
 80046d0:	4816      	ldr	r0, [pc, #88]	; (800472c <DEVICE_MANAGER_change_setpoint+0x158>)
 80046d2:	3103      	adds	r1, #3
 80046d4:	00c9      	lsls	r1, r1, #3
 80046d6:	1841      	adds	r1, r0, r1
 80046d8:	600a      	str	r2, [r1, #0]
 80046da:	604b      	str	r3, [r1, #4]
			DEVICE_state[PUMP] = PUMP_WAIT_FOR_CHANGE_CONDITION;
 80046dc:	4b15      	ldr	r3, [pc, #84]	; (8004734 <DEVICE_MANAGER_change_setpoint+0x160>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, SET);
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <DEVICE_MANAGER_change_setpoint+0x164>)
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <DEVICE_MANAGER_change_setpoint+0x164>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2201      	movs	r2, #1
 80046ee:	0019      	movs	r1, r3
 80046f0:	f002 f93c 	bl	800696c <HAL_GPIO_WritePin>
			SCH_Delete_Task(task_id[PUMP]);
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <DEVICE_MANAGER_change_setpoint+0x168>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7fe fec5 	bl	8003488 <SCH_Delete_Task>
			task_id[PUMP] = SCH_Add_Task(func_ptr[PUMP], READ_HUMI_SENSOR_DURATION, 0);
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <DEVICE_MANAGER_change_setpoint+0x16c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	22fa      	movs	r2, #250	; 0xfa
 8004704:	0051      	lsls	r1, r2, #1
 8004706:	2200      	movs	r2, #0
 8004708:	0018      	movs	r0, r3
 800470a:	f7fe fd37 	bl	800317c <SCH_Add_Task>
 800470e:	0002      	movs	r2, r0
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <DEVICE_MANAGER_change_setpoint+0x168>)
 8004712:	601a      	str	r2, [r3, #0]
			break;
 8004714:	e002      	b.n	800471c <DEVICE_MANAGER_change_setpoint+0x148>
			break;
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	e000      	b.n	800471c <DEVICE_MANAGER_change_setpoint+0x148>
			break;
 800471a:	46c0      	nop			; (mov r8, r8)
	}
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b003      	add	sp, #12
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	200007f0 	.word	0x200007f0
 8004728:	42480000 	.word	0x42480000
 800472c:	20000808 	.word	0x20000808
 8004730:	40a00000 	.word	0x40a00000
 8004734:	2000085c 	.word	0x2000085c
 8004738:	20000010 	.word	0x20000010
 800473c:	20000858 	.word	0x20000858
 8004740:	20000028 	.word	0x20000028

08004744 <DEVICE_MANAGER_set_value_condition>:

void DEVICE_MANAGER_set_value_condition(uint8_t condition, float value){
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	0002      	movs	r2, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	1dfb      	adds	r3, r7, #7
 8004750:	701a      	strb	r2, [r3, #0]
	value_condition[condition] = value;
 8004752:	1dfb      	adds	r3, r7, #7
 8004754:	781c      	ldrb	r4, [r3, #0]
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	f7fe fbfc 	bl	8002f54 <__aeabi_f2d>
 800475c:	0002      	movs	r2, r0
 800475e:	000b      	movs	r3, r1
 8004760:	4806      	ldr	r0, [pc, #24]	; (800477c <DEVICE_MANAGER_set_value_condition+0x38>)
 8004762:	00e1      	lsls	r1, r4, #3
 8004764:	1841      	adds	r1, r0, r1
 8004766:	600a      	str	r2, [r1, #0]
 8004768:	604b      	str	r3, [r1, #4]
	flag_condition[condition] = true;
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	4a04      	ldr	r2, [pc, #16]	; (8004780 <DEVICE_MANAGER_set_value_condition+0x3c>)
 8004770:	2101      	movs	r1, #1
 8004772:	54d1      	strb	r1, [r2, r3]
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b003      	add	sp, #12
 800477a:	bd90      	pop	{r4, r7, pc}
 800477c:	20000838 	.word	0x20000838
 8004780:	20000850 	.word	0x20000850

08004784 <DEVICE_MANAGER_clear_under_remote_control>:

void DEVICE_MANAGER_clear_under_remote_control(uint8_t device){
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	0002      	movs	r2, r0
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	701a      	strb	r2, [r3, #0]
	if(DEVICE_state[device] != DEVICE_UNDER_REMOTE_CONTROL){
 8004790:	1dfb      	adds	r3, r7, #7
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <DEVICE_MANAGER_clear_under_remote_control+0x4c>)
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	58d3      	ldr	r3, [r2, r3]
 800479a:	2b32      	cmp	r3, #50	; 0x32
 800479c:	d114      	bne.n	80047c8 <DEVICE_MANAGER_clear_under_remote_control+0x44>
		return;
	}
	switch (device) {
 800479e:	1dfb      	adds	r3, r7, #7
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <DEVICE_MANAGER_clear_under_remote_control+0x36>
			case PUMP:
				HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, OFF);
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <DEVICE_MANAGER_clear_under_remote_control+0x50>)
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <DEVICE_MANAGER_clear_under_remote_control+0x50>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2201      	movs	r2, #1
 80047b2:	0019      	movs	r1, r3
 80047b4:	f002 f8da 	bl	800696c <HAL_GPIO_WritePin>
				break;
 80047b8:	e000      	b.n	80047bc <DEVICE_MANAGER_clear_under_remote_control+0x38>
			default:
				break;
 80047ba:	46c0      	nop			; (mov r8, r8)
		}
		flag_under_control[device] = false;
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	4a05      	ldr	r2, [pc, #20]	; (80047d8 <DEVICE_MANAGER_clear_under_remote_control+0x54>)
 80047c2:	2100      	movs	r1, #0
 80047c4:	54d1      	strb	r1, [r2, r3]
 80047c6:	e000      	b.n	80047ca <DEVICE_MANAGER_clear_under_remote_control+0x46>
		return;
 80047c8:	46c0      	nop			; (mov r8, r8)
}
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b002      	add	sp, #8
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	2000085c 	.word	0x2000085c
 80047d4:	20000010 	.word	0x20000010
 80047d8:	20000854 	.word	0x20000854

080047dc <DEVICE_MANAGER_under_remote_control>:
void DEVICE_MANAGER_under_remote_control(uint8_t device, uint8_t value){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	0002      	movs	r2, r0
 80047e4:	1dfb      	adds	r3, r7, #7
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	1dbb      	adds	r3, r7, #6
 80047ea:	1c0a      	adds	r2, r1, #0
 80047ec:	701a      	strb	r2, [r3, #0]
	switch (device) {
 80047ee:	1dfb      	adds	r3, r7, #7
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <DEVICE_MANAGER_under_remote_control+0x4c>
		case PUMP:
			HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, (value > 0 ? ON :OFF));
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <DEVICE_MANAGER_under_remote_control+0x60>)
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <DEVICE_MANAGER_under_remote_control+0x60>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b299      	uxth	r1, r3
 8004800:	1dbb      	adds	r3, r7, #6
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	425a      	negs	r2, r3
 8004806:	4153      	adcs	r3, r2
 8004808:	b2db      	uxtb	r3, r3
 800480a:	001a      	movs	r2, r3
 800480c:	f002 f8ae 	bl	800696c <HAL_GPIO_WritePin>
			SCH_Delete_Task(task_id[PUMP]);
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <DEVICE_MANAGER_under_remote_control+0x64>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	0018      	movs	r0, r3
 8004816:	f7fe fe37 	bl	8003488 <SCH_Delete_Task>
			DEVICE_state[PUMP] = DEVICE_UNDER_REMOTE_CONTROL;
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <DEVICE_MANAGER_under_remote_control+0x68>)
 800481c:	2232      	movs	r2, #50	; 0x32
 800481e:	601a      	str	r2, [r3, #0]
			SENSOR_MANAGER_clear_setup_state(SOIL_HT_SENSOR);
 8004820:	2003      	movs	r0, #3
 8004822:	f000 fa4d 	bl	8004cc0 <SENSOR_MANAGER_clear_setup_state>
			break;
 8004826:	e000      	b.n	800482a <DEVICE_MANAGER_under_remote_control+0x4e>
		default:
			break;
 8004828:	46c0      	nop			; (mov r8, r8)
	}
	flag_under_control[device] = true;
 800482a:	1dfb      	adds	r3, r7, #7
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	4a06      	ldr	r2, [pc, #24]	; (8004848 <DEVICE_MANAGER_under_remote_control+0x6c>)
 8004830:	2101      	movs	r1, #1
 8004832:	54d1      	strb	r1, [r2, r3]
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000010 	.word	0x20000010
 8004840:	20000858 	.word	0x20000858
 8004844:	2000085c 	.word	0x2000085c
 8004848:	20000854 	.word	0x20000854

0800484c <CONTROL_pump>:


// ------------------------------------------------------------------------------------- //
static uint8_t pre_state = 0;

static void CONTROL_pump(){
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	if(DEVICE_state[PUMP] == DEVICE_UNDER_REMOTE_CONTROL){
 8004850:	4b30      	ldr	r3, [pc, #192]	; (8004914 <CONTROL_pump+0xc8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b32      	cmp	r3, #50	; 0x32
 8004856:	d05a      	beq.n	800490e <CONTROL_pump+0xc2>
		return;
	}
	if(flag_condition[LUX] && flag_condition[SOIL_TEMP]){
 8004858:	4b2f      	ldr	r3, [pc, #188]	; (8004918 <CONTROL_pump+0xcc>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d057      	beq.n	8004910 <CONTROL_pump+0xc4>
 8004860:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <CONTROL_pump+0xcc>)
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d053      	beq.n	8004910 <CONTROL_pump+0xc4>
		flag_condition[LUX] = false;
 8004868:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <CONTROL_pump+0xcc>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
		flag_condition[SOIL_TEMP] = false;
 800486e:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <CONTROL_pump+0xcc>)
 8004870:	2200      	movs	r2, #0
 8004872:	705a      	strb	r2, [r3, #1]
		if((value_condition[LUX] >= 1500 || value_condition[LUX] <= 150) ||
 8004874:	4b29      	ldr	r3, [pc, #164]	; (800491c <CONTROL_pump+0xd0>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <CONTROL_pump+0xd4>)
 800487e:	f7fb fe05 	bl	800048c <__aeabi_dcmpge>
 8004882:	1e03      	subs	r3, r0, #0
 8004884:	d11a      	bne.n	80048bc <CONTROL_pump+0x70>
 8004886:	4b25      	ldr	r3, [pc, #148]	; (800491c <CONTROL_pump+0xd0>)
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	4b25      	ldr	r3, [pc, #148]	; (8004924 <CONTROL_pump+0xd8>)
 8004890:	f7fb fde8 	bl	8000464 <__aeabi_dcmple>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d111      	bne.n	80048bc <CONTROL_pump+0x70>
				(value_condition[SOIL_TEMP] >= 37 || value_condition[SOIL_TEMP] <= 20)){
 8004898:	4b20      	ldr	r3, [pc, #128]	; (800491c <CONTROL_pump+0xd0>)
 800489a:	6898      	ldr	r0, [r3, #8]
 800489c:	68d9      	ldr	r1, [r3, #12]
		if((value_condition[LUX] >= 1500 || value_condition[LUX] <= 150) ||
 800489e:	2200      	movs	r2, #0
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <CONTROL_pump+0xdc>)
 80048a2:	f7fb fdf3 	bl	800048c <__aeabi_dcmpge>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d108      	bne.n	80048bc <CONTROL_pump+0x70>
				(value_condition[SOIL_TEMP] >= 37 || value_condition[SOIL_TEMP] <= 20)){
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <CONTROL_pump+0xd0>)
 80048ac:	6898      	ldr	r0, [r3, #8]
 80048ae:	68d9      	ldr	r1, [r3, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	4b1e      	ldr	r3, [pc, #120]	; (800492c <CONTROL_pump+0xe0>)
 80048b4:	f7fb fdd6 	bl	8000464 <__aeabi_dcmple>
 80048b8:	1e03      	subs	r3, r0, #0
 80048ba:	d014      	beq.n	80048e6 <CONTROL_pump+0x9a>

			if(DEVICE_state[PUMP] != -1){
 80048bc:	4b15      	ldr	r3, [pc, #84]	; (8004914 <CONTROL_pump+0xc8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	d025      	beq.n	8004910 <CONTROL_pump+0xc4>
				DEVICE_state[PUMP] = -1;
 80048c4:	4b13      	ldr	r3, [pc, #76]	; (8004914 <CONTROL_pump+0xc8>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	4252      	negs	r2, r2
 80048ca:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, OFF);
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <CONTROL_pump+0xe4>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <CONTROL_pump+0xe4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2201      	movs	r2, #1
 80048d8:	0019      	movs	r1, r3
 80048da:	f002 f847 	bl	800696c <HAL_GPIO_WritePin>
				SENSOR_MANAGER_clear_setup_state(SOIL_HT_SENSOR);
 80048de:	2003      	movs	r0, #3
 80048e0:	f000 f9ee 	bl	8004cc0 <SENSOR_MANAGER_clear_setup_state>
			if(DEVICE_state[PUMP] != -1){
 80048e4:	e014      	b.n	8004910 <CONTROL_pump+0xc4>

			}
		}else{
			if(DEVICE_state[PUMP] == -1){
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <CONTROL_pump+0xc8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3301      	adds	r3, #1
 80048ec:	d110      	bne.n	8004910 <CONTROL_pump+0xc4>
				DEVICE_state[PUMP] = 0;
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <CONTROL_pump+0xc8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, OFF);
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <CONTROL_pump+0xe4>)
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <CONTROL_pump+0xe4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2201      	movs	r2, #1
 8004900:	0019      	movs	r1, r3
 8004902:	f002 f833 	bl	800696c <HAL_GPIO_WritePin>
				SENSOR_MANAGER_clear_setup_state(SOIL_HT_SENSOR);
 8004906:	2003      	movs	r0, #3
 8004908:	f000 f9da 	bl	8004cc0 <SENSOR_MANAGER_clear_setup_state>
 800490c:	e000      	b.n	8004910 <CONTROL_pump+0xc4>
		return;
 800490e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	2000085c 	.word	0x2000085c
 8004918:	20000850 	.word	0x20000850
 800491c:	20000838 	.word	0x20000838
 8004920:	40977000 	.word	0x40977000
 8004924:	4062c000 	.word	0x4062c000
 8004928:	40428000 	.word	0x40428000
 800492c:	40340000 	.word	0x40340000
 8004930:	20000010 	.word	0x20000010

08004934 <PUMP_run>:
static void PUMP_run(){
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
	switch (DEVICE_state[PUMP]) {
 8004938:	4b43      	ldr	r3, [pc, #268]	; (8004a48 <PUMP_run+0x114>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b32      	cmp	r3, #50	; 0x32
 800493e:	d100      	bne.n	8004942 <PUMP_run+0xe>
 8004940:	e075      	b.n	8004a2e <PUMP_run+0xfa>
 8004942:	dd00      	ble.n	8004946 <PUMP_run+0x12>
 8004944:	e077      	b.n	8004a36 <PUMP_run+0x102>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <PUMP_run+0x1c>
 800494a:	2b01      	cmp	r3, #1
 800494c:	d043      	beq.n	80049d6 <PUMP_run+0xa2>
			break;
		case DEVICE_UNDER_REMOTE_CONTROL:
			device_under_remote_control(PUMP);
			break;
		default:
			break;
 800494e:	e072      	b.n	8004a36 <PUMP_run+0x102>
			if(flag_condition[SOIL_HUMI]){
 8004950:	4b3e      	ldr	r3, [pc, #248]	; (8004a4c <PUMP_run+0x118>)
 8004952:	789b      	ldrb	r3, [r3, #2]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d100      	bne.n	800495a <PUMP_run+0x26>
 8004958:	e06f      	b.n	8004a3a <PUMP_run+0x106>
				flag_condition[SOIL_HUMI] = false;
 800495a:	4b3c      	ldr	r3, [pc, #240]	; (8004a4c <PUMP_run+0x118>)
 800495c:	2200      	movs	r2, #0
 800495e:	709a      	strb	r2, [r3, #2]
				if(value_condition[SOIL_HUMI] >= threshold[CEILING_LEVEL][SOIL_HUMI]){
 8004960:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <PUMP_run+0x11c>)
 8004962:	6918      	ldr	r0, [r3, #16]
 8004964:	6959      	ldr	r1, [r3, #20]
 8004966:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <PUMP_run+0x120>)
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f7fb fd8e 	bl	800048c <__aeabi_dcmpge>
 8004970:	1e03      	subs	r3, r0, #0
 8004972:	d000      	beq.n	8004976 <PUMP_run+0x42>
 8004974:	e063      	b.n	8004a3e <PUMP_run+0x10a>
				if((value_condition[SOIL_HUMI] <=  threshold[FLOOR_LEVEL][SOIL_HUMI] && value_condition[SOIL_HUMI] != 0)){
 8004976:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <PUMP_run+0x11c>)
 8004978:	6918      	ldr	r0, [r3, #16]
 800497a:	6959      	ldr	r1, [r3, #20]
 800497c:	4b35      	ldr	r3, [pc, #212]	; (8004a54 <PUMP_run+0x120>)
 800497e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f7fb fd6f 	bl	8000464 <__aeabi_dcmple>
 8004986:	1e03      	subs	r3, r0, #0
 8004988:	d100      	bne.n	800498c <PUMP_run+0x58>
			break;
 800498a:	e056      	b.n	8004a3a <PUMP_run+0x106>
				if((value_condition[SOIL_HUMI] <=  threshold[FLOOR_LEVEL][SOIL_HUMI] && value_condition[SOIL_HUMI] != 0)){
 800498c:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <PUMP_run+0x11c>)
 800498e:	6918      	ldr	r0, [r3, #16]
 8004990:	6959      	ldr	r1, [r3, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	2300      	movs	r3, #0
 8004996:	f7fb fd55 	bl	8000444 <__aeabi_dcmpeq>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d000      	beq.n	80049a0 <PUMP_run+0x6c>
			break;
 800499e:	e04c      	b.n	8004a3a <PUMP_run+0x106>
					SENSOR_MANAGER_setup_state(SOIL_HT_SENSOR);
 80049a0:	2003      	movs	r0, #3
 80049a2:	f000 f93f 	bl	8004c24 <SENSOR_MANAGER_setup_state>
					task_id[PUMP] = SCH_Add_Task(func_ptr[PUMP], READ_HUMI_SENSOR_DURATION, 0);
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <PUMP_run+0x124>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	22fa      	movs	r2, #250	; 0xfa
 80049ac:	0051      	lsls	r1, r2, #1
 80049ae:	2200      	movs	r2, #0
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fe fbe3 	bl	800317c <SCH_Add_Task>
 80049b6:	0002      	movs	r2, r0
 80049b8:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <PUMP_run+0x128>)
 80049ba:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, ON);
 80049bc:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <PUMP_run+0x12c>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <PUMP_run+0x12c>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2200      	movs	r2, #0
 80049c8:	0019      	movs	r1, r3
 80049ca:	f001 ffcf 	bl	800696c <HAL_GPIO_WritePin>
					DEVICE_state[PUMP] = PUMP_ON;
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <PUMP_run+0x114>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
			break;
 80049d4:	e031      	b.n	8004a3a <PUMP_run+0x106>
			if(flag_condition[SOIL_HUMI]){
 80049d6:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <PUMP_run+0x118>)
 80049d8:	789b      	ldrb	r3, [r3, #2]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d031      	beq.n	8004a42 <PUMP_run+0x10e>
				flag_condition[SOIL_HUMI] = false;
 80049de:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <PUMP_run+0x118>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	709a      	strb	r2, [r3, #2]
				if(value_condition[SOIL_HUMI] <= setpoint[SOIL_HUMI]){
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <PUMP_run+0x11c>)
 80049e6:	6918      	ldr	r0, [r3, #16]
 80049e8:	6959      	ldr	r1, [r3, #20]
 80049ea:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <PUMP_run+0x130>)
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f7fb fd38 	bl	8000464 <__aeabi_dcmple>
 80049f4:	1e03      	subs	r3, r0, #0
 80049f6:	d124      	bne.n	8004a42 <PUMP_run+0x10e>
				}else if((value_condition[SOIL_HUMI] >= threshold[CEILING_LEVEL][SOIL_HUMI])){
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <PUMP_run+0x11c>)
 80049fa:	6918      	ldr	r0, [r3, #16]
 80049fc:	6959      	ldr	r1, [r3, #20]
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <PUMP_run+0x120>)
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f7fb fd42 	bl	800048c <__aeabi_dcmpge>
 8004a08:	1e03      	subs	r3, r0, #0
 8004a0a:	d100      	bne.n	8004a0e <PUMP_run+0xda>
			break;
 8004a0c:	e019      	b.n	8004a42 <PUMP_run+0x10e>
					SENSOR_MANAGER_clear_setup_state(SOIL_HT_SENSOR);
 8004a0e:	2003      	movs	r0, #3
 8004a10:	f000 f956 	bl	8004cc0 <SENSOR_MANAGER_clear_setup_state>
					HAL_GPIO_WritePin(gpio_table[PUMP_PIN].port, gpio_table[PUMP_PIN].init_info.Pin, OFF);
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <PUMP_run+0x12c>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <PUMP_run+0x12c>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2201      	movs	r2, #1
 8004a20:	0019      	movs	r1, r3
 8004a22:	f001 ffa3 	bl	800696c <HAL_GPIO_WritePin>
					DEVICE_state[PUMP] = PUMP_WAIT_FOR_CHANGE_CONDITION;
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <PUMP_run+0x114>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
			break;
 8004a2c:	e009      	b.n	8004a42 <PUMP_run+0x10e>
			device_under_remote_control(PUMP);
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f000 f81a 	bl	8004a68 <device_under_remote_control>
			break;
 8004a34:	e006      	b.n	8004a44 <PUMP_run+0x110>
			break;
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	e004      	b.n	8004a44 <PUMP_run+0x110>
			break;
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	e002      	b.n	8004a44 <PUMP_run+0x110>
					return;
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	e000      	b.n	8004a44 <PUMP_run+0x110>
			break;
 8004a42:	46c0      	nop			; (mov r8, r8)
	}
}
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	2000085c 	.word	0x2000085c
 8004a4c:	20000850 	.word	0x20000850
 8004a50:	20000838 	.word	0x20000838
 8004a54:	20000808 	.word	0x20000808
 8004a58:	20000028 	.word	0x20000028
 8004a5c:	20000858 	.word	0x20000858
 8004a60:	20000010 	.word	0x20000010
 8004a64:	200007f0 	.word	0x200007f0

08004a68 <device_under_remote_control>:

static void device_under_remote_control(uint8_t device){
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	0002      	movs	r2, r0
 8004a70:	1dfb      	adds	r3, r7, #7
 8004a72:	701a      	strb	r2, [r3, #0]
	if(!flag_under_control[device]){
 8004a74:	1dfb      	adds	r3, r7, #7
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <device_under_remote_control+0x34>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4053      	eors	r3, r2
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <device_under_remote_control+0x2a>
		DEVICE_state[device] = PUMP_WAIT_FOR_CHANGE_CONDITION;
 8004a86:	1dfb      	adds	r3, r7, #7
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <device_under_remote_control+0x38>)
 8004a8c:	0092      	lsls	r2, r2, #2
 8004a8e:	2100      	movs	r1, #0
 8004a90:	50d1      	str	r1, [r2, r3]
	}
}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b002      	add	sp, #8
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	20000854 	.word	0x20000854
 8004aa0:	2000085c 	.word	0x2000085c

08004aa4 <cc_mean>:

// --------------------- HELPER FUNCTION ---------------------------//
static uint8_t count_read[NUM_SENSOR] = {0};
static float tempo[NUM_CONDITION][3] = {0};

static float cc_mean(float * array){
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	float sum = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
	for(int index = 0; index < 3 ;++index){
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	e00d      	b.n	8004ad2 <cc_mean+0x2e>
		sum += array[index];
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	1c19      	adds	r1, r3, #0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7fb fd96 	bl	80005f4 <__aeabi_fadd>
 8004ac8:	1c03      	adds	r3, r0, #0
 8004aca:	60fb      	str	r3, [r7, #12]
	for(int index = 0; index < 3 ;++index){
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	ddee      	ble.n	8004ab6 <cc_mean+0x12>
	}
	return (sum/3);
 8004ad8:	4904      	ldr	r1, [pc, #16]	; (8004aec <cc_mean+0x48>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7fb ff28 	bl	8000930 <__aeabi_fdiv>
 8004ae0:	1c03      	adds	r3, r0, #0
}
 8004ae2:	1c18      	adds	r0, r3, #0
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b004      	add	sp, #16
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	40400000 	.word	0x40400000

08004af0 <PUMP_set_flag_con>:


static void PUMP_set_flag_con(){
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
	flag_condition[SOIL_HUMI] = true;
 8004af4:	4b02      	ldr	r3, [pc, #8]	; (8004b00 <PUMP_set_flag_con+0x10>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	709a      	strb	r2, [r3, #2]
};
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000850 	.word	0x20000850

08004b04 <PUMP_get_humi_value>:
static void PUMP_get_humi_value(){
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
	if(count_read[SOIL_HT_SENSOR] < 3){
 8004b08:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <PUMP_get_humi_value+0xb0>)
 8004b0a:	78db      	ldrb	r3, [r3, #3]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d828      	bhi.n	8004b62 <PUMP_get_humi_value+0x5e>
		SHT30_Read_Temperature_And_Humidity(&SHT, Single_HighRep_ClockStretch);
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <PUMP_get_humi_value+0xb4>)
 8004b12:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <PUMP_get_humi_value+0xb8>)
 8004b14:	0011      	movs	r1, r2
 8004b16:	0018      	movs	r0, r3
 8004b18:	f7ff f92e 	bl	8003d78 <SHT30_Read_Temperature_And_Humidity>
		tempo[SOIL_HUMI][count_read[SOIL_HT_SENSOR]] = SHT.Humi;
 8004b1c:	4b25      	ldr	r3, [pc, #148]	; (8004bb4 <PUMP_get_humi_value+0xb0>)
 8004b1e:	78db      	ldrb	r3, [r3, #3]
 8004b20:	001a      	movs	r2, r3
 8004b22:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <PUMP_get_humi_value+0xb8>)
 8004b24:	68d9      	ldr	r1, [r3, #12]
 8004b26:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <PUMP_get_humi_value+0xbc>)
 8004b28:	3206      	adds	r2, #6
 8004b2a:	0092      	lsls	r2, r2, #2
 8004b2c:	50d1      	str	r1, [r2, r3]
		tempo[SOIL_TEMP][count_read[SOIL_HT_SENSOR]] = SHT.Temp;
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <PUMP_get_humi_value+0xb0>)
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	001a      	movs	r2, r3
 8004b34:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <PUMP_get_humi_value+0xb8>)
 8004b36:	6899      	ldr	r1, [r3, #8]
 8004b38:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <PUMP_get_humi_value+0xbc>)
 8004b3a:	3203      	adds	r2, #3
 8004b3c:	0092      	lsls	r2, r2, #2
 8004b3e:	50d1      	str	r1, [r2, r3]
		count_read[SOIL_HT_SENSOR]++;
 8004b40:	4b1c      	ldr	r3, [pc, #112]	; (8004bb4 <PUMP_get_humi_value+0xb0>)
 8004b42:	78db      	ldrb	r3, [r3, #3]
 8004b44:	3301      	adds	r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <PUMP_get_humi_value+0xb0>)
 8004b4a:	70da      	strb	r2, [r3, #3]
		task_id[PUMP] = SCH_Add_Task(PUMP_get_humi_value, READ_SENSOR_DURATION, 0);
 8004b4c:	23fa      	movs	r3, #250	; 0xfa
 8004b4e:	0059      	lsls	r1, r3, #1
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <PUMP_get_humi_value+0xc0>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fe fb11 	bl	800317c <SCH_Add_Task>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <PUMP_get_humi_value+0xc4>)
 8004b5e:	601a      	str	r2, [r3, #0]
		count_read[SOIL_HT_SENSOR] = 0;
		value_condition[SOIL_HUMI] = cc_mean(tempo[SOIL_HUMI]);
		value_condition[SOIL_TEMP] = cc_mean(tempo[SOIL_TEMP]);
		task_id[PUMP] = SCH_Add_Task(PUMP_set_flag_con, AFTER_READ_SENSOR_DURATION, 0);
	}
}
 8004b60:	e025      	b.n	8004bae <PUMP_get_humi_value+0xaa>
		count_read[SOIL_HT_SENSOR] = 0;
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <PUMP_get_humi_value+0xb0>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	70da      	strb	r2, [r3, #3]
		value_condition[SOIL_HUMI] = cc_mean(tempo[SOIL_HUMI]);
 8004b68:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <PUMP_get_humi_value+0xc8>)
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7ff ff9a 	bl	8004aa4 <cc_mean>
 8004b70:	1c03      	adds	r3, r0, #0
 8004b72:	1c18      	adds	r0, r3, #0
 8004b74:	f7fe f9ee 	bl	8002f54 <__aeabi_f2d>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	000b      	movs	r3, r1
 8004b7c:	4914      	ldr	r1, [pc, #80]	; (8004bd0 <PUMP_get_humi_value+0xcc>)
 8004b7e:	610a      	str	r2, [r1, #16]
 8004b80:	614b      	str	r3, [r1, #20]
		value_condition[SOIL_TEMP] = cc_mean(tempo[SOIL_TEMP]);
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <PUMP_get_humi_value+0xd0>)
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7ff ff8d 	bl	8004aa4 <cc_mean>
 8004b8a:	1c03      	adds	r3, r0, #0
 8004b8c:	1c18      	adds	r0, r3, #0
 8004b8e:	f7fe f9e1 	bl	8002f54 <__aeabi_f2d>
 8004b92:	0002      	movs	r2, r0
 8004b94:	000b      	movs	r3, r1
 8004b96:	490e      	ldr	r1, [pc, #56]	; (8004bd0 <PUMP_get_humi_value+0xcc>)
 8004b98:	608a      	str	r2, [r1, #8]
 8004b9a:	60cb      	str	r3, [r1, #12]
		task_id[PUMP] = SCH_Add_Task(PUMP_set_flag_con, AFTER_READ_SENSOR_DURATION, 0);
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <PUMP_get_humi_value+0xd4>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2114      	movs	r1, #20
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7fe faea 	bl	800317c <SCH_Add_Task>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <PUMP_get_humi_value+0xc4>)
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000860 	.word	0x20000860
 8004bb8:	00002c06 	.word	0x00002c06
 8004bbc:	20000924 	.word	0x20000924
 8004bc0:	20000864 	.word	0x20000864
 8004bc4:	08004b05 	.word	0x08004b05
 8004bc8:	20000858 	.word	0x20000858
 8004bcc:	2000087c 	.word	0x2000087c
 8004bd0:	20000838 	.word	0x20000838
 8004bd4:	20000870 	.word	0x20000870
 8004bd8:	08004af1 	.word	0x08004af1

08004bdc <RP_state>:
static void SHT30_timeout();

static void BH1750_run();
static void SHT30_run();

static void RP_state(){
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
	  size = sprintf(buffer, "BH1750 STATE: %d --SHT30 STATE: %d\r\n"
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <RP_state+0x34>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	001a      	movs	r2, r3
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <RP_state+0x38>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	490b      	ldr	r1, [pc, #44]	; (8004c18 <RP_state+0x3c>)
 8004bec:	480b      	ldr	r0, [pc, #44]	; (8004c1c <RP_state+0x40>)
 8004bee:	f007 f923 	bl	800be38 <siprintf>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <RP_state+0x44>)
 8004bf8:	701a      	strb	r2, [r3, #0]
			  	  	  	   , BH1750_state,SHT30_state);
	  UART_send(UART_3, buffer, size);
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <RP_state+0x44>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	001a      	movs	r2, r3
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <RP_state+0x40>)
 8004c02:	0019      	movs	r1, r3
 8004c04:	2002      	movs	r0, #2
 8004c06:	f000 ff2d 	bl	8005a64 <UART_send>
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000894 	.word	0x20000894
 8004c14:	200008c8 	.word	0x200008c8
 8004c18:	0800fd68 	.word	0x0800fd68
 8004c1c:	20000938 	.word	0x20000938
 8004c20:	2000099c 	.word	0x2000099c

08004c24 <SENSOR_MANAGER_setup_state>:
void SENSOR_MANAGER_setup_state(uint8_t sensor){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	1dfb      	adds	r3, r7, #7
 8004c2e:	701a      	strb	r2, [r3, #0]
	if(sensor < 0 && sensor >= NUM_SENSOR){
		return;
	}
	if(sensor == LUX_SENSOR){
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d114      	bne.n	8004c62 <SENSOR_MANAGER_setup_state+0x3e>
		SCH_Delete_Task(timeout_BH1750_task_id);
 8004c38:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <SENSOR_MANAGER_setup_state+0x78>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fe fc23 	bl	8003488 <SCH_Delete_Task>
		timeout_BH1750_task_id = SCH_Add_Task(BH1750_timeout, 3102, 0);
 8004c42:	4917      	ldr	r1, [pc, #92]	; (8004ca0 <SENSOR_MANAGER_setup_state+0x7c>)
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <SENSOR_MANAGER_setup_state+0x80>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7fe fa97 	bl	800317c <SCH_Add_Task>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <SENSOR_MANAGER_setup_state+0x78>)
 8004c52:	601a      	str	r2, [r3, #0]
		BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8004c54:	2011      	movs	r0, #17
 8004c56:	f7ff f97d 	bl	8003f54 <BH1750_SetMode>
		BH1750_state = SENSOR_SETUP_CONDITION;
 8004c5a:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <SENSOR_MANAGER_setup_state+0x84>)
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e014      	b.n	8004c8c <SENSOR_MANAGER_setup_state+0x68>
	}else if(sensor == SOIL_HT_SENSOR){
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d110      	bne.n	8004c8c <SENSOR_MANAGER_setup_state+0x68>
		SCH_Delete_Task(timeout_SHT30_task_id);
 8004c6a:	4b10      	ldr	r3, [pc, #64]	; (8004cac <SENSOR_MANAGER_setup_state+0x88>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7fe fc0a 	bl	8003488 <SCH_Delete_Task>
		timeout_SHT30_task_id = SCH_Add_Task(SHT30_timeout, 3100, 0);
 8004c74:	490e      	ldr	r1, [pc, #56]	; (8004cb0 <SENSOR_MANAGER_setup_state+0x8c>)
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <SENSOR_MANAGER_setup_state+0x90>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f7fe fa7e 	bl	800317c <SCH_Add_Task>
 8004c80:	0002      	movs	r2, r0
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <SENSOR_MANAGER_setup_state+0x88>)
 8004c84:	601a      	str	r2, [r3, #0]
		SHT30_state = SENSOR_SETUP_CONDITION;
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <SENSOR_MANAGER_setup_state+0x94>)
 8004c88:	2203      	movs	r2, #3
 8004c8a:	701a      	strb	r2, [r3, #0]
	}
	flag_setup[sensor] = true;
 8004c8c:	1dfb      	adds	r3, r7, #7
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <SENSOR_MANAGER_setup_state+0x98>)
 8004c92:	2101      	movs	r1, #1
 8004c94:	54d1      	strb	r1, [r2, r3]
}
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000898 	.word	0x20000898
 8004ca0:	00000c1e 	.word	0x00000c1e
 8004ca4:	08005401 	.word	0x08005401
 8004ca8:	20000894 	.word	0x20000894
 8004cac:	200008cc 	.word	0x200008cc
 8004cb0:	00000c1c 	.word	0x00000c1c
 8004cb4:	08005415 	.word	0x08005415
 8004cb8:	200008c8 	.word	0x200008c8
 8004cbc:	20000934 	.word	0x20000934

08004cc0 <SENSOR_MANAGER_clear_setup_state>:
void SENSOR_MANAGER_clear_setup_state(uint8_t sensor){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	701a      	strb	r2, [r3, #0]
	if(sensor < 0 || sensor >= NUM_SENSOR){
 8004ccc:	1dfb      	adds	r3, r7, #7
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d805      	bhi.n	8004ce0 <SENSOR_MANAGER_clear_setup_state+0x20>
		return;
	}
	flag_setup[sensor] = false;
 8004cd4:	1dfb      	adds	r3, r7, #7
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4a03      	ldr	r2, [pc, #12]	; (8004ce8 <SENSOR_MANAGER_clear_setup_state+0x28>)
 8004cda:	2100      	movs	r1, #0
 8004cdc:	54d1      	strb	r1, [r2, r3]
 8004cde:	e000      	b.n	8004ce2 <SENSOR_MANAGER_clear_setup_state+0x22>
		return;
 8004ce0:	46c0      	nop			; (mov r8, r8)
}
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b002      	add	sp, #8
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000934 	.word	0x20000934

08004cec <Display_lcd>:
static float temperature = 0;
static float humidity = 0;
static float lux = 0;
static char line1[50];
static char line2[50];
static void Display_lcd(){
 8004cec:	b5b0      	push	{r4, r5, r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af04      	add	r7, sp, #16
	LCD_I2C_Clear(&LCD);
 8004cf2:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <Display_lcd+0x8c>)
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7ff fb73 	bl	80043e0 <LCD_I2C_Clear>
	sprintf(line1,"T:%.1f%cC L:%.1f",temperature,0xDF, lux);
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <Display_lcd+0x90>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	1c18      	adds	r0, r3, #0
 8004d00:	f7fe f928 	bl	8002f54 <__aeabi_f2d>
 8004d04:	0004      	movs	r4, r0
 8004d06:	000d      	movs	r5, r1
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <Display_lcd+0x94>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1c18      	adds	r0, r3, #0
 8004d0e:	f7fe f921 	bl	8002f54 <__aeabi_f2d>
 8004d12:	0002      	movs	r2, r0
 8004d14:	000b      	movs	r3, r1
 8004d16:	491b      	ldr	r1, [pc, #108]	; (8004d84 <Display_lcd+0x98>)
 8004d18:	481b      	ldr	r0, [pc, #108]	; (8004d88 <Display_lcd+0x9c>)
 8004d1a:	9202      	str	r2, [sp, #8]
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	23df      	movs	r3, #223	; 0xdf
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	0022      	movs	r2, r4
 8004d24:	002b      	movs	r3, r5
 8004d26:	f007 f887 	bl	800be38 <siprintf>
	sprintf(line2,"H:%.1f%%",humidity);
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <Display_lcd+0xa0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1c18      	adds	r0, r3, #0
 8004d30:	f7fe f910 	bl	8002f54 <__aeabi_f2d>
 8004d34:	0002      	movs	r2, r0
 8004d36:	000b      	movs	r3, r1
 8004d38:	4915      	ldr	r1, [pc, #84]	; (8004d90 <Display_lcd+0xa4>)
 8004d3a:	4816      	ldr	r0, [pc, #88]	; (8004d94 <Display_lcd+0xa8>)
 8004d3c:	f007 f87c 	bl	800be38 <siprintf>
	LCD_I2C_SetCursor(&LCD, 0, 0);
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <Display_lcd+0x8c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	2100      	movs	r1, #0
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7ff fb00 	bl	800434c <LCD_I2C_SetCursor>
	LCD_I2C_WriteString(&LCD, line1);
 8004d4c:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <Display_lcd+0x9c>)
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <Display_lcd+0x8c>)
 8004d50:	0011      	movs	r1, r2
 8004d52:	0018      	movs	r0, r3
 8004d54:	f7ff fb67 	bl	8004426 <LCD_I2C_WriteString>
	LCD_I2C_SetCursor(&LCD, 0, 1);
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <Display_lcd+0x8c>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7ff faf4 	bl	800434c <LCD_I2C_SetCursor>
	LCD_I2C_WriteString(&LCD, line2);
 8004d64:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <Display_lcd+0xa8>)
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <Display_lcd+0x8c>)
 8004d68:	0011      	movs	r1, r2
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff fb5b 	bl	8004426 <LCD_I2C_WriteString>
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bdb0      	pop	{r4, r5, r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	20000888 	.word	0x20000888
 8004d7c:	200009a0 	.word	0x200009a0
 8004d80:	200009a8 	.word	0x200009a8
 8004d84:	0800fd90 	.word	0x0800fd90
 8004d88:	200009ac 	.word	0x200009ac
 8004d8c:	200009a4 	.word	0x200009a4
 8004d90:	0800fda4 	.word	0x0800fda4
 8004d94:	200009e0 	.word	0x200009e0

08004d98 <SENSOR_MANAGER_init>:

void SENSOR_MANAGER_init(){
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af02      	add	r7, sp, #8
	BH1750_Init(&hi2c1);
 8004d9e:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <SENSOR_MANAGER_init+0x60>)
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7ff f881 	bl	8003ea8 <BH1750_Init>
	BH1750_PowerState(BH1750_POWER_DOWN);
 8004da6:	2000      	movs	r0, #0
 8004da8:	f7ff f8b2 	bl	8003f10 <BH1750_PowerState>
	SHT30_Init(&SHT, &hi2c1, SHT30_ADDRESS_ADDR_PIN_LOW );
 8004dac:	4912      	ldr	r1, [pc, #72]	; (8004df8 <SENSOR_MANAGER_init+0x60>)
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <SENSOR_MANAGER_init+0x64>)
 8004db0:	2244      	movs	r2, #68	; 0x44
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7fe ff9e 	bl	8003cf4 <SHT30_Init>
	SCH_Add_Task(RP_state, 1000, 1000);
 8004db8:	23fa      	movs	r3, #250	; 0xfa
 8004dba:	009a      	lsls	r2, r3, #2
 8004dbc:	23fa      	movs	r3, #250	; 0xfa
 8004dbe:	0099      	lsls	r1, r3, #2
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <SENSOR_MANAGER_init+0x68>)
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f7fe f9da 	bl	800317c <SCH_Add_Task>
	LCD_I2C_Init(&LCD, &hi2c1,0x4E, 16, 2);
 8004dc8:	490b      	ldr	r1, [pc, #44]	; (8004df8 <SENSOR_MANAGER_init+0x60>)
 8004dca:	480e      	ldr	r0, [pc, #56]	; (8004e04 <SENSOR_MANAGER_init+0x6c>)
 8004dcc:	2302      	movs	r3, #2
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	224e      	movs	r2, #78	; 0x4e
 8004dd4:	f7ff fa2e 	bl	8004234 <LCD_I2C_Init>
	LCD_I2C_SetCursor(&LCD, 0, 0);
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <SENSOR_MANAGER_init+0x6c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2100      	movs	r1, #0
 8004dde:	0018      	movs	r0, r3
 8004de0:	f7ff fab4 	bl	800434c <LCD_I2C_SetCursor>
	LCD_I2C_WriteString(&LCD, "SYSTEM BOOSTING ...");
 8004de4:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <SENSOR_MANAGER_init+0x70>)
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <SENSOR_MANAGER_init+0x6c>)
 8004de8:	0011      	movs	r1, r2
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7ff fb1b 	bl	8004426 <LCD_I2C_WriteString>
}
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	20000a14 	.word	0x20000a14
 8004dfc:	20000924 	.word	0x20000924
 8004e00:	08004bdd 	.word	0x08004bdd
 8004e04:	20000888 	.word	0x20000888
 8004e08:	0800fdb0 	.word	0x0800fdb0

08004e0c <SENSOR_MANAGER_run>:

void SENSOR_MANAGER_run(){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	BH1750_run();
 8004e10:	f000 f806 	bl	8004e20 <BH1750_run>
	SHT30_run();
 8004e14:	f000 f8f0 	bl	8004ff8 <SHT30_run>
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <BH1750_run>:


static void BH1750_run(){
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
	switch (BH1750_state) {
 8004e26:	4b66      	ldr	r3, [pc, #408]	; (8004fc0 <BH1750_run+0x1a0>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d100      	bne.n	8004e30 <BH1750_run+0x10>
 8004e2e:	e0ad      	b.n	8004f8c <BH1750_run+0x16c>
 8004e30:	dd00      	ble.n	8004e34 <BH1750_run+0x14>
 8004e32:	e0b9      	b.n	8004fa8 <BH1750_run+0x188>
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d02f      	beq.n	8004e98 <BH1750_run+0x78>
 8004e38:	dd00      	ble.n	8004e3c <BH1750_run+0x1c>
 8004e3a:	e0b5      	b.n	8004fa8 <BH1750_run+0x188>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <BH1750_run+0x26>
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d00d      	beq.n	8004e60 <BH1750_run+0x40>
				BH1750_PowerState(BH1750_POWER_DOWN);
				BH1750_state = SENSOR_BEGIN;
			}
			break;
		default:
			break;
 8004e44:	e0b0      	b.n	8004fa8 <BH1750_run+0x188>
			timeout_BH1750_task_id = SCH_Add_Task(BH1750_timeout, BH1750_DURATION, 0);
 8004e46:	495f      	ldr	r1, [pc, #380]	; (8004fc4 <BH1750_run+0x1a4>)
 8004e48:	4b5f      	ldr	r3, [pc, #380]	; (8004fc8 <BH1750_run+0x1a8>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fe f995 	bl	800317c <SCH_Add_Task>
 8004e52:	0002      	movs	r2, r0
 8004e54:	4b5d      	ldr	r3, [pc, #372]	; (8004fcc <BH1750_run+0x1ac>)
 8004e56:	601a      	str	r2, [r3, #0]
			BH1750_state = SENSOR_WAIT_FOR_READ;
 8004e58:	4b59      	ldr	r3, [pc, #356]	; (8004fc0 <BH1750_run+0x1a0>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
			break;
 8004e5e:	e0aa      	b.n	8004fb6 <BH1750_run+0x196>
			if(timeout_for_BH1750){
 8004e60:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <BH1750_run+0x1b0>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d100      	bne.n	8004e6a <BH1750_run+0x4a>
 8004e68:	e0a0      	b.n	8004fac <BH1750_run+0x18c>
				timeout_for_BH1750 = false;
 8004e6a:	4b59      	ldr	r3, [pc, #356]	; (8004fd0 <BH1750_run+0x1b0>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
				timeout_BH1750_task_id = SCH_Add_Task(BH1750_timeout, READ_SENSOR_DURATION , 0);
 8004e70:	23fa      	movs	r3, #250	; 0xfa
 8004e72:	0059      	lsls	r1, r3, #1
 8004e74:	4b54      	ldr	r3, [pc, #336]	; (8004fc8 <BH1750_run+0x1a8>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f7fe f97f 	bl	800317c <SCH_Add_Task>
 8004e7e:	0002      	movs	r2, r0
 8004e80:	4b52      	ldr	r3, [pc, #328]	; (8004fcc <BH1750_run+0x1ac>)
 8004e82:	601a      	str	r2, [r3, #0]
				BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8004e84:	2011      	movs	r0, #17
 8004e86:	f7ff f865 	bl	8003f54 <BH1750_SetMode>
				Lux_index = 0;
 8004e8a:	4b52      	ldr	r3, [pc, #328]	; (8004fd4 <BH1750_run+0x1b4>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
				BH1750_state = SENSOR_READ_DATA;
 8004e90:	4b4b      	ldr	r3, [pc, #300]	; (8004fc0 <BH1750_run+0x1a0>)
 8004e92:	2202      	movs	r2, #2
 8004e94:	701a      	strb	r2, [r3, #0]
			break;
 8004e96:	e089      	b.n	8004fac <BH1750_run+0x18c>
			if(timeout_for_BH1750){
 8004e98:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <BH1750_run+0x1b0>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d100      	bne.n	8004ea2 <BH1750_run+0x82>
 8004ea0:	e086      	b.n	8004fb0 <BH1750_run+0x190>
				timeout_for_BH1750 = false;
 8004ea2:	4b4b      	ldr	r3, [pc, #300]	; (8004fd0 <BH1750_run+0x1b0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
				if(Lux_index < 10){
 8004ea8:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <BH1750_run+0x1b4>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b09      	cmp	r3, #9
 8004eae:	d816      	bhi.n	8004ede <BH1750_run+0xbe>
					BH1750_ReadLight(&Lux_value_temp[Lux_index++]);
 8004eb0:	4b48      	ldr	r3, [pc, #288]	; (8004fd4 <BH1750_run+0x1b4>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	b2d1      	uxtb	r1, r2
 8004eb8:	4a46      	ldr	r2, [pc, #280]	; (8004fd4 <BH1750_run+0x1b4>)
 8004eba:	7011      	strb	r1, [r2, #0]
 8004ebc:	009a      	lsls	r2, r3, #2
 8004ebe:	4b46      	ldr	r3, [pc, #280]	; (8004fd8 <BH1750_run+0x1b8>)
 8004ec0:	18d3      	adds	r3, r2, r3
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7ff f8d8 	bl	8004078 <BH1750_ReadLight>
					timeout_BH1750_task_id = SCH_Add_Task(BH1750_timeout, READ_SENSOR_DURATION , 0);
 8004ec8:	23fa      	movs	r3, #250	; 0xfa
 8004eca:	0059      	lsls	r1, r3, #1
 8004ecc:	4b3e      	ldr	r3, [pc, #248]	; (8004fc8 <BH1750_run+0x1a8>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7fe f953 	bl	800317c <SCH_Add_Task>
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	4b3c      	ldr	r3, [pc, #240]	; (8004fcc <BH1750_run+0x1ac>)
 8004eda:	601a      	str	r2, [r3, #0]
			break;
 8004edc:	e068      	b.n	8004fb0 <BH1750_run+0x190>
					float mean = Calculate_mean(Lux_value_temp, 10);
 8004ede:	4b3e      	ldr	r3, [pc, #248]	; (8004fd8 <BH1750_run+0x1b8>)
 8004ee0:	210a      	movs	r1, #10
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 fab1 	bl	800544a <Calculate_mean>
 8004ee8:	1c03      	adds	r3, r0, #0
 8004eea:	607b      	str	r3, [r7, #4]
					float var = Calculate_variance(Lux_value_temp, 10, mean);
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4b3a      	ldr	r3, [pc, #232]	; (8004fd8 <BH1750_run+0x1b8>)
 8004ef0:	210a      	movs	r1, #10
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 fadf 	bl	80054b6 <Calculate_variance>
 8004ef8:	1c03      	adds	r3, r0, #0
 8004efa:	603b      	str	r3, [r7, #0]
					if((float)sqrt(var) < (mean*CAPACITY)){
 8004efc:	6838      	ldr	r0, [r7, #0]
 8004efe:	f7fe f829 	bl	8002f54 <__aeabi_f2d>
 8004f02:	0002      	movs	r2, r0
 8004f04:	000b      	movs	r3, r1
 8004f06:	0010      	movs	r0, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	f00a fe39 	bl	800fb80 <sqrt>
 8004f0e:	0002      	movs	r2, r0
 8004f10:	000b      	movs	r3, r1
 8004f12:	0010      	movs	r0, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	f7fe f865 	bl	8002fe4 <__aeabi_d2f>
 8004f1a:	1c03      	adds	r3, r0, #0
 8004f1c:	1c18      	adds	r0, r3, #0
 8004f1e:	f7fe f819 	bl	8002f54 <__aeabi_f2d>
 8004f22:	0004      	movs	r4, r0
 8004f24:	000d      	movs	r5, r1
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fe f814 	bl	8002f54 <__aeabi_f2d>
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <BH1750_run+0x1bc>)
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <BH1750_run+0x1c0>)
 8004f30:	f7fd f968 	bl	8002204 <__aeabi_dmul>
 8004f34:	0002      	movs	r2, r0
 8004f36:	000b      	movs	r3, r1
 8004f38:	0020      	movs	r0, r4
 8004f3a:	0029      	movs	r1, r5
 8004f3c:	f7fb fa88 	bl	8000450 <__aeabi_dcmplt>
 8004f40:	1e03      	subs	r3, r0, #0
 8004f42:	d019      	beq.n	8004f78 <BH1750_run+0x158>
						  size = sprintf(buffer,"{\'lux\':%.2f}\r\n",mean);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7fe f805 	bl	8002f54 <__aeabi_f2d>
 8004f4a:	0002      	movs	r2, r0
 8004f4c:	000b      	movs	r3, r1
 8004f4e:	4925      	ldr	r1, [pc, #148]	; (8004fe4 <BH1750_run+0x1c4>)
 8004f50:	4825      	ldr	r0, [pc, #148]	; (8004fe8 <BH1750_run+0x1c8>)
 8004f52:	f006 ff71 	bl	800be38 <siprintf>
 8004f56:	0003      	movs	r3, r0
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <BH1750_run+0x1cc>)
 8004f5c:	701a      	strb	r2, [r3, #0]
						  DEVICE_MANAGER_set_value_condition(LUX,mean);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	1c19      	adds	r1, r3, #0
 8004f62:	2000      	movs	r0, #0
 8004f64:	f7ff fbee 	bl	8004744 <DEVICE_MANAGER_set_value_condition>
						  Serial_send_data(buffer,size);
 8004f68:	4b20      	ldr	r3, [pc, #128]	; (8004fec <BH1750_run+0x1cc>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <BH1750_run+0x1c8>)
 8004f70:	0011      	movs	r1, r2
 8004f72:	0018      	movs	r0, r3
 8004f74:	f000 fa58 	bl	8005428 <Serial_send_data>
					lux = mean;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <BH1750_run+0x1d0>)
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
					BH1750_PowerState(BH1750_POWER_DOWN);
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f7fe ffc6 	bl	8003f10 <BH1750_PowerState>
					BH1750_state = SENSOR_BEGIN;
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <BH1750_run+0x1a0>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
			break;
 8004f8a:	e011      	b.n	8004fb0 <BH1750_run+0x190>
			if(!flag_setup[LUX_SENSOR]){
 8004f8c:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <BH1750_run+0x1d4>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2201      	movs	r2, #1
 8004f92:	4053      	eors	r3, r2
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00c      	beq.n	8004fb4 <BH1750_run+0x194>
				BH1750_PowerState(BH1750_POWER_DOWN);
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7fe ffb8 	bl	8003f10 <BH1750_PowerState>
				BH1750_state = SENSOR_BEGIN;
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <BH1750_run+0x1a0>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
			break;
 8004fa6:	e005      	b.n	8004fb4 <BH1750_run+0x194>
			break;
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	e004      	b.n	8004fb6 <BH1750_run+0x196>
			break;
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	e002      	b.n	8004fb6 <BH1750_run+0x196>
			break;
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	e000      	b.n	8004fb6 <BH1750_run+0x196>
			break;
 8004fb4:	46c0      	nop			; (mov r8, r8)
	}
}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b002      	add	sp, #8
 8004fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	20000894 	.word	0x20000894
 8004fc4:	00002710 	.word	0x00002710
 8004fc8:	08005401 	.word	0x08005401
 8004fcc:	20000898 	.word	0x20000898
 8004fd0:	20000895 	.word	0x20000895
 8004fd4:	2000089c 	.word	0x2000089c
 8004fd8:	200008a0 	.word	0x200008a0
 8004fdc:	9999999a 	.word	0x9999999a
 8004fe0:	3fb99999 	.word	0x3fb99999
 8004fe4:	0800fdc4 	.word	0x0800fdc4
 8004fe8:	20000938 	.word	0x20000938
 8004fec:	2000099c 	.word	0x2000099c
 8004ff0:	200009a8 	.word	0x200009a8
 8004ff4:	20000934 	.word	0x20000934

08004ff8 <SHT30_run>:


static void SHT30_run(){
 8004ff8:	b5b0      	push	{r4, r5, r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af02      	add	r7, sp, #8
	switch (SHT30_state) {
 8004ffe:	4be9      	ldr	r3, [pc, #932]	; (80053a4 <SHT30_run+0x3ac>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d100      	bne.n	8005008 <SHT30_run+0x10>
 8005006:	e101      	b.n	800520c <SHT30_run+0x214>
 8005008:	dd00      	ble.n	800500c <SHT30_run+0x14>
 800500a:	e1c8      	b.n	800539e <SHT30_run+0x3a6>
 800500c:	2b02      	cmp	r3, #2
 800500e:	d02c      	beq.n	800506a <SHT30_run+0x72>
 8005010:	dd00      	ble.n	8005014 <SHT30_run+0x1c>
 8005012:	e1c4      	b.n	800539e <SHT30_run+0x3a6>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <SHT30_run+0x26>
 8005018:	2b01      	cmp	r3, #1
 800501a:	d00d      	beq.n	8005038 <SHT30_run+0x40>
						humidity = mean_humi;
					}
				}
				break;
			default:
				break;
 800501c:	e1bf      	b.n	800539e <SHT30_run+0x3a6>
				timeout_SHT30_task_id = SCH_Add_Task(SHT30_timeout, SHT30_DURATION, 0);
 800501e:	49e2      	ldr	r1, [pc, #904]	; (80053a8 <SHT30_run+0x3b0>)
 8005020:	4be2      	ldr	r3, [pc, #904]	; (80053ac <SHT30_run+0x3b4>)
 8005022:	2200      	movs	r2, #0
 8005024:	0018      	movs	r0, r3
 8005026:	f7fe f8a9 	bl	800317c <SCH_Add_Task>
 800502a:	0002      	movs	r2, r0
 800502c:	4be0      	ldr	r3, [pc, #896]	; (80053b0 <SHT30_run+0x3b8>)
 800502e:	601a      	str	r2, [r3, #0]
				SHT30_state = SENSOR_WAIT_FOR_READ;
 8005030:	4bdc      	ldr	r3, [pc, #880]	; (80053a4 <SHT30_run+0x3ac>)
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
				break;
 8005036:	e1de      	b.n	80053f6 <SHT30_run+0x3fe>
				if(timeout_for_SHT30){
 8005038:	4bde      	ldr	r3, [pc, #888]	; (80053b4 <SHT30_run+0x3bc>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d100      	bne.n	8005042 <SHT30_run+0x4a>
 8005040:	e1d4      	b.n	80053ec <SHT30_run+0x3f4>
					timeout_for_SHT30 = false;
 8005042:	4bdc      	ldr	r3, [pc, #880]	; (80053b4 <SHT30_run+0x3bc>)
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
					timeout_SHT30_task_id = SCH_Add_Task(SHT30_timeout, READ_SENSOR_DURATION , 0);
 8005048:	23fa      	movs	r3, #250	; 0xfa
 800504a:	0059      	lsls	r1, r3, #1
 800504c:	4bd7      	ldr	r3, [pc, #860]	; (80053ac <SHT30_run+0x3b4>)
 800504e:	2200      	movs	r2, #0
 8005050:	0018      	movs	r0, r3
 8005052:	f7fe f893 	bl	800317c <SCH_Add_Task>
 8005056:	0002      	movs	r2, r0
 8005058:	4bd5      	ldr	r3, [pc, #852]	; (80053b0 <SHT30_run+0x3b8>)
 800505a:	601a      	str	r2, [r3, #0]
					SHT_index = 0;
 800505c:	4bd6      	ldr	r3, [pc, #856]	; (80053b8 <SHT30_run+0x3c0>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
					SHT30_state = SENSOR_READ_DATA;
 8005062:	4bd0      	ldr	r3, [pc, #832]	; (80053a4 <SHT30_run+0x3ac>)
 8005064:	2202      	movs	r2, #2
 8005066:	701a      	strb	r2, [r3, #0]
				break;
 8005068:	e1c0      	b.n	80053ec <SHT30_run+0x3f4>
				if(timeout_for_SHT30){
 800506a:	4bd2      	ldr	r3, [pc, #840]	; (80053b4 <SHT30_run+0x3bc>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d100      	bne.n	8005074 <SHT30_run+0x7c>
 8005072:	e1bd      	b.n	80053f0 <SHT30_run+0x3f8>
					timeout_for_SHT30 = false;
 8005074:	4bcf      	ldr	r3, [pc, #828]	; (80053b4 <SHT30_run+0x3bc>)
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
					if(SHT_index < 10){
 800507a:	4bcf      	ldr	r3, [pc, #828]	; (80053b8 <SHT30_run+0x3c0>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b09      	cmp	r3, #9
 8005080:	d827      	bhi.n	80050d2 <SHT30_run+0xda>
						SHT30_Read_Temperature_And_Humidity(&SHT, Single_HighRep_ClockStretch);
 8005082:	4ace      	ldr	r2, [pc, #824]	; (80053bc <SHT30_run+0x3c4>)
 8005084:	4bce      	ldr	r3, [pc, #824]	; (80053c0 <SHT30_run+0x3c8>)
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f7fe fe75 	bl	8003d78 <SHT30_Read_Temperature_And_Humidity>
						SHT_value_temp[TEMP_INDEX][SHT_index] = SHT.Temp;
 800508e:	4bca      	ldr	r3, [pc, #808]	; (80053b8 <SHT30_run+0x3c0>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	001a      	movs	r2, r3
 8005094:	4bca      	ldr	r3, [pc, #808]	; (80053c0 <SHT30_run+0x3c8>)
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	4bca      	ldr	r3, [pc, #808]	; (80053c4 <SHT30_run+0x3cc>)
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	50d1      	str	r1, [r2, r3]
						SHT_value_temp[HUMI_INDEX][SHT_index] = SHT.Humi;
 800509e:	4bc6      	ldr	r3, [pc, #792]	; (80053b8 <SHT30_run+0x3c0>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	001a      	movs	r2, r3
 80050a4:	4bc6      	ldr	r3, [pc, #792]	; (80053c0 <SHT30_run+0x3c8>)
 80050a6:	68d9      	ldr	r1, [r3, #12]
 80050a8:	4bc6      	ldr	r3, [pc, #792]	; (80053c4 <SHT30_run+0x3cc>)
 80050aa:	320a      	adds	r2, #10
 80050ac:	0092      	lsls	r2, r2, #2
 80050ae:	50d1      	str	r1, [r2, r3]
						SHT_index++;
 80050b0:	4bc1      	ldr	r3, [pc, #772]	; (80053b8 <SHT30_run+0x3c0>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	4bbf      	ldr	r3, [pc, #764]	; (80053b8 <SHT30_run+0x3c0>)
 80050ba:	701a      	strb	r2, [r3, #0]
						timeout_SHT30_task_id = SCH_Add_Task(SHT30_timeout, READ_SENSOR_DURATION , 0);
 80050bc:	23fa      	movs	r3, #250	; 0xfa
 80050be:	0059      	lsls	r1, r3, #1
 80050c0:	4bba      	ldr	r3, [pc, #744]	; (80053ac <SHT30_run+0x3b4>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7fe f859 	bl	800317c <SCH_Add_Task>
 80050ca:	0002      	movs	r2, r0
 80050cc:	4bb8      	ldr	r3, [pc, #736]	; (80053b0 <SHT30_run+0x3b8>)
 80050ce:	601a      	str	r2, [r3, #0]
				break;
 80050d0:	e18e      	b.n	80053f0 <SHT30_run+0x3f8>
						float mean_temp = Calculate_mean(SHT_value_temp[TEMP_INDEX], 10);
 80050d2:	4bbc      	ldr	r3, [pc, #752]	; (80053c4 <SHT30_run+0x3cc>)
 80050d4:	210a      	movs	r1, #10
 80050d6:	0018      	movs	r0, r3
 80050d8:	f000 f9b7 	bl	800544a <Calculate_mean>
 80050dc:	1c03      	adds	r3, r0, #0
 80050de:	60fb      	str	r3, [r7, #12]
						float var_temp = Calculate_variance(SHT_value_temp[TEMP_INDEX], 10, mean_temp);
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4bb8      	ldr	r3, [pc, #736]	; (80053c4 <SHT30_run+0x3cc>)
 80050e4:	210a      	movs	r1, #10
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 f9e5 	bl	80054b6 <Calculate_variance>
 80050ec:	1c03      	adds	r3, r0, #0
 80050ee:	60bb      	str	r3, [r7, #8]
						if((float)sqrt(var_temp) < (mean_temp*CAPACITY)){
 80050f0:	68b8      	ldr	r0, [r7, #8]
 80050f2:	f7fd ff2f 	bl	8002f54 <__aeabi_f2d>
 80050f6:	0002      	movs	r2, r0
 80050f8:	000b      	movs	r3, r1
 80050fa:	0010      	movs	r0, r2
 80050fc:	0019      	movs	r1, r3
 80050fe:	f00a fd3f 	bl	800fb80 <sqrt>
 8005102:	0002      	movs	r2, r0
 8005104:	000b      	movs	r3, r1
 8005106:	0010      	movs	r0, r2
 8005108:	0019      	movs	r1, r3
 800510a:	f7fd ff6b 	bl	8002fe4 <__aeabi_d2f>
 800510e:	1c03      	adds	r3, r0, #0
 8005110:	1c18      	adds	r0, r3, #0
 8005112:	f7fd ff1f 	bl	8002f54 <__aeabi_f2d>
 8005116:	0004      	movs	r4, r0
 8005118:	000d      	movs	r5, r1
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7fd ff1a 	bl	8002f54 <__aeabi_f2d>
 8005120:	4aa9      	ldr	r2, [pc, #676]	; (80053c8 <SHT30_run+0x3d0>)
 8005122:	4baa      	ldr	r3, [pc, #680]	; (80053cc <SHT30_run+0x3d4>)
 8005124:	f7fd f86e 	bl	8002204 <__aeabi_dmul>
 8005128:	0002      	movs	r2, r0
 800512a:	000b      	movs	r3, r1
 800512c:	0020      	movs	r0, r4
 800512e:	0029      	movs	r1, r5
 8005130:	f7fb f98e 	bl	8000450 <__aeabi_dcmplt>
 8005134:	1e03      	subs	r3, r0, #0
 8005136:	d004      	beq.n	8005142 <SHT30_run+0x14a>
							  DEVICE_MANAGER_set_value_condition(SOIL_TEMP,mean_temp);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1c19      	adds	r1, r3, #0
 800513c:	2001      	movs	r0, #1
 800513e:	f7ff fb01 	bl	8004744 <DEVICE_MANAGER_set_value_condition>
						float mean_humi = Calculate_mean(SHT_value_temp[HUMI_INDEX], 10);
 8005142:	4ba3      	ldr	r3, [pc, #652]	; (80053d0 <SHT30_run+0x3d8>)
 8005144:	210a      	movs	r1, #10
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f97f 	bl	800544a <Calculate_mean>
 800514c:	1c03      	adds	r3, r0, #0
 800514e:	607b      	str	r3, [r7, #4]
						float var_humi = Calculate_variance(SHT_value_temp[HUMI_INDEX], 10, mean_humi);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4b9f      	ldr	r3, [pc, #636]	; (80053d0 <SHT30_run+0x3d8>)
 8005154:	210a      	movs	r1, #10
 8005156:	0018      	movs	r0, r3
 8005158:	f000 f9ad 	bl	80054b6 <Calculate_variance>
 800515c:	1c03      	adds	r3, r0, #0
 800515e:	603b      	str	r3, [r7, #0]
						if((float)sqrt(var_humi) < (mean_humi*CAPACITY)){
 8005160:	6838      	ldr	r0, [r7, #0]
 8005162:	f7fd fef7 	bl	8002f54 <__aeabi_f2d>
 8005166:	0002      	movs	r2, r0
 8005168:	000b      	movs	r3, r1
 800516a:	0010      	movs	r0, r2
 800516c:	0019      	movs	r1, r3
 800516e:	f00a fd07 	bl	800fb80 <sqrt>
 8005172:	0002      	movs	r2, r0
 8005174:	000b      	movs	r3, r1
 8005176:	0010      	movs	r0, r2
 8005178:	0019      	movs	r1, r3
 800517a:	f7fd ff33 	bl	8002fe4 <__aeabi_d2f>
 800517e:	1c03      	adds	r3, r0, #0
 8005180:	1c18      	adds	r0, r3, #0
 8005182:	f7fd fee7 	bl	8002f54 <__aeabi_f2d>
 8005186:	0004      	movs	r4, r0
 8005188:	000d      	movs	r5, r1
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fd fee2 	bl	8002f54 <__aeabi_f2d>
 8005190:	4a8d      	ldr	r2, [pc, #564]	; (80053c8 <SHT30_run+0x3d0>)
 8005192:	4b8e      	ldr	r3, [pc, #568]	; (80053cc <SHT30_run+0x3d4>)
 8005194:	f7fd f836 	bl	8002204 <__aeabi_dmul>
 8005198:	0002      	movs	r2, r0
 800519a:	000b      	movs	r3, r1
 800519c:	0020      	movs	r0, r4
 800519e:	0029      	movs	r1, r5
 80051a0:	f7fb f956 	bl	8000450 <__aeabi_dcmplt>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d027      	beq.n	80051f8 <SHT30_run+0x200>
							 size = sprintf(buffer, "{\'humidity\':%.2f,\'temperature\':%.2f}\r\n", mean_humi,mean_temp);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fd fed3 	bl	8002f54 <__aeabi_f2d>
 80051ae:	0004      	movs	r4, r0
 80051b0:	000d      	movs	r5, r1
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7fd fece 	bl	8002f54 <__aeabi_f2d>
 80051b8:	0002      	movs	r2, r0
 80051ba:	000b      	movs	r3, r1
 80051bc:	4985      	ldr	r1, [pc, #532]	; (80053d4 <SHT30_run+0x3dc>)
 80051be:	4886      	ldr	r0, [pc, #536]	; (80053d8 <SHT30_run+0x3e0>)
 80051c0:	9200      	str	r2, [sp, #0]
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	0022      	movs	r2, r4
 80051c6:	002b      	movs	r3, r5
 80051c8:	f006 fe36 	bl	800be38 <siprintf>
 80051cc:	0003      	movs	r3, r0
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	4b82      	ldr	r3, [pc, #520]	; (80053dc <SHT30_run+0x3e4>)
 80051d2:	701a      	strb	r2, [r3, #0]
							 Serial_send_data(buffer,size);
 80051d4:	4b81      	ldr	r3, [pc, #516]	; (80053dc <SHT30_run+0x3e4>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	001a      	movs	r2, r3
 80051da:	4b7f      	ldr	r3, [pc, #508]	; (80053d8 <SHT30_run+0x3e0>)
 80051dc:	0011      	movs	r1, r2
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 f922 	bl	8005428 <Serial_send_data>
							 DEVICE_MANAGER_set_value_condition(SOIL_HUMI,mean_humi);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	1c19      	adds	r1, r3, #0
 80051e8:	2002      	movs	r0, #2
 80051ea:	f7ff faab 	bl	8004744 <DEVICE_MANAGER_set_value_condition>
							 DEVICE_MANAGER_set_value_condition(SOIL_TEMP,mean_temp);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1c19      	adds	r1, r3, #0
 80051f2:	2001      	movs	r0, #1
 80051f4:	f7ff faa6 	bl	8004744 <DEVICE_MANAGER_set_value_condition>
						temperature = mean_temp;
 80051f8:	4b79      	ldr	r3, [pc, #484]	; (80053e0 <SHT30_run+0x3e8>)
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]
						humidity = mean_humi;
 80051fe:	4b79      	ldr	r3, [pc, #484]	; (80053e4 <SHT30_run+0x3ec>)
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]
						SHT30_state = SENSOR_BEGIN;
 8005204:	4b67      	ldr	r3, [pc, #412]	; (80053a4 <SHT30_run+0x3ac>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
				break;
 800520a:	e0f1      	b.n	80053f0 <SHT30_run+0x3f8>
				if(!flag_setup[SOIL_HT_SENSOR]){
 800520c:	4b76      	ldr	r3, [pc, #472]	; (80053e8 <SHT30_run+0x3f0>)
 800520e:	78db      	ldrb	r3, [r3, #3]
 8005210:	2201      	movs	r2, #1
 8005212:	4053      	eors	r3, r2
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <SHT30_run+0x232>
					SHT30_state = SENSOR_BEGIN;
 800521a:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <SHT30_run+0x3ac>)
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
					SCH_Delete_Task(timeout_SHT30_task_id);
 8005220:	4b63      	ldr	r3, [pc, #396]	; (80053b0 <SHT30_run+0x3b8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	0018      	movs	r0, r3
 8005226:	f7fe f92f 	bl	8003488 <SCH_Delete_Task>
				if(timeout_for_SHT30){
 800522a:	4b62      	ldr	r3, [pc, #392]	; (80053b4 <SHT30_run+0x3bc>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d100      	bne.n	8005234 <SHT30_run+0x23c>
 8005232:	e0df      	b.n	80053f4 <SHT30_run+0x3fc>
					timeout_for_SHT30 = false;
 8005234:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <SHT30_run+0x3bc>)
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
					if(SHT_index < 3){
 800523a:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <SHT30_run+0x3c0>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d827      	bhi.n	8005292 <SHT30_run+0x29a>
						SHT30_Read_Temperature_And_Humidity(&SHT, Single_HighRep_ClockStretch);
 8005242:	4a5e      	ldr	r2, [pc, #376]	; (80053bc <SHT30_run+0x3c4>)
 8005244:	4b5e      	ldr	r3, [pc, #376]	; (80053c0 <SHT30_run+0x3c8>)
 8005246:	0011      	movs	r1, r2
 8005248:	0018      	movs	r0, r3
 800524a:	f7fe fd95 	bl	8003d78 <SHT30_Read_Temperature_And_Humidity>
						SHT_value_temp[TEMP_INDEX][SHT_index] = SHT.Temp;
 800524e:	4b5a      	ldr	r3, [pc, #360]	; (80053b8 <SHT30_run+0x3c0>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	001a      	movs	r2, r3
 8005254:	4b5a      	ldr	r3, [pc, #360]	; (80053c0 <SHT30_run+0x3c8>)
 8005256:	6899      	ldr	r1, [r3, #8]
 8005258:	4b5a      	ldr	r3, [pc, #360]	; (80053c4 <SHT30_run+0x3cc>)
 800525a:	0092      	lsls	r2, r2, #2
 800525c:	50d1      	str	r1, [r2, r3]
						SHT_value_temp[HUMI_INDEX][SHT_index] = SHT.Humi;
 800525e:	4b56      	ldr	r3, [pc, #344]	; (80053b8 <SHT30_run+0x3c0>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	001a      	movs	r2, r3
 8005264:	4b56      	ldr	r3, [pc, #344]	; (80053c0 <SHT30_run+0x3c8>)
 8005266:	68d9      	ldr	r1, [r3, #12]
 8005268:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <SHT30_run+0x3cc>)
 800526a:	320a      	adds	r2, #10
 800526c:	0092      	lsls	r2, r2, #2
 800526e:	50d1      	str	r1, [r2, r3]
						SHT_index++;
 8005270:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <SHT30_run+0x3c0>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <SHT30_run+0x3c0>)
 800527a:	701a      	strb	r2, [r3, #0]
						timeout_SHT30_task_id = SCH_Add_Task(SHT30_timeout, READ_SENSOR_DURATION , 0);
 800527c:	23fa      	movs	r3, #250	; 0xfa
 800527e:	0059      	lsls	r1, r3, #1
 8005280:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <SHT30_run+0x3b4>)
 8005282:	2200      	movs	r2, #0
 8005284:	0018      	movs	r0, r3
 8005286:	f7fd ff79 	bl	800317c <SCH_Add_Task>
 800528a:	0002      	movs	r2, r0
 800528c:	4b48      	ldr	r3, [pc, #288]	; (80053b0 <SHT30_run+0x3b8>)
 800528e:	601a      	str	r2, [r3, #0]
				break;
 8005290:	e0b0      	b.n	80053f4 <SHT30_run+0x3fc>
						SHT_index = 0;
 8005292:	4b49      	ldr	r3, [pc, #292]	; (80053b8 <SHT30_run+0x3c0>)
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
						timeout_SHT30_task_id = SCH_Add_Task(SHT30_timeout, READ_SENSOR_DURATION , 0);
 8005298:	23fa      	movs	r3, #250	; 0xfa
 800529a:	0059      	lsls	r1, r3, #1
 800529c:	4b43      	ldr	r3, [pc, #268]	; (80053ac <SHT30_run+0x3b4>)
 800529e:	2200      	movs	r2, #0
 80052a0:	0018      	movs	r0, r3
 80052a2:	f7fd ff6b 	bl	800317c <SCH_Add_Task>
 80052a6:	0002      	movs	r2, r0
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <SHT30_run+0x3b8>)
 80052aa:	601a      	str	r2, [r3, #0]
						float mean_temp = Calculate_mean(SHT_value_temp[TEMP_INDEX], 3);
 80052ac:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <SHT30_run+0x3cc>)
 80052ae:	2103      	movs	r1, #3
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 f8ca 	bl	800544a <Calculate_mean>
 80052b6:	1c03      	adds	r3, r0, #0
 80052b8:	61fb      	str	r3, [r7, #28]
						float var_temp = Calculate_variance(SHT_value_temp[TEMP_INDEX], 3, mean_temp);
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <SHT30_run+0x3cc>)
 80052be:	2103      	movs	r1, #3
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 f8f8 	bl	80054b6 <Calculate_variance>
 80052c6:	1c03      	adds	r3, r0, #0
 80052c8:	61bb      	str	r3, [r7, #24]
						if((float)sqrt(var_temp) < (mean_temp*1)){
 80052ca:	69b8      	ldr	r0, [r7, #24]
 80052cc:	f7fd fe42 	bl	8002f54 <__aeabi_f2d>
 80052d0:	0002      	movs	r2, r0
 80052d2:	000b      	movs	r3, r1
 80052d4:	0010      	movs	r0, r2
 80052d6:	0019      	movs	r1, r3
 80052d8:	f00a fc52 	bl	800fb80 <sqrt>
 80052dc:	0002      	movs	r2, r0
 80052de:	000b      	movs	r3, r1
 80052e0:	0010      	movs	r0, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	f7fd fe7e 	bl	8002fe4 <__aeabi_d2f>
 80052e8:	1c03      	adds	r3, r0, #0
 80052ea:	1c19      	adds	r1, r3, #0
 80052ec:	69f8      	ldr	r0, [r7, #28]
 80052ee:	f7fb f8fd 	bl	80004ec <__aeabi_fcmpgt>
 80052f2:	1e03      	subs	r3, r0, #0
 80052f4:	d004      	beq.n	8005300 <SHT30_run+0x308>
							  DEVICE_MANAGER_set_value_condition(SOIL_TEMP,mean_temp);
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	1c19      	adds	r1, r3, #0
 80052fa:	2001      	movs	r0, #1
 80052fc:	f7ff fa22 	bl	8004744 <DEVICE_MANAGER_set_value_condition>
						float mean_humi = Calculate_mean(SHT_value_temp[HUMI_INDEX], 3);
 8005300:	4b33      	ldr	r3, [pc, #204]	; (80053d0 <SHT30_run+0x3d8>)
 8005302:	2103      	movs	r1, #3
 8005304:	0018      	movs	r0, r3
 8005306:	f000 f8a0 	bl	800544a <Calculate_mean>
 800530a:	1c03      	adds	r3, r0, #0
 800530c:	617b      	str	r3, [r7, #20]
						float var_humi = Calculate_variance(SHT_value_temp[HUMI_INDEX], 3, mean_humi);
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <SHT30_run+0x3d8>)
 8005312:	2103      	movs	r1, #3
 8005314:	0018      	movs	r0, r3
 8005316:	f000 f8ce 	bl	80054b6 <Calculate_variance>
 800531a:	1c03      	adds	r3, r0, #0
 800531c:	613b      	str	r3, [r7, #16]
						if((float)sqrt(var_humi) < (mean_humi*1)){
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f7fd fe18 	bl	8002f54 <__aeabi_f2d>
 8005324:	0002      	movs	r2, r0
 8005326:	000b      	movs	r3, r1
 8005328:	0010      	movs	r0, r2
 800532a:	0019      	movs	r1, r3
 800532c:	f00a fc28 	bl	800fb80 <sqrt>
 8005330:	0002      	movs	r2, r0
 8005332:	000b      	movs	r3, r1
 8005334:	0010      	movs	r0, r2
 8005336:	0019      	movs	r1, r3
 8005338:	f7fd fe54 	bl	8002fe4 <__aeabi_d2f>
 800533c:	1c03      	adds	r3, r0, #0
 800533e:	1c19      	adds	r1, r3, #0
 8005340:	6978      	ldr	r0, [r7, #20]
 8005342:	f7fb f8d3 	bl	80004ec <__aeabi_fcmpgt>
 8005346:	1e03      	subs	r3, r0, #0
 8005348:	d022      	beq.n	8005390 <SHT30_run+0x398>
							 size = sprintf(buffer, "{\'humidity\':%.2f,\'temperature\':%.2f}\r\n", mean_humi,mean_temp);
 800534a:	6978      	ldr	r0, [r7, #20]
 800534c:	f7fd fe02 	bl	8002f54 <__aeabi_f2d>
 8005350:	0004      	movs	r4, r0
 8005352:	000d      	movs	r5, r1
 8005354:	69f8      	ldr	r0, [r7, #28]
 8005356:	f7fd fdfd 	bl	8002f54 <__aeabi_f2d>
 800535a:	0002      	movs	r2, r0
 800535c:	000b      	movs	r3, r1
 800535e:	491d      	ldr	r1, [pc, #116]	; (80053d4 <SHT30_run+0x3dc>)
 8005360:	481d      	ldr	r0, [pc, #116]	; (80053d8 <SHT30_run+0x3e0>)
 8005362:	9200      	str	r2, [sp, #0]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	0022      	movs	r2, r4
 8005368:	002b      	movs	r3, r5
 800536a:	f006 fd65 	bl	800be38 <siprintf>
 800536e:	0003      	movs	r3, r0
 8005370:	b2da      	uxtb	r2, r3
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <SHT30_run+0x3e4>)
 8005374:	701a      	strb	r2, [r3, #0]
							 Serial_send_data(buffer,size);
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <SHT30_run+0x3e4>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	001a      	movs	r2, r3
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <SHT30_run+0x3e0>)
 800537e:	0011      	movs	r1, r2
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f851 	bl	8005428 <Serial_send_data>
							 DEVICE_MANAGER_set_value_condition(SOIL_HUMI,mean_humi);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	1c19      	adds	r1, r3, #0
 800538a:	2002      	movs	r0, #2
 800538c:	f7ff f9da 	bl	8004744 <DEVICE_MANAGER_set_value_condition>
						temperature = mean_temp;
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <SHT30_run+0x3e8>)
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	601a      	str	r2, [r3, #0]
						humidity = mean_humi;
 8005396:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <SHT30_run+0x3ec>)
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	601a      	str	r2, [r3, #0]
				break;
 800539c:	e02a      	b.n	80053f4 <SHT30_run+0x3fc>
				break;
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	e029      	b.n	80053f6 <SHT30_run+0x3fe>
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	200008c8 	.word	0x200008c8
 80053a8:	00001388 	.word	0x00001388
 80053ac:	08005415 	.word	0x08005415
 80053b0:	200008cc 	.word	0x200008cc
 80053b4:	200008c9 	.word	0x200008c9
 80053b8:	200008d0 	.word	0x200008d0
 80053bc:	00002c06 	.word	0x00002c06
 80053c0:	20000924 	.word	0x20000924
 80053c4:	200008d4 	.word	0x200008d4
 80053c8:	9999999a 	.word	0x9999999a
 80053cc:	3fb99999 	.word	0x3fb99999
 80053d0:	200008fc 	.word	0x200008fc
 80053d4:	0800fdd4 	.word	0x0800fdd4
 80053d8:	20000938 	.word	0x20000938
 80053dc:	2000099c 	.word	0x2000099c
 80053e0:	200009a0 	.word	0x200009a0
 80053e4:	200009a4 	.word	0x200009a4
 80053e8:	20000934 	.word	0x20000934
				break;
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	e002      	b.n	80053f6 <SHT30_run+0x3fe>
				break;
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	e000      	b.n	80053f6 <SHT30_run+0x3fe>
				break;
 80053f4:	46c0      	nop			; (mov r8, r8)
		}
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b008      	add	sp, #32
 80053fc:	bdb0      	pop	{r4, r5, r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)

08005400 <BH1750_timeout>:

static void BH1750_timeout(){
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
	timeout_for_BH1750 = true;
 8005404:	4b02      	ldr	r3, [pc, #8]	; (8005410 <BH1750_timeout+0x10>)
 8005406:	2201      	movs	r2, #1
 8005408:	701a      	strb	r2, [r3, #0]
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000895 	.word	0x20000895

08005414 <SHT30_timeout>:


static void SHT30_timeout(){
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
	timeout_for_SHT30 = true;
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <SHT30_timeout+0x10>)
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200008c9 	.word	0x200008c9

08005428 <Serial_send_data>:

static void Serial_send_data(uint8_t *data , size_t len){
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	char buff[20];
//	uint64_t time  = HAL_GetTick();
//	uint8_t sz = sprintf(buff, "TIME :%d ", time);

//	UART_send(UART_3,buff,sz);
	UART_send(UART_3,data,len);
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	0019      	movs	r1, r3
 8005438:	2002      	movs	r0, #2
 800543a:	f000 fb13 	bl	8005a64 <UART_send>
	Display_lcd();
 800543e:	f7ff fc55 	bl	8004cec <Display_lcd>
}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b008      	add	sp, #32
 8005448:	bd80      	pop	{r7, pc}

0800544a <Calculate_mean>:

static float Calculate_mean(float *Array, uint8_t size){
 800544a:	b590      	push	{r4, r7, lr}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	000a      	movs	r2, r1
 8005454:	1cfb      	adds	r3, r7, #3
 8005456:	701a      	strb	r2, [r3, #0]
	float sum = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
	for(uint8_t index = 0 ; index < size ; ++index){
 800545c:	230b      	movs	r3, #11
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e011      	b.n	800548a <Calculate_mean+0x40>
		sum += Array[index];
 8005466:	240b      	movs	r4, #11
 8005468:	193b      	adds	r3, r7, r4
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	18d3      	adds	r3, r2, r3
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	1c19      	adds	r1, r3, #0
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7fb f8bc 	bl	80005f4 <__aeabi_fadd>
 800547c:	1c03      	adds	r3, r0, #0
 800547e:	60fb      	str	r3, [r7, #12]
	for(uint8_t index = 0 ; index < size ; ++index){
 8005480:	193b      	adds	r3, r7, r4
 8005482:	193a      	adds	r2, r7, r4
 8005484:	7812      	ldrb	r2, [r2, #0]
 8005486:	3201      	adds	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	230b      	movs	r3, #11
 800548c:	18fa      	adds	r2, r7, r3
 800548e:	1cfb      	adds	r3, r7, #3
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d3e6      	bcc.n	8005466 <Calculate_mean+0x1c>
	}
	return (sum/size);
 8005498:	1cfb      	adds	r3, r7, #3
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	0018      	movs	r0, r3
 800549e:	f7fb fee3 	bl	8001268 <__aeabi_i2f>
 80054a2:	1c03      	adds	r3, r0, #0
 80054a4:	1c19      	adds	r1, r3, #0
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7fb fa42 	bl	8000930 <__aeabi_fdiv>
 80054ac:	1c03      	adds	r3, r0, #0
}
 80054ae:	1c18      	adds	r0, r3, #0
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b005      	add	sp, #20
 80054b4:	bd90      	pop	{r4, r7, pc}

080054b6 <Calculate_variance>:

static float Calculate_variance(float *Array, uint8_t size, float mean){
 80054b6:	b5b0      	push	{r4, r5, r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	230b      	movs	r3, #11
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	1c0a      	adds	r2, r1, #0
 80054c6:	701a      	strb	r2, [r3, #0]
	float squared_diff = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
	for(uint8_t index = 0 ; index < size ; ++index){
 80054cc:	2313      	movs	r3, #19
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e027      	b.n	8005526 <Calculate_variance+0x70>
		squared_diff += (Array[index] - mean)*(Array[index] - mean);
 80054d6:	2513      	movs	r5, #19
 80054d8:	197b      	adds	r3, r7, r5
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	18d3      	adds	r3, r2, r3
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	1c18      	adds	r0, r3, #0
 80054e8:	f7fb fd10 	bl	8000f0c <__aeabi_fsub>
 80054ec:	1c03      	adds	r3, r0, #0
 80054ee:	1c1c      	adds	r4, r3, #0
 80054f0:	197b      	adds	r3, r7, r5
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	18d3      	adds	r3, r2, r3
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	1c18      	adds	r0, r3, #0
 8005500:	f7fb fd04 	bl	8000f0c <__aeabi_fsub>
 8005504:	1c03      	adds	r3, r0, #0
 8005506:	1c19      	adds	r1, r3, #0
 8005508:	1c20      	adds	r0, r4, #0
 800550a:	f7fb fbd9 	bl	8000cc0 <__aeabi_fmul>
 800550e:	1c03      	adds	r3, r0, #0
 8005510:	1c19      	adds	r1, r3, #0
 8005512:	6978      	ldr	r0, [r7, #20]
 8005514:	f7fb f86e 	bl	80005f4 <__aeabi_fadd>
 8005518:	1c03      	adds	r3, r0, #0
 800551a:	617b      	str	r3, [r7, #20]
	for(uint8_t index = 0 ; index < size ; ++index){
 800551c:	197b      	adds	r3, r7, r5
 800551e:	197a      	adds	r2, r7, r5
 8005520:	7812      	ldrb	r2, [r2, #0]
 8005522:	3201      	adds	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	2313      	movs	r3, #19
 8005528:	18fa      	adds	r2, r7, r3
 800552a:	210b      	movs	r1, #11
 800552c:	187b      	adds	r3, r7, r1
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d3cf      	bcc.n	80054d6 <Calculate_variance+0x20>
	}
	return (squared_diff/size);
 8005536:	187b      	adds	r3, r7, r1
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	0018      	movs	r0, r3
 800553c:	f7fb fe94 	bl	8001268 <__aeabi_i2f>
 8005540:	1c03      	adds	r3, r0, #0
 8005542:	1c19      	adds	r1, r3, #0
 8005544:	6978      	ldr	r0, [r7, #20]
 8005546:	f7fb f9f3 	bl	8000930 <__aeabi_fdiv>
 800554a:	1c03      	adds	r3, r0, #0
}
 800554c:	1c18      	adds	r0, r3, #0
 800554e:	46bd      	mov	sp, r7
 8005550:	b006      	add	sp, #24
 8005552:	bdb0      	pop	{r4, r5, r7, pc}

08005554 <CLOCK_init>:

#include "main.h"
#include "Hal/clock.h"

bool CLOCK_init(void)
{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b093      	sub	sp, #76	; 0x4c
 8005558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800555a:	2414      	movs	r4, #20
 800555c:	193b      	adds	r3, r7, r4
 800555e:	0018      	movs	r0, r3
 8005560:	2334      	movs	r3, #52	; 0x34
 8005562:	001a      	movs	r2, r3
 8005564:	2100      	movs	r1, #0
 8005566:	f005 fde4 	bl	800b132 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	0018      	movs	r0, r3
 800556e:	2310      	movs	r3, #16
 8005570:	001a      	movs	r2, r3
 8005572:	2100      	movs	r1, #0
 8005574:	f005 fddd 	bl	800b132 <memset>

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	0018      	movs	r0, r3
 800557e:	f001 ff49 	bl	8007414 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005582:	193b      	adds	r3, r7, r4
 8005584:	220a      	movs	r2, #10
 8005586:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005588:	193b      	adds	r3, r7, r4
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	0052      	lsls	r2, r2, #1
 800558e:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005590:	0021      	movs	r1, r4
 8005592:	187b      	adds	r3, r7, r1
 8005594:	2200      	movs	r2, #0
 8005596:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005598:	187b      	adds	r3, r7, r1
 800559a:	2240      	movs	r2, #64	; 0x40
 800559c:	615a      	str	r2, [r3, #20]
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	2201      	movs	r2, #1
 80055a2:	619a      	str	r2, [r3, #24]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	0018      	movs	r0, r3
 80055ae:	f001 ff7d 	bl	80074ac <HAL_RCC_OscConfig>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d001      	beq.n	80055ba <CLOCK_init+0x66>
	  {
	    Error_Handler();
 80055b6:	f000 fb23 	bl	8005c00 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	2207      	movs	r2, #7
 80055be:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	2200      	movs	r2, #0
 80055c4:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	2200      	movs	r2, #0
 80055ca:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055cc:	1d3b      	adds	r3, r7, #4
 80055ce:	2200      	movs	r2, #0
 80055d0:	60da      	str	r2, [r3, #12]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80055d2:	1d3b      	adds	r3, r7, #4
 80055d4:	2100      	movs	r1, #0
 80055d6:	0018      	movs	r0, r3
 80055d8:	f002 fa78 	bl	8007acc <HAL_RCC_ClockConfig>
 80055dc:	1e03      	subs	r3, r0, #0
 80055de:	d001      	beq.n	80055e4 <CLOCK_init+0x90>
	  {
	    Error_Handler();
 80055e0:	f000 fb0e 	bl	8005c00 <Error_Handler>
	  }

}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b013      	add	sp, #76	; 0x4c
 80055ec:	bd90      	pop	{r4, r7, pc}
	...

080055f0 <GPIO_init>:
#define SRC_HAL_GPIO_C_

#include "main.h"
#include "Hal/gpio.h"

bool GPIO_init(){
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <GPIO_init+0x70>)
 80055f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fa:	4b19      	ldr	r3, [pc, #100]	; (8005660 <GPIO_init+0x70>)
 80055fc:	2101      	movs	r1, #1
 80055fe:	430a      	orrs	r2, r1
 8005600:	635a      	str	r2, [r3, #52]	; 0x34
 8005602:	4b17      	ldr	r3, [pc, #92]	; (8005660 <GPIO_init+0x70>)
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	2201      	movs	r2, #1
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800560e:	4b14      	ldr	r3, [pc, #80]	; (8005660 <GPIO_init+0x70>)
 8005610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <GPIO_init+0x70>)
 8005614:	2102      	movs	r1, #2
 8005616:	430a      	orrs	r2, r1
 8005618:	635a      	str	r2, [r3, #52]	; 0x34
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <GPIO_init+0x70>)
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	2202      	movs	r2, #2
 8005620:	4013      	ands	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005626:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <GPIO_init+0x70>)
 8005628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <GPIO_init+0x70>)
 800562c:	2104      	movs	r1, #4
 800562e:	430a      	orrs	r2, r1
 8005630:	635a      	str	r2, [r3, #52]	; 0x34
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <GPIO_init+0x70>)
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	2204      	movs	r2, #4
 8005638:	4013      	ands	r3, r2
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <GPIO_init+0x70>)
 8005640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <GPIO_init+0x70>)
 8005644:	2108      	movs	r1, #8
 8005646:	430a      	orrs	r2, r1
 8005648:	635a      	str	r2, [r3, #52]	; 0x34
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <GPIO_init+0x70>)
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	2208      	movs	r2, #8
 8005650:	4013      	ands	r3, r2
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000

08005664 <I2C_init>:



I2C_HandleTypeDef hi2c1;

void I2C_init(){
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 8005668:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <I2C_init+0x50>)
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <I2C_init+0x54>)
 800566c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00303D5B;
 800566e:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <I2C_init+0x50>)
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <I2C_init+0x58>)
 8005672:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <I2C_init+0x50>)
 8005676:	2200      	movs	r2, #0
 8005678:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800567a:	4b0e      	ldr	r3, [pc, #56]	; (80056b4 <I2C_init+0x50>)
 800567c:	2201      	movs	r2, #1
 800567e:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <I2C_init+0x50>)
 8005682:	2200      	movs	r2, #0
 8005684:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <I2C_init+0x50>)
 8005688:	2200      	movs	r2, #0
 800568a:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <I2C_init+0x50>)
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005692:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <I2C_init+0x50>)
 8005694:	2200      	movs	r2, #0
 8005696:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <I2C_init+0x50>)
 800569a:	2200      	movs	r2, #0
 800569c:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <I2C_init+0x50>)
 80056a0:	0018      	movs	r0, r3
 80056a2:	f001 f981 	bl	80069a8 <HAL_I2C_Init>
 80056a6:	1e03      	subs	r3, r0, #0
 80056a8:	d001      	beq.n	80056ae <I2C_init+0x4a>
	{
	Error_Handler();
 80056aa:	f000 faa9 	bl	8005c00 <Error_Handler>
	}
}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000a14 	.word	0x20000a14
 80056b8:	40005400 	.word	0x40005400
 80056bc:	00303d5b 	.word	0x00303d5b

080056c0 <TIMER_init>:
		.ClockDivision = TIM_CLOCKDIVISION_DIV1,
		.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE
	}
};

bool TIMER_init(){
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b096      	sub	sp, #88	; 0x58
 80056c4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056c6:	2348      	movs	r3, #72	; 0x48
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	0018      	movs	r0, r3
 80056cc:	2310      	movs	r3, #16
 80056ce:	001a      	movs	r2, r3
 80056d0:	2100      	movs	r1, #0
 80056d2:	f005 fd2e 	bl	800b132 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056d6:	233c      	movs	r3, #60	; 0x3c
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	0018      	movs	r0, r3
 80056dc:	230c      	movs	r3, #12
 80056de:	001a      	movs	r2, r3
 80056e0:	2100      	movs	r1, #0
 80056e2:	f005 fd26 	bl	800b132 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80056e6:	2320      	movs	r3, #32
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	0018      	movs	r0, r3
 80056ec:	231c      	movs	r3, #28
 80056ee:	001a      	movs	r2, r3
 80056f0:	2100      	movs	r1, #0
 80056f2:	f005 fd1e 	bl	800b132 <memset>

	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80056f6:	4b67      	ldr	r3, [pc, #412]	; (8005894 <TIMER_init+0x1d4>)
 80056f8:	0018      	movs	r0, r3
 80056fa:	f002 fcc5 	bl	8008088 <HAL_TIM_Base_Init>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d001      	beq.n	8005706 <TIMER_init+0x46>
	{
		Error_Handler();
 8005702:	f000 fa7d 	bl	8005c00 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005706:	2148      	movs	r1, #72	; 0x48
 8005708:	187b      	adds	r3, r7, r1
 800570a:	2280      	movs	r2, #128	; 0x80
 800570c:	0152      	lsls	r2, r2, #5
 800570e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005710:	187a      	adds	r2, r7, r1
 8005712:	4b60      	ldr	r3, [pc, #384]	; (8005894 <TIMER_init+0x1d4>)
 8005714:	0011      	movs	r1, r2
 8005716:	0018      	movs	r0, r3
 8005718:	f003 f928 	bl	800896c <HAL_TIM_ConfigClockSource>
 800571c:	1e03      	subs	r3, r0, #0
 800571e:	d001      	beq.n	8005724 <TIMER_init+0x64>
	{
		Error_Handler();
 8005720:	f000 fa6e 	bl	8005c00 <Error_Handler>
	}
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005724:	4b5b      	ldr	r3, [pc, #364]	; (8005894 <TIMER_init+0x1d4>)
 8005726:	0018      	movs	r0, r3
 8005728:	f002 fdaa 	bl	8008280 <HAL_TIM_PWM_Init>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d001      	beq.n	8005734 <TIMER_init+0x74>
	  {
	    Error_Handler();
 8005730:	f000 fa66 	bl	8005c00 <Error_Handler>
	  }
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005734:	213c      	movs	r1, #60	; 0x3c
 8005736:	187b      	adds	r3, r7, r1
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800573c:	187b      	adds	r3, r7, r1
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005742:	187a      	adds	r2, r7, r1
 8005744:	4b53      	ldr	r3, [pc, #332]	; (8005894 <TIMER_init+0x1d4>)
 8005746:	0011      	movs	r1, r2
 8005748:	0018      	movs	r0, r3
 800574a:	f003 fdff 	bl	800934c <HAL_TIMEx_MasterConfigSynchronization>
 800574e:	1e03      	subs	r3, r0, #0
 8005750:	d001      	beq.n	8005756 <TIMER_init+0x96>
	{
		Error_Handler();
 8005752:	f000 fa55 	bl	8005c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005756:	2120      	movs	r1, #32
 8005758:	187b      	adds	r3, r7, r1
 800575a:	2260      	movs	r2, #96	; 0x60
 800575c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800575e:	187b      	adds	r3, r7, r1
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005764:	187b      	adds	r3, r7, r1
 8005766:	2200      	movs	r2, #0
 8005768:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800576a:	187b      	adds	r3, r7, r1
 800576c:	2200      	movs	r2, #0
 800576e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005770:	1879      	adds	r1, r7, r1
 8005772:	4b48      	ldr	r3, [pc, #288]	; (8005894 <TIMER_init+0x1d4>)
 8005774:	2200      	movs	r2, #0
 8005776:	0018      	movs	r0, r3
 8005778:	f002 fff8 	bl	800876c <HAL_TIM_PWM_ConfigChannel>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d001      	beq.n	8005784 <TIMER_init+0xc4>
	{
		Error_Handler();
 8005780:	f000 fa3e 	bl	8005c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005784:	2320      	movs	r3, #32
 8005786:	18f9      	adds	r1, r7, r3
 8005788:	4b42      	ldr	r3, [pc, #264]	; (8005894 <TIMER_init+0x1d4>)
 800578a:	2204      	movs	r2, #4
 800578c:	0018      	movs	r0, r3
 800578e:	f002 ffed 	bl	800876c <HAL_TIM_PWM_ConfigChannel>
 8005792:	1e03      	subs	r3, r0, #0
 8005794:	d001      	beq.n	800579a <TIMER_init+0xda>
	{
		Error_Handler();
 8005796:	f000 fa33 	bl	8005c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800579a:	2320      	movs	r3, #32
 800579c:	18f9      	adds	r1, r7, r3
 800579e:	4b3d      	ldr	r3, [pc, #244]	; (8005894 <TIMER_init+0x1d4>)
 80057a0:	2208      	movs	r2, #8
 80057a2:	0018      	movs	r0, r3
 80057a4:	f002 ffe2 	bl	800876c <HAL_TIM_PWM_ConfigChannel>
 80057a8:	1e03      	subs	r3, r0, #0
 80057aa:	d001      	beq.n	80057b0 <TIMER_init+0xf0>
	{
	    Error_Handler();
 80057ac:	f000 fa28 	bl	8005c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80057b0:	2320      	movs	r3, #32
 80057b2:	18f9      	adds	r1, r7, r3
 80057b4:	4b37      	ldr	r3, [pc, #220]	; (8005894 <TIMER_init+0x1d4>)
 80057b6:	220c      	movs	r2, #12
 80057b8:	0018      	movs	r0, r3
 80057ba:	f002 ffd7 	bl	800876c <HAL_TIM_PWM_ConfigChannel>
 80057be:	1e03      	subs	r3, r0, #0
 80057c0:	d001      	beq.n	80057c6 <TIMER_init+0x106>
	{
	    Error_Handler();
 80057c2:	f000 fa1d 	bl	8005c00 <Error_Handler>
	}
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80057c6:	4b33      	ldr	r3, [pc, #204]	; (8005894 <TIMER_init+0x1d4>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f002 fd03 	bl	80081d4 <HAL_TIM_Base_Start_IT>
 80057ce:	1e03      	subs	r3, r0, #0
 80057d0:	d001      	beq.n	80057d6 <TIMER_init+0x116>
	{
		Error_Handler();
 80057d2:	f000 fa15 	bl	8005c00 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim3);
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <TIMER_init+0x1d4>)
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 fad9 	bl	8005d90 <HAL_TIM_MspPostInit>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80057de:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <TIMER_init+0x1d4>)
 80057e0:	2100      	movs	r1, #0
 80057e2:	0018      	movs	r0, r3
 80057e4:	f002 fdac 	bl	8008340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80057e8:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <TIMER_init+0x1d4>)
 80057ea:	2104      	movs	r1, #4
 80057ec:	0018      	movs	r0, r3
 80057ee:	f002 fda7 	bl	8008340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80057f2:	4b28      	ldr	r3, [pc, #160]	; (8005894 <TIMER_init+0x1d4>)
 80057f4:	2108      	movs	r1, #8
 80057f6:	0018      	movs	r0, r3
 80057f8:	f002 fda2 	bl	8008340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <TIMER_init+0x1d4>)
 80057fe:	210c      	movs	r1, #12
 8005800:	0018      	movs	r0, r3
 8005802:	f002 fd9d 	bl	8008340 <HAL_TIM_PWM_Start>
//	tim1 start here
		TIM_ClockConfigTypeDef sClockSourceConfig1 = {0};
 8005806:	2310      	movs	r3, #16
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	0018      	movs	r0, r3
 800580c:	2310      	movs	r3, #16
 800580e:	001a      	movs	r2, r3
 8005810:	2100      	movs	r1, #0
 8005812:	f005 fc8e 	bl	800b132 <memset>
		TIM_MasterConfigTypeDef sMasterConfig1 = {0};
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	0018      	movs	r0, r3
 800581a:	230c      	movs	r3, #12
 800581c:	001a      	movs	r2, r3
 800581e:	2100      	movs	r1, #0
 8005820:	f005 fc87 	bl	800b132 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <TIMER_init+0x1d8>)
 8005826:	0018      	movs	r0, r3
 8005828:	f002 fc2e 	bl	8008088 <HAL_TIM_Base_Init>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d001      	beq.n	8005834 <TIMER_init+0x174>
	  {
	    Error_Handler();
 8005830:	f000 f9e6 	bl	8005c00 <Error_Handler>
	  }
	  sClockSourceConfig1.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005834:	2110      	movs	r1, #16
 8005836:	187b      	adds	r3, r7, r1
 8005838:	2280      	movs	r2, #128	; 0x80
 800583a:	0152      	lsls	r2, r2, #5
 800583c:	601a      	str	r2, [r3, #0]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig1) != HAL_OK)
 800583e:	187a      	adds	r2, r7, r1
 8005840:	4b15      	ldr	r3, [pc, #84]	; (8005898 <TIMER_init+0x1d8>)
 8005842:	0011      	movs	r1, r2
 8005844:	0018      	movs	r0, r3
 8005846:	f003 f891 	bl	800896c <HAL_TIM_ConfigClockSource>
 800584a:	1e03      	subs	r3, r0, #0
 800584c:	d001      	beq.n	8005852 <TIMER_init+0x192>
	  {
	    Error_Handler();
 800584e:	f000 f9d7 	bl	8005c00 <Error_Handler>
	  }
	  sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
	  sMasterConfig1.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
	  sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig1) != HAL_OK)
 8005864:	1d3a      	adds	r2, r7, #4
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <TIMER_init+0x1d8>)
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f003 fd6e 	bl	800934c <HAL_TIMEx_MasterConfigSynchronization>
 8005870:	1e03      	subs	r3, r0, #0
 8005872:	d001      	beq.n	8005878 <TIMER_init+0x1b8>
	  {
	    Error_Handler();
 8005874:	f000 f9c4 	bl	8005c00 <Error_Handler>
	  }

	  if (HAL_TIM_Base_Start(&htim1))
 8005878:	4b07      	ldr	r3, [pc, #28]	; (8005898 <TIMER_init+0x1d8>)
 800587a:	0018      	movs	r0, r3
 800587c:	f002 fc5c 	bl	8008138 <HAL_TIM_Base_Start>
 8005880:	1e03      	subs	r3, r0, #0
 8005882:	d001      	beq.n	8005888 <TIMER_init+0x1c8>
	  {
			Error_Handler();
 8005884:	f000 f9bc 	bl	8005c00 <Error_Handler>
      }

	return true;
 8005888:	2301      	movs	r3, #1
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b016      	add	sp, #88	; 0x58
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	2000002c 	.word	0x2000002c
 8005898:	20000078 	.word	0x20000078

0800589c <TIMER_attach_intr_1ms>:

void PWM_set_pulse(uint64_t value, uint64_t device_pin){
	__HAL_TIM_SET_COMPARE(&htim3,device_pin,value);
}

bool TIMER_attach_intr_1ms(void (*fn)(void)){
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	if(fn_table_len >= TIMER_FN_MAX_SIZE){
 80058a4:	4b09      	ldr	r3, [pc, #36]	; (80058cc <TIMER_attach_intr_1ms+0x30>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b09      	cmp	r3, #9
 80058aa:	d901      	bls.n	80058b0 <TIMER_attach_intr_1ms+0x14>
		return false;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e009      	b.n	80058c4 <TIMER_attach_intr_1ms+0x28>
	}
	fn_table[fn_table_len++] = fn;
 80058b0:	4b06      	ldr	r3, [pc, #24]	; (80058cc <TIMER_attach_intr_1ms+0x30>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	4a05      	ldr	r2, [pc, #20]	; (80058cc <TIMER_attach_intr_1ms+0x30>)
 80058b8:	6011      	str	r1, [r2, #0]
 80058ba:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <TIMER_attach_intr_1ms+0x34>)
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	5099      	str	r1, [r3, r2]
	return true;
 80058c2:	2301      	movs	r3, #1
}
 80058c4:	0018      	movs	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b002      	add	sp, #8
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000a90 	.word	0x20000a90
 80058d0:	20000a68 	.word	0x20000a68

080058d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d10f      	bne.n	8005908 <HAL_TIM_PeriodElapsedCallback+0x34>
		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e007      	b.n	80058fe <HAL_TIM_PeriodElapsedCallback+0x2a>
			fn_table[fn_idx]();
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	58d3      	ldr	r3, [r2, r3]
 80058f6:	4798      	blx	r3
		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d3f2      	bcc.n	80058ee <HAL_TIM_PeriodElapsedCallback+0x1a>
		}
	}
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	b004      	add	sp, #16
 800590e:	bd80      	pop	{r7, pc}
 8005910:	2000002c 	.word	0x2000002c
 8005914:	20000a68 	.word	0x20000a68
 8005918:	20000a90 	.word	0x20000a90

0800591c <UART_init>:
		},

};


bool UART_init(){
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
	bool success = true;
 8005922:	1dfb      	adds	r3, r7, #7
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
	// Init hal
	success = (HAL_UART_Init(uart_table[UART_1].huart_p) == HAL_OK) && success;
 8005928:	4b4a      	ldr	r3, [pc, #296]	; (8005a54 <UART_init+0x138>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	0018      	movs	r0, r3
 800592e:	f003 fd8d 	bl	800944c <HAL_UART_Init>
 8005932:	1e03      	subs	r3, r0, #0
 8005934:	d105      	bne.n	8005942 <UART_init+0x26>
 8005936:	1dfb      	adds	r3, r7, #7
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <UART_init+0x26>
 800593e:	2201      	movs	r2, #1
 8005940:	e000      	b.n	8005944 <UART_init+0x28>
 8005942:	2200      	movs	r2, #0
 8005944:	1dfb      	adds	r3, r7, #7
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	781a      	ldrb	r2, [r3, #0]
 800594a:	2101      	movs	r1, #1
 800594c:	400a      	ands	r2, r1
 800594e:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(uart_table[UART_2].huart_p) == HAL_OK) && success;
 8005950:	4b40      	ldr	r3, [pc, #256]	; (8005a54 <UART_init+0x138>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	0018      	movs	r0, r3
 8005956:	f003 fd79 	bl	800944c <HAL_UART_Init>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d105      	bne.n	800596a <UART_init+0x4e>
 800595e:	1dfb      	adds	r3, r7, #7
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <UART_init+0x4e>
 8005966:	2201      	movs	r2, #1
 8005968:	e000      	b.n	800596c <UART_init+0x50>
 800596a:	2200      	movs	r2, #0
 800596c:	1dfb      	adds	r3, r7, #7
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	2101      	movs	r1, #1
 8005974:	400a      	ands	r2, r1
 8005976:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(uart_table[UART_3].huart_p) == HAL_OK) && success;
 8005978:	4b36      	ldr	r3, [pc, #216]	; (8005a54 <UART_init+0x138>)
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	0018      	movs	r0, r3
 800597e:	f003 fd65 	bl	800944c <HAL_UART_Init>
 8005982:	1e03      	subs	r3, r0, #0
 8005984:	d105      	bne.n	8005992 <UART_init+0x76>
 8005986:	1dfb      	adds	r3, r7, #7
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <UART_init+0x76>
 800598e:	2201      	movs	r2, #1
 8005990:	e000      	b.n	8005994 <UART_init+0x78>
 8005992:	2200      	movs	r2, #0
 8005994:	1dfb      	adds	r3, r7, #7
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	781a      	ldrb	r2, [r3, #0]
 800599a:	2101      	movs	r1, #1
 800599c:	400a      	ands	r2, r1
 800599e:	701a      	strb	r2, [r3, #0]

	// Init buffer
	success = utils_buffer_init(uart_table[UART_1].buffer, sizeof(uint8_t)) && success;
 80059a0:	4b2c      	ldr	r3, [pc, #176]	; (8005a54 <UART_init+0x138>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2101      	movs	r1, #1
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7fd fed2 	bl	8003750 <utils_buffer_init>
 80059ac:	1e03      	subs	r3, r0, #0
 80059ae:	d005      	beq.n	80059bc <UART_init+0xa0>
 80059b0:	1dfb      	adds	r3, r7, #7
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <UART_init+0xa0>
 80059b8:	2201      	movs	r2, #1
 80059ba:	e000      	b.n	80059be <UART_init+0xa2>
 80059bc:	2200      	movs	r2, #0
 80059be:	1dfb      	adds	r3, r7, #7
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	781a      	ldrb	r2, [r3, #0]
 80059c4:	2101      	movs	r1, #1
 80059c6:	400a      	ands	r2, r1
 80059c8:	701a      	strb	r2, [r3, #0]
	success = utils_buffer_init(uart_table[UART_2].buffer, sizeof(uint16_t)) && success;
 80059ca:	4b22      	ldr	r3, [pc, #136]	; (8005a54 <UART_init+0x138>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2102      	movs	r1, #2
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7fd febd 	bl	8003750 <utils_buffer_init>
 80059d6:	1e03      	subs	r3, r0, #0
 80059d8:	d005      	beq.n	80059e6 <UART_init+0xca>
 80059da:	1dfb      	adds	r3, r7, #7
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <UART_init+0xca>
 80059e2:	2201      	movs	r2, #1
 80059e4:	e000      	b.n	80059e8 <UART_init+0xcc>
 80059e6:	2200      	movs	r2, #0
 80059e8:	1dfb      	adds	r3, r7, #7
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	2101      	movs	r1, #1
 80059f0:	400a      	ands	r2, r1
 80059f2:	701a      	strb	r2, [r3, #0]
	success = utils_buffer_init(uart_table[UART_3].buffer, sizeof(uint8_t)) && success;
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <UART_init+0x138>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	2101      	movs	r1, #1
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7fd fea8 	bl	8003750 <utils_buffer_init>
 8005a00:	1e03      	subs	r3, r0, #0
 8005a02:	d005      	beq.n	8005a10 <UART_init+0xf4>
 8005a04:	1dfb      	adds	r3, r7, #7
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <UART_init+0xf4>
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	e000      	b.n	8005a12 <UART_init+0xf6>
 8005a10:	2200      	movs	r2, #0
 8005a12:	1dfb      	adds	r3, r7, #7
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	2101      	movs	r1, #1
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	701a      	strb	r2, [r3, #0]


	HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <UART_init+0x138>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	490d      	ldr	r1, [pc, #52]	; (8005a58 <UART_init+0x13c>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	0018      	movs	r0, r3
 8005a28:	f003 fe02 	bl	8009630 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <UART_init+0x138>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	490a      	ldr	r1, [pc, #40]	; (8005a5c <UART_init+0x140>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	0018      	movs	r0, r3
 8005a36:	f003 fdfb 	bl	8009630 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <UART_init+0x138>)
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	4908      	ldr	r1, [pc, #32]	; (8005a60 <UART_init+0x144>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	0018      	movs	r0, r3
 8005a44:	f003 fdf4 	bl	8009630 <HAL_UART_Receive_IT>

	return success;
 8005a48:	1dfb      	adds	r3, r7, #7
 8005a4a:	781b      	ldrb	r3, [r3, #0]
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b002      	add	sp, #8
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000280 	.word	0x20000280
 8005a58:	20000288 	.word	0x20000288
 8005a5c:	20000294 	.word	0x20000294
 8005a60:	200002a0 	.word	0x200002a0

08005a64 <UART_send>:
bool UART_send(UART_id_t id, uint8_t *data , size_t len){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	210f      	movs	r1, #15
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	1c02      	adds	r2, r0, #0
 8005a74:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(uart_table[id].huart_p, data, len, 0xFFFF);
 8005a76:	187b      	adds	r3, r7, r1
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	4908      	ldr	r1, [pc, #32]	; (8005a9c <UART_send+0x38>)
 8005a7c:	0013      	movs	r3, r2
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	189b      	adds	r3, r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	5858      	ldr	r0, [r3, r1]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <UART_send+0x3c>)
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	f003 fd33 	bl	80094f8 <HAL_UART_Transmit>
}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b004      	add	sp, #16
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20000280 	.word	0x20000280
 8005aa0:	0000ffff 	.word	0x0000ffff

08005aa4 <UART_receive_available>:
bool UART_receive_available(UART_id_t id){
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	0002      	movs	r2, r0
 8005aac:	1dfb      	adds	r3, r7, #7
 8005aae:	701a      	strb	r2, [r3, #0]
	return utils_buffer_is_available(uart_table[id].buffer);
 8005ab0:	1dfb      	adds	r3, r7, #7
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	4907      	ldr	r1, [pc, #28]	; (8005ad4 <UART_receive_available+0x30>)
 8005ab6:	0013      	movs	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	18cb      	adds	r3, r1, r3
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7fd fec7 	bl	8003858 <utils_buffer_is_available>
 8005aca:	0003      	movs	r3, r0
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b002      	add	sp, #8
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000280 	.word	0x20000280

08005ad8 <UART_receive_data>:

uint8_t UART_receive_data(UART_id_t id){
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	0002      	movs	r2, r0
 8005ae0:	1dfb      	adds	r3, r7, #7
 8005ae2:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	utils_buffer_pop(uart_table[id].buffer, &data);
 8005ae4:	1dfb      	adds	r3, r7, #7
 8005ae6:	781a      	ldrb	r2, [r3, #0]
 8005ae8:	4909      	ldr	r1, [pc, #36]	; (8005b10 <UART_receive_data+0x38>)
 8005aea:	0013      	movs	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	189b      	adds	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	18cb      	adds	r3, r1, r3
 8005af4:	3304      	adds	r3, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	240f      	movs	r4, #15
 8005afa:	193a      	adds	r2, r7, r4
 8005afc:	0011      	movs	r1, r2
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7fd fe7e 	bl	8003800 <utils_buffer_pop>
	return data;
 8005b04:	193b      	adds	r3, r7, r4
 8005b06:	781b      	ldrb	r3, [r3, #0]
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b005      	add	sp, #20
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	20000280 	.word	0x20000280

08005b14 <HAL_UART_RxCpltCallback>:

void UART_clear_buffer(UART_id_t id){
	utils_buffer_drop_all(uart_table[id].buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_table[UART_1].huart_p->Instance){
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d10e      	bne.n	8005b48 <HAL_UART_RxCpltCallback+0x34>
		utils_buffer_push(uart_table[UART_1].buffer, &uart_table[UART_1].temp_data);
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <HAL_UART_RxCpltCallback+0x98>)
 8005b30:	0011      	movs	r1, r2
 8005b32:	0018      	movs	r0, r3
 8005b34:	f7fd fe30 	bl	8003798 <utils_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	491b      	ldr	r1, [pc, #108]	; (8005bac <HAL_UART_RxCpltCallback+0x98>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	0018      	movs	r0, r3
 8005b42:	f003 fd75 	bl	8009630 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
		utils_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
	}
}
 8005b46:	e02a      	b.n	8005b9e <HAL_UART_RxCpltCallback+0x8a>
	}else if(huart->Instance == uart_table[UART_2].huart_p->Instance){
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d10e      	bne.n	8005b74 <HAL_UART_RxCpltCallback+0x60>
		utils_buffer_push(uart_table[UART_2].buffer, &uart_table[UART_2].temp_data);
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005b5c:	0011      	movs	r1, r2
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7fd fe1a 	bl	8003798 <utils_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 8005b64:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4911      	ldr	r1, [pc, #68]	; (8005bb0 <HAL_UART_RxCpltCallback+0x9c>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f003 fd5f 	bl	8009630 <HAL_UART_Receive_IT>
}
 8005b72:	e014      	b.n	8005b9e <HAL_UART_RxCpltCallback+0x8a>
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d10d      	bne.n	8005b9e <HAL_UART_RxCpltCallback+0x8a>
		utils_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <HAL_UART_RxCpltCallback+0xa0>)
 8005b88:	0011      	movs	r1, r2
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f7fd fe04 	bl	8003798 <utils_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_UART_RxCpltCallback+0x94>)
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	4907      	ldr	r1, [pc, #28]	; (8005bb4 <HAL_UART_RxCpltCallback+0xa0>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f003 fd49 	bl	8009630 <HAL_UART_Receive_IT>
}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b002      	add	sp, #8
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	20000280 	.word	0x20000280
 8005bac:	20000288 	.word	0x20000288
 8005bb0:	20000294 	.word	0x20000294
 8005bb4:	200002a0 	.word	0x200002a0

08005bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005bbe:	f000 fb1d 	bl	80061fc <HAL_Init>

  /* USER CODE BEGIN Init */
  // Hal init
  CLOCK_init();
 8005bc2:	f7ff fcc7 	bl	8005554 <CLOCK_init>
  GPIO_init();
 8005bc6:	f7ff fd13 	bl	80055f0 <GPIO_init>
  TIMER_init();
 8005bca:	f7ff fd79 	bl	80056c0 <TIMER_init>
  UART_init();
 8005bce:	f7ff fea5 	bl	800591c <UART_init>
  I2C_init();
 8005bd2:	f7ff fd47 	bl	8005664 <I2C_init>
  // Device Init
  // Device Manager Init
  SENSOR_MANAGER_init();
 8005bd6:	f7ff f8df 	bl	8004d98 <SENSOR_MANAGER_init>
  DEVICE_MANAGER_init();
 8005bda:	f7fe fc5f 	bl	800449c <DEVICE_MANAGER_init>
  // App Init
  SCHEDULERPORT_init();
 8005bde:	f7fe f83b 	bl	8003c58 <SCHEDULERPORT_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  float value = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  int size;
  float temp=0,humi =0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]


  while (1)

  {
	  SENSOR_MANAGER_run();
 8005bee:	f7ff f90d 	bl	8004e0c <SENSOR_MANAGER_run>
	  DEVICE_MANAGER_run();
 8005bf2:	f7fe fce5 	bl	80045c0 <DEVICE_MANAGER_run>
	  SERIAL_get_command_run();
 8005bf6:	f7fd fec1 	bl	800397c <SERIAL_get_command_run>
	  SCH_Dispatch_Tasks();
 8005bfa:	f7fd fd65 	bl	80036c8 <SCH_Dispatch_Tasks>
	  SENSOR_MANAGER_run();
 8005bfe:	e7f6      	b.n	8005bee <main+0x36>

08005c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c04:	b672      	cpsid	i
}
 8005c06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c08:	e7fe      	b.n	8005c08 <Error_Handler+0x8>
	...

08005c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_MspInit+0x44>)
 8005c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c16:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <HAL_MspInit+0x44>)
 8005c18:	2101      	movs	r1, #1
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <HAL_MspInit+0x44>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2201      	movs	r2, #1
 8005c24:	4013      	ands	r3, r2
 8005c26:	607b      	str	r3, [r7, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c2a:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <HAL_MspInit+0x44>)
 8005c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_MspInit+0x44>)
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	0549      	lsls	r1, r1, #21
 8005c34:	430a      	orrs	r2, r1
 8005c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_MspInit+0x44>)
 8005c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	055b      	lsls	r3, r3, #21
 8005c40:	4013      	ands	r3, r2
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b002      	add	sp, #8
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	40021000 	.word	0x40021000

08005c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b091      	sub	sp, #68	; 0x44
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c5c:	232c      	movs	r3, #44	; 0x2c
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	0018      	movs	r0, r3
 8005c62:	2314      	movs	r3, #20
 8005c64:	001a      	movs	r2, r3
 8005c66:	2100      	movs	r1, #0
 8005c68:	f005 fa63 	bl	800b132 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c6c:	2410      	movs	r4, #16
 8005c6e:	193b      	adds	r3, r7, r4
 8005c70:	0018      	movs	r0, r3
 8005c72:	231c      	movs	r3, #28
 8005c74:	001a      	movs	r2, r3
 8005c76:	2100      	movs	r1, #0
 8005c78:	f005 fa5b 	bl	800b132 <memset>
  if(hi2c->Instance==I2C1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <HAL_I2C_MspInit+0xbc>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d13f      	bne.n	8005d06 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005c86:	193b      	adds	r3, r7, r4
 8005c88:	2220      	movs	r2, #32
 8005c8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005c8c:	193b      	adds	r3, r7, r4
 8005c8e:	2200      	movs	r2, #0
 8005c90:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c92:	193b      	adds	r3, r7, r4
 8005c94:	0018      	movs	r0, r3
 8005c96:	f002 f8c3 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 8005c9a:	1e03      	subs	r3, r0, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005c9e:	f7ff ffaf 	bl	8005c00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <HAL_I2C_MspInit+0xc0>)
 8005ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <HAL_I2C_MspInit+0xc0>)
 8005ca8:	2101      	movs	r1, #1
 8005caa:	430a      	orrs	r2, r1
 8005cac:	635a      	str	r2, [r3, #52]	; 0x34
 8005cae:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <HAL_I2C_MspInit+0xc0>)
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005cba:	212c      	movs	r1, #44	; 0x2c
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	22c0      	movs	r2, #192	; 0xc0
 8005cc0:	00d2      	lsls	r2, r2, #3
 8005cc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	2212      	movs	r2, #18
 8005cc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	2200      	movs	r2, #0
 8005cce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005cd6:	187b      	adds	r3, r7, r1
 8005cd8:	2206      	movs	r2, #6
 8005cda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cdc:	187a      	adds	r2, r7, r1
 8005cde:	23a0      	movs	r3, #160	; 0xa0
 8005ce0:	05db      	lsls	r3, r3, #23
 8005ce2:	0011      	movs	r1, r2
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 fcdd 	bl	80066a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005cea:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <HAL_I2C_MspInit+0xc0>)
 8005cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_I2C_MspInit+0xc0>)
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	0389      	lsls	r1, r1, #14
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005cf8:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <HAL_I2C_MspInit+0xc0>)
 8005cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	039b      	lsls	r3, r3, #14
 8005d00:	4013      	ands	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b011      	add	sp, #68	; 0x44
 8005d0c:	bd90      	pop	{r4, r7, pc}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	40005400 	.word	0x40005400
 8005d14:	40021000 	.word	0x40021000

08005d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <HAL_TIM_Base_MspInit+0x6c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d2a:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <HAL_TIM_Base_MspInit+0x70>)
 8005d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d2e:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <HAL_TIM_Base_MspInit+0x70>)
 8005d30:	2180      	movs	r1, #128	; 0x80
 8005d32:	0109      	lsls	r1, r1, #4
 8005d34:	430a      	orrs	r2, r1
 8005d36:	641a      	str	r2, [r3, #64]	; 0x40
 8005d38:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <HAL_TIM_Base_MspInit+0x70>)
 8005d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005d46:	e018      	b.n	8005d7a <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a0f      	ldr	r2, [pc, #60]	; (8005d8c <HAL_TIM_Base_MspInit+0x74>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d113      	bne.n	8005d7a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <HAL_TIM_Base_MspInit+0x70>)
 8005d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <HAL_TIM_Base_MspInit+0x70>)
 8005d58:	2102      	movs	r1, #2
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <HAL_TIM_Base_MspInit+0x70>)
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	2202      	movs	r2, #2
 8005d64:	4013      	ands	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	2010      	movs	r0, #16
 8005d70:	f000 fb9a 	bl	80064a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d74:	2010      	movs	r0, #16
 8005d76:	f000 fbac 	bl	80064d2 <HAL_NVIC_EnableIRQ>
}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b004      	add	sp, #16
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40000400 	.word	0x40000400

08005d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b08b      	sub	sp, #44	; 0x2c
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d98:	2414      	movs	r4, #20
 8005d9a:	193b      	adds	r3, r7, r4
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	2314      	movs	r3, #20
 8005da0:	001a      	movs	r2, r3
 8005da2:	2100      	movs	r1, #0
 8005da4:	f005 f9c5 	bl	800b132 <memset>
  if(htim->Instance==TIM3)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a25      	ldr	r2, [pc, #148]	; (8005e44 <HAL_TIM_MspPostInit+0xb4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d143      	bne.n	8005e3a <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db2:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <HAL_TIM_MspPostInit+0xb8>)
 8005db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db6:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <HAL_TIM_MspPostInit+0xb8>)
 8005db8:	2101      	movs	r1, #1
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8005dbe:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <HAL_TIM_MspPostInit+0xb8>)
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dca:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <HAL_TIM_MspPostInit+0xb8>)
 8005dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <HAL_TIM_MspPostInit+0xb8>)
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8005dd6:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <HAL_TIM_MspPostInit+0xb8>)
 8005dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dda:	2202      	movs	r2, #2
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005de2:	193b      	adds	r3, r7, r4
 8005de4:	22c0      	movs	r2, #192	; 0xc0
 8005de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de8:	193b      	adds	r3, r7, r4
 8005dea:	2202      	movs	r2, #2
 8005dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dee:	193b      	adds	r3, r7, r4
 8005df0:	2200      	movs	r2, #0
 8005df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005df4:	193b      	adds	r3, r7, r4
 8005df6:	2200      	movs	r2, #0
 8005df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005dfa:	193b      	adds	r3, r7, r4
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e00:	193a      	adds	r2, r7, r4
 8005e02:	23a0      	movs	r3, #160	; 0xa0
 8005e04:	05db      	lsls	r3, r3, #23
 8005e06:	0011      	movs	r1, r2
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 fc4b 	bl	80066a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e0e:	0021      	movs	r1, r4
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	2203      	movs	r2, #3
 8005e14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e16:	187b      	adds	r3, r7, r1
 8005e18:	2202      	movs	r2, #2
 8005e1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1c:	187b      	adds	r3, r7, r1
 8005e1e:	2200      	movs	r2, #0
 8005e20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e22:	187b      	adds	r3, r7, r1
 8005e24:	2200      	movs	r2, #0
 8005e26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005e28:	187b      	adds	r3, r7, r1
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	4a06      	ldr	r2, [pc, #24]	; (8005e4c <HAL_TIM_MspPostInit+0xbc>)
 8005e32:	0019      	movs	r1, r3
 8005e34:	0010      	movs	r0, r2
 8005e36:	f000 fc35 	bl	80066a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b00b      	add	sp, #44	; 0x2c
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	50000400 	.word	0x50000400

08005e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b093      	sub	sp, #76	; 0x4c
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	2334      	movs	r3, #52	; 0x34
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	2314      	movs	r3, #20
 8005e60:	001a      	movs	r2, r3
 8005e62:	2100      	movs	r1, #0
 8005e64:	f005 f965 	bl	800b132 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e68:	2418      	movs	r4, #24
 8005e6a:	193b      	adds	r3, r7, r4
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	231c      	movs	r3, #28
 8005e70:	001a      	movs	r2, r3
 8005e72:	2100      	movs	r1, #0
 8005e74:	f005 f95d 	bl	800b132 <memset>
  if(huart->Instance==USART2)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a46      	ldr	r2, [pc, #280]	; (8005f98 <HAL_UART_MspInit+0x148>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d147      	bne.n	8005f12 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005e82:	193b      	adds	r3, r7, r4
 8005e84:	2202      	movs	r2, #2
 8005e86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005e88:	193b      	adds	r3, r7, r4
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e8e:	193b      	adds	r3, r7, r4
 8005e90:	0018      	movs	r0, r3
 8005e92:	f001 ffc5 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 8005e96:	1e03      	subs	r3, r0, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005e9a:	f7ff feb1 	bl	8005c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e9e:	4b3f      	ldr	r3, [pc, #252]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea2:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005ea4:	2180      	movs	r1, #128	; 0x80
 8005ea6:	0289      	lsls	r1, r1, #10
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8005eac:	4b3b      	ldr	r3, [pc, #236]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	029b      	lsls	r3, r3, #10
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eba:	4b38      	ldr	r3, [pc, #224]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ebe:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8005ec6:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	2201      	movs	r2, #1
 8005ecc:	4013      	ands	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005ed2:	2134      	movs	r1, #52	; 0x34
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	220c      	movs	r2, #12
 8005ed8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	2202      	movs	r2, #2
 8005ede:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee6:	187b      	adds	r3, r7, r1
 8005ee8:	2200      	movs	r2, #0
 8005eea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005eec:	187b      	adds	r3, r7, r1
 8005eee:	2201      	movs	r2, #1
 8005ef0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ef2:	187a      	adds	r2, r7, r1
 8005ef4:	23a0      	movs	r3, #160	; 0xa0
 8005ef6:	05db      	lsls	r3, r3, #23
 8005ef8:	0011      	movs	r1, r2
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 fbd2 	bl	80066a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005f00:	2200      	movs	r2, #0
 8005f02:	2100      	movs	r1, #0
 8005f04:	201c      	movs	r0, #28
 8005f06:	f000 facf 	bl	80064a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f0a:	201c      	movs	r0, #28
 8005f0c:	f000 fae1 	bl	80064d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005f10:	e03d      	b.n	8005f8e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a22      	ldr	r2, [pc, #136]	; (8005fa0 <HAL_UART_MspInit+0x150>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d138      	bne.n	8005f8e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f20:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	02c9      	lsls	r1, r1, #11
 8005f26:	430a      	orrs	r2, r1
 8005f28:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	02db      	lsls	r3, r3, #11
 8005f32:	4013      	ands	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f38:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3c:	4b17      	ldr	r3, [pc, #92]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005f3e:	2108      	movs	r1, #8
 8005f40:	430a      	orrs	r2, r1
 8005f42:	635a      	str	r2, [r3, #52]	; 0x34
 8005f44:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <HAL_UART_MspInit+0x14c>)
 8005f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f48:	2208      	movs	r2, #8
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f50:	2134      	movs	r1, #52	; 0x34
 8005f52:	187b      	adds	r3, r7, r1
 8005f54:	22c0      	movs	r2, #192	; 0xc0
 8005f56:	0092      	lsls	r2, r2, #2
 8005f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5a:	187b      	adds	r3, r7, r1
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f60:	187b      	adds	r3, r7, r1
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	2200      	movs	r2, #0
 8005f6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8005f6c:	187b      	adds	r3, r7, r1
 8005f6e:	2200      	movs	r2, #0
 8005f70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	4a0b      	ldr	r2, [pc, #44]	; (8005fa4 <HAL_UART_MspInit+0x154>)
 8005f76:	0019      	movs	r1, r3
 8005f78:	0010      	movs	r0, r2
 8005f7a:	f000 fb93 	bl	80066a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	201d      	movs	r0, #29
 8005f84:	f000 fa90 	bl	80064a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8005f88:	201d      	movs	r0, #29
 8005f8a:	f000 faa2 	bl	80064d2 <HAL_NVIC_EnableIRQ>
}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b013      	add	sp, #76	; 0x4c
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	40004400 	.word	0x40004400
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40004800 	.word	0x40004800
 8005fa4:	50000c00 	.word	0x50000c00

08005fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005fac:	e7fe      	b.n	8005fac <NMI_Handler+0x4>

08005fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fb2:	e7fe      	b.n	8005fb2 <HardFault_Handler+0x4>

08005fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005fcc:	f000 f980 	bl	80062d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005fd0:	46c0      	nop			; (mov r8, r8)
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <TIM3_IRQHandler+0x14>)
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f002 fa92 	bl	8008508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	2000002c 	.word	0x2000002c

08005ff0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ff4:	4b03      	ldr	r3, [pc, #12]	; (8006004 <USART2_IRQHandler+0x14>)
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f003 fb72 	bl	80096e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	20000158 	.word	0x20000158

08006008 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <USART3_4_IRQHandler+0x14>)
 800600e:	0018      	movs	r0, r3
 8006010:	f003 fb66 	bl	80096e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8006014:	46c0      	nop			; (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	200001ec 	.word	0x200001ec

08006020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
  return 1;
 8006024:	2301      	movs	r3, #1
}
 8006026:	0018      	movs	r0, r3
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <_kill>:

int _kill(int pid, int sig)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006036:	f005 f849 	bl	800b0cc <__errno>
 800603a:	0003      	movs	r3, r0
 800603c:	2216      	movs	r2, #22
 800603e:	601a      	str	r2, [r3, #0]
  return -1;
 8006040:	2301      	movs	r3, #1
 8006042:	425b      	negs	r3, r3
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}

0800604c <_exit>:

void _exit (int status)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006054:	2301      	movs	r3, #1
 8006056:	425a      	negs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0011      	movs	r1, r2
 800605c:	0018      	movs	r0, r3
 800605e:	f7ff ffe5 	bl	800602c <_kill>
  while (1) {}    /* Make sure we hang here */
 8006062:	e7fe      	b.n	8006062 <_exit+0x16>

08006064 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e00a      	b.n	800608c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006076:	e000      	b.n	800607a <_read+0x16>
 8006078:	bf00      	nop
 800607a:	0001      	movs	r1, r0
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	60ba      	str	r2, [r7, #8]
 8006082:	b2ca      	uxtb	r2, r1
 8006084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	3301      	adds	r3, #1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	dbf0      	blt.n	8006076 <_read+0x12>
  }

  return len;
 8006094:	687b      	ldr	r3, [r7, #4]
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b006      	add	sp, #24
 800609c:	bd80      	pop	{r7, pc}

0800609e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e009      	b.n	80060c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	60ba      	str	r2, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	0018      	movs	r0, r3
 80060ba:	e000      	b.n	80060be <_write+0x20>
 80060bc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	3301      	adds	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	dbf1      	blt.n	80060b0 <_write+0x12>
  }
  return len;
 80060cc:	687b      	ldr	r3, [r7, #4]
}
 80060ce:	0018      	movs	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b006      	add	sp, #24
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <_close>:

int _close(int file)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80060de:	2301      	movs	r3, #1
 80060e0:	425b      	negs	r3, r3
}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b002      	add	sp, #8
 80060e8:	bd80      	pop	{r7, pc}

080060ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2280      	movs	r2, #128	; 0x80
 80060f8:	0192      	lsls	r2, r2, #6
 80060fa:	605a      	str	r2, [r3, #4]
  return 0;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	0018      	movs	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	b002      	add	sp, #8
 8006104:	bd80      	pop	{r7, pc}

08006106 <_isatty>:

int _isatty(int file)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800610e:	2301      	movs	r3, #1
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b002      	add	sp, #8
 8006116:	bd80      	pop	{r7, pc}

08006118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006124:	2300      	movs	r3, #0
}
 8006126:	0018      	movs	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	b004      	add	sp, #16
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <_sbrk+0x5c>)
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <_sbrk+0x60>)
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <_sbrk+0x64>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800614c:	4b11      	ldr	r3, [pc, #68]	; (8006194 <_sbrk+0x64>)
 800614e:	4a12      	ldr	r2, [pc, #72]	; (8006198 <_sbrk+0x68>)
 8006150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006152:	4b10      	ldr	r3, [pc, #64]	; (8006194 <_sbrk+0x64>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	18d3      	adds	r3, r2, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d207      	bcs.n	8006170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006160:	f004 ffb4 	bl	800b0cc <__errno>
 8006164:	0003      	movs	r3, r0
 8006166:	220c      	movs	r2, #12
 8006168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800616a:	2301      	movs	r3, #1
 800616c:	425b      	negs	r3, r3
 800616e:	e009      	b.n	8006184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006170:	4b08      	ldr	r3, [pc, #32]	; (8006194 <_sbrk+0x64>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <_sbrk+0x64>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	18d2      	adds	r2, r2, r3
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <_sbrk+0x64>)
 8006180:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006182:	68fb      	ldr	r3, [r7, #12]
}
 8006184:	0018      	movs	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	b006      	add	sp, #24
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20009000 	.word	0x20009000
 8006190:	00000400 	.word	0x00000400
 8006194:	200022c4 	.word	0x200022c4
 8006198:	200022e0 	.word	0x200022e0

0800619c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80061a8:	480d      	ldr	r0, [pc, #52]	; (80061e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80061aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80061ac:	f7ff fff6 	bl	800619c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061b0:	480c      	ldr	r0, [pc, #48]	; (80061e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80061b2:	490d      	ldr	r1, [pc, #52]	; (80061e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80061b4:	4a0d      	ldr	r2, [pc, #52]	; (80061ec <LoopForever+0xe>)
  movs r3, #0
 80061b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061b8:	e002      	b.n	80061c0 <LoopCopyDataInit>

080061ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061be:	3304      	adds	r3, #4

080061c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061c4:	d3f9      	bcc.n	80061ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061c6:	4a0a      	ldr	r2, [pc, #40]	; (80061f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80061c8:	4c0a      	ldr	r4, [pc, #40]	; (80061f4 <LoopForever+0x16>)
  movs r3, #0
 80061ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061cc:	e001      	b.n	80061d2 <LoopFillZerobss>

080061ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061d0:	3204      	adds	r2, #4

080061d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061d4:	d3fb      	bcc.n	80061ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80061d6:	f004 ff7f 	bl	800b0d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80061da:	f7ff fced 	bl	8005bb8 <main>

080061de <LoopForever>:

LoopForever:
  b LoopForever
 80061de:	e7fe      	b.n	80061de <LoopForever>
  ldr   r0, =_estack
 80061e0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80061e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061e8:	20000484 	.word	0x20000484
  ldr r2, =_sidata
 80061ec:	080104b4 	.word	0x080104b4
  ldr r2, =_sbss
 80061f0:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 80061f4:	200022dc 	.word	0x200022dc

080061f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80061f8:	e7fe      	b.n	80061f8 <ADC1_IRQHandler>
	...

080061fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006202:	1dfb      	adds	r3, r7, #7
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <HAL_Init+0x3c>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <HAL_Init+0x3c>)
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	0049      	lsls	r1, r1, #1
 8006212:	430a      	orrs	r2, r1
 8006214:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006216:	2003      	movs	r0, #3
 8006218:	f000 f810 	bl	800623c <HAL_InitTick>
 800621c:	1e03      	subs	r3, r0, #0
 800621e:	d003      	beq.n	8006228 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006220:	1dfb      	adds	r3, r7, #7
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e001      	b.n	800622c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006228:	f7ff fcf0 	bl	8005c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800622c:	1dfb      	adds	r3, r7, #7
 800622e:	781b      	ldrb	r3, [r3, #0]
}
 8006230:	0018      	movs	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40022000 	.word	0x40022000

0800623c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006244:	230f      	movs	r3, #15
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800624c:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <HAL_InitTick+0x88>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02b      	beq.n	80062ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006254:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <HAL_InitTick+0x8c>)
 8006256:	681c      	ldr	r4, [r3, #0]
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <HAL_InitTick+0x88>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	0019      	movs	r1, r3
 800625e:	23fa      	movs	r3, #250	; 0xfa
 8006260:	0098      	lsls	r0, r3, #2
 8006262:	f7f9 ff69 	bl	8000138 <__udivsi3>
 8006266:	0003      	movs	r3, r0
 8006268:	0019      	movs	r1, r3
 800626a:	0020      	movs	r0, r4
 800626c:	f7f9 ff64 	bl	8000138 <__udivsi3>
 8006270:	0003      	movs	r3, r0
 8006272:	0018      	movs	r0, r3
 8006274:	f000 f93d 	bl	80064f2 <HAL_SYSTICK_Config>
 8006278:	1e03      	subs	r3, r0, #0
 800627a:	d112      	bne.n	80062a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b03      	cmp	r3, #3
 8006280:	d80a      	bhi.n	8006298 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	2301      	movs	r3, #1
 8006286:	425b      	negs	r3, r3
 8006288:	2200      	movs	r2, #0
 800628a:	0018      	movs	r0, r3
 800628c:	f000 f90c 	bl	80064a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006290:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <HAL_InitTick+0x90>)
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	e00d      	b.n	80062b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006298:	230f      	movs	r3, #15
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	2201      	movs	r2, #1
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e008      	b.n	80062b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80062a2:	230f      	movs	r3, #15
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e003      	b.n	80062b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80062ac:	230f      	movs	r3, #15
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	2201      	movs	r2, #1
 80062b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80062b4:	230f      	movs	r3, #15
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	781b      	ldrb	r3, [r3, #0]
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b005      	add	sp, #20
 80062c0:	bd90      	pop	{r4, r7, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	200002ac 	.word	0x200002ac
 80062c8:	200002a4 	.word	0x200002a4
 80062cc:	200002a8 	.word	0x200002a8

080062d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_IncTick+0x1c>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	001a      	movs	r2, r3
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <HAL_IncTick+0x20>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	18d2      	adds	r2, r2, r3
 80062e0:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <HAL_IncTick+0x20>)
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	46c0      	nop			; (mov r8, r8)
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	200002ac 	.word	0x200002ac
 80062f0:	200022c8 	.word	0x200022c8

080062f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  return uwTick;
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <HAL_GetTick+0x10>)
 80062fa:	681b      	ldr	r3, [r3, #0]
}
 80062fc:	0018      	movs	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	200022c8 	.word	0x200022c8

08006308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006310:	f7ff fff0 	bl	80062f4 <HAL_GetTick>
 8006314:	0003      	movs	r3, r0
 8006316:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	d005      	beq.n	800632e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006322:	4b0a      	ldr	r3, [pc, #40]	; (800634c <HAL_Delay+0x44>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	001a      	movs	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	189b      	adds	r3, r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	f7ff ffe0 	bl	80062f4 <HAL_GetTick>
 8006334:	0002      	movs	r2, r0
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	429a      	cmp	r2, r3
 800633e:	d8f7      	bhi.n	8006330 <HAL_Delay+0x28>
  {
  }
}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	46bd      	mov	sp, r7
 8006346:	b004      	add	sp, #16
 8006348:	bd80      	pop	{r7, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	200002ac 	.word	0x200002ac

08006350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	0002      	movs	r2, r0
 8006358:	1dfb      	adds	r3, r7, #7
 800635a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800635c:	1dfb      	adds	r3, r7, #7
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b7f      	cmp	r3, #127	; 0x7f
 8006362:	d809      	bhi.n	8006378 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006364:	1dfb      	adds	r3, r7, #7
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	001a      	movs	r2, r3
 800636a:	231f      	movs	r3, #31
 800636c:	401a      	ands	r2, r3
 800636e:	4b04      	ldr	r3, [pc, #16]	; (8006380 <__NVIC_EnableIRQ+0x30>)
 8006370:	2101      	movs	r1, #1
 8006372:	4091      	lsls	r1, r2
 8006374:	000a      	movs	r2, r1
 8006376:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b002      	add	sp, #8
 800637e:	bd80      	pop	{r7, pc}
 8006380:	e000e100 	.word	0xe000e100

08006384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006384:	b590      	push	{r4, r7, lr}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	0002      	movs	r2, r0
 800638c:	6039      	str	r1, [r7, #0]
 800638e:	1dfb      	adds	r3, r7, #7
 8006390:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006392:	1dfb      	adds	r3, r7, #7
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b7f      	cmp	r3, #127	; 0x7f
 8006398:	d828      	bhi.n	80063ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800639a:	4a2f      	ldr	r2, [pc, #188]	; (8006458 <__NVIC_SetPriority+0xd4>)
 800639c:	1dfb      	adds	r3, r7, #7
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	b25b      	sxtb	r3, r3
 80063a2:	089b      	lsrs	r3, r3, #2
 80063a4:	33c0      	adds	r3, #192	; 0xc0
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	589b      	ldr	r3, [r3, r2]
 80063aa:	1dfa      	adds	r2, r7, #7
 80063ac:	7812      	ldrb	r2, [r2, #0]
 80063ae:	0011      	movs	r1, r2
 80063b0:	2203      	movs	r2, #3
 80063b2:	400a      	ands	r2, r1
 80063b4:	00d2      	lsls	r2, r2, #3
 80063b6:	21ff      	movs	r1, #255	; 0xff
 80063b8:	4091      	lsls	r1, r2
 80063ba:	000a      	movs	r2, r1
 80063bc:	43d2      	mvns	r2, r2
 80063be:	401a      	ands	r2, r3
 80063c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	019b      	lsls	r3, r3, #6
 80063c6:	22ff      	movs	r2, #255	; 0xff
 80063c8:	401a      	ands	r2, r3
 80063ca:	1dfb      	adds	r3, r7, #7
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	0018      	movs	r0, r3
 80063d0:	2303      	movs	r3, #3
 80063d2:	4003      	ands	r3, r0
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80063d8:	481f      	ldr	r0, [pc, #124]	; (8006458 <__NVIC_SetPriority+0xd4>)
 80063da:	1dfb      	adds	r3, r7, #7
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	089b      	lsrs	r3, r3, #2
 80063e2:	430a      	orrs	r2, r1
 80063e4:	33c0      	adds	r3, #192	; 0xc0
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80063ea:	e031      	b.n	8006450 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80063ec:	4a1b      	ldr	r2, [pc, #108]	; (800645c <__NVIC_SetPriority+0xd8>)
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	0019      	movs	r1, r3
 80063f4:	230f      	movs	r3, #15
 80063f6:	400b      	ands	r3, r1
 80063f8:	3b08      	subs	r3, #8
 80063fa:	089b      	lsrs	r3, r3, #2
 80063fc:	3306      	adds	r3, #6
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	18d3      	adds	r3, r2, r3
 8006402:	3304      	adds	r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	1dfa      	adds	r2, r7, #7
 8006408:	7812      	ldrb	r2, [r2, #0]
 800640a:	0011      	movs	r1, r2
 800640c:	2203      	movs	r2, #3
 800640e:	400a      	ands	r2, r1
 8006410:	00d2      	lsls	r2, r2, #3
 8006412:	21ff      	movs	r1, #255	; 0xff
 8006414:	4091      	lsls	r1, r2
 8006416:	000a      	movs	r2, r1
 8006418:	43d2      	mvns	r2, r2
 800641a:	401a      	ands	r2, r3
 800641c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	019b      	lsls	r3, r3, #6
 8006422:	22ff      	movs	r2, #255	; 0xff
 8006424:	401a      	ands	r2, r3
 8006426:	1dfb      	adds	r3, r7, #7
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	0018      	movs	r0, r3
 800642c:	2303      	movs	r3, #3
 800642e:	4003      	ands	r3, r0
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006434:	4809      	ldr	r0, [pc, #36]	; (800645c <__NVIC_SetPriority+0xd8>)
 8006436:	1dfb      	adds	r3, r7, #7
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	001c      	movs	r4, r3
 800643c:	230f      	movs	r3, #15
 800643e:	4023      	ands	r3, r4
 8006440:	3b08      	subs	r3, #8
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	430a      	orrs	r2, r1
 8006446:	3306      	adds	r3, #6
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	18c3      	adds	r3, r0, r3
 800644c:	3304      	adds	r3, #4
 800644e:	601a      	str	r2, [r3, #0]
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	b003      	add	sp, #12
 8006456:	bd90      	pop	{r4, r7, pc}
 8006458:	e000e100 	.word	0xe000e100
 800645c:	e000ed00 	.word	0xe000ed00

08006460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	045b      	lsls	r3, r3, #17
 8006470:	429a      	cmp	r2, r3
 8006472:	d301      	bcc.n	8006478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006474:	2301      	movs	r3, #1
 8006476:	e010      	b.n	800649a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <SysTick_Config+0x44>)
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	3a01      	subs	r2, #1
 800647e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006480:	2301      	movs	r3, #1
 8006482:	425b      	negs	r3, r3
 8006484:	2103      	movs	r1, #3
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff ff7c 	bl	8006384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <SysTick_Config+0x44>)
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <SysTick_Config+0x44>)
 8006494:	2207      	movs	r2, #7
 8006496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006498:	2300      	movs	r3, #0
}
 800649a:	0018      	movs	r0, r3
 800649c:	46bd      	mov	sp, r7
 800649e:	b002      	add	sp, #8
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	e000e010 	.word	0xe000e010

080064a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	210f      	movs	r1, #15
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	1c02      	adds	r2, r0, #0
 80064b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	187b      	adds	r3, r7, r1
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b25b      	sxtb	r3, r3
 80064c2:	0011      	movs	r1, r2
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7ff ff5d 	bl	8006384 <__NVIC_SetPriority>
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b004      	add	sp, #16
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	0002      	movs	r2, r0
 80064da:	1dfb      	adds	r3, r7, #7
 80064dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064de:	1dfb      	adds	r3, r7, #7
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	0018      	movs	r0, r3
 80064e6:	f7ff ff33 	bl	8006350 <__NVIC_EnableIRQ>
}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b002      	add	sp, #8
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7ff ffaf 	bl	8006460 <SysTick_Config>
 8006502:	0003      	movs	r3, r0
}
 8006504:	0018      	movs	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	b002      	add	sp, #8
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e050      	b.n	80065c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2225      	movs	r2, #37	; 0x25
 8006522:	5c9b      	ldrb	r3, [r3, r2]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d008      	beq.n	800653c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2204      	movs	r2, #4
 800652e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2224      	movs	r2, #36	; 0x24
 8006534:	2100      	movs	r1, #0
 8006536:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e041      	b.n	80065c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	210e      	movs	r1, #14
 8006548:	438a      	bics	r2, r1
 800654a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	491c      	ldr	r1, [pc, #112]	; (80065c8 <HAL_DMA_Abort+0xbc>)
 8006558:	400a      	ands	r2, r1
 800655a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2101      	movs	r1, #1
 8006568:	438a      	bics	r2, r1
 800656a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800656c:	4b17      	ldr	r3, [pc, #92]	; (80065cc <HAL_DMA_Abort+0xc0>)
 800656e:	6859      	ldr	r1, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	221c      	movs	r2, #28
 8006576:	4013      	ands	r3, r2
 8006578:	2201      	movs	r2, #1
 800657a:	409a      	lsls	r2, r3
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <HAL_DMA_Abort+0xc0>)
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800658a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00c      	beq.n	80065ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	490a      	ldr	r1, [pc, #40]	; (80065c8 <HAL_DMA_Abort+0xbc>)
 80065a0:	400a      	ands	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80065ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2225      	movs	r2, #37	; 0x25
 80065b2:	2101      	movs	r1, #1
 80065b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2224      	movs	r2, #36	; 0x24
 80065ba:	2100      	movs	r1, #0
 80065bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	0018      	movs	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b002      	add	sp, #8
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	fffffeff 	.word	0xfffffeff
 80065cc:	40020000 	.word	0x40020000

080065d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d8:	210f      	movs	r1, #15
 80065da:	187b      	adds	r3, r7, r1
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2225      	movs	r2, #37	; 0x25
 80065e4:	5c9b      	ldrb	r3, [r3, r2]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d006      	beq.n	80065fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2204      	movs	r2, #4
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80065f2:	187b      	adds	r3, r7, r1
 80065f4:	2201      	movs	r2, #1
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e049      	b.n	800668e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	210e      	movs	r1, #14
 8006606:	438a      	bics	r2, r1
 8006608:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2101      	movs	r1, #1
 8006616:	438a      	bics	r2, r1
 8006618:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	491d      	ldr	r1, [pc, #116]	; (800669c <HAL_DMA_Abort_IT+0xcc>)
 8006626:	400a      	ands	r2, r1
 8006628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800662a:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <HAL_DMA_Abort_IT+0xd0>)
 800662c:	6859      	ldr	r1, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	221c      	movs	r2, #28
 8006634:	4013      	ands	r3, r2
 8006636:	2201      	movs	r2, #1
 8006638:	409a      	lsls	r2, r3
 800663a:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <HAL_DMA_Abort_IT+0xd0>)
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006648:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00c      	beq.n	800666c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	490f      	ldr	r1, [pc, #60]	; (800669c <HAL_DMA_Abort_IT+0xcc>)
 800665e:	400a      	ands	r2, r1
 8006660:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800666a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2225      	movs	r2, #37	; 0x25
 8006670:	2101      	movs	r1, #1
 8006672:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	; 0x24
 8006678:	2100      	movs	r1, #0
 800667a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	0010      	movs	r0, r2
 800668c:	4798      	blx	r3
    }
  }
  return status;
 800668e:	230f      	movs	r3, #15
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	781b      	ldrb	r3, [r3, #0]
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b004      	add	sp, #16
 800669a:	bd80      	pop	{r7, pc}
 800669c:	fffffeff 	.word	0xfffffeff
 80066a0:	40020000 	.word	0x40020000

080066a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066b2:	e147      	b.n	8006944 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2101      	movs	r1, #1
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4091      	lsls	r1, r2
 80066be:	000a      	movs	r2, r1
 80066c0:	4013      	ands	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d100      	bne.n	80066cc <HAL_GPIO_Init+0x28>
 80066ca:	e138      	b.n	800693e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2203      	movs	r2, #3
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d005      	beq.n	80066e4 <HAL_GPIO_Init+0x40>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2203      	movs	r2, #3
 80066de:	4013      	ands	r3, r2
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d130      	bne.n	8006746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	2203      	movs	r2, #3
 80066f0:	409a      	lsls	r2, r3
 80066f2:	0013      	movs	r3, r2
 80066f4:	43da      	mvns	r2, r3
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4013      	ands	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	409a      	lsls	r2, r3
 8006706:	0013      	movs	r3, r2
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800671a:	2201      	movs	r2, #1
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	409a      	lsls	r2, r3
 8006720:	0013      	movs	r3, r2
 8006722:	43da      	mvns	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4013      	ands	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	2201      	movs	r2, #1
 8006732:	401a      	ands	r2, r3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	409a      	lsls	r2, r3
 8006738:	0013      	movs	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2203      	movs	r2, #3
 800674c:	4013      	ands	r3, r2
 800674e:	2b03      	cmp	r3, #3
 8006750:	d017      	beq.n	8006782 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	2203      	movs	r2, #3
 800675e:	409a      	lsls	r2, r3
 8006760:	0013      	movs	r3, r2
 8006762:	43da      	mvns	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4013      	ands	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	409a      	lsls	r2, r3
 8006774:	0013      	movs	r3, r2
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2203      	movs	r2, #3
 8006788:	4013      	ands	r3, r2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d123      	bne.n	80067d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	08da      	lsrs	r2, r3, #3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3208      	adds	r2, #8
 8006796:	0092      	lsls	r2, r2, #2
 8006798:	58d3      	ldr	r3, [r2, r3]
 800679a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2207      	movs	r2, #7
 80067a0:	4013      	ands	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	220f      	movs	r2, #15
 80067a6:	409a      	lsls	r2, r3
 80067a8:	0013      	movs	r3, r2
 80067aa:	43da      	mvns	r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4013      	ands	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2107      	movs	r1, #7
 80067ba:	400b      	ands	r3, r1
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	409a      	lsls	r2, r3
 80067c0:	0013      	movs	r3, r2
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	08da      	lsrs	r2, r3, #3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3208      	adds	r2, #8
 80067d0:	0092      	lsls	r2, r2, #2
 80067d2:	6939      	ldr	r1, [r7, #16]
 80067d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	2203      	movs	r2, #3
 80067e2:	409a      	lsls	r2, r3
 80067e4:	0013      	movs	r3, r2
 80067e6:	43da      	mvns	r2, r3
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4013      	ands	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2203      	movs	r2, #3
 80067f4:	401a      	ands	r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	409a      	lsls	r2, r3
 80067fc:	0013      	movs	r3, r2
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	23c0      	movs	r3, #192	; 0xc0
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	4013      	ands	r3, r2
 8006814:	d100      	bne.n	8006818 <HAL_GPIO_Init+0x174>
 8006816:	e092      	b.n	800693e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006818:	4a50      	ldr	r2, [pc, #320]	; (800695c <HAL_GPIO_Init+0x2b8>)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	089b      	lsrs	r3, r3, #2
 800681e:	3318      	adds	r3, #24
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	589b      	ldr	r3, [r3, r2]
 8006824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2203      	movs	r2, #3
 800682a:	4013      	ands	r3, r2
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	220f      	movs	r2, #15
 8006830:	409a      	lsls	r2, r3
 8006832:	0013      	movs	r3, r2
 8006834:	43da      	mvns	r2, r3
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4013      	ands	r3, r2
 800683a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	23a0      	movs	r3, #160	; 0xa0
 8006840:	05db      	lsls	r3, r3, #23
 8006842:	429a      	cmp	r2, r3
 8006844:	d013      	beq.n	800686e <HAL_GPIO_Init+0x1ca>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a45      	ldr	r2, [pc, #276]	; (8006960 <HAL_GPIO_Init+0x2bc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00d      	beq.n	800686a <HAL_GPIO_Init+0x1c6>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a44      	ldr	r2, [pc, #272]	; (8006964 <HAL_GPIO_Init+0x2c0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <HAL_GPIO_Init+0x1c2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a43      	ldr	r2, [pc, #268]	; (8006968 <HAL_GPIO_Init+0x2c4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_GPIO_Init+0x1be>
 800685e:	2303      	movs	r3, #3
 8006860:	e006      	b.n	8006870 <HAL_GPIO_Init+0x1cc>
 8006862:	2305      	movs	r3, #5
 8006864:	e004      	b.n	8006870 <HAL_GPIO_Init+0x1cc>
 8006866:	2302      	movs	r3, #2
 8006868:	e002      	b.n	8006870 <HAL_GPIO_Init+0x1cc>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <HAL_GPIO_Init+0x1cc>
 800686e:	2300      	movs	r3, #0
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	2103      	movs	r1, #3
 8006874:	400a      	ands	r2, r1
 8006876:	00d2      	lsls	r2, r2, #3
 8006878:	4093      	lsls	r3, r2
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006880:	4936      	ldr	r1, [pc, #216]	; (800695c <HAL_GPIO_Init+0x2b8>)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	3318      	adds	r3, #24
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800688e:	4b33      	ldr	r3, [pc, #204]	; (800695c <HAL_GPIO_Init+0x2b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	43da      	mvns	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4013      	ands	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	035b      	lsls	r3, r3, #13
 80068a6:	4013      	ands	r3, r2
 80068a8:	d003      	beq.n	80068b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068b2:	4b2a      	ldr	r3, [pc, #168]	; (800695c <HAL_GPIO_Init+0x2b8>)
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80068b8:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_GPIO_Init+0x2b8>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	43da      	mvns	r2, r3
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4013      	ands	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	039b      	lsls	r3, r3, #14
 80068d0:	4013      	ands	r3, r2
 80068d2:	d003      	beq.n	80068dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068dc:	4b1f      	ldr	r3, [pc, #124]	; (800695c <HAL_GPIO_Init+0x2b8>)
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80068e2:	4a1e      	ldr	r2, [pc, #120]	; (800695c <HAL_GPIO_Init+0x2b8>)
 80068e4:	2384      	movs	r3, #132	; 0x84
 80068e6:	58d3      	ldr	r3, [r2, r3]
 80068e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	43da      	mvns	r2, r3
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	4013      	ands	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	029b      	lsls	r3, r3, #10
 80068fc:	4013      	ands	r3, r2
 80068fe:	d003      	beq.n	8006908 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006908:	4914      	ldr	r1, [pc, #80]	; (800695c <HAL_GPIO_Init+0x2b8>)
 800690a:	2284      	movs	r2, #132	; 0x84
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006910:	4a12      	ldr	r2, [pc, #72]	; (800695c <HAL_GPIO_Init+0x2b8>)
 8006912:	2380      	movs	r3, #128	; 0x80
 8006914:	58d3      	ldr	r3, [r2, r3]
 8006916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	43da      	mvns	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4013      	ands	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	2380      	movs	r3, #128	; 0x80
 8006928:	025b      	lsls	r3, r3, #9
 800692a:	4013      	ands	r3, r2
 800692c:	d003      	beq.n	8006936 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006936:	4909      	ldr	r1, [pc, #36]	; (800695c <HAL_GPIO_Init+0x2b8>)
 8006938:	2280      	movs	r2, #128	; 0x80
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	3301      	adds	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	40da      	lsrs	r2, r3
 800694c:	1e13      	subs	r3, r2, #0
 800694e:	d000      	beq.n	8006952 <HAL_GPIO_Init+0x2ae>
 8006950:	e6b0      	b.n	80066b4 <HAL_GPIO_Init+0x10>
  }
}
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	46c0      	nop			; (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	b006      	add	sp, #24
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40021800 	.word	0x40021800
 8006960:	50000400 	.word	0x50000400
 8006964:	50000800 	.word	0x50000800
 8006968:	50000c00 	.word	0x50000c00

0800696c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	0008      	movs	r0, r1
 8006976:	0011      	movs	r1, r2
 8006978:	1cbb      	adds	r3, r7, #2
 800697a:	1c02      	adds	r2, r0, #0
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	1c7b      	adds	r3, r7, #1
 8006980:	1c0a      	adds	r2, r1, #0
 8006982:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006984:	1c7b      	adds	r3, r7, #1
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800698c:	1cbb      	adds	r3, r7, #2
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006994:	e003      	b.n	800699e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006996:	1cbb      	adds	r3, r7, #2
 8006998:	881a      	ldrh	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b002      	add	sp, #8
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e082      	b.n	8006ac0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2241      	movs	r2, #65	; 0x41
 80069be:	5c9b      	ldrb	r3, [r3, r2]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d107      	bne.n	80069d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2240      	movs	r2, #64	; 0x40
 80069ca:	2100      	movs	r1, #0
 80069cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0018      	movs	r0, r3
 80069d2:	f7ff f93f 	bl	8005c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2241      	movs	r2, #65	; 0x41
 80069da:	2124      	movs	r1, #36	; 0x24
 80069dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2101      	movs	r1, #1
 80069ea:	438a      	bics	r2, r1
 80069ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4934      	ldr	r1, [pc, #208]	; (8006ac8 <HAL_I2C_Init+0x120>)
 80069f8:	400a      	ands	r2, r1
 80069fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4931      	ldr	r1, [pc, #196]	; (8006acc <HAL_I2C_Init+0x124>)
 8006a08:	400a      	ands	r2, r1
 8006a0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d108      	bne.n	8006a26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2180      	movs	r1, #128	; 0x80
 8006a1e:	0209      	lsls	r1, r1, #8
 8006a20:	430a      	orrs	r2, r1
 8006a22:	609a      	str	r2, [r3, #8]
 8006a24:	e007      	b.n	8006a36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2184      	movs	r1, #132	; 0x84
 8006a30:	0209      	lsls	r1, r1, #8
 8006a32:	430a      	orrs	r2, r1
 8006a34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d104      	bne.n	8006a48 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2280      	movs	r2, #128	; 0x80
 8006a44:	0112      	lsls	r2, r2, #4
 8006a46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	491f      	ldr	r1, [pc, #124]	; (8006ad0 <HAL_I2C_Init+0x128>)
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	491a      	ldr	r1, [pc, #104]	; (8006acc <HAL_I2C_Init+0x124>)
 8006a64:	400a      	ands	r2, r1
 8006a66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69d9      	ldr	r1, [r3, #28]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2241      	movs	r2, #65	; 0x41
 8006aac:	2120      	movs	r1, #32
 8006aae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2242      	movs	r2, #66	; 0x42
 8006aba:	2100      	movs	r1, #0
 8006abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b002      	add	sp, #8
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	f0ffffff 	.word	0xf0ffffff
 8006acc:	ffff7fff 	.word	0xffff7fff
 8006ad0:	02008000 	.word	0x02008000

08006ad4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ad4:	b590      	push	{r4, r7, lr}
 8006ad6:	b089      	sub	sp, #36	; 0x24
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	0008      	movs	r0, r1
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	1c02      	adds	r2, r0, #0
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	2308      	movs	r3, #8
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	1c0a      	adds	r2, r1, #0
 8006af0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2241      	movs	r2, #65	; 0x41
 8006af6:	5c9b      	ldrb	r3, [r3, r2]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d000      	beq.n	8006b00 <HAL_I2C_Master_Transmit+0x2c>
 8006afe:	e0e7      	b.n	8006cd0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2240      	movs	r2, #64	; 0x40
 8006b04:	5c9b      	ldrb	r3, [r3, r2]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2C_Master_Transmit+0x3a>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e0e1      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1fe>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2240      	movs	r2, #64	; 0x40
 8006b12:	2101      	movs	r1, #1
 8006b14:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b16:	f7ff fbed 	bl	80062f4 <HAL_GetTick>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	0219      	lsls	r1, r3, #8
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2319      	movs	r3, #25
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f000 fa04 	bl	8006f38 <I2C_WaitOnFlagUntilTimeout>
 8006b30:	1e03      	subs	r3, r0, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0cc      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2241      	movs	r2, #65	; 0x41
 8006b3c:	2121      	movs	r1, #33	; 0x21
 8006b3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2242      	movs	r2, #66	; 0x42
 8006b44:	2110      	movs	r1, #16
 8006b46:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2208      	movs	r2, #8
 8006b58:	18ba      	adds	r2, r7, r2
 8006b5a:	8812      	ldrh	r2, [r2, #0]
 8006b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2bff      	cmp	r3, #255	; 0xff
 8006b6c:	d911      	bls.n	8006b92 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	22ff      	movs	r2, #255	; 0xff
 8006b72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	2380      	movs	r3, #128	; 0x80
 8006b7c:	045c      	lsls	r4, r3, #17
 8006b7e:	230a      	movs	r3, #10
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	8819      	ldrh	r1, [r3, #0]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	4b55      	ldr	r3, [pc, #340]	; (8006cdc <HAL_I2C_Master_Transmit+0x208>)
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	0023      	movs	r3, r4
 8006b8c:	f000 fc08 	bl	80073a0 <I2C_TransferConfig>
 8006b90:	e075      	b.n	8006c7e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	2380      	movs	r3, #128	; 0x80
 8006ba4:	049c      	lsls	r4, r3, #18
 8006ba6:	230a      	movs	r3, #10
 8006ba8:	18fb      	adds	r3, r7, r3
 8006baa:	8819      	ldrh	r1, [r3, #0]
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	4b4b      	ldr	r3, [pc, #300]	; (8006cdc <HAL_I2C_Master_Transmit+0x208>)
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	0023      	movs	r3, r4
 8006bb4:	f000 fbf4 	bl	80073a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006bb8:	e061      	b.n	8006c7e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 f9f8 	bl	8006fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bc6:	1e03      	subs	r3, r0, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e081      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	781a      	ldrb	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d03a      	beq.n	8006c7e <HAL_I2C_Master_Transmit+0x1aa>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d136      	bne.n	8006c7e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	0013      	movs	r3, r2
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2180      	movs	r1, #128	; 0x80
 8006c1e:	f000 f98b 	bl	8006f38 <I2C_WaitOnFlagUntilTimeout>
 8006c22:	1e03      	subs	r3, r0, #0
 8006c24:	d001      	beq.n	8006c2a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e053      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2bff      	cmp	r3, #255	; 0xff
 8006c32:	d911      	bls.n	8006c58 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	22ff      	movs	r2, #255	; 0xff
 8006c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	045c      	lsls	r4, r3, #17
 8006c44:	230a      	movs	r3, #10
 8006c46:	18fb      	adds	r3, r7, r3
 8006c48:	8819      	ldrh	r1, [r3, #0]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	0023      	movs	r3, r4
 8006c52:	f000 fba5 	bl	80073a0 <I2C_TransferConfig>
 8006c56:	e012      	b.n	8006c7e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	049c      	lsls	r4, r3, #18
 8006c6c:	230a      	movs	r3, #10
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	8819      	ldrh	r1, [r3, #0]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	2300      	movs	r3, #0
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	0023      	movs	r3, r4
 8006c7a:	f000 fb91 	bl	80073a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d198      	bne.n	8006bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 f9d0 	bl	8007034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c94:	1e03      	subs	r3, r0, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e01a      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	490c      	ldr	r1, [pc, #48]	; (8006ce0 <HAL_I2C_Master_Transmit+0x20c>)
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2241      	movs	r2, #65	; 0x41
 8006cb8:	2120      	movs	r1, #32
 8006cba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2242      	movs	r2, #66	; 0x42
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2240      	movs	r2, #64	; 0x40
 8006cc8:	2100      	movs	r1, #0
 8006cca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b007      	add	sp, #28
 8006cd8:	bd90      	pop	{r4, r7, pc}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	80002000 	.word	0x80002000
 8006ce0:	fe00e800 	.word	0xfe00e800

08006ce4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006ce4:	b590      	push	{r4, r7, lr}
 8006ce6:	b089      	sub	sp, #36	; 0x24
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	0008      	movs	r0, r1
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	0019      	movs	r1, r3
 8006cf2:	230a      	movs	r3, #10
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	1c02      	adds	r2, r0, #0
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	1c0a      	adds	r2, r1, #0
 8006d00:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2241      	movs	r2, #65	; 0x41
 8006d06:	5c9b      	ldrb	r3, [r3, r2]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d000      	beq.n	8006d10 <HAL_I2C_Master_Receive+0x2c>
 8006d0e:	e0e8      	b.n	8006ee2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2240      	movs	r2, #64	; 0x40
 8006d14:	5c9b      	ldrb	r3, [r3, r2]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_I2C_Master_Receive+0x3a>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e0e2      	b.n	8006ee4 <HAL_I2C_Master_Receive+0x200>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2240      	movs	r2, #64	; 0x40
 8006d22:	2101      	movs	r1, #1
 8006d24:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d26:	f7ff fae5 	bl	80062f4 <HAL_GetTick>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d2e:	2380      	movs	r3, #128	; 0x80
 8006d30:	0219      	lsls	r1, r3, #8
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2319      	movs	r3, #25
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f000 f8fc 	bl	8006f38 <I2C_WaitOnFlagUntilTimeout>
 8006d40:	1e03      	subs	r3, r0, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0cd      	b.n	8006ee4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2241      	movs	r2, #65	; 0x41
 8006d4c:	2122      	movs	r1, #34	; 0x22
 8006d4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2242      	movs	r2, #66	; 0x42
 8006d54:	2110      	movs	r1, #16
 8006d56:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2208      	movs	r2, #8
 8006d68:	18ba      	adds	r2, r7, r2
 8006d6a:	8812      	ldrh	r2, [r2, #0]
 8006d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2bff      	cmp	r3, #255	; 0xff
 8006d7c:	d911      	bls.n	8006da2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	22ff      	movs	r2, #255	; 0xff
 8006d82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	2380      	movs	r3, #128	; 0x80
 8006d8c:	045c      	lsls	r4, r3, #17
 8006d8e:	230a      	movs	r3, #10
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	8819      	ldrh	r1, [r3, #0]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	4b55      	ldr	r3, [pc, #340]	; (8006eec <HAL_I2C_Master_Receive+0x208>)
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	0023      	movs	r3, r4
 8006d9c:	f000 fb00 	bl	80073a0 <I2C_TransferConfig>
 8006da0:	e076      	b.n	8006e90 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	2380      	movs	r3, #128	; 0x80
 8006db4:	049c      	lsls	r4, r3, #18
 8006db6:	230a      	movs	r3, #10
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	8819      	ldrh	r1, [r3, #0]
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	4b4b      	ldr	r3, [pc, #300]	; (8006eec <HAL_I2C_Master_Receive+0x208>)
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	0023      	movs	r3, r4
 8006dc4:	f000 faec 	bl	80073a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006dc8:	e062      	b.n	8006e90 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 f96b 	bl	80070ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dd6:	1e03      	subs	r3, r0, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e082      	b.n	8006ee4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d03a      	beq.n	8006e90 <HAL_I2C_Master_Receive+0x1ac>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d136      	bne.n	8006e90 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	0013      	movs	r3, r2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2180      	movs	r1, #128	; 0x80
 8006e30:	f000 f882 	bl	8006f38 <I2C_WaitOnFlagUntilTimeout>
 8006e34:	1e03      	subs	r3, r0, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e053      	b.n	8006ee4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2bff      	cmp	r3, #255	; 0xff
 8006e44:	d911      	bls.n	8006e6a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	22ff      	movs	r2, #255	; 0xff
 8006e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	2380      	movs	r3, #128	; 0x80
 8006e54:	045c      	lsls	r4, r3, #17
 8006e56:	230a      	movs	r3, #10
 8006e58:	18fb      	adds	r3, r7, r3
 8006e5a:	8819      	ldrh	r1, [r3, #0]
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	0023      	movs	r3, r4
 8006e64:	f000 fa9c 	bl	80073a0 <I2C_TransferConfig>
 8006e68:	e012      	b.n	8006e90 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	2380      	movs	r3, #128	; 0x80
 8006e7c:	049c      	lsls	r4, r3, #18
 8006e7e:	230a      	movs	r3, #10
 8006e80:	18fb      	adds	r3, r7, r3
 8006e82:	8819      	ldrh	r1, [r3, #0]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	2300      	movs	r3, #0
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	0023      	movs	r3, r4
 8006e8c:	f000 fa88 	bl	80073a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d197      	bne.n	8006dca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f000 f8c7 	bl	8007034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ea6:	1e03      	subs	r3, r0, #0
 8006ea8:	d001      	beq.n	8006eae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e01a      	b.n	8006ee4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	490b      	ldr	r1, [pc, #44]	; (8006ef0 <HAL_I2C_Master_Receive+0x20c>)
 8006ec2:	400a      	ands	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2241      	movs	r2, #65	; 0x41
 8006eca:	2120      	movs	r1, #32
 8006ecc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2242      	movs	r2, #66	; 0x42
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2240      	movs	r2, #64	; 0x40
 8006eda:	2100      	movs	r1, #0
 8006edc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e000      	b.n	8006ee4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8006ee2:	2302      	movs	r3, #2
  }
}
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b007      	add	sp, #28
 8006eea:	bd90      	pop	{r4, r7, pc}
 8006eec:	80002400 	.word	0x80002400
 8006ef0:	fe00e800 	.word	0xfe00e800

08006ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2202      	movs	r2, #2
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d103      	bne.n	8006f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d007      	beq.n	8006f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	619a      	str	r2, [r3, #24]
  }
}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b002      	add	sp, #8
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	1dfb      	adds	r3, r7, #7
 8006f46:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f48:	e021      	b.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	d01e      	beq.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f50:	f7ff f9d0 	bl	80062f4 <HAL_GetTick>
 8006f54:	0002      	movs	r2, r0
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d302      	bcc.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d113      	bne.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2241      	movs	r2, #65	; 0x41
 8006f76:	2120      	movs	r1, #32
 8006f78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2242      	movs	r2, #66	; 0x42
 8006f7e:	2100      	movs	r1, #0
 8006f80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2240      	movs	r2, #64	; 0x40
 8006f86:	2100      	movs	r1, #0
 8006f88:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e00f      	b.n	8006fae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	425a      	negs	r2, r3
 8006f9e:	4153      	adcs	r3, r2
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	001a      	movs	r2, r3
 8006fa4:	1dfb      	adds	r3, r7, #7
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d0ce      	beq.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	0018      	movs	r0, r3
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	b004      	add	sp, #16
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fc2:	e02b      	b.n	800701c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f8e8 	bl	80071a0 <I2C_IsErrorOccurred>
 8006fd0:	1e03      	subs	r3, r0, #0
 8006fd2:	d001      	beq.n	8006fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e029      	b.n	800702c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	d01e      	beq.n	800701c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fde:	f7ff f989 	bl	80062f4 <HAL_GetTick>
 8006fe2:	0002      	movs	r2, r0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d113      	bne.n	800701c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2241      	movs	r2, #65	; 0x41
 8007004:	2120      	movs	r1, #32
 8007006:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2242      	movs	r2, #66	; 0x42
 800700c:	2100      	movs	r1, #0
 800700e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2240      	movs	r2, #64	; 0x40
 8007014:	2100      	movs	r1, #0
 8007016:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e007      	b.n	800702c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	2202      	movs	r2, #2
 8007024:	4013      	ands	r3, r2
 8007026:	2b02      	cmp	r3, #2
 8007028:	d1cc      	bne.n	8006fc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	0018      	movs	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	b004      	add	sp, #16
 8007032:	bd80      	pop	{r7, pc}

08007034 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007040:	e028      	b.n	8007094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	0018      	movs	r0, r3
 800704a:	f000 f8a9 	bl	80071a0 <I2C_IsErrorOccurred>
 800704e:	1e03      	subs	r3, r0, #0
 8007050:	d001      	beq.n	8007056 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e026      	b.n	80070a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	f7ff f94d 	bl	80062f4 <HAL_GetTick>
 800705a:	0002      	movs	r2, r0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d113      	bne.n	8007094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007070:	2220      	movs	r2, #32
 8007072:	431a      	orrs	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2241      	movs	r2, #65	; 0x41
 800707c:	2120      	movs	r1, #32
 800707e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2242      	movs	r2, #66	; 0x42
 8007084:	2100      	movs	r1, #0
 8007086:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2240      	movs	r2, #64	; 0x40
 800708c:	2100      	movs	r1, #0
 800708e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e007      	b.n	80070a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	2220      	movs	r2, #32
 800709c:	4013      	ands	r3, r2
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d1cf      	bne.n	8007042 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b004      	add	sp, #16
 80070aa:	bd80      	pop	{r7, pc}

080070ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070b8:	e064      	b.n	8007184 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 f86d 	bl	80071a0 <I2C_IsErrorOccurred>
 80070c6:	1e03      	subs	r3, r0, #0
 80070c8:	d001      	beq.n	80070ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e062      	b.n	8007194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	2220      	movs	r2, #32
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d138      	bne.n	800714e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	2204      	movs	r2, #4
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d105      	bne.n	80070f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e04e      	b.n	8007194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	2210      	movs	r2, #16
 80070fe:	4013      	ands	r3, r2
 8007100:	2b10      	cmp	r3, #16
 8007102:	d107      	bne.n	8007114 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2210      	movs	r2, #16
 800710a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2204      	movs	r2, #4
 8007110:	645a      	str	r2, [r3, #68]	; 0x44
 8007112:	e002      	b.n	800711a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2220      	movs	r2, #32
 8007120:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	491b      	ldr	r1, [pc, #108]	; (800719c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800712e:	400a      	ands	r2, r1
 8007130:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2241      	movs	r2, #65	; 0x41
 8007136:	2120      	movs	r1, #32
 8007138:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2242      	movs	r2, #66	; 0x42
 800713e:	2100      	movs	r1, #0
 8007140:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2240      	movs	r2, #64	; 0x40
 8007146:	2100      	movs	r1, #0
 8007148:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e022      	b.n	8007194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714e:	f7ff f8d1 	bl	80062f4 <HAL_GetTick>
 8007152:	0002      	movs	r2, r0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10f      	bne.n	8007184 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007168:	2220      	movs	r2, #32
 800716a:	431a      	orrs	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2241      	movs	r2, #65	; 0x41
 8007174:	2120      	movs	r1, #32
 8007176:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2240      	movs	r2, #64	; 0x40
 800717c:	2100      	movs	r1, #0
 800717e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e007      	b.n	8007194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2204      	movs	r2, #4
 800718c:	4013      	ands	r3, r2
 800718e:	2b04      	cmp	r3, #4
 8007190:	d193      	bne.n	80070ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	0018      	movs	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	b004      	add	sp, #16
 800719a:	bd80      	pop	{r7, pc}
 800719c:	fe00e800 	.word	0xfe00e800

080071a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b08b      	sub	sp, #44	; 0x2c
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ac:	2327      	movs	r3, #39	; 0x27
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2210      	movs	r2, #16
 80071c8:	4013      	ands	r3, r2
 80071ca:	d100      	bne.n	80071ce <I2C_IsErrorOccurred+0x2e>
 80071cc:	e082      	b.n	80072d4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2210      	movs	r2, #16
 80071d4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071d6:	e060      	b.n	800729a <I2C_IsErrorOccurred+0xfa>
 80071d8:	2427      	movs	r4, #39	; 0x27
 80071da:	193b      	adds	r3, r7, r4
 80071dc:	193a      	adds	r2, r7, r4
 80071de:	7812      	ldrb	r2, [r2, #0]
 80071e0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3301      	adds	r3, #1
 80071e6:	d058      	beq.n	800729a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071e8:	f7ff f884 	bl	80062f4 <HAL_GetTick>
 80071ec:	0002      	movs	r2, r0
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d306      	bcc.n	8007206 <I2C_IsErrorOccurred+0x66>
 80071f8:	193b      	adds	r3, r7, r4
 80071fa:	193a      	adds	r2, r7, r4
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d149      	bne.n	800729a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	4013      	ands	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007214:	2013      	movs	r0, #19
 8007216:	183b      	adds	r3, r7, r0
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	2142      	movs	r1, #66	; 0x42
 800721c:	5c52      	ldrb	r2, [r2, r1]
 800721e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	2380      	movs	r3, #128	; 0x80
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	401a      	ands	r2, r3
 800722c:	2380      	movs	r3, #128	; 0x80
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	429a      	cmp	r2, r3
 8007232:	d126      	bne.n	8007282 <I2C_IsErrorOccurred+0xe2>
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	2380      	movs	r3, #128	; 0x80
 8007238:	01db      	lsls	r3, r3, #7
 800723a:	429a      	cmp	r2, r3
 800723c:	d021      	beq.n	8007282 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800723e:	183b      	adds	r3, r7, r0
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b20      	cmp	r3, #32
 8007244:	d01d      	beq.n	8007282 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2180      	movs	r1, #128	; 0x80
 8007252:	01c9      	lsls	r1, r1, #7
 8007254:	430a      	orrs	r2, r1
 8007256:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007258:	f7ff f84c 	bl	80062f4 <HAL_GetTick>
 800725c:	0003      	movs	r3, r0
 800725e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007260:	e00f      	b.n	8007282 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007262:	f7ff f847 	bl	80062f4 <HAL_GetTick>
 8007266:	0002      	movs	r2, r0
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b19      	cmp	r3, #25
 800726e:	d908      	bls.n	8007282 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	2220      	movs	r2, #32
 8007274:	4313      	orrs	r3, r2
 8007276:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007278:	2327      	movs	r3, #39	; 0x27
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	2201      	movs	r2, #1
 800727e:	701a      	strb	r2, [r3, #0]

              break;
 8007280:	e00b      	b.n	800729a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2220      	movs	r2, #32
 800728a:	4013      	ands	r3, r2
 800728c:	2127      	movs	r1, #39	; 0x27
 800728e:	187a      	adds	r2, r7, r1
 8007290:	1879      	adds	r1, r7, r1
 8007292:	7809      	ldrb	r1, [r1, #0]
 8007294:	7011      	strb	r1, [r2, #0]
 8007296:	2b20      	cmp	r3, #32
 8007298:	d1e3      	bne.n	8007262 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2220      	movs	r2, #32
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d004      	beq.n	80072b2 <I2C_IsErrorOccurred+0x112>
 80072a8:	2327      	movs	r3, #39	; 0x27
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d092      	beq.n	80071d8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072b2:	2327      	movs	r3, #39	; 0x27
 80072b4:	18fb      	adds	r3, r7, r3
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2220      	movs	r2, #32
 80072c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	2204      	movs	r2, #4
 80072c8:	4313      	orrs	r3, r2
 80072ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80072cc:	2327      	movs	r3, #39	; 0x27
 80072ce:	18fb      	adds	r3, r7, r3
 80072d0:	2201      	movs	r2, #1
 80072d2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	2380      	movs	r3, #128	; 0x80
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	4013      	ands	r3, r2
 80072e4:	d00c      	beq.n	8007300 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2201      	movs	r2, #1
 80072ea:	4313      	orrs	r3, r2
 80072ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2280      	movs	r2, #128	; 0x80
 80072f4:	0052      	lsls	r2, r2, #1
 80072f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072f8:	2327      	movs	r3, #39	; 0x27
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	2201      	movs	r2, #1
 80072fe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	2380      	movs	r3, #128	; 0x80
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	4013      	ands	r3, r2
 8007308:	d00c      	beq.n	8007324 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	2208      	movs	r2, #8
 800730e:	4313      	orrs	r3, r2
 8007310:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2280      	movs	r2, #128	; 0x80
 8007318:	00d2      	lsls	r2, r2, #3
 800731a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800731c:	2327      	movs	r3, #39	; 0x27
 800731e:	18fb      	adds	r3, r7, r3
 8007320:	2201      	movs	r2, #1
 8007322:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4013      	ands	r3, r2
 800732c:	d00c      	beq.n	8007348 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	2202      	movs	r2, #2
 8007332:	4313      	orrs	r3, r2
 8007334:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2280      	movs	r2, #128	; 0x80
 800733c:	0092      	lsls	r2, r2, #2
 800733e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007340:	2327      	movs	r3, #39	; 0x27
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2201      	movs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007348:	2327      	movs	r3, #39	; 0x27
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01d      	beq.n	800738e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	0018      	movs	r0, r3
 8007356:	f7ff fdcd 	bl	8006ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	490d      	ldr	r1, [pc, #52]	; (800739c <I2C_IsErrorOccurred+0x1fc>)
 8007366:	400a      	ands	r2, r1
 8007368:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	431a      	orrs	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2241      	movs	r2, #65	; 0x41
 800737a:	2120      	movs	r1, #32
 800737c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2242      	movs	r2, #66	; 0x42
 8007382:	2100      	movs	r1, #0
 8007384:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2240      	movs	r2, #64	; 0x40
 800738a:	2100      	movs	r1, #0
 800738c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800738e:	2327      	movs	r3, #39	; 0x27
 8007390:	18fb      	adds	r3, r7, r3
 8007392:	781b      	ldrb	r3, [r3, #0]
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b00b      	add	sp, #44	; 0x2c
 800739a:	bd90      	pop	{r4, r7, pc}
 800739c:	fe00e800 	.word	0xfe00e800

080073a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	0008      	movs	r0, r1
 80073aa:	0011      	movs	r1, r2
 80073ac:	607b      	str	r3, [r7, #4]
 80073ae:	240a      	movs	r4, #10
 80073b0:	193b      	adds	r3, r7, r4
 80073b2:	1c02      	adds	r2, r0, #0
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	2009      	movs	r0, #9
 80073b8:	183b      	adds	r3, r7, r0
 80073ba:	1c0a      	adds	r2, r1, #0
 80073bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073be:	193b      	adds	r3, r7, r4
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	059b      	lsls	r3, r3, #22
 80073c4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073c6:	183b      	adds	r3, r7, r0
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	0419      	lsls	r1, r3, #16
 80073cc:	23ff      	movs	r3, #255	; 0xff
 80073ce:	041b      	lsls	r3, r3, #16
 80073d0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073d2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	4313      	orrs	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ea:	0d51      	lsrs	r1, r2, #21
 80073ec:	2280      	movs	r2, #128	; 0x80
 80073ee:	00d2      	lsls	r2, r2, #3
 80073f0:	400a      	ands	r2, r1
 80073f2:	4907      	ldr	r1, [pc, #28]	; (8007410 <I2C_TransferConfig+0x70>)
 80073f4:	430a      	orrs	r2, r1
 80073f6:	43d2      	mvns	r2, r2
 80073f8:	401a      	ands	r2, r3
 80073fa:	0011      	movs	r1, r2
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	46bd      	mov	sp, r7
 800740a:	b007      	add	sp, #28
 800740c:	bd90      	pop	{r4, r7, pc}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	03ff63ff 	.word	0x03ff63ff

08007414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800741c:	4b19      	ldr	r3, [pc, #100]	; (8007484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a19      	ldr	r2, [pc, #100]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007422:	4013      	ands	r3, r2
 8007424:	0019      	movs	r1, r3
 8007426:	4b17      	ldr	r3, [pc, #92]	; (8007484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	430a      	orrs	r2, r1
 800742c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	429a      	cmp	r2, r3
 8007436:	d11f      	bne.n	8007478 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007438:	4b14      	ldr	r3, [pc, #80]	; (800748c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	0013      	movs	r3, r2
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	189b      	adds	r3, r3, r2
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	4912      	ldr	r1, [pc, #72]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007446:	0018      	movs	r0, r3
 8007448:	f7f8 fe76 	bl	8000138 <__udivsi3>
 800744c:	0003      	movs	r3, r0
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007452:	e008      	b.n	8007466 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b01      	subs	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	e001      	b.n	8007466 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e009      	b.n	800747a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007466:	4b07      	ldr	r3, [pc, #28]	; (8007484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	2380      	movs	r3, #128	; 0x80
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	401a      	ands	r2, r3
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	429a      	cmp	r2, r3
 8007476:	d0ed      	beq.n	8007454 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	0018      	movs	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	b004      	add	sp, #16
 8007480:	bd80      	pop	{r7, pc}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	40007000 	.word	0x40007000
 8007488:	fffff9ff 	.word	0xfffff9ff
 800748c:	200002a4 	.word	0x200002a4
 8007490:	000f4240 	.word	0x000f4240

08007494 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007498:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	23e0      	movs	r3, #224	; 0xe0
 800749e:	01db      	lsls	r3, r3, #7
 80074a0:	4013      	ands	r3, r2
}
 80074a2:	0018      	movs	r0, r3
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40021000 	.word	0x40021000

080074ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e2f3      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2201      	movs	r2, #1
 80074c4:	4013      	ands	r3, r2
 80074c6:	d100      	bne.n	80074ca <HAL_RCC_OscConfig+0x1e>
 80074c8:	e07c      	b.n	80075c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ca:	4bc3      	ldr	r3, [pc, #780]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2238      	movs	r2, #56	; 0x38
 80074d0:	4013      	ands	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d4:	4bc0      	ldr	r3, [pc, #768]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	2203      	movs	r2, #3
 80074da:	4013      	ands	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d102      	bne.n	80074ea <HAL_RCC_OscConfig+0x3e>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d002      	beq.n	80074f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d10b      	bne.n	8007508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f0:	4bb9      	ldr	r3, [pc, #740]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	029b      	lsls	r3, r3, #10
 80074f8:	4013      	ands	r3, r2
 80074fa:	d062      	beq.n	80075c2 <HAL_RCC_OscConfig+0x116>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d15e      	bne.n	80075c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e2ce      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	2380      	movs	r3, #128	; 0x80
 800750e:	025b      	lsls	r3, r3, #9
 8007510:	429a      	cmp	r2, r3
 8007512:	d107      	bne.n	8007524 <HAL_RCC_OscConfig+0x78>
 8007514:	4bb0      	ldr	r3, [pc, #704]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	4baf      	ldr	r3, [pc, #700]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800751a:	2180      	movs	r1, #128	; 0x80
 800751c:	0249      	lsls	r1, r1, #9
 800751e:	430a      	orrs	r2, r1
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e020      	b.n	8007566 <HAL_RCC_OscConfig+0xba>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	23a0      	movs	r3, #160	; 0xa0
 800752a:	02db      	lsls	r3, r3, #11
 800752c:	429a      	cmp	r2, r3
 800752e:	d10e      	bne.n	800754e <HAL_RCC_OscConfig+0xa2>
 8007530:	4ba9      	ldr	r3, [pc, #676]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4ba8      	ldr	r3, [pc, #672]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	02c9      	lsls	r1, r1, #11
 800753a:	430a      	orrs	r2, r1
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	4ba6      	ldr	r3, [pc, #664]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4ba5      	ldr	r3, [pc, #660]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	0249      	lsls	r1, r1, #9
 8007548:	430a      	orrs	r2, r1
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	e00b      	b.n	8007566 <HAL_RCC_OscConfig+0xba>
 800754e:	4ba2      	ldr	r3, [pc, #648]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4ba1      	ldr	r3, [pc, #644]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007554:	49a1      	ldr	r1, [pc, #644]	; (80077dc <HAL_RCC_OscConfig+0x330>)
 8007556:	400a      	ands	r2, r1
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	4b9f      	ldr	r3, [pc, #636]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4b9e      	ldr	r3, [pc, #632]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007560:	499f      	ldr	r1, [pc, #636]	; (80077e0 <HAL_RCC_OscConfig+0x334>)
 8007562:	400a      	ands	r2, r1
 8007564:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d014      	beq.n	8007598 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756e:	f7fe fec1 	bl	80062f4 <HAL_GetTick>
 8007572:	0003      	movs	r3, r0
 8007574:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007578:	f7fe febc 	bl	80062f4 <HAL_GetTick>
 800757c:	0002      	movs	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b64      	cmp	r3, #100	; 0x64
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e28d      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800758a:	4b93      	ldr	r3, [pc, #588]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	2380      	movs	r3, #128	; 0x80
 8007590:	029b      	lsls	r3, r3, #10
 8007592:	4013      	ands	r3, r2
 8007594:	d0f0      	beq.n	8007578 <HAL_RCC_OscConfig+0xcc>
 8007596:	e015      	b.n	80075c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007598:	f7fe feac 	bl	80062f4 <HAL_GetTick>
 800759c:	0003      	movs	r3, r0
 800759e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075a2:	f7fe fea7 	bl	80062f4 <HAL_GetTick>
 80075a6:	0002      	movs	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b64      	cmp	r3, #100	; 0x64
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e278      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075b4:	4b88      	ldr	r3, [pc, #544]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	029b      	lsls	r3, r3, #10
 80075bc:	4013      	ands	r3, r2
 80075be:	d1f0      	bne.n	80075a2 <HAL_RCC_OscConfig+0xf6>
 80075c0:	e000      	b.n	80075c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2202      	movs	r2, #2
 80075ca:	4013      	ands	r3, r2
 80075cc:	d100      	bne.n	80075d0 <HAL_RCC_OscConfig+0x124>
 80075ce:	e099      	b.n	8007704 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075d0:	4b81      	ldr	r3, [pc, #516]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2238      	movs	r2, #56	; 0x38
 80075d6:	4013      	ands	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075da:	4b7f      	ldr	r3, [pc, #508]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	2203      	movs	r2, #3
 80075e0:	4013      	ands	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	2b10      	cmp	r3, #16
 80075e8:	d102      	bne.n	80075f0 <HAL_RCC_OscConfig+0x144>
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d002      	beq.n	80075f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d135      	bne.n	8007662 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075f6:	4b78      	ldr	r3, [pc, #480]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4013      	ands	r3, r2
 8007600:	d005      	beq.n	800760e <HAL_RCC_OscConfig+0x162>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e24b      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800760e:	4b72      	ldr	r3, [pc, #456]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4a74      	ldr	r2, [pc, #464]	; (80077e4 <HAL_RCC_OscConfig+0x338>)
 8007614:	4013      	ands	r3, r2
 8007616:	0019      	movs	r1, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	021a      	lsls	r2, r3, #8
 800761e:	4b6e      	ldr	r3, [pc, #440]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007620:	430a      	orrs	r2, r1
 8007622:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d112      	bne.n	8007650 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800762a:	4b6b      	ldr	r3, [pc, #428]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a6e      	ldr	r2, [pc, #440]	; (80077e8 <HAL_RCC_OscConfig+0x33c>)
 8007630:	4013      	ands	r3, r2
 8007632:	0019      	movs	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	4b67      	ldr	r3, [pc, #412]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800763a:	430a      	orrs	r2, r1
 800763c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800763e:	4b66      	ldr	r3, [pc, #408]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	0adb      	lsrs	r3, r3, #11
 8007644:	2207      	movs	r2, #7
 8007646:	4013      	ands	r3, r2
 8007648:	4a68      	ldr	r2, [pc, #416]	; (80077ec <HAL_RCC_OscConfig+0x340>)
 800764a:	40da      	lsrs	r2, r3
 800764c:	4b68      	ldr	r3, [pc, #416]	; (80077f0 <HAL_RCC_OscConfig+0x344>)
 800764e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007650:	4b68      	ldr	r3, [pc, #416]	; (80077f4 <HAL_RCC_OscConfig+0x348>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	0018      	movs	r0, r3
 8007656:	f7fe fdf1 	bl	800623c <HAL_InitTick>
 800765a:	1e03      	subs	r3, r0, #0
 800765c:	d051      	beq.n	8007702 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e221      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d030      	beq.n	80076cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800766a:	4b5b      	ldr	r3, [pc, #364]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a5e      	ldr	r2, [pc, #376]	; (80077e8 <HAL_RCC_OscConfig+0x33c>)
 8007670:	4013      	ands	r3, r2
 8007672:	0019      	movs	r1, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	4b57      	ldr	r3, [pc, #348]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800767a:	430a      	orrs	r2, r1
 800767c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800767e:	4b56      	ldr	r3, [pc, #344]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4b55      	ldr	r3, [pc, #340]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007684:	2180      	movs	r1, #128	; 0x80
 8007686:	0049      	lsls	r1, r1, #1
 8007688:	430a      	orrs	r2, r1
 800768a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768c:	f7fe fe32 	bl	80062f4 <HAL_GetTick>
 8007690:	0003      	movs	r3, r0
 8007692:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007696:	f7fe fe2d 	bl	80062f4 <HAL_GetTick>
 800769a:	0002      	movs	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e1fe      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076a8:	4b4b      	ldr	r3, [pc, #300]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4013      	ands	r3, r2
 80076b2:	d0f0      	beq.n	8007696 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b4:	4b48      	ldr	r3, [pc, #288]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4a4a      	ldr	r2, [pc, #296]	; (80077e4 <HAL_RCC_OscConfig+0x338>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	0019      	movs	r1, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	021a      	lsls	r2, r3, #8
 80076c4:	4b44      	ldr	r3, [pc, #272]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	e01b      	b.n	8007704 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80076cc:	4b42      	ldr	r3, [pc, #264]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4b41      	ldr	r3, [pc, #260]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80076d2:	4949      	ldr	r1, [pc, #292]	; (80077f8 <HAL_RCC_OscConfig+0x34c>)
 80076d4:	400a      	ands	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d8:	f7fe fe0c 	bl	80062f4 <HAL_GetTick>
 80076dc:	0003      	movs	r3, r0
 80076de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076e2:	f7fe fe07 	bl	80062f4 <HAL_GetTick>
 80076e6:	0002      	movs	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e1d8      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076f4:	4b38      	ldr	r3, [pc, #224]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	2380      	movs	r3, #128	; 0x80
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4013      	ands	r3, r2
 80076fe:	d1f0      	bne.n	80076e2 <HAL_RCC_OscConfig+0x236>
 8007700:	e000      	b.n	8007704 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007702:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2208      	movs	r2, #8
 800770a:	4013      	ands	r3, r2
 800770c:	d047      	beq.n	800779e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800770e:	4b32      	ldr	r3, [pc, #200]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2238      	movs	r2, #56	; 0x38
 8007714:	4013      	ands	r3, r2
 8007716:	2b18      	cmp	r3, #24
 8007718:	d10a      	bne.n	8007730 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800771a:	4b2f      	ldr	r3, [pc, #188]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800771c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800771e:	2202      	movs	r2, #2
 8007720:	4013      	ands	r3, r2
 8007722:	d03c      	beq.n	800779e <HAL_RCC_OscConfig+0x2f2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d138      	bne.n	800779e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e1ba      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d019      	beq.n	800776c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007738:	4b27      	ldr	r3, [pc, #156]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800773a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800773c:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800773e:	2101      	movs	r1, #1
 8007740:	430a      	orrs	r2, r1
 8007742:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007744:	f7fe fdd6 	bl	80062f4 <HAL_GetTick>
 8007748:	0003      	movs	r3, r0
 800774a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800774c:	e008      	b.n	8007760 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800774e:	f7fe fdd1 	bl	80062f4 <HAL_GetTick>
 8007752:	0002      	movs	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e1a2      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007760:	4b1d      	ldr	r3, [pc, #116]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007764:	2202      	movs	r2, #2
 8007766:	4013      	ands	r3, r2
 8007768:	d0f1      	beq.n	800774e <HAL_RCC_OscConfig+0x2a2>
 800776a:	e018      	b.n	800779e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800776c:	4b1a      	ldr	r3, [pc, #104]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 800776e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007770:	4b19      	ldr	r3, [pc, #100]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007772:	2101      	movs	r1, #1
 8007774:	438a      	bics	r2, r1
 8007776:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007778:	f7fe fdbc 	bl	80062f4 <HAL_GetTick>
 800777c:	0003      	movs	r3, r0
 800777e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007782:	f7fe fdb7 	bl	80062f4 <HAL_GetTick>
 8007786:	0002      	movs	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e188      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007794:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 8007796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007798:	2202      	movs	r2, #2
 800779a:	4013      	ands	r3, r2
 800779c:	d1f1      	bne.n	8007782 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2204      	movs	r2, #4
 80077a4:	4013      	ands	r3, r2
 80077a6:	d100      	bne.n	80077aa <HAL_RCC_OscConfig+0x2fe>
 80077a8:	e0c6      	b.n	8007938 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077aa:	231f      	movs	r3, #31
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2238      	movs	r2, #56	; 0x38
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d11e      	bne.n	80077fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <HAL_RCC_OscConfig+0x32c>)
 80077c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c2:	2202      	movs	r2, #2
 80077c4:	4013      	ands	r3, r2
 80077c6:	d100      	bne.n	80077ca <HAL_RCC_OscConfig+0x31e>
 80077c8:	e0b6      	b.n	8007938 <HAL_RCC_OscConfig+0x48c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d000      	beq.n	80077d4 <HAL_RCC_OscConfig+0x328>
 80077d2:	e0b1      	b.n	8007938 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e166      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
 80077d8:	40021000 	.word	0x40021000
 80077dc:	fffeffff 	.word	0xfffeffff
 80077e0:	fffbffff 	.word	0xfffbffff
 80077e4:	ffff80ff 	.word	0xffff80ff
 80077e8:	ffffc7ff 	.word	0xffffc7ff
 80077ec:	00f42400 	.word	0x00f42400
 80077f0:	200002a4 	.word	0x200002a4
 80077f4:	200002a8 	.word	0x200002a8
 80077f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077fc:	4bac      	ldr	r3, [pc, #688]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80077fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	055b      	lsls	r3, r3, #21
 8007804:	4013      	ands	r3, r2
 8007806:	d101      	bne.n	800780c <HAL_RCC_OscConfig+0x360>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <HAL_RCC_OscConfig+0x362>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	4ba7      	ldr	r3, [pc, #668]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007816:	4ba6      	ldr	r3, [pc, #664]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007818:	2180      	movs	r1, #128	; 0x80
 800781a:	0549      	lsls	r1, r1, #21
 800781c:	430a      	orrs	r2, r1
 800781e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007820:	4ba3      	ldr	r3, [pc, #652]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007824:	2380      	movs	r3, #128	; 0x80
 8007826:	055b      	lsls	r3, r3, #21
 8007828:	4013      	ands	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800782e:	231f      	movs	r3, #31
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007836:	4b9f      	ldr	r3, [pc, #636]	; (8007ab4 <HAL_RCC_OscConfig+0x608>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	2380      	movs	r3, #128	; 0x80
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4013      	ands	r3, r2
 8007840:	d11a      	bne.n	8007878 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007842:	4b9c      	ldr	r3, [pc, #624]	; (8007ab4 <HAL_RCC_OscConfig+0x608>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b9b      	ldr	r3, [pc, #620]	; (8007ab4 <HAL_RCC_OscConfig+0x608>)
 8007848:	2180      	movs	r1, #128	; 0x80
 800784a:	0049      	lsls	r1, r1, #1
 800784c:	430a      	orrs	r2, r1
 800784e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007850:	f7fe fd50 	bl	80062f4 <HAL_GetTick>
 8007854:	0003      	movs	r3, r0
 8007856:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007858:	e008      	b.n	800786c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800785a:	f7fe fd4b 	bl	80062f4 <HAL_GetTick>
 800785e:	0002      	movs	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	2b02      	cmp	r3, #2
 8007866:	d901      	bls.n	800786c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e11c      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800786c:	4b91      	ldr	r3, [pc, #580]	; (8007ab4 <HAL_RCC_OscConfig+0x608>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	2380      	movs	r3, #128	; 0x80
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4013      	ands	r3, r2
 8007876:	d0f0      	beq.n	800785a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d106      	bne.n	800788e <HAL_RCC_OscConfig+0x3e2>
 8007880:	4b8b      	ldr	r3, [pc, #556]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007884:	4b8a      	ldr	r3, [pc, #552]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007886:	2101      	movs	r1, #1
 8007888:	430a      	orrs	r2, r1
 800788a:	65da      	str	r2, [r3, #92]	; 0x5c
 800788c:	e01c      	b.n	80078c8 <HAL_RCC_OscConfig+0x41c>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2b05      	cmp	r3, #5
 8007894:	d10c      	bne.n	80078b0 <HAL_RCC_OscConfig+0x404>
 8007896:	4b86      	ldr	r3, [pc, #536]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800789a:	4b85      	ldr	r3, [pc, #532]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 800789c:	2104      	movs	r1, #4
 800789e:	430a      	orrs	r2, r1
 80078a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80078a2:	4b83      	ldr	r3, [pc, #524]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80078a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078a6:	4b82      	ldr	r3, [pc, #520]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80078a8:	2101      	movs	r1, #1
 80078aa:	430a      	orrs	r2, r1
 80078ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80078ae:	e00b      	b.n	80078c8 <HAL_RCC_OscConfig+0x41c>
 80078b0:	4b7f      	ldr	r3, [pc, #508]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80078b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078b4:	4b7e      	ldr	r3, [pc, #504]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80078b6:	2101      	movs	r1, #1
 80078b8:	438a      	bics	r2, r1
 80078ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80078bc:	4b7c      	ldr	r3, [pc, #496]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80078be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078c0:	4b7b      	ldr	r3, [pc, #492]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80078c2:	2104      	movs	r1, #4
 80078c4:	438a      	bics	r2, r1
 80078c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d014      	beq.n	80078fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d0:	f7fe fd10 	bl	80062f4 <HAL_GetTick>
 80078d4:	0003      	movs	r3, r0
 80078d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078d8:	e009      	b.n	80078ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078da:	f7fe fd0b 	bl	80062f4 <HAL_GetTick>
 80078de:	0002      	movs	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	4a74      	ldr	r2, [pc, #464]	; (8007ab8 <HAL_RCC_OscConfig+0x60c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e0db      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078ee:	4b70      	ldr	r3, [pc, #448]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80078f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f2:	2202      	movs	r2, #2
 80078f4:	4013      	ands	r3, r2
 80078f6:	d0f0      	beq.n	80078da <HAL_RCC_OscConfig+0x42e>
 80078f8:	e013      	b.n	8007922 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fa:	f7fe fcfb 	bl	80062f4 <HAL_GetTick>
 80078fe:	0003      	movs	r3, r0
 8007900:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007902:	e009      	b.n	8007918 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007904:	f7fe fcf6 	bl	80062f4 <HAL_GetTick>
 8007908:	0002      	movs	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	4a6a      	ldr	r2, [pc, #424]	; (8007ab8 <HAL_RCC_OscConfig+0x60c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e0c6      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007918:	4b65      	ldr	r3, [pc, #404]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 800791a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791c:	2202      	movs	r2, #2
 800791e:	4013      	ands	r3, r2
 8007920:	d1f0      	bne.n	8007904 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007922:	231f      	movs	r3, #31
 8007924:	18fb      	adds	r3, r7, r3
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d105      	bne.n	8007938 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800792c:	4b60      	ldr	r3, [pc, #384]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 800792e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007930:	4b5f      	ldr	r3, [pc, #380]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007932:	4962      	ldr	r1, [pc, #392]	; (8007abc <HAL_RCC_OscConfig+0x610>)
 8007934:	400a      	ands	r2, r1
 8007936:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d100      	bne.n	8007942 <HAL_RCC_OscConfig+0x496>
 8007940:	e0b0      	b.n	8007aa4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007942:	4b5b      	ldr	r3, [pc, #364]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2238      	movs	r2, #56	; 0x38
 8007948:	4013      	ands	r3, r2
 800794a:	2b10      	cmp	r3, #16
 800794c:	d100      	bne.n	8007950 <HAL_RCC_OscConfig+0x4a4>
 800794e:	e078      	b.n	8007a42 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	2b02      	cmp	r3, #2
 8007956:	d153      	bne.n	8007a00 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007958:	4b55      	ldr	r3, [pc, #340]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4b54      	ldr	r3, [pc, #336]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 800795e:	4958      	ldr	r1, [pc, #352]	; (8007ac0 <HAL_RCC_OscConfig+0x614>)
 8007960:	400a      	ands	r2, r1
 8007962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007964:	f7fe fcc6 	bl	80062f4 <HAL_GetTick>
 8007968:	0003      	movs	r3, r0
 800796a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800796e:	f7fe fcc1 	bl	80062f4 <HAL_GetTick>
 8007972:	0002      	movs	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e092      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007980:	4b4b      	ldr	r3, [pc, #300]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	049b      	lsls	r3, r3, #18
 8007988:	4013      	ands	r3, r2
 800798a:	d1f0      	bne.n	800796e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800798c:	4b48      	ldr	r3, [pc, #288]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	4a4c      	ldr	r2, [pc, #304]	; (8007ac4 <HAL_RCC_OscConfig+0x618>)
 8007992:	4013      	ands	r3, r2
 8007994:	0019      	movs	r1, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	431a      	orrs	r2, r3
 80079b4:	4b3e      	ldr	r3, [pc, #248]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80079b6:	430a      	orrs	r2, r1
 80079b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079ba:	4b3d      	ldr	r3, [pc, #244]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b3c      	ldr	r3, [pc, #240]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	0449      	lsls	r1, r1, #17
 80079c4:	430a      	orrs	r2, r1
 80079c6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80079c8:	4b39      	ldr	r3, [pc, #228]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	4b38      	ldr	r3, [pc, #224]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	0549      	lsls	r1, r1, #21
 80079d2:	430a      	orrs	r2, r1
 80079d4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d6:	f7fe fc8d 	bl	80062f4 <HAL_GetTick>
 80079da:	0003      	movs	r3, r0
 80079dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e0:	f7fe fc88 	bl	80062f4 <HAL_GetTick>
 80079e4:	0002      	movs	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e059      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079f2:	4b2f      	ldr	r3, [pc, #188]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	2380      	movs	r3, #128	; 0x80
 80079f8:	049b      	lsls	r3, r3, #18
 80079fa:	4013      	ands	r3, r2
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x534>
 80079fe:	e051      	b.n	8007aa4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a00:	4b2b      	ldr	r3, [pc, #172]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b2a      	ldr	r3, [pc, #168]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007a06:	492e      	ldr	r1, [pc, #184]	; (8007ac0 <HAL_RCC_OscConfig+0x614>)
 8007a08:	400a      	ands	r2, r1
 8007a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fe fc72 	bl	80062f4 <HAL_GetTick>
 8007a10:	0003      	movs	r3, r0
 8007a12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a16:	f7fe fc6d 	bl	80062f4 <HAL_GetTick>
 8007a1a:	0002      	movs	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e03e      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a28:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	2380      	movs	r3, #128	; 0x80
 8007a2e:	049b      	lsls	r3, r3, #18
 8007a30:	4013      	ands	r3, r2
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007a34:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007a3a:	4923      	ldr	r1, [pc, #140]	; (8007ac8 <HAL_RCC_OscConfig+0x61c>)
 8007a3c:	400a      	ands	r2, r1
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	e030      	b.n	8007aa4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e02b      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007a4e:	4b18      	ldr	r3, [pc, #96]	; (8007ab0 <HAL_RCC_OscConfig+0x604>)
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2203      	movs	r2, #3
 8007a58:	401a      	ands	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d11e      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2270      	movs	r2, #112	; 0x70
 8007a66:	401a      	ands	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d117      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	23fe      	movs	r3, #254	; 0xfe
 8007a74:	01db      	lsls	r3, r3, #7
 8007a76:	401a      	ands	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d10e      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	23f8      	movs	r3, #248	; 0xf8
 8007a86:	039b      	lsls	r3, r3, #14
 8007a88:	401a      	ands	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d106      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	0f5b      	lsrs	r3, r3, #29
 8007a96:	075a      	lsls	r2, r3, #29
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d001      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e000      	b.n	8007aa6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b008      	add	sp, #32
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	40007000 	.word	0x40007000
 8007ab8:	00001388 	.word	0x00001388
 8007abc:	efffffff 	.word	0xefffffff
 8007ac0:	feffffff 	.word	0xfeffffff
 8007ac4:	1fc1808c 	.word	0x1fc1808c
 8007ac8:	effefffc 	.word	0xeffefffc

08007acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e0e9      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae0:	4b76      	ldr	r3, [pc, #472]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2207      	movs	r2, #7
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d91e      	bls.n	8007b2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aee:	4b73      	ldr	r3, [pc, #460]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2207      	movs	r2, #7
 8007af4:	4393      	bics	r3, r2
 8007af6:	0019      	movs	r1, r3
 8007af8:	4b70      	ldr	r3, [pc, #448]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b00:	f7fe fbf8 	bl	80062f4 <HAL_GetTick>
 8007b04:	0003      	movs	r3, r0
 8007b06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b08:	e009      	b.n	8007b1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b0a:	f7fe fbf3 	bl	80062f4 <HAL_GetTick>
 8007b0e:	0002      	movs	r2, r0
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	4a6a      	ldr	r2, [pc, #424]	; (8007cc0 <HAL_RCC_ClockConfig+0x1f4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e0ca      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b1e:	4b67      	ldr	r3, [pc, #412]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2207      	movs	r2, #7
 8007b24:	4013      	ands	r3, r2
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d1ee      	bne.n	8007b0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2202      	movs	r2, #2
 8007b32:	4013      	ands	r3, r2
 8007b34:	d015      	beq.n	8007b62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	d006      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007b40:	4b60      	ldr	r3, [pc, #384]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	4b5f      	ldr	r3, [pc, #380]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007b46:	21e0      	movs	r1, #224	; 0xe0
 8007b48:	01c9      	lsls	r1, r1, #7
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b4e:	4b5d      	ldr	r3, [pc, #372]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	4a5d      	ldr	r2, [pc, #372]	; (8007cc8 <HAL_RCC_ClockConfig+0x1fc>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	0019      	movs	r1, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	4b59      	ldr	r3, [pc, #356]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2201      	movs	r2, #1
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d057      	beq.n	8007c1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d107      	bne.n	8007b84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b74:	4b53      	ldr	r3, [pc, #332]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	2380      	movs	r3, #128	; 0x80
 8007b7a:	029b      	lsls	r3, r3, #10
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d12b      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e097      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d107      	bne.n	8007b9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b8c:	4b4d      	ldr	r3, [pc, #308]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	2380      	movs	r3, #128	; 0x80
 8007b92:	049b      	lsls	r3, r3, #18
 8007b94:	4013      	ands	r3, r2
 8007b96:	d11f      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e08b      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ba4:	4b47      	ldr	r3, [pc, #284]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4013      	ands	r3, r2
 8007bae:	d113      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e07f      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d106      	bne.n	8007bca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bbc:	4b41      	ldr	r3, [pc, #260]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	d108      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e074      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bca:	4b3e      	ldr	r3, [pc, #248]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bce:	2202      	movs	r2, #2
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	d101      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e06d      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bd8:	4b3a      	ldr	r3, [pc, #232]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2207      	movs	r2, #7
 8007bde:	4393      	bics	r3, r2
 8007be0:	0019      	movs	r1, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4b37      	ldr	r3, [pc, #220]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bec:	f7fe fb82 	bl	80062f4 <HAL_GetTick>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf4:	e009      	b.n	8007c0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf6:	f7fe fb7d 	bl	80062f4 <HAL_GetTick>
 8007bfa:	0002      	movs	r2, r0
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	4a2f      	ldr	r2, [pc, #188]	; (8007cc0 <HAL_RCC_ClockConfig+0x1f4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e054      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c0a:	4b2e      	ldr	r3, [pc, #184]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2238      	movs	r2, #56	; 0x38
 8007c10:	401a      	ands	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d1ec      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c1c:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2207      	movs	r2, #7
 8007c22:	4013      	ands	r3, r2
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d21e      	bcs.n	8007c68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c2a:	4b24      	ldr	r3, [pc, #144]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2207      	movs	r2, #7
 8007c30:	4393      	bics	r3, r2
 8007c32:	0019      	movs	r1, r3
 8007c34:	4b21      	ldr	r3, [pc, #132]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c3c:	f7fe fb5a 	bl	80062f4 <HAL_GetTick>
 8007c40:	0003      	movs	r3, r0
 8007c42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c44:	e009      	b.n	8007c5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c46:	f7fe fb55 	bl	80062f4 <HAL_GetTick>
 8007c4a:	0002      	movs	r2, r0
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <HAL_RCC_ClockConfig+0x1f4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d901      	bls.n	8007c5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e02c      	b.n	8007cb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c5a:	4b18      	ldr	r3, [pc, #96]	; (8007cbc <HAL_RCC_ClockConfig+0x1f0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2207      	movs	r2, #7
 8007c60:	4013      	ands	r3, r2
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d1ee      	bne.n	8007c46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	4013      	ands	r3, r2
 8007c70:	d009      	beq.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007c72:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <HAL_RCC_ClockConfig+0x200>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	0019      	movs	r1, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007c82:	430a      	orrs	r2, r1
 8007c84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007c86:	f000 f829 	bl	8007cdc <HAL_RCC_GetSysClockFreq>
 8007c8a:	0001      	movs	r1, r0
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	0a1b      	lsrs	r3, r3, #8
 8007c92:	220f      	movs	r2, #15
 8007c94:	401a      	ands	r2, r3
 8007c96:	4b0e      	ldr	r3, [pc, #56]	; (8007cd0 <HAL_RCC_ClockConfig+0x204>)
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	58d3      	ldr	r3, [r2, r3]
 8007c9c:	221f      	movs	r2, #31
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	000a      	movs	r2, r1
 8007ca2:	40da      	lsrs	r2, r3
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <HAL_RCC_ClockConfig+0x208>)
 8007ca6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <HAL_RCC_ClockConfig+0x20c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f7fe fac5 	bl	800623c <HAL_InitTick>
 8007cb2:	0003      	movs	r3, r0
}
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	b004      	add	sp, #16
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	40022000 	.word	0x40022000
 8007cc0:	00001388 	.word	0x00001388
 8007cc4:	40021000 	.word	0x40021000
 8007cc8:	fffff0ff 	.word	0xfffff0ff
 8007ccc:	ffff8fff 	.word	0xffff8fff
 8007cd0:	0800ff3c 	.word	0x0800ff3c
 8007cd4:	200002a4 	.word	0x200002a4
 8007cd8:	200002a8 	.word	0x200002a8

08007cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ce2:	4b3c      	ldr	r3, [pc, #240]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2238      	movs	r2, #56	; 0x38
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d10f      	bne.n	8007d0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007cec:	4b39      	ldr	r3, [pc, #228]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	0adb      	lsrs	r3, r3, #11
 8007cf2:	2207      	movs	r2, #7
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	409a      	lsls	r2, r3
 8007cfa:	0013      	movs	r3, r2
 8007cfc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4835      	ldr	r0, [pc, #212]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007d02:	f7f8 fa19 	bl	8000138 <__udivsi3>
 8007d06:	0003      	movs	r3, r0
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	e05d      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d0c:	4b31      	ldr	r3, [pc, #196]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	2238      	movs	r2, #56	; 0x38
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d102      	bne.n	8007d1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d18:	4b30      	ldr	r3, [pc, #192]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x100>)
 8007d1a:	613b      	str	r3, [r7, #16]
 8007d1c:	e054      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d1e:	4b2d      	ldr	r3, [pc, #180]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2238      	movs	r2, #56	; 0x38
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	d138      	bne.n	8007d9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007d2a:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	2203      	movs	r2, #3
 8007d30:	4013      	ands	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d34:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	091b      	lsrs	r3, r3, #4
 8007d3a:	2207      	movs	r2, #7
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	3301      	adds	r3, #1
 8007d40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d10d      	bne.n	8007d64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	4824      	ldr	r0, [pc, #144]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x100>)
 8007d4c:	f7f8 f9f4 	bl	8000138 <__udivsi3>
 8007d50:	0003      	movs	r3, r0
 8007d52:	0019      	movs	r1, r3
 8007d54:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	227f      	movs	r2, #127	; 0x7f
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	434b      	muls	r3, r1
 8007d60:	617b      	str	r3, [r7, #20]
        break;
 8007d62:	e00d      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	481c      	ldr	r0, [pc, #112]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007d68:	f7f8 f9e6 	bl	8000138 <__udivsi3>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	0019      	movs	r1, r3
 8007d70:	4b18      	ldr	r3, [pc, #96]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	0a1b      	lsrs	r3, r3, #8
 8007d76:	227f      	movs	r2, #127	; 0x7f
 8007d78:	4013      	ands	r3, r2
 8007d7a:	434b      	muls	r3, r1
 8007d7c:	617b      	str	r3, [r7, #20]
        break;
 8007d7e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007d80:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	0f5b      	lsrs	r3, r3, #29
 8007d86:	2207      	movs	r2, #7
 8007d88:	4013      	ands	r3, r2
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	6978      	ldr	r0, [r7, #20]
 8007d92:	f7f8 f9d1 	bl	8000138 <__udivsi3>
 8007d96:	0003      	movs	r3, r0
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	e015      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007d9c:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2238      	movs	r2, #56	; 0x38
 8007da2:	4013      	ands	r3, r2
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d103      	bne.n	8007db0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007da8:	2380      	movs	r3, #128	; 0x80
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	e00b      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2238      	movs	r2, #56	; 0x38
 8007db6:	4013      	ands	r3, r2
 8007db8:	2b18      	cmp	r3, #24
 8007dba:	d103      	bne.n	8007dc4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007dbc:	23fa      	movs	r3, #250	; 0xfa
 8007dbe:	01db      	lsls	r3, r3, #7
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	e001      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007dc8:	693b      	ldr	r3, [r7, #16]
}
 8007dca:	0018      	movs	r0, r3
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	b006      	add	sp, #24
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	00f42400 	.word	0x00f42400
 8007ddc:	007a1200 	.word	0x007a1200

08007de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007de4:	4b02      	ldr	r3, [pc, #8]	; (8007df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007de6:	681b      	ldr	r3, [r3, #0]
}
 8007de8:	0018      	movs	r0, r3
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	200002a4 	.word	0x200002a4

08007df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df4:	b5b0      	push	{r4, r5, r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007df8:	f7ff fff2 	bl	8007de0 <HAL_RCC_GetHCLKFreq>
 8007dfc:	0004      	movs	r4, r0
 8007dfe:	f7ff fb49 	bl	8007494 <LL_RCC_GetAPB1Prescaler>
 8007e02:	0003      	movs	r3, r0
 8007e04:	0b1a      	lsrs	r2, r3, #12
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e08:	0092      	lsls	r2, r2, #2
 8007e0a:	58d3      	ldr	r3, [r2, r3]
 8007e0c:	221f      	movs	r2, #31
 8007e0e:	4013      	ands	r3, r2
 8007e10:	40dc      	lsrs	r4, r3
 8007e12:	0023      	movs	r3, r4
}
 8007e14:	0018      	movs	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bdb0      	pop	{r4, r5, r7, pc}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	0800ff7c 	.word	0x0800ff7c

08007e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007e28:	2313      	movs	r3, #19
 8007e2a:	18fb      	adds	r3, r7, r3
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e30:	2312      	movs	r3, #18
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	2200      	movs	r2, #0
 8007e36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	2380      	movs	r3, #128	; 0x80
 8007e3e:	029b      	lsls	r3, r3, #10
 8007e40:	4013      	ands	r3, r2
 8007e42:	d100      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007e44:	e0a3      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e46:	2011      	movs	r0, #17
 8007e48:	183b      	adds	r3, r7, r0
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e4e:	4b86      	ldr	r3, [pc, #536]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e52:	2380      	movs	r3, #128	; 0x80
 8007e54:	055b      	lsls	r3, r3, #21
 8007e56:	4013      	ands	r3, r2
 8007e58:	d110      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e5a:	4b83      	ldr	r3, [pc, #524]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e5e:	4b82      	ldr	r3, [pc, #520]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007e60:	2180      	movs	r1, #128	; 0x80
 8007e62:	0549      	lsls	r1, r1, #21
 8007e64:	430a      	orrs	r2, r1
 8007e66:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e68:	4b7f      	ldr	r3, [pc, #508]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e6c:	2380      	movs	r3, #128	; 0x80
 8007e6e:	055b      	lsls	r3, r3, #21
 8007e70:	4013      	ands	r3, r2
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e76:	183b      	adds	r3, r7, r0
 8007e78:	2201      	movs	r2, #1
 8007e7a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e7c:	4b7b      	ldr	r3, [pc, #492]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	4b7a      	ldr	r3, [pc, #488]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007e82:	2180      	movs	r1, #128	; 0x80
 8007e84:	0049      	lsls	r1, r1, #1
 8007e86:	430a      	orrs	r2, r1
 8007e88:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e8a:	f7fe fa33 	bl	80062f4 <HAL_GetTick>
 8007e8e:	0003      	movs	r3, r0
 8007e90:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e92:	e00b      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e94:	f7fe fa2e 	bl	80062f4 <HAL_GetTick>
 8007e98:	0002      	movs	r2, r0
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d904      	bls.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007ea2:	2313      	movs	r3, #19
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	701a      	strb	r2, [r3, #0]
        break;
 8007eaa:	e005      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eac:	4b6f      	ldr	r3, [pc, #444]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	2380      	movs	r3, #128	; 0x80
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	d0ed      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007eb8:	2313      	movs	r3, #19
 8007eba:	18fb      	adds	r3, r7, r3
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d154      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ec2:	4b69      	ldr	r3, [pc, #420]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ec4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ec6:	23c0      	movs	r3, #192	; 0xc0
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4013      	ands	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d019      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d014      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ede:	4b62      	ldr	r3, [pc, #392]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee2:	4a63      	ldr	r2, [pc, #396]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ee8:	4b5f      	ldr	r3, [pc, #380]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007eea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eec:	4b5e      	ldr	r3, [pc, #376]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007eee:	2180      	movs	r1, #128	; 0x80
 8007ef0:	0249      	lsls	r1, r1, #9
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ef6:	4b5c      	ldr	r3, [pc, #368]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ef8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007efa:	4b5b      	ldr	r3, [pc, #364]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007efc:	495d      	ldr	r1, [pc, #372]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007efe:	400a      	ands	r2, r1
 8007f00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f02:	4b59      	ldr	r3, [pc, #356]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	d016      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7fe f9f0 	bl	80062f4 <HAL_GetTick>
 8007f14:	0003      	movs	r3, r0
 8007f16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f18:	e00c      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f1a:	f7fe f9eb 	bl	80062f4 <HAL_GetTick>
 8007f1e:	0002      	movs	r2, r0
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	4a54      	ldr	r2, [pc, #336]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d904      	bls.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007f2a:	2313      	movs	r3, #19
 8007f2c:	18fb      	adds	r3, r7, r3
 8007f2e:	2203      	movs	r2, #3
 8007f30:	701a      	strb	r2, [r3, #0]
            break;
 8007f32:	e004      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f34:	4b4c      	ldr	r3, [pc, #304]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f38:	2202      	movs	r2, #2
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	d0ed      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007f3e:	2313      	movs	r3, #19
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f48:	4b47      	ldr	r3, [pc, #284]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4c:	4a48      	ldr	r2, [pc, #288]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	0019      	movs	r1, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	4b44      	ldr	r3, [pc, #272]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f5c:	e00c      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f5e:	2312      	movs	r3, #18
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	2213      	movs	r2, #19
 8007f64:	18ba      	adds	r2, r7, r2
 8007f66:	7812      	ldrb	r2, [r2, #0]
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e005      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6c:	2312      	movs	r3, #18
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	2213      	movs	r2, #19
 8007f72:	18ba      	adds	r2, r7, r2
 8007f74:	7812      	ldrb	r2, [r2, #0]
 8007f76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f78:	2311      	movs	r3, #17
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d105      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f82:	4b39      	ldr	r3, [pc, #228]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f86:	4b38      	ldr	r3, [pc, #224]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007f88:	493c      	ldr	r1, [pc, #240]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007f8a:	400a      	ands	r2, r1
 8007f8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	4013      	ands	r3, r2
 8007f96:	d009      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f98:	4b33      	ldr	r3, [pc, #204]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	4393      	bics	r3, r2
 8007fa0:	0019      	movs	r1, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b30      	ldr	r3, [pc, #192]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	d009      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fb6:	4b2c      	ldr	r3, [pc, #176]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	220c      	movs	r2, #12
 8007fbc:	4393      	bics	r3, r2
 8007fbe:	0019      	movs	r1, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	4b28      	ldr	r3, [pc, #160]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	d009      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007fd4:	4b24      	ldr	r3, [pc, #144]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	4a29      	ldr	r2, [pc, #164]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	0019      	movs	r1, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	4b21      	ldr	r3, [pc, #132]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	2380      	movs	r3, #128	; 0x80
 8007fee:	01db      	lsls	r3, r3, #7
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	d015      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ff4:	4b1c      	ldr	r3, [pc, #112]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	0899      	lsrs	r1, r3, #2
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	695a      	ldr	r2, [r3, #20]
 8008000:	4b19      	ldr	r3, [pc, #100]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008002:	430a      	orrs	r2, r1
 8008004:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695a      	ldr	r2, [r3, #20]
 800800a:	2380      	movs	r3, #128	; 0x80
 800800c:	05db      	lsls	r3, r3, #23
 800800e:	429a      	cmp	r2, r3
 8008010:	d106      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	4b14      	ldr	r3, [pc, #80]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008018:	2180      	movs	r1, #128	; 0x80
 800801a:	0249      	lsls	r1, r1, #9
 800801c:	430a      	orrs	r2, r1
 800801e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	2380      	movs	r3, #128	; 0x80
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	4013      	ands	r3, r2
 800802a:	d016      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800802c:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800802e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008030:	4a14      	ldr	r2, [pc, #80]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008032:	4013      	ands	r3, r2
 8008034:	0019      	movs	r1, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800803c:	430a      	orrs	r2, r1
 800803e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	2380      	movs	r3, #128	; 0x80
 8008046:	01db      	lsls	r3, r3, #7
 8008048:	429a      	cmp	r2, r3
 800804a:	d106      	bne.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	0249      	lsls	r1, r1, #9
 8008056:	430a      	orrs	r2, r1
 8008058:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800805a:	2312      	movs	r3, #18
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	781b      	ldrb	r3, [r3, #0]
}
 8008060:	0018      	movs	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	b006      	add	sp, #24
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40021000 	.word	0x40021000
 800806c:	40007000 	.word	0x40007000
 8008070:	fffffcff 	.word	0xfffffcff
 8008074:	fffeffff 	.word	0xfffeffff
 8008078:	00001388 	.word	0x00001388
 800807c:	efffffff 	.word	0xefffffff
 8008080:	ffffcfff 	.word	0xffffcfff
 8008084:	ffff3fff 	.word	0xffff3fff

08008088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e04a      	b.n	8008130 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	223d      	movs	r2, #61	; 0x3d
 800809e:	5c9b      	ldrb	r3, [r3, r2]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d107      	bne.n	80080b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	223c      	movs	r2, #60	; 0x3c
 80080aa:	2100      	movs	r1, #0
 80080ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	0018      	movs	r0, r3
 80080b2:	f7fd fe31 	bl	8005d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	223d      	movs	r2, #61	; 0x3d
 80080ba:	2102      	movs	r1, #2
 80080bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3304      	adds	r3, #4
 80080c6:	0019      	movs	r1, r3
 80080c8:	0010      	movs	r0, r2
 80080ca:	f000 fd45 	bl	8008b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2248      	movs	r2, #72	; 0x48
 80080d2:	2101      	movs	r1, #1
 80080d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	223e      	movs	r2, #62	; 0x3e
 80080da:	2101      	movs	r1, #1
 80080dc:	5499      	strb	r1, [r3, r2]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	223f      	movs	r2, #63	; 0x3f
 80080e2:	2101      	movs	r1, #1
 80080e4:	5499      	strb	r1, [r3, r2]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2240      	movs	r2, #64	; 0x40
 80080ea:	2101      	movs	r1, #1
 80080ec:	5499      	strb	r1, [r3, r2]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2241      	movs	r2, #65	; 0x41
 80080f2:	2101      	movs	r1, #1
 80080f4:	5499      	strb	r1, [r3, r2]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2242      	movs	r2, #66	; 0x42
 80080fa:	2101      	movs	r1, #1
 80080fc:	5499      	strb	r1, [r3, r2]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2243      	movs	r2, #67	; 0x43
 8008102:	2101      	movs	r1, #1
 8008104:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2244      	movs	r2, #68	; 0x44
 800810a:	2101      	movs	r1, #1
 800810c:	5499      	strb	r1, [r3, r2]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2245      	movs	r2, #69	; 0x45
 8008112:	2101      	movs	r1, #1
 8008114:	5499      	strb	r1, [r3, r2]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2246      	movs	r2, #70	; 0x46
 800811a:	2101      	movs	r1, #1
 800811c:	5499      	strb	r1, [r3, r2]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2247      	movs	r2, #71	; 0x47
 8008122:	2101      	movs	r1, #1
 8008124:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	223d      	movs	r2, #61	; 0x3d
 800812a:	2101      	movs	r1, #1
 800812c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	0018      	movs	r0, r3
 8008132:	46bd      	mov	sp, r7
 8008134:	b002      	add	sp, #8
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	223d      	movs	r2, #61	; 0x3d
 8008144:	5c9b      	ldrb	r3, [r3, r2]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d001      	beq.n	8008150 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e034      	b.n	80081ba <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	223d      	movs	r2, #61	; 0x3d
 8008154:	2102      	movs	r1, #2
 8008156:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a19      	ldr	r2, [pc, #100]	; (80081c4 <HAL_TIM_Base_Start+0x8c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d009      	beq.n	8008176 <HAL_TIM_Base_Start+0x3e>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <HAL_TIM_Base_Start+0x90>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d004      	beq.n	8008176 <HAL_TIM_Base_Start+0x3e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a16      	ldr	r2, [pc, #88]	; (80081cc <HAL_TIM_Base_Start+0x94>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d116      	bne.n	80081a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4a14      	ldr	r2, [pc, #80]	; (80081d0 <HAL_TIM_Base_Start+0x98>)
 800817e:	4013      	ands	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b06      	cmp	r3, #6
 8008186:	d016      	beq.n	80081b6 <HAL_TIM_Base_Start+0x7e>
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	2380      	movs	r3, #128	; 0x80
 800818c:	025b      	lsls	r3, r3, #9
 800818e:	429a      	cmp	r2, r3
 8008190:	d011      	beq.n	80081b6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2101      	movs	r1, #1
 800819e:	430a      	orrs	r2, r1
 80081a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	e008      	b.n	80081b6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2101      	movs	r1, #1
 80081b0:	430a      	orrs	r2, r1
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e000      	b.n	80081b8 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	0018      	movs	r0, r3
 80081bc:	46bd      	mov	sp, r7
 80081be:	b004      	add	sp, #16
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	40012c00 	.word	0x40012c00
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40014000 	.word	0x40014000
 80081d0:	00010007 	.word	0x00010007

080081d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	223d      	movs	r2, #61	; 0x3d
 80081e0:	5c9b      	ldrb	r3, [r3, r2]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d001      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e03c      	b.n	8008266 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	223d      	movs	r2, #61	; 0x3d
 80081f0:	2102      	movs	r1, #2
 80081f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2101      	movs	r1, #1
 8008200:	430a      	orrs	r2, r1
 8008202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a19      	ldr	r2, [pc, #100]	; (8008270 <HAL_TIM_Base_Start_IT+0x9c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d009      	beq.n	8008222 <HAL_TIM_Base_Start_IT+0x4e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a18      	ldr	r2, [pc, #96]	; (8008274 <HAL_TIM_Base_Start_IT+0xa0>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d004      	beq.n	8008222 <HAL_TIM_Base_Start_IT+0x4e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a16      	ldr	r2, [pc, #88]	; (8008278 <HAL_TIM_Base_Start_IT+0xa4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d116      	bne.n	8008250 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	4a14      	ldr	r2, [pc, #80]	; (800827c <HAL_TIM_Base_Start_IT+0xa8>)
 800822a:	4013      	ands	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b06      	cmp	r3, #6
 8008232:	d016      	beq.n	8008262 <HAL_TIM_Base_Start_IT+0x8e>
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	2380      	movs	r3, #128	; 0x80
 8008238:	025b      	lsls	r3, r3, #9
 800823a:	429a      	cmp	r2, r3
 800823c:	d011      	beq.n	8008262 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2101      	movs	r1, #1
 800824a:	430a      	orrs	r2, r1
 800824c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824e:	e008      	b.n	8008262 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2101      	movs	r1, #1
 800825c:	430a      	orrs	r2, r1
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e000      	b.n	8008264 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008262:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b004      	add	sp, #16
 800826c:	bd80      	pop	{r7, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40000400 	.word	0x40000400
 8008278:	40014000 	.word	0x40014000
 800827c:	00010007 	.word	0x00010007

08008280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e04a      	b.n	8008328 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	223d      	movs	r2, #61	; 0x3d
 8008296:	5c9b      	ldrb	r3, [r3, r2]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d107      	bne.n	80082ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	223c      	movs	r2, #60	; 0x3c
 80082a2:	2100      	movs	r1, #0
 80082a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f000 f841 	bl	8008330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	223d      	movs	r2, #61	; 0x3d
 80082b2:	2102      	movs	r1, #2
 80082b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3304      	adds	r3, #4
 80082be:	0019      	movs	r1, r3
 80082c0:	0010      	movs	r0, r2
 80082c2:	f000 fc49 	bl	8008b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2248      	movs	r2, #72	; 0x48
 80082ca:	2101      	movs	r1, #1
 80082cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	223e      	movs	r2, #62	; 0x3e
 80082d2:	2101      	movs	r1, #1
 80082d4:	5499      	strb	r1, [r3, r2]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	223f      	movs	r2, #63	; 0x3f
 80082da:	2101      	movs	r1, #1
 80082dc:	5499      	strb	r1, [r3, r2]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2240      	movs	r2, #64	; 0x40
 80082e2:	2101      	movs	r1, #1
 80082e4:	5499      	strb	r1, [r3, r2]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2241      	movs	r2, #65	; 0x41
 80082ea:	2101      	movs	r1, #1
 80082ec:	5499      	strb	r1, [r3, r2]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2242      	movs	r2, #66	; 0x42
 80082f2:	2101      	movs	r1, #1
 80082f4:	5499      	strb	r1, [r3, r2]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2243      	movs	r2, #67	; 0x43
 80082fa:	2101      	movs	r1, #1
 80082fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2244      	movs	r2, #68	; 0x44
 8008302:	2101      	movs	r1, #1
 8008304:	5499      	strb	r1, [r3, r2]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2245      	movs	r2, #69	; 0x45
 800830a:	2101      	movs	r1, #1
 800830c:	5499      	strb	r1, [r3, r2]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2246      	movs	r2, #70	; 0x46
 8008312:	2101      	movs	r1, #1
 8008314:	5499      	strb	r1, [r3, r2]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2247      	movs	r2, #71	; 0x47
 800831a:	2101      	movs	r1, #1
 800831c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	223d      	movs	r2, #61	; 0x3d
 8008322:	2101      	movs	r1, #1
 8008324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	0018      	movs	r0, r3
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b002      	add	sp, #8
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d108      	bne.n	8008362 <HAL_TIM_PWM_Start+0x22>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	223e      	movs	r2, #62	; 0x3e
 8008354:	5c9b      	ldrb	r3, [r3, r2]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	1e5a      	subs	r2, r3, #1
 800835c:	4193      	sbcs	r3, r2
 800835e:	b2db      	uxtb	r3, r3
 8008360:	e037      	b.n	80083d2 <HAL_TIM_PWM_Start+0x92>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b04      	cmp	r3, #4
 8008366:	d108      	bne.n	800837a <HAL_TIM_PWM_Start+0x3a>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	223f      	movs	r2, #63	; 0x3f
 800836c:	5c9b      	ldrb	r3, [r3, r2]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	1e5a      	subs	r2, r3, #1
 8008374:	4193      	sbcs	r3, r2
 8008376:	b2db      	uxtb	r3, r3
 8008378:	e02b      	b.n	80083d2 <HAL_TIM_PWM_Start+0x92>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b08      	cmp	r3, #8
 800837e:	d108      	bne.n	8008392 <HAL_TIM_PWM_Start+0x52>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2240      	movs	r2, #64	; 0x40
 8008384:	5c9b      	ldrb	r3, [r3, r2]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	3b01      	subs	r3, #1
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	4193      	sbcs	r3, r2
 800838e:	b2db      	uxtb	r3, r3
 8008390:	e01f      	b.n	80083d2 <HAL_TIM_PWM_Start+0x92>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b0c      	cmp	r3, #12
 8008396:	d108      	bne.n	80083aa <HAL_TIM_PWM_Start+0x6a>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2241      	movs	r2, #65	; 0x41
 800839c:	5c9b      	ldrb	r3, [r3, r2]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	1e5a      	subs	r2, r3, #1
 80083a4:	4193      	sbcs	r3, r2
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	e013      	b.n	80083d2 <HAL_TIM_PWM_Start+0x92>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	d108      	bne.n	80083c2 <HAL_TIM_PWM_Start+0x82>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2242      	movs	r2, #66	; 0x42
 80083b4:	5c9b      	ldrb	r3, [r3, r2]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	3b01      	subs	r3, #1
 80083ba:	1e5a      	subs	r2, r3, #1
 80083bc:	4193      	sbcs	r3, r2
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	e007      	b.n	80083d2 <HAL_TIM_PWM_Start+0x92>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2243      	movs	r2, #67	; 0x43
 80083c6:	5c9b      	ldrb	r3, [r3, r2]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	1e5a      	subs	r2, r3, #1
 80083ce:	4193      	sbcs	r3, r2
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e085      	b.n	80084e6 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <HAL_TIM_PWM_Start+0xaa>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	223e      	movs	r2, #62	; 0x3e
 80083e4:	2102      	movs	r1, #2
 80083e6:	5499      	strb	r1, [r3, r2]
 80083e8:	e023      	b.n	8008432 <HAL_TIM_PWM_Start+0xf2>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d104      	bne.n	80083fa <HAL_TIM_PWM_Start+0xba>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	223f      	movs	r2, #63	; 0x3f
 80083f4:	2102      	movs	r1, #2
 80083f6:	5499      	strb	r1, [r3, r2]
 80083f8:	e01b      	b.n	8008432 <HAL_TIM_PWM_Start+0xf2>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d104      	bne.n	800840a <HAL_TIM_PWM_Start+0xca>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2240      	movs	r2, #64	; 0x40
 8008404:	2102      	movs	r1, #2
 8008406:	5499      	strb	r1, [r3, r2]
 8008408:	e013      	b.n	8008432 <HAL_TIM_PWM_Start+0xf2>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b0c      	cmp	r3, #12
 800840e:	d104      	bne.n	800841a <HAL_TIM_PWM_Start+0xda>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2241      	movs	r2, #65	; 0x41
 8008414:	2102      	movs	r1, #2
 8008416:	5499      	strb	r1, [r3, r2]
 8008418:	e00b      	b.n	8008432 <HAL_TIM_PWM_Start+0xf2>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b10      	cmp	r3, #16
 800841e:	d104      	bne.n	800842a <HAL_TIM_PWM_Start+0xea>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2242      	movs	r2, #66	; 0x42
 8008424:	2102      	movs	r1, #2
 8008426:	5499      	strb	r1, [r3, r2]
 8008428:	e003      	b.n	8008432 <HAL_TIM_PWM_Start+0xf2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2243      	movs	r2, #67	; 0x43
 800842e:	2102      	movs	r1, #2
 8008430:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	2201      	movs	r2, #1
 800843a:	0018      	movs	r0, r3
 800843c:	f000 ff62 	bl	8009304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a2a      	ldr	r2, [pc, #168]	; (80084f0 <HAL_TIM_PWM_Start+0x1b0>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00e      	beq.n	8008468 <HAL_TIM_PWM_Start+0x128>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a29      	ldr	r2, [pc, #164]	; (80084f4 <HAL_TIM_PWM_Start+0x1b4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d009      	beq.n	8008468 <HAL_TIM_PWM_Start+0x128>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a27      	ldr	r2, [pc, #156]	; (80084f8 <HAL_TIM_PWM_Start+0x1b8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d004      	beq.n	8008468 <HAL_TIM_PWM_Start+0x128>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a26      	ldr	r2, [pc, #152]	; (80084fc <HAL_TIM_PWM_Start+0x1bc>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d101      	bne.n	800846c <HAL_TIM_PWM_Start+0x12c>
 8008468:	2301      	movs	r3, #1
 800846a:	e000      	b.n	800846e <HAL_TIM_PWM_Start+0x12e>
 800846c:	2300      	movs	r3, #0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2180      	movs	r1, #128	; 0x80
 800847e:	0209      	lsls	r1, r1, #8
 8008480:	430a      	orrs	r2, r1
 8008482:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a19      	ldr	r2, [pc, #100]	; (80084f0 <HAL_TIM_PWM_Start+0x1b0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d009      	beq.n	80084a2 <HAL_TIM_PWM_Start+0x162>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <HAL_TIM_PWM_Start+0x1c0>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d004      	beq.n	80084a2 <HAL_TIM_PWM_Start+0x162>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a15      	ldr	r2, [pc, #84]	; (80084f4 <HAL_TIM_PWM_Start+0x1b4>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d116      	bne.n	80084d0 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	4a16      	ldr	r2, [pc, #88]	; (8008504 <HAL_TIM_PWM_Start+0x1c4>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b06      	cmp	r3, #6
 80084b2:	d016      	beq.n	80084e2 <HAL_TIM_PWM_Start+0x1a2>
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	2380      	movs	r3, #128	; 0x80
 80084b8:	025b      	lsls	r3, r3, #9
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d011      	beq.n	80084e2 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2101      	movs	r1, #1
 80084ca:	430a      	orrs	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ce:	e008      	b.n	80084e2 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2101      	movs	r1, #1
 80084dc:	430a      	orrs	r2, r1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e000      	b.n	80084e4 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	0018      	movs	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b004      	add	sp, #16
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	40012c00 	.word	0x40012c00
 80084f4:	40014000 	.word	0x40014000
 80084f8:	40014400 	.word	0x40014400
 80084fc:	40014800 	.word	0x40014800
 8008500:	40000400 	.word	0x40000400
 8008504:	00010007 	.word	0x00010007

08008508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2202      	movs	r2, #2
 8008518:	4013      	ands	r3, r2
 800851a:	2b02      	cmp	r3, #2
 800851c:	d124      	bne.n	8008568 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	2202      	movs	r2, #2
 8008526:	4013      	ands	r3, r2
 8008528:	2b02      	cmp	r3, #2
 800852a:	d11d      	bne.n	8008568 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2203      	movs	r2, #3
 8008532:	4252      	negs	r2, r2
 8008534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	2203      	movs	r2, #3
 8008544:	4013      	ands	r3, r2
 8008546:	d004      	beq.n	8008552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	0018      	movs	r0, r3
 800854c:	f000 faec 	bl	8008b28 <HAL_TIM_IC_CaptureCallback>
 8008550:	e007      	b.n	8008562 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	0018      	movs	r0, r3
 8008556:	f000 fadf 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	0018      	movs	r0, r3
 800855e:	f000 faeb 	bl	8008b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2204      	movs	r2, #4
 8008570:	4013      	ands	r3, r2
 8008572:	2b04      	cmp	r3, #4
 8008574:	d125      	bne.n	80085c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2204      	movs	r2, #4
 800857e:	4013      	ands	r3, r2
 8008580:	2b04      	cmp	r3, #4
 8008582:	d11e      	bne.n	80085c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2205      	movs	r2, #5
 800858a:	4252      	negs	r2, r2
 800858c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	23c0      	movs	r3, #192	; 0xc0
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4013      	ands	r3, r2
 80085a0:	d004      	beq.n	80085ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	0018      	movs	r0, r3
 80085a6:	f000 fabf 	bl	8008b28 <HAL_TIM_IC_CaptureCallback>
 80085aa:	e007      	b.n	80085bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	0018      	movs	r0, r3
 80085b0:	f000 fab2 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	0018      	movs	r0, r3
 80085b8:	f000 fabe 	bl	8008b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2208      	movs	r2, #8
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d124      	bne.n	800861a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	2208      	movs	r2, #8
 80085d8:	4013      	ands	r3, r2
 80085da:	2b08      	cmp	r3, #8
 80085dc:	d11d      	bne.n	800861a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2209      	movs	r2, #9
 80085e4:	4252      	negs	r2, r2
 80085e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2204      	movs	r2, #4
 80085ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	2203      	movs	r2, #3
 80085f6:	4013      	ands	r3, r2
 80085f8:	d004      	beq.n	8008604 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	0018      	movs	r0, r3
 80085fe:	f000 fa93 	bl	8008b28 <HAL_TIM_IC_CaptureCallback>
 8008602:	e007      	b.n	8008614 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	0018      	movs	r0, r3
 8008608:	f000 fa86 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	0018      	movs	r0, r3
 8008610:	f000 fa92 	bl	8008b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	2210      	movs	r2, #16
 8008622:	4013      	ands	r3, r2
 8008624:	2b10      	cmp	r3, #16
 8008626:	d125      	bne.n	8008674 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	2210      	movs	r2, #16
 8008630:	4013      	ands	r3, r2
 8008632:	2b10      	cmp	r3, #16
 8008634:	d11e      	bne.n	8008674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2211      	movs	r2, #17
 800863c:	4252      	negs	r2, r2
 800863e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2208      	movs	r2, #8
 8008644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	23c0      	movs	r3, #192	; 0xc0
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4013      	ands	r3, r2
 8008652:	d004      	beq.n	800865e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	0018      	movs	r0, r3
 8008658:	f000 fa66 	bl	8008b28 <HAL_TIM_IC_CaptureCallback>
 800865c:	e007      	b.n	800866e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	0018      	movs	r0, r3
 8008662:	f000 fa59 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	0018      	movs	r0, r3
 800866a:	f000 fa65 	bl	8008b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2201      	movs	r2, #1
 800867c:	4013      	ands	r3, r2
 800867e:	2b01      	cmp	r3, #1
 8008680:	d10f      	bne.n	80086a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	4013      	ands	r3, r2
 800868c:	2b01      	cmp	r3, #1
 800868e:	d108      	bne.n	80086a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2202      	movs	r2, #2
 8008696:	4252      	negs	r2, r2
 8008698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	0018      	movs	r0, r3
 800869e:	f7fd f919 	bl	80058d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	2280      	movs	r2, #128	; 0x80
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d10f      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2280      	movs	r2, #128	; 0x80
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b80      	cmp	r3, #128	; 0x80
 80086bc:	d108      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2281      	movs	r2, #129	; 0x81
 80086c4:	4252      	negs	r2, r2
 80086c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	0018      	movs	r0, r3
 80086cc:	f000 feae 	bl	800942c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691a      	ldr	r2, [r3, #16]
 80086d6:	2380      	movs	r3, #128	; 0x80
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	401a      	ands	r2, r3
 80086dc:	2380      	movs	r3, #128	; 0x80
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d10e      	bne.n	8008702 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2280      	movs	r2, #128	; 0x80
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b80      	cmp	r3, #128	; 0x80
 80086f0:	d107      	bne.n	8008702 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1c      	ldr	r2, [pc, #112]	; (8008768 <HAL_TIM_IRQHandler+0x260>)
 80086f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	0018      	movs	r0, r3
 80086fe:	f000 fe9d 	bl	800943c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	2240      	movs	r2, #64	; 0x40
 800870a:	4013      	ands	r3, r2
 800870c:	2b40      	cmp	r3, #64	; 0x40
 800870e:	d10f      	bne.n	8008730 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	2240      	movs	r2, #64	; 0x40
 8008718:	4013      	ands	r3, r2
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d108      	bne.n	8008730 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2241      	movs	r2, #65	; 0x41
 8008724:	4252      	negs	r2, r2
 8008726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	0018      	movs	r0, r3
 800872c:	f000 fa0c 	bl	8008b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	2220      	movs	r2, #32
 8008738:	4013      	ands	r3, r2
 800873a:	2b20      	cmp	r3, #32
 800873c:	d10f      	bne.n	800875e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	2220      	movs	r2, #32
 8008746:	4013      	ands	r3, r2
 8008748:	2b20      	cmp	r3, #32
 800874a:	d108      	bne.n	800875e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2221      	movs	r2, #33	; 0x21
 8008752:	4252      	negs	r2, r2
 8008754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	0018      	movs	r0, r3
 800875a:	f000 fe5f 	bl	800941c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800875e:	46c0      	nop			; (mov r8, r8)
 8008760:	46bd      	mov	sp, r7
 8008762:	b002      	add	sp, #8
 8008764:	bd80      	pop	{r7, pc}
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	fffffeff 	.word	0xfffffeff

0800876c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008778:	2317      	movs	r3, #23
 800877a:	18fb      	adds	r3, r7, r3
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	223c      	movs	r2, #60	; 0x3c
 8008784:	5c9b      	ldrb	r3, [r3, r2]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_TIM_PWM_ConfigChannel+0x22>
 800878a:	2302      	movs	r3, #2
 800878c:	e0e5      	b.n	800895a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	223c      	movs	r2, #60	; 0x3c
 8008792:	2101      	movs	r1, #1
 8008794:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b14      	cmp	r3, #20
 800879a:	d900      	bls.n	800879e <HAL_TIM_PWM_ConfigChannel+0x32>
 800879c:	e0d1      	b.n	8008942 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	009a      	lsls	r2, r3, #2
 80087a2:	4b70      	ldr	r3, [pc, #448]	; (8008964 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80087a4:	18d3      	adds	r3, r2, r3
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	0011      	movs	r1, r2
 80087b2:	0018      	movs	r0, r3
 80087b4:	f000 fa46 	bl	8008c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2108      	movs	r1, #8
 80087c4:	430a      	orrs	r2, r1
 80087c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2104      	movs	r1, #4
 80087d4:	438a      	bics	r2, r1
 80087d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6999      	ldr	r1, [r3, #24]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	619a      	str	r2, [r3, #24]
      break;
 80087ea:	e0af      	b.n	800894c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	0011      	movs	r1, r2
 80087f4:	0018      	movs	r0, r3
 80087f6:	f000 faaf 	bl	8008d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2180      	movs	r1, #128	; 0x80
 8008806:	0109      	lsls	r1, r1, #4
 8008808:	430a      	orrs	r2, r1
 800880a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4954      	ldr	r1, [pc, #336]	; (8008968 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008818:	400a      	ands	r2, r1
 800881a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6999      	ldr	r1, [r3, #24]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	021a      	lsls	r2, r3, #8
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	619a      	str	r2, [r3, #24]
      break;
 8008830:	e08c      	b.n	800894c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0011      	movs	r1, r2
 800883a:	0018      	movs	r0, r3
 800883c:	f000 fb10 	bl	8008e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2108      	movs	r1, #8
 800884c:	430a      	orrs	r2, r1
 800884e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	69da      	ldr	r2, [r3, #28]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2104      	movs	r1, #4
 800885c:	438a      	bics	r2, r1
 800885e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69d9      	ldr	r1, [r3, #28]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	61da      	str	r2, [r3, #28]
      break;
 8008872:	e06b      	b.n	800894c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	0011      	movs	r1, r2
 800887c:	0018      	movs	r0, r3
 800887e:	f000 fb77 	bl	8008f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2180      	movs	r1, #128	; 0x80
 800888e:	0109      	lsls	r1, r1, #4
 8008890:	430a      	orrs	r2, r1
 8008892:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69da      	ldr	r2, [r3, #28]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4932      	ldr	r1, [pc, #200]	; (8008968 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80088a0:	400a      	ands	r2, r1
 80088a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69d9      	ldr	r1, [r3, #28]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	021a      	lsls	r2, r3, #8
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	61da      	str	r2, [r3, #28]
      break;
 80088b8:	e048      	b.n	800894c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	0011      	movs	r1, r2
 80088c2:	0018      	movs	r0, r3
 80088c4:	f000 fbbe 	bl	8009044 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2108      	movs	r1, #8
 80088d4:	430a      	orrs	r2, r1
 80088d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2104      	movs	r1, #4
 80088e4:	438a      	bics	r2, r1
 80088e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088fa:	e027      	b.n	800894c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	0011      	movs	r1, r2
 8008904:	0018      	movs	r0, r3
 8008906:	f000 fbfd 	bl	8009104 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	0109      	lsls	r1, r1, #4
 8008918:	430a      	orrs	r2, r1
 800891a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4910      	ldr	r1, [pc, #64]	; (8008968 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008928:	400a      	ands	r2, r1
 800892a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	021a      	lsls	r2, r3, #8
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008940:	e004      	b.n	800894c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008942:	2317      	movs	r3, #23
 8008944:	18fb      	adds	r3, r7, r3
 8008946:	2201      	movs	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
      break;
 800894a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	223c      	movs	r2, #60	; 0x3c
 8008950:	2100      	movs	r1, #0
 8008952:	5499      	strb	r1, [r3, r2]

  return status;
 8008954:	2317      	movs	r3, #23
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	781b      	ldrb	r3, [r3, #0]
}
 800895a:	0018      	movs	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	b006      	add	sp, #24
 8008960:	bd80      	pop	{r7, pc}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	0800ff9c 	.word	0x0800ff9c
 8008968:	fffffbff 	.word	0xfffffbff

0800896c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008976:	230f      	movs	r3, #15
 8008978:	18fb      	adds	r3, r7, r3
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	223c      	movs	r2, #60	; 0x3c
 8008982:	5c9b      	ldrb	r3, [r3, r2]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_TIM_ConfigClockSource+0x20>
 8008988:	2302      	movs	r3, #2
 800898a:	e0bc      	b.n	8008b06 <HAL_TIM_ConfigClockSource+0x19a>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	223c      	movs	r2, #60	; 0x3c
 8008990:	2101      	movs	r1, #1
 8008992:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	223d      	movs	r2, #61	; 0x3d
 8008998:	2102      	movs	r1, #2
 800899a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4a5a      	ldr	r2, [pc, #360]	; (8008b10 <HAL_TIM_ConfigClockSource+0x1a4>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4a59      	ldr	r2, [pc, #356]	; (8008b14 <HAL_TIM_ConfigClockSource+0x1a8>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2280      	movs	r2, #128	; 0x80
 80089c2:	0192      	lsls	r2, r2, #6
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d040      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0xde>
 80089c8:	2280      	movs	r2, #128	; 0x80
 80089ca:	0192      	lsls	r2, r2, #6
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d900      	bls.n	80089d2 <HAL_TIM_ConfigClockSource+0x66>
 80089d0:	e088      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 80089d2:	2280      	movs	r2, #128	; 0x80
 80089d4:	0152      	lsls	r2, r2, #5
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d100      	bne.n	80089dc <HAL_TIM_ConfigClockSource+0x70>
 80089da:	e088      	b.n	8008aee <HAL_TIM_ConfigClockSource+0x182>
 80089dc:	2280      	movs	r2, #128	; 0x80
 80089de:	0152      	lsls	r2, r2, #5
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d900      	bls.n	80089e6 <HAL_TIM_ConfigClockSource+0x7a>
 80089e4:	e07e      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 80089e6:	2b70      	cmp	r3, #112	; 0x70
 80089e8:	d018      	beq.n	8008a1c <HAL_TIM_ConfigClockSource+0xb0>
 80089ea:	d900      	bls.n	80089ee <HAL_TIM_ConfigClockSource+0x82>
 80089ec:	e07a      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 80089ee:	2b60      	cmp	r3, #96	; 0x60
 80089f0:	d04f      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0x126>
 80089f2:	d900      	bls.n	80089f6 <HAL_TIM_ConfigClockSource+0x8a>
 80089f4:	e076      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 80089f6:	2b50      	cmp	r3, #80	; 0x50
 80089f8:	d03b      	beq.n	8008a72 <HAL_TIM_ConfigClockSource+0x106>
 80089fa:	d900      	bls.n	80089fe <HAL_TIM_ConfigClockSource+0x92>
 80089fc:	e072      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d057      	beq.n	8008ab2 <HAL_TIM_ConfigClockSource+0x146>
 8008a02:	d900      	bls.n	8008a06 <HAL_TIM_ConfigClockSource+0x9a>
 8008a04:	e06e      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 8008a06:	2b30      	cmp	r3, #48	; 0x30
 8008a08:	d063      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x166>
 8008a0a:	d86b      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d060      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x166>
 8008a10:	d868      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d05d      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x166>
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d05b      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x166>
 8008a1a:	e063      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	6899      	ldr	r1, [r3, #8]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f000 fc4a 	bl	80092c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2277      	movs	r2, #119	; 0x77
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	609a      	str	r2, [r3, #8]
      break;
 8008a48:	e052      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6899      	ldr	r1, [r3, #8]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f000 fc33 	bl	80092c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2180      	movs	r1, #128	; 0x80
 8008a6a:	01c9      	lsls	r1, r1, #7
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	609a      	str	r2, [r3, #8]
      break;
 8008a70:	e03e      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	6859      	ldr	r1, [r3, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	001a      	movs	r2, r3
 8008a80:	f000 fba4 	bl	80091cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2150      	movs	r1, #80	; 0x50
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f000 fbfe 	bl	800928c <TIM_ITRx_SetConfig>
      break;
 8008a90:	e02e      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6818      	ldr	r0, [r3, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6859      	ldr	r1, [r3, #4]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	001a      	movs	r2, r3
 8008aa0:	f000 fbc2 	bl	8009228 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2160      	movs	r1, #96	; 0x60
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f000 fbee 	bl	800928c <TIM_ITRx_SetConfig>
      break;
 8008ab0:	e01e      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	001a      	movs	r2, r3
 8008ac0:	f000 fb84 	bl	80091cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2140      	movs	r1, #64	; 0x40
 8008aca:	0018      	movs	r0, r3
 8008acc:	f000 fbde 	bl	800928c <TIM_ITRx_SetConfig>
      break;
 8008ad0:	e00e      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	0019      	movs	r1, r3
 8008adc:	0010      	movs	r0, r2
 8008ade:	f000 fbd5 	bl	800928c <TIM_ITRx_SetConfig>
      break;
 8008ae2:	e005      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008ae4:	230f      	movs	r3, #15
 8008ae6:	18fb      	adds	r3, r7, r3
 8008ae8:	2201      	movs	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
      break;
 8008aec:	e000      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008aee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	223d      	movs	r2, #61	; 0x3d
 8008af4:	2101      	movs	r1, #1
 8008af6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	223c      	movs	r2, #60	; 0x3c
 8008afc:	2100      	movs	r1, #0
 8008afe:	5499      	strb	r1, [r3, r2]

  return status;
 8008b00:	230f      	movs	r3, #15
 8008b02:	18fb      	adds	r3, r7, r3
 8008b04:	781b      	ldrb	r3, [r3, #0]
}
 8008b06:	0018      	movs	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b004      	add	sp, #16
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	ffceff88 	.word	0xffceff88
 8008b14:	ffff00ff 	.word	0xffff00ff

08008b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b20:	46c0      	nop			; (mov r8, r8)
 8008b22:	46bd      	mov	sp, r7
 8008b24:	b002      	add	sp, #8
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b30:	46c0      	nop			; (mov r8, r8)
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b002      	add	sp, #8
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b40:	46c0      	nop			; (mov r8, r8)
 8008b42:	46bd      	mov	sp, r7
 8008b44:	b002      	add	sp, #8
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b50:	46c0      	nop			; (mov r8, r8)
 8008b52:	46bd      	mov	sp, r7
 8008b54:	b002      	add	sp, #8
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a2f      	ldr	r2, [pc, #188]	; (8008c28 <TIM_Base_SetConfig+0xd0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d003      	beq.n	8008b78 <TIM_Base_SetConfig+0x20>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a2e      	ldr	r2, [pc, #184]	; (8008c2c <TIM_Base_SetConfig+0xd4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d108      	bne.n	8008b8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2270      	movs	r2, #112	; 0x70
 8008b7c:	4393      	bics	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <TIM_Base_SetConfig+0xd0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d013      	beq.n	8008bba <TIM_Base_SetConfig+0x62>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a25      	ldr	r2, [pc, #148]	; (8008c2c <TIM_Base_SetConfig+0xd4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00f      	beq.n	8008bba <TIM_Base_SetConfig+0x62>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a24      	ldr	r2, [pc, #144]	; (8008c30 <TIM_Base_SetConfig+0xd8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00b      	beq.n	8008bba <TIM_Base_SetConfig+0x62>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a23      	ldr	r2, [pc, #140]	; (8008c34 <TIM_Base_SetConfig+0xdc>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d007      	beq.n	8008bba <TIM_Base_SetConfig+0x62>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a22      	ldr	r2, [pc, #136]	; (8008c38 <TIM_Base_SetConfig+0xe0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d003      	beq.n	8008bba <TIM_Base_SetConfig+0x62>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a21      	ldr	r2, [pc, #132]	; (8008c3c <TIM_Base_SetConfig+0xe4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d108      	bne.n	8008bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4a20      	ldr	r2, [pc, #128]	; (8008c40 <TIM_Base_SetConfig+0xe8>)
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2280      	movs	r2, #128	; 0x80
 8008bd0:	4393      	bics	r3, r2
 8008bd2:	001a      	movs	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a0c      	ldr	r2, [pc, #48]	; (8008c28 <TIM_Base_SetConfig+0xd0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00b      	beq.n	8008c12 <TIM_Base_SetConfig+0xba>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a0d      	ldr	r2, [pc, #52]	; (8008c34 <TIM_Base_SetConfig+0xdc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <TIM_Base_SetConfig+0xba>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a0c      	ldr	r2, [pc, #48]	; (8008c38 <TIM_Base_SetConfig+0xe0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_Base_SetConfig+0xba>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a0b      	ldr	r2, [pc, #44]	; (8008c3c <TIM_Base_SetConfig+0xe4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d103      	bne.n	8008c1a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	691a      	ldr	r2, [r3, #16]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	615a      	str	r2, [r3, #20]
}
 8008c20:	46c0      	nop			; (mov r8, r8)
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b004      	add	sp, #16
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40012c00 	.word	0x40012c00
 8008c2c:	40000400 	.word	0x40000400
 8008c30:	40002000 	.word	0x40002000
 8008c34:	40014000 	.word	0x40014000
 8008c38:	40014400 	.word	0x40014400
 8008c3c:	40014800 	.word	0x40014800
 8008c40:	fffffcff 	.word	0xfffffcff

08008c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	2201      	movs	r2, #1
 8008c54:	4393      	bics	r3, r2
 8008c56:	001a      	movs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4a32      	ldr	r2, [pc, #200]	; (8008d3c <TIM_OC1_SetConfig+0xf8>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	4393      	bics	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	4393      	bics	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a28      	ldr	r2, [pc, #160]	; (8008d40 <TIM_OC1_SetConfig+0xfc>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00b      	beq.n	8008cba <TIM_OC1_SetConfig+0x76>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a27      	ldr	r2, [pc, #156]	; (8008d44 <TIM_OC1_SetConfig+0x100>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d007      	beq.n	8008cba <TIM_OC1_SetConfig+0x76>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a26      	ldr	r2, [pc, #152]	; (8008d48 <TIM_OC1_SetConfig+0x104>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d003      	beq.n	8008cba <TIM_OC1_SetConfig+0x76>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a25      	ldr	r2, [pc, #148]	; (8008d4c <TIM_OC1_SetConfig+0x108>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d10c      	bne.n	8008cd4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	4393      	bics	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2204      	movs	r2, #4
 8008cd0:	4393      	bics	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a1a      	ldr	r2, [pc, #104]	; (8008d40 <TIM_OC1_SetConfig+0xfc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_OC1_SetConfig+0xb0>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a19      	ldr	r2, [pc, #100]	; (8008d44 <TIM_OC1_SetConfig+0x100>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_OC1_SetConfig+0xb0>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <TIM_OC1_SetConfig+0x104>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_OC1_SetConfig+0xb0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a17      	ldr	r2, [pc, #92]	; (8008d4c <TIM_OC1_SetConfig+0x108>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d111      	bne.n	8008d18 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <TIM_OC1_SetConfig+0x10c>)
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <TIM_OC1_SetConfig+0x110>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	621a      	str	r2, [r3, #32]
}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	46bd      	mov	sp, r7
 8008d36:	b006      	add	sp, #24
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	fffeff8f 	.word	0xfffeff8f
 8008d40:	40012c00 	.word	0x40012c00
 8008d44:	40014000 	.word	0x40014000
 8008d48:	40014400 	.word	0x40014400
 8008d4c:	40014800 	.word	0x40014800
 8008d50:	fffffeff 	.word	0xfffffeff
 8008d54:	fffffdff 	.word	0xfffffdff

08008d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	2210      	movs	r2, #16
 8008d68:	4393      	bics	r3, r2
 8008d6a:	001a      	movs	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a2e      	ldr	r2, [pc, #184]	; (8008e40 <TIM_OC2_SetConfig+0xe8>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4a2d      	ldr	r2, [pc, #180]	; (8008e44 <TIM_OC2_SetConfig+0xec>)
 8008d8e:	4013      	ands	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2220      	movs	r2, #32
 8008da2:	4393      	bics	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a24      	ldr	r2, [pc, #144]	; (8008e48 <TIM_OC2_SetConfig+0xf0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d10d      	bne.n	8008dd6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2280      	movs	r2, #128	; 0x80
 8008dbe:	4393      	bics	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	011b      	lsls	r3, r3, #4
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2240      	movs	r2, #64	; 0x40
 8008dd2:	4393      	bics	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	; (8008e48 <TIM_OC2_SetConfig+0xf0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00b      	beq.n	8008df6 <TIM_OC2_SetConfig+0x9e>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1a      	ldr	r2, [pc, #104]	; (8008e4c <TIM_OC2_SetConfig+0xf4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d007      	beq.n	8008df6 <TIM_OC2_SetConfig+0x9e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <TIM_OC2_SetConfig+0xf8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d003      	beq.n	8008df6 <TIM_OC2_SetConfig+0x9e>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a18      	ldr	r2, [pc, #96]	; (8008e54 <TIM_OC2_SetConfig+0xfc>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d113      	bne.n	8008e1e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <TIM_OC2_SetConfig+0x100>)
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	4a16      	ldr	r2, [pc, #88]	; (8008e5c <TIM_OC2_SetConfig+0x104>)
 8008e02:	4013      	ands	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	621a      	str	r2, [r3, #32]
}
 8008e38:	46c0      	nop			; (mov r8, r8)
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	b006      	add	sp, #24
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	feff8fff 	.word	0xfeff8fff
 8008e44:	fffffcff 	.word	0xfffffcff
 8008e48:	40012c00 	.word	0x40012c00
 8008e4c:	40014000 	.word	0x40014000
 8008e50:	40014400 	.word	0x40014400
 8008e54:	40014800 	.word	0x40014800
 8008e58:	fffffbff 	.word	0xfffffbff
 8008e5c:	fffff7ff 	.word	0xfffff7ff

08008e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	4a35      	ldr	r2, [pc, #212]	; (8008f44 <TIM_OC3_SetConfig+0xe4>)
 8008e70:	401a      	ands	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4a2f      	ldr	r2, [pc, #188]	; (8008f48 <TIM_OC3_SetConfig+0xe8>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2203      	movs	r2, #3
 8008e94:	4393      	bics	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <TIM_OC3_SetConfig+0xec>)
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	021b      	lsls	r3, r3, #8
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a25      	ldr	r2, [pc, #148]	; (8008f50 <TIM_OC3_SetConfig+0xf0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d10d      	bne.n	8008eda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4a24      	ldr	r2, [pc, #144]	; (8008f54 <TIM_OC3_SetConfig+0xf4>)
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	4a20      	ldr	r2, [pc, #128]	; (8008f58 <TIM_OC3_SetConfig+0xf8>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a1c      	ldr	r2, [pc, #112]	; (8008f50 <TIM_OC3_SetConfig+0xf0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00b      	beq.n	8008efa <TIM_OC3_SetConfig+0x9a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a1d      	ldr	r2, [pc, #116]	; (8008f5c <TIM_OC3_SetConfig+0xfc>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d007      	beq.n	8008efa <TIM_OC3_SetConfig+0x9a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <TIM_OC3_SetConfig+0x100>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d003      	beq.n	8008efa <TIM_OC3_SetConfig+0x9a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a1b      	ldr	r2, [pc, #108]	; (8008f64 <TIM_OC3_SetConfig+0x104>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d113      	bne.n	8008f22 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	4a1a      	ldr	r2, [pc, #104]	; (8008f68 <TIM_OC3_SetConfig+0x108>)
 8008efe:	4013      	ands	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	4a19      	ldr	r2, [pc, #100]	; (8008f6c <TIM_OC3_SetConfig+0x10c>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	621a      	str	r2, [r3, #32]
}
 8008f3c:	46c0      	nop			; (mov r8, r8)
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b006      	add	sp, #24
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	fffffeff 	.word	0xfffffeff
 8008f48:	fffeff8f 	.word	0xfffeff8f
 8008f4c:	fffffdff 	.word	0xfffffdff
 8008f50:	40012c00 	.word	0x40012c00
 8008f54:	fffff7ff 	.word	0xfffff7ff
 8008f58:	fffffbff 	.word	0xfffffbff
 8008f5c:	40014000 	.word	0x40014000
 8008f60:	40014400 	.word	0x40014400
 8008f64:	40014800 	.word	0x40014800
 8008f68:	ffffefff 	.word	0xffffefff
 8008f6c:	ffffdfff 	.word	0xffffdfff

08008f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	4a28      	ldr	r2, [pc, #160]	; (8009020 <TIM_OC4_SetConfig+0xb0>)
 8008f80:	401a      	ands	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4a22      	ldr	r2, [pc, #136]	; (8009024 <TIM_OC4_SetConfig+0xb4>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4a21      	ldr	r2, [pc, #132]	; (8009028 <TIM_OC4_SetConfig+0xb8>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	4a1d      	ldr	r2, [pc, #116]	; (800902c <TIM_OC4_SetConfig+0xbc>)
 8008fb8:	4013      	ands	r3, r2
 8008fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	031b      	lsls	r3, r3, #12
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a19      	ldr	r2, [pc, #100]	; (8009030 <TIM_OC4_SetConfig+0xc0>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00b      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x78>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a18      	ldr	r2, [pc, #96]	; (8009034 <TIM_OC4_SetConfig+0xc4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d007      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x78>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <TIM_OC4_SetConfig+0xc8>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d003      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x78>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a16      	ldr	r2, [pc, #88]	; (800903c <TIM_OC4_SetConfig+0xcc>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d109      	bne.n	8008ffc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4a15      	ldr	r2, [pc, #84]	; (8009040 <TIM_OC4_SetConfig+0xd0>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	019b      	lsls	r3, r3, #6
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	46bd      	mov	sp, r7
 800901a:	b006      	add	sp, #24
 800901c:	bd80      	pop	{r7, pc}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	ffffefff 	.word	0xffffefff
 8009024:	feff8fff 	.word	0xfeff8fff
 8009028:	fffffcff 	.word	0xfffffcff
 800902c:	ffffdfff 	.word	0xffffdfff
 8009030:	40012c00 	.word	0x40012c00
 8009034:	40014000 	.word	0x40014000
 8009038:	40014400 	.word	0x40014400
 800903c:	40014800 	.word	0x40014800
 8009040:	ffffbfff 	.word	0xffffbfff

08009044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	4a25      	ldr	r2, [pc, #148]	; (80090e8 <TIM_OC5_SetConfig+0xa4>)
 8009054:	401a      	ands	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4a1f      	ldr	r2, [pc, #124]	; (80090ec <TIM_OC5_SetConfig+0xa8>)
 8009070:	4013      	ands	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	4a1b      	ldr	r2, [pc, #108]	; (80090f0 <TIM_OC5_SetConfig+0xac>)
 8009082:	4013      	ands	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a17      	ldr	r2, [pc, #92]	; (80090f4 <TIM_OC5_SetConfig+0xb0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00b      	beq.n	80090b2 <TIM_OC5_SetConfig+0x6e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a16      	ldr	r2, [pc, #88]	; (80090f8 <TIM_OC5_SetConfig+0xb4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d007      	beq.n	80090b2 <TIM_OC5_SetConfig+0x6e>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a15      	ldr	r2, [pc, #84]	; (80090fc <TIM_OC5_SetConfig+0xb8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d003      	beq.n	80090b2 <TIM_OC5_SetConfig+0x6e>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a14      	ldr	r2, [pc, #80]	; (8009100 <TIM_OC5_SetConfig+0xbc>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d109      	bne.n	80090c6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	4a0c      	ldr	r2, [pc, #48]	; (80090e8 <TIM_OC5_SetConfig+0xa4>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	021b      	lsls	r3, r3, #8
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	621a      	str	r2, [r3, #32]
}
 80090e0:	46c0      	nop			; (mov r8, r8)
 80090e2:	46bd      	mov	sp, r7
 80090e4:	b006      	add	sp, #24
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	fffeffff 	.word	0xfffeffff
 80090ec:	fffeff8f 	.word	0xfffeff8f
 80090f0:	fffdffff 	.word	0xfffdffff
 80090f4:	40012c00 	.word	0x40012c00
 80090f8:	40014000 	.word	0x40014000
 80090fc:	40014400 	.word	0x40014400
 8009100:	40014800 	.word	0x40014800

08009104 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	4a26      	ldr	r2, [pc, #152]	; (80091ac <TIM_OC6_SetConfig+0xa8>)
 8009114:	401a      	ands	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a20      	ldr	r2, [pc, #128]	; (80091b0 <TIM_OC6_SetConfig+0xac>)
 8009130:	4013      	ands	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	4a1c      	ldr	r2, [pc, #112]	; (80091b4 <TIM_OC6_SetConfig+0xb0>)
 8009144:	4013      	ands	r3, r2
 8009146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	051b      	lsls	r3, r3, #20
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	4313      	orrs	r3, r2
 8009152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <TIM_OC6_SetConfig+0xb4>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00b      	beq.n	8009174 <TIM_OC6_SetConfig+0x70>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a17      	ldr	r2, [pc, #92]	; (80091bc <TIM_OC6_SetConfig+0xb8>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d007      	beq.n	8009174 <TIM_OC6_SetConfig+0x70>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a16      	ldr	r2, [pc, #88]	; (80091c0 <TIM_OC6_SetConfig+0xbc>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <TIM_OC6_SetConfig+0x70>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a15      	ldr	r2, [pc, #84]	; (80091c4 <TIM_OC6_SetConfig+0xc0>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d109      	bne.n	8009188 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <TIM_OC6_SetConfig+0xc4>)
 8009178:	4013      	ands	r3, r2
 800917a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	029b      	lsls	r3, r3, #10
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	621a      	str	r2, [r3, #32]
}
 80091a2:	46c0      	nop			; (mov r8, r8)
 80091a4:	46bd      	mov	sp, r7
 80091a6:	b006      	add	sp, #24
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	ffefffff 	.word	0xffefffff
 80091b0:	feff8fff 	.word	0xfeff8fff
 80091b4:	ffdfffff 	.word	0xffdfffff
 80091b8:	40012c00 	.word	0x40012c00
 80091bc:	40014000 	.word	0x40014000
 80091c0:	40014400 	.word	0x40014400
 80091c4:	40014800 	.word	0x40014800
 80091c8:	fffbffff 	.word	0xfffbffff

080091cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	2201      	movs	r2, #1
 80091e4:	4393      	bics	r3, r2
 80091e6:	001a      	movs	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	22f0      	movs	r2, #240	; 0xf0
 80091f6:	4393      	bics	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	4313      	orrs	r3, r2
 8009202:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	220a      	movs	r2, #10
 8009208:	4393      	bics	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	4313      	orrs	r3, r2
 8009212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	621a      	str	r2, [r3, #32]
}
 8009220:	46c0      	nop			; (mov r8, r8)
 8009222:	46bd      	mov	sp, r7
 8009224:	b006      	add	sp, #24
 8009226:	bd80      	pop	{r7, pc}

08009228 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	2210      	movs	r2, #16
 800923a:	4393      	bics	r3, r2
 800923c:	001a      	movs	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	4a0d      	ldr	r2, [pc, #52]	; (8009288 <TIM_TI2_ConfigInputStage+0x60>)
 8009252:	4013      	ands	r3, r2
 8009254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	031b      	lsls	r3, r3, #12
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4313      	orrs	r3, r2
 800925e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	22a0      	movs	r2, #160	; 0xa0
 8009264:	4393      	bics	r3, r2
 8009266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	4313      	orrs	r3, r2
 8009270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	46bd      	mov	sp, r7
 8009282:	b006      	add	sp, #24
 8009284:	bd80      	pop	{r7, pc}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	ffff0fff 	.word	0xffff0fff

0800928c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4a08      	ldr	r2, [pc, #32]	; (80092c0 <TIM_ITRx_SetConfig+0x34>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	2207      	movs	r2, #7
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	609a      	str	r2, [r3, #8]
}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b004      	add	sp, #16
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	ffcfff8f 	.word	0xffcfff8f

080092c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	4a09      	ldr	r2, [pc, #36]	; (8009300 <TIM_ETR_SetConfig+0x3c>)
 80092dc:	4013      	ands	r3, r2
 80092de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	021a      	lsls	r2, r3, #8
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	431a      	orrs	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	609a      	str	r2, [r3, #8]
}
 80092f8:	46c0      	nop			; (mov r8, r8)
 80092fa:	46bd      	mov	sp, r7
 80092fc:	b006      	add	sp, #24
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	ffff00ff 	.word	0xffff00ff

08009304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	221f      	movs	r2, #31
 8009314:	4013      	ands	r3, r2
 8009316:	2201      	movs	r2, #1
 8009318:	409a      	lsls	r2, r3
 800931a:	0013      	movs	r3, r2
 800931c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	43d2      	mvns	r2, r2
 8009326:	401a      	ands	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a1a      	ldr	r2, [r3, #32]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	211f      	movs	r1, #31
 8009334:	400b      	ands	r3, r1
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	4099      	lsls	r1, r3
 800933a:	000b      	movs	r3, r1
 800933c:	431a      	orrs	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	621a      	str	r2, [r3, #32]
}
 8009342:	46c0      	nop			; (mov r8, r8)
 8009344:	46bd      	mov	sp, r7
 8009346:	b006      	add	sp, #24
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	223c      	movs	r2, #60	; 0x3c
 800935a:	5c9b      	ldrb	r3, [r3, r2]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009360:	2302      	movs	r3, #2
 8009362:	e04f      	b.n	8009404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	223c      	movs	r2, #60	; 0x3c
 8009368:	2101      	movs	r1, #1
 800936a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	223d      	movs	r2, #61	; 0x3d
 8009370:	2102      	movs	r1, #2
 8009372:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a20      	ldr	r2, [pc, #128]	; (800940c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d108      	bne.n	80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4a1f      	ldr	r2, [pc, #124]	; (8009410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009392:	4013      	ands	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4313      	orrs	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2270      	movs	r2, #112	; 0x70
 80093a4:	4393      	bics	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a13      	ldr	r2, [pc, #76]	; (800940c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d009      	beq.n	80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a12      	ldr	r2, [pc, #72]	; (8009414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a11      	ldr	r2, [pc, #68]	; (8009418 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d10c      	bne.n	80093f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2280      	movs	r2, #128	; 0x80
 80093dc:	4393      	bics	r3, r2
 80093de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	223d      	movs	r2, #61	; 0x3d
 80093f6:	2101      	movs	r1, #1
 80093f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	223c      	movs	r2, #60	; 0x3c
 80093fe:	2100      	movs	r1, #0
 8009400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	0018      	movs	r0, r3
 8009406:	46bd      	mov	sp, r7
 8009408:	b004      	add	sp, #16
 800940a:	bd80      	pop	{r7, pc}
 800940c:	40012c00 	.word	0x40012c00
 8009410:	ff0fffff 	.word	0xff0fffff
 8009414:	40000400 	.word	0x40000400
 8009418:	40014000 	.word	0x40014000

0800941c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009424:	46c0      	nop			; (mov r8, r8)
 8009426:	46bd      	mov	sp, r7
 8009428:	b002      	add	sp, #8
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009434:	46c0      	nop			; (mov r8, r8)
 8009436:	46bd      	mov	sp, r7
 8009438:	b002      	add	sp, #8
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009444:	46c0      	nop			; (mov r8, r8)
 8009446:	46bd      	mov	sp, r7
 8009448:	b002      	add	sp, #8
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e046      	b.n	80094ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2288      	movs	r2, #136	; 0x88
 8009462:	589b      	ldr	r3, [r3, r2]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d107      	bne.n	8009478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2284      	movs	r2, #132	; 0x84
 800946c:	2100      	movs	r1, #0
 800946e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	0018      	movs	r0, r3
 8009474:	f7fc fcec 	bl	8005e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2288      	movs	r2, #136	; 0x88
 800947c:	2124      	movs	r1, #36	; 0x24
 800947e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2101      	movs	r1, #1
 800948c:	438a      	bics	r2, r1
 800948e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	0018      	movs	r0, r3
 8009494:	f000 fc66 	bl	8009d64 <UART_SetConfig>
 8009498:	0003      	movs	r3, r0
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e024      	b.n	80094ec <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	0018      	movs	r0, r3
 80094ae:	f000 fdfd 	bl	800a0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	490d      	ldr	r1, [pc, #52]	; (80094f4 <HAL_UART_Init+0xa8>)
 80094be:	400a      	ands	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	212a      	movs	r1, #42	; 0x2a
 80094ce:	438a      	bics	r2, r1
 80094d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2101      	movs	r1, #1
 80094de:	430a      	orrs	r2, r1
 80094e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	0018      	movs	r0, r3
 80094e6:	f000 fe95 	bl	800a214 <UART_CheckIdleState>
 80094ea:	0003      	movs	r3, r0
}
 80094ec:	0018      	movs	r0, r3
 80094ee:	46bd      	mov	sp, r7
 80094f0:	b002      	add	sp, #8
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	ffffb7ff 	.word	0xffffb7ff

080094f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08a      	sub	sp, #40	; 0x28
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	1dbb      	adds	r3, r7, #6
 8009506:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2288      	movs	r2, #136	; 0x88
 800950c:	589b      	ldr	r3, [r3, r2]
 800950e:	2b20      	cmp	r3, #32
 8009510:	d000      	beq.n	8009514 <HAL_UART_Transmit+0x1c>
 8009512:	e088      	b.n	8009626 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_UART_Transmit+0x2a>
 800951a:	1dbb      	adds	r3, r7, #6
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e080      	b.n	8009628 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	2380      	movs	r3, #128	; 0x80
 800952c:	015b      	lsls	r3, r3, #5
 800952e:	429a      	cmp	r2, r3
 8009530:	d109      	bne.n	8009546 <HAL_UART_Transmit+0x4e>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d105      	bne.n	8009546 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2201      	movs	r2, #1
 800953e:	4013      	ands	r3, r2
 8009540:	d001      	beq.n	8009546 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e070      	b.n	8009628 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2290      	movs	r2, #144	; 0x90
 800954a:	2100      	movs	r1, #0
 800954c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2288      	movs	r2, #136	; 0x88
 8009552:	2121      	movs	r1, #33	; 0x21
 8009554:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009556:	f7fc fecd 	bl	80062f4 <HAL_GetTick>
 800955a:	0003      	movs	r3, r0
 800955c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1dba      	adds	r2, r7, #6
 8009562:	2154      	movs	r1, #84	; 0x54
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	1dba      	adds	r2, r7, #6
 800956c:	2156      	movs	r1, #86	; 0x56
 800956e:	8812      	ldrh	r2, [r2, #0]
 8009570:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	2380      	movs	r3, #128	; 0x80
 8009578:	015b      	lsls	r3, r3, #5
 800957a:	429a      	cmp	r2, r3
 800957c:	d108      	bne.n	8009590 <HAL_UART_Transmit+0x98>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d104      	bne.n	8009590 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	e003      	b.n	8009598 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009594:	2300      	movs	r3, #0
 8009596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009598:	e02c      	b.n	80095f4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	0013      	movs	r3, r2
 80095a4:	2200      	movs	r2, #0
 80095a6:	2180      	movs	r1, #128	; 0x80
 80095a8:	f000 fe82 	bl	800a2b0 <UART_WaitOnFlagUntilTimeout>
 80095ac:	1e03      	subs	r3, r0, #0
 80095ae:	d001      	beq.n	80095b4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e039      	b.n	8009628 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10b      	bne.n	80095d2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	001a      	movs	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	05d2      	lsls	r2, r2, #23
 80095c6:	0dd2      	lsrs	r2, r2, #23
 80095c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	3302      	adds	r3, #2
 80095ce:	61bb      	str	r3, [r7, #24]
 80095d0:	e007      	b.n	80095e2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	781a      	ldrb	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	3301      	adds	r3, #1
 80095e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2256      	movs	r2, #86	; 0x56
 80095e6:	5a9b      	ldrh	r3, [r3, r2]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b299      	uxth	r1, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2256      	movs	r2, #86	; 0x56
 80095f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2256      	movs	r2, #86	; 0x56
 80095f8:	5a9b      	ldrh	r3, [r3, r2]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1cc      	bne.n	800959a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	0013      	movs	r3, r2
 800960a:	2200      	movs	r2, #0
 800960c:	2140      	movs	r1, #64	; 0x40
 800960e:	f000 fe4f 	bl	800a2b0 <UART_WaitOnFlagUntilTimeout>
 8009612:	1e03      	subs	r3, r0, #0
 8009614:	d001      	beq.n	800961a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e006      	b.n	8009628 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2288      	movs	r2, #136	; 0x88
 800961e:	2120      	movs	r1, #32
 8009620:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	e000      	b.n	8009628 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8009626:	2302      	movs	r3, #2
  }
}
 8009628:	0018      	movs	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	b008      	add	sp, #32
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	1dbb      	adds	r3, r7, #6
 800963c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	228c      	movs	r2, #140	; 0x8c
 8009642:	589b      	ldr	r3, [r3, r2]
 8009644:	2b20      	cmp	r3, #32
 8009646:	d145      	bne.n	80096d4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_UART_Receive_IT+0x26>
 800964e:	1dbb      	adds	r3, r7, #6
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e03d      	b.n	80096d6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	689a      	ldr	r2, [r3, #8]
 800965e:	2380      	movs	r3, #128	; 0x80
 8009660:	015b      	lsls	r3, r3, #5
 8009662:	429a      	cmp	r2, r3
 8009664:	d109      	bne.n	800967a <HAL_UART_Receive_IT+0x4a>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d105      	bne.n	800967a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2201      	movs	r2, #1
 8009672:	4013      	ands	r3, r2
 8009674:	d001      	beq.n	800967a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e02d      	b.n	80096d6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	2380      	movs	r3, #128	; 0x80
 8009688:	041b      	lsls	r3, r3, #16
 800968a:	4013      	ands	r3, r2
 800968c:	d019      	beq.n	80096c2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968e:	f3ef 8310 	mrs	r3, PRIMASK
 8009692:	613b      	str	r3, [r7, #16]
  return(result);
 8009694:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	2301      	movs	r3, #1
 800969a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f383 8810 	msr	PRIMASK, r3
}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2180      	movs	r1, #128	; 0x80
 80096b0:	04c9      	lsls	r1, r1, #19
 80096b2:	430a      	orrs	r2, r1
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	f383 8810 	msr	PRIMASK, r3
}
 80096c0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80096c2:	1dbb      	adds	r3, r7, #6
 80096c4:	881a      	ldrh	r2, [r3, #0]
 80096c6:	68b9      	ldr	r1, [r7, #8]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	0018      	movs	r0, r3
 80096cc:	f000 feb8 	bl	800a440 <UART_Start_Receive_IT>
 80096d0:	0003      	movs	r3, r0
 80096d2:	e000      	b.n	80096d6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80096d4:	2302      	movs	r3, #2
  }
}
 80096d6:	0018      	movs	r0, r3
 80096d8:	46bd      	mov	sp, r7
 80096da:	b008      	add	sp, #32
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096e0:	b5b0      	push	{r4, r5, r7, lr}
 80096e2:	b0aa      	sub	sp, #168	; 0xa8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	22a4      	movs	r2, #164	; 0xa4
 80096f0:	18b9      	adds	r1, r7, r2
 80096f2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	20a0      	movs	r0, #160	; 0xa0
 80096fc:	1839      	adds	r1, r7, r0
 80096fe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	249c      	movs	r4, #156	; 0x9c
 8009708:	1939      	adds	r1, r7, r4
 800970a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800970c:	0011      	movs	r1, r2
 800970e:	18bb      	adds	r3, r7, r2
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4aa2      	ldr	r2, [pc, #648]	; (800999c <HAL_UART_IRQHandler+0x2bc>)
 8009714:	4013      	ands	r3, r2
 8009716:	2298      	movs	r2, #152	; 0x98
 8009718:	18bd      	adds	r5, r7, r2
 800971a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800971c:	18bb      	adds	r3, r7, r2
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d11a      	bne.n	800975a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009724:	187b      	adds	r3, r7, r1
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2220      	movs	r2, #32
 800972a:	4013      	ands	r3, r2
 800972c:	d015      	beq.n	800975a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800972e:	183b      	adds	r3, r7, r0
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2220      	movs	r2, #32
 8009734:	4013      	ands	r3, r2
 8009736:	d105      	bne.n	8009744 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009738:	193b      	adds	r3, r7, r4
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	2380      	movs	r3, #128	; 0x80
 800973e:	055b      	lsls	r3, r3, #21
 8009740:	4013      	ands	r3, r2
 8009742:	d00a      	beq.n	800975a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009748:	2b00      	cmp	r3, #0
 800974a:	d100      	bne.n	800974e <HAL_UART_IRQHandler+0x6e>
 800974c:	e2dc      	b.n	8009d08 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	0010      	movs	r0, r2
 8009756:	4798      	blx	r3
      }
      return;
 8009758:	e2d6      	b.n	8009d08 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800975a:	2398      	movs	r3, #152	; 0x98
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d100      	bne.n	8009766 <HAL_UART_IRQHandler+0x86>
 8009764:	e122      	b.n	80099ac <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009766:	239c      	movs	r3, #156	; 0x9c
 8009768:	18fb      	adds	r3, r7, r3
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a8c      	ldr	r2, [pc, #560]	; (80099a0 <HAL_UART_IRQHandler+0x2c0>)
 800976e:	4013      	ands	r3, r2
 8009770:	d106      	bne.n	8009780 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009772:	23a0      	movs	r3, #160	; 0xa0
 8009774:	18fb      	adds	r3, r7, r3
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a8a      	ldr	r2, [pc, #552]	; (80099a4 <HAL_UART_IRQHandler+0x2c4>)
 800977a:	4013      	ands	r3, r2
 800977c:	d100      	bne.n	8009780 <HAL_UART_IRQHandler+0xa0>
 800977e:	e115      	b.n	80099ac <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009780:	23a4      	movs	r3, #164	; 0xa4
 8009782:	18fb      	adds	r3, r7, r3
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2201      	movs	r2, #1
 8009788:	4013      	ands	r3, r2
 800978a:	d012      	beq.n	80097b2 <HAL_UART_IRQHandler+0xd2>
 800978c:	23a0      	movs	r3, #160	; 0xa0
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	2380      	movs	r3, #128	; 0x80
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	4013      	ands	r3, r2
 8009798:	d00b      	beq.n	80097b2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2201      	movs	r2, #1
 80097a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2290      	movs	r2, #144	; 0x90
 80097a6:	589b      	ldr	r3, [r3, r2]
 80097a8:	2201      	movs	r2, #1
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2190      	movs	r1, #144	; 0x90
 80097b0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097b2:	23a4      	movs	r3, #164	; 0xa4
 80097b4:	18fb      	adds	r3, r7, r3
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2202      	movs	r2, #2
 80097ba:	4013      	ands	r3, r2
 80097bc:	d011      	beq.n	80097e2 <HAL_UART_IRQHandler+0x102>
 80097be:	239c      	movs	r3, #156	; 0x9c
 80097c0:	18fb      	adds	r3, r7, r3
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2201      	movs	r2, #1
 80097c6:	4013      	ands	r3, r2
 80097c8:	d00b      	beq.n	80097e2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2202      	movs	r2, #2
 80097d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2290      	movs	r2, #144	; 0x90
 80097d6:	589b      	ldr	r3, [r3, r2]
 80097d8:	2204      	movs	r2, #4
 80097da:	431a      	orrs	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2190      	movs	r1, #144	; 0x90
 80097e0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097e2:	23a4      	movs	r3, #164	; 0xa4
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2204      	movs	r2, #4
 80097ea:	4013      	ands	r3, r2
 80097ec:	d011      	beq.n	8009812 <HAL_UART_IRQHandler+0x132>
 80097ee:	239c      	movs	r3, #156	; 0x9c
 80097f0:	18fb      	adds	r3, r7, r3
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2201      	movs	r2, #1
 80097f6:	4013      	ands	r3, r2
 80097f8:	d00b      	beq.n	8009812 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2204      	movs	r2, #4
 8009800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2290      	movs	r2, #144	; 0x90
 8009806:	589b      	ldr	r3, [r3, r2]
 8009808:	2202      	movs	r2, #2
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2190      	movs	r1, #144	; 0x90
 8009810:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009812:	23a4      	movs	r3, #164	; 0xa4
 8009814:	18fb      	adds	r3, r7, r3
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2208      	movs	r2, #8
 800981a:	4013      	ands	r3, r2
 800981c:	d017      	beq.n	800984e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800981e:	23a0      	movs	r3, #160	; 0xa0
 8009820:	18fb      	adds	r3, r7, r3
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2220      	movs	r2, #32
 8009826:	4013      	ands	r3, r2
 8009828:	d105      	bne.n	8009836 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800982a:	239c      	movs	r3, #156	; 0x9c
 800982c:	18fb      	adds	r3, r7, r3
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a5b      	ldr	r2, [pc, #364]	; (80099a0 <HAL_UART_IRQHandler+0x2c0>)
 8009832:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009834:	d00b      	beq.n	800984e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2208      	movs	r2, #8
 800983c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2290      	movs	r2, #144	; 0x90
 8009842:	589b      	ldr	r3, [r3, r2]
 8009844:	2208      	movs	r2, #8
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2190      	movs	r1, #144	; 0x90
 800984c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800984e:	23a4      	movs	r3, #164	; 0xa4
 8009850:	18fb      	adds	r3, r7, r3
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	2380      	movs	r3, #128	; 0x80
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	4013      	ands	r3, r2
 800985a:	d013      	beq.n	8009884 <HAL_UART_IRQHandler+0x1a4>
 800985c:	23a0      	movs	r3, #160	; 0xa0
 800985e:	18fb      	adds	r3, r7, r3
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	2380      	movs	r3, #128	; 0x80
 8009864:	04db      	lsls	r3, r3, #19
 8009866:	4013      	ands	r3, r2
 8009868:	d00c      	beq.n	8009884 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2280      	movs	r2, #128	; 0x80
 8009870:	0112      	lsls	r2, r2, #4
 8009872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2290      	movs	r2, #144	; 0x90
 8009878:	589b      	ldr	r3, [r3, r2]
 800987a:	2220      	movs	r2, #32
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2190      	movs	r1, #144	; 0x90
 8009882:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2290      	movs	r2, #144	; 0x90
 8009888:	589b      	ldr	r3, [r3, r2]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d100      	bne.n	8009890 <HAL_UART_IRQHandler+0x1b0>
 800988e:	e23d      	b.n	8009d0c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009890:	23a4      	movs	r3, #164	; 0xa4
 8009892:	18fb      	adds	r3, r7, r3
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2220      	movs	r2, #32
 8009898:	4013      	ands	r3, r2
 800989a:	d015      	beq.n	80098c8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800989c:	23a0      	movs	r3, #160	; 0xa0
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2220      	movs	r2, #32
 80098a4:	4013      	ands	r3, r2
 80098a6:	d106      	bne.n	80098b6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098a8:	239c      	movs	r3, #156	; 0x9c
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	2380      	movs	r3, #128	; 0x80
 80098b0:	055b      	lsls	r3, r3, #21
 80098b2:	4013      	ands	r3, r2
 80098b4:	d008      	beq.n	80098c8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	0010      	movs	r0, r2
 80098c6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2290      	movs	r2, #144	; 0x90
 80098cc:	589b      	ldr	r3, [r3, r2]
 80098ce:	2194      	movs	r1, #148	; 0x94
 80098d0:	187a      	adds	r2, r7, r1
 80098d2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	2240      	movs	r2, #64	; 0x40
 80098dc:	4013      	ands	r3, r2
 80098de:	2b40      	cmp	r3, #64	; 0x40
 80098e0:	d004      	beq.n	80098ec <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098e2:	187b      	adds	r3, r7, r1
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2228      	movs	r2, #40	; 0x28
 80098e8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ea:	d04c      	beq.n	8009986 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	0018      	movs	r0, r3
 80098f0:	f000 feca 	bl	800a688 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	2240      	movs	r2, #64	; 0x40
 80098fc:	4013      	ands	r3, r2
 80098fe:	2b40      	cmp	r3, #64	; 0x40
 8009900:	d13c      	bne.n	800997c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009902:	f3ef 8310 	mrs	r3, PRIMASK
 8009906:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800990a:	2090      	movs	r0, #144	; 0x90
 800990c:	183a      	adds	r2, r7, r0
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	2301      	movs	r3, #1
 8009912:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009916:	f383 8810 	msr	PRIMASK, r3
}
 800991a:	46c0      	nop			; (mov r8, r8)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2140      	movs	r1, #64	; 0x40
 8009928:	438a      	bics	r2, r1
 800992a:	609a      	str	r2, [r3, #8]
 800992c:	183b      	adds	r3, r7, r0
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009934:	f383 8810 	msr	PRIMASK, r3
}
 8009938:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2280      	movs	r2, #128	; 0x80
 800993e:	589b      	ldr	r3, [r3, r2]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d016      	beq.n	8009972 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2280      	movs	r2, #128	; 0x80
 8009948:	589b      	ldr	r3, [r3, r2]
 800994a:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <HAL_UART_IRQHandler+0x2c8>)
 800994c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2280      	movs	r2, #128	; 0x80
 8009952:	589b      	ldr	r3, [r3, r2]
 8009954:	0018      	movs	r0, r3
 8009956:	f7fc fe3b 	bl	80065d0 <HAL_DMA_Abort_IT>
 800995a:	1e03      	subs	r3, r0, #0
 800995c:	d01c      	beq.n	8009998 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2280      	movs	r2, #128	; 0x80
 8009962:	589b      	ldr	r3, [r3, r2]
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	2180      	movs	r1, #128	; 0x80
 800996a:	5852      	ldr	r2, [r2, r1]
 800996c:	0010      	movs	r0, r2
 800996e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009970:	e012      	b.n	8009998 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	0018      	movs	r0, r3
 8009976:	f000 f9e1 	bl	8009d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997a:	e00d      	b.n	8009998 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	0018      	movs	r0, r3
 8009980:	f000 f9dc 	bl	8009d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009984:	e008      	b.n	8009998 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	0018      	movs	r0, r3
 800998a:	f000 f9d7 	bl	8009d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2290      	movs	r2, #144	; 0x90
 8009992:	2100      	movs	r1, #0
 8009994:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009996:	e1b9      	b.n	8009d0c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009998:	46c0      	nop			; (mov r8, r8)
    return;
 800999a:	e1b7      	b.n	8009d0c <HAL_UART_IRQHandler+0x62c>
 800999c:	0000080f 	.word	0x0000080f
 80099a0:	10000001 	.word	0x10000001
 80099a4:	04000120 	.word	0x04000120
 80099a8:	0800a755 	.word	0x0800a755

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d000      	beq.n	80099b6 <HAL_UART_IRQHandler+0x2d6>
 80099b4:	e13e      	b.n	8009c34 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099b6:	23a4      	movs	r3, #164	; 0xa4
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2210      	movs	r2, #16
 80099be:	4013      	ands	r3, r2
 80099c0:	d100      	bne.n	80099c4 <HAL_UART_IRQHandler+0x2e4>
 80099c2:	e137      	b.n	8009c34 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099c4:	23a0      	movs	r3, #160	; 0xa0
 80099c6:	18fb      	adds	r3, r7, r3
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2210      	movs	r2, #16
 80099cc:	4013      	ands	r3, r2
 80099ce:	d100      	bne.n	80099d2 <HAL_UART_IRQHandler+0x2f2>
 80099d0:	e130      	b.n	8009c34 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2210      	movs	r2, #16
 80099d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2240      	movs	r2, #64	; 0x40
 80099e2:	4013      	ands	r3, r2
 80099e4:	2b40      	cmp	r3, #64	; 0x40
 80099e6:	d000      	beq.n	80099ea <HAL_UART_IRQHandler+0x30a>
 80099e8:	e0a4      	b.n	8009b34 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2280      	movs	r2, #128	; 0x80
 80099ee:	589b      	ldr	r3, [r3, r2]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	217e      	movs	r1, #126	; 0x7e
 80099f6:	187b      	adds	r3, r7, r1
 80099f8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80099fa:	187b      	adds	r3, r7, r1
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d100      	bne.n	8009a04 <HAL_UART_IRQHandler+0x324>
 8009a02:	e185      	b.n	8009d10 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	225c      	movs	r2, #92	; 0x5c
 8009a08:	5a9b      	ldrh	r3, [r3, r2]
 8009a0a:	187a      	adds	r2, r7, r1
 8009a0c:	8812      	ldrh	r2, [r2, #0]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d300      	bcc.n	8009a14 <HAL_UART_IRQHandler+0x334>
 8009a12:	e17d      	b.n	8009d10 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	187a      	adds	r2, r7, r1
 8009a18:	215e      	movs	r1, #94	; 0x5e
 8009a1a:	8812      	ldrh	r2, [r2, #0]
 8009a1c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2280      	movs	r2, #128	; 0x80
 8009a22:	589b      	ldr	r3, [r3, r2]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2220      	movs	r2, #32
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	d170      	bne.n	8009b10 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a36:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a38:	2301      	movs	r3, #1
 8009a3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3e:	f383 8810 	msr	PRIMASK, r3
}
 8009a42:	46c0      	nop			; (mov r8, r8)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	49b4      	ldr	r1, [pc, #720]	; (8009d20 <HAL_UART_IRQHandler+0x640>)
 8009a50:	400a      	ands	r2, r1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5a:	f383 8810 	msr	PRIMASK, r3
}
 8009a5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a60:	f3ef 8310 	mrs	r3, PRIMASK
 8009a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a68:	677b      	str	r3, [r7, #116]	; 0x74
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a70:	f383 8810 	msr	PRIMASK, r3
}
 8009a74:	46c0      	nop			; (mov r8, r8)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2101      	movs	r1, #1
 8009a82:	438a      	bics	r2, r1
 8009a84:	609a      	str	r2, [r3, #8]
 8009a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a8c:	f383 8810 	msr	PRIMASK, r3
}
 8009a90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a92:	f3ef 8310 	mrs	r3, PRIMASK
 8009a96:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa2:	f383 8810 	msr	PRIMASK, r3
}
 8009aa6:	46c0      	nop			; (mov r8, r8)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2140      	movs	r1, #64	; 0x40
 8009ab4:	438a      	bics	r2, r1
 8009ab6:	609a      	str	r2, [r3, #8]
 8009ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009abe:	f383 8810 	msr	PRIMASK, r3
}
 8009ac2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	228c      	movs	r2, #140	; 0x8c
 8009ac8:	2120      	movs	r1, #32
 8009aca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8009ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009adc:	2301      	movs	r3, #1
 8009ade:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ae2:	f383 8810 	msr	PRIMASK, r3
}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2110      	movs	r1, #16
 8009af4:	438a      	bics	r2, r1
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009afe:	f383 8810 	msr	PRIMASK, r3
}
 8009b02:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2280      	movs	r2, #128	; 0x80
 8009b08:	589b      	ldr	r3, [r3, r2]
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f7fc fcfe 	bl	800650c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	225c      	movs	r2, #92	; 0x5c
 8009b1a:	5a9a      	ldrh	r2, [r3, r2]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	215e      	movs	r1, #94	; 0x5e
 8009b20:	5a5b      	ldrh	r3, [r3, r1]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	0011      	movs	r1, r2
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f000 f90d 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b32:	e0ed      	b.n	8009d10 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	225c      	movs	r2, #92	; 0x5c
 8009b38:	5a99      	ldrh	r1, [r3, r2]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	225e      	movs	r2, #94	; 0x5e
 8009b3e:	5a9b      	ldrh	r3, [r3, r2]
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	208e      	movs	r0, #142	; 0x8e
 8009b44:	183b      	adds	r3, r7, r0
 8009b46:	1a8a      	subs	r2, r1, r2
 8009b48:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	225e      	movs	r2, #94	; 0x5e
 8009b4e:	5a9b      	ldrh	r3, [r3, r2]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d100      	bne.n	8009b58 <HAL_UART_IRQHandler+0x478>
 8009b56:	e0dd      	b.n	8009d14 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8009b58:	183b      	adds	r3, r7, r0
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d100      	bne.n	8009b62 <HAL_UART_IRQHandler+0x482>
 8009b60:	e0d8      	b.n	8009d14 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b62:	f3ef 8310 	mrs	r3, PRIMASK
 8009b66:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b68:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b6a:	2488      	movs	r4, #136	; 0x88
 8009b6c:	193a      	adds	r2, r7, r4
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	2301      	movs	r3, #1
 8009b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f383 8810 	msr	PRIMASK, r3
}
 8009b7a:	46c0      	nop			; (mov r8, r8)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4967      	ldr	r1, [pc, #412]	; (8009d24 <HAL_UART_IRQHandler+0x644>)
 8009b88:	400a      	ands	r2, r1
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	193b      	adds	r3, r7, r4
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f383 8810 	msr	PRIMASK, r3
}
 8009b98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ba0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ba2:	2484      	movs	r4, #132	; 0x84
 8009ba4:	193a      	adds	r2, r7, r4
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	2301      	movs	r3, #1
 8009baa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	f383 8810 	msr	PRIMASK, r3
}
 8009bb2:	46c0      	nop			; (mov r8, r8)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	689a      	ldr	r2, [r3, #8]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	495a      	ldr	r1, [pc, #360]	; (8009d28 <HAL_UART_IRQHandler+0x648>)
 8009bc0:	400a      	ands	r2, r1
 8009bc2:	609a      	str	r2, [r3, #8]
 8009bc4:	193b      	adds	r3, r7, r4
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	f383 8810 	msr	PRIMASK, r3
}
 8009bd0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	228c      	movs	r2, #140	; 0x8c
 8009bd6:	2120      	movs	r1, #32
 8009bd8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009be6:	f3ef 8310 	mrs	r3, PRIMASK
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bee:	2480      	movs	r4, #128	; 0x80
 8009bf0:	193a      	adds	r2, r7, r4
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	f383 8810 	msr	PRIMASK, r3
}
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2110      	movs	r1, #16
 8009c0c:	438a      	bics	r2, r1
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	193b      	adds	r3, r7, r4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c18:	f383 8810 	msr	PRIMASK, r3
}
 8009c1c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2202      	movs	r2, #2
 8009c22:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c24:	183b      	adds	r3, r7, r0
 8009c26:	881a      	ldrh	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	0011      	movs	r1, r2
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f000 f88d 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c32:	e06f      	b.n	8009d14 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c34:	23a4      	movs	r3, #164	; 0xa4
 8009c36:	18fb      	adds	r3, r7, r3
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	2380      	movs	r3, #128	; 0x80
 8009c3c:	035b      	lsls	r3, r3, #13
 8009c3e:	4013      	ands	r3, r2
 8009c40:	d010      	beq.n	8009c64 <HAL_UART_IRQHandler+0x584>
 8009c42:	239c      	movs	r3, #156	; 0x9c
 8009c44:	18fb      	adds	r3, r7, r3
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	2380      	movs	r3, #128	; 0x80
 8009c4a:	03db      	lsls	r3, r3, #15
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	d009      	beq.n	8009c64 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2280      	movs	r2, #128	; 0x80
 8009c56:	0352      	lsls	r2, r2, #13
 8009c58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f001 fa1d 	bl	800b09c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c62:	e05a      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c64:	23a4      	movs	r3, #164	; 0xa4
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2280      	movs	r2, #128	; 0x80
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d016      	beq.n	8009c9e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c70:	23a0      	movs	r3, #160	; 0xa0
 8009c72:	18fb      	adds	r3, r7, r3
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2280      	movs	r2, #128	; 0x80
 8009c78:	4013      	ands	r3, r2
 8009c7a:	d106      	bne.n	8009c8a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c7c:	239c      	movs	r3, #156	; 0x9c
 8009c7e:	18fb      	adds	r3, r7, r3
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	2380      	movs	r3, #128	; 0x80
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	4013      	ands	r3, r2
 8009c88:	d009      	beq.n	8009c9e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d042      	beq.n	8009d18 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	0010      	movs	r0, r2
 8009c9a:	4798      	blx	r3
    }
    return;
 8009c9c:	e03c      	b.n	8009d18 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c9e:	23a4      	movs	r3, #164	; 0xa4
 8009ca0:	18fb      	adds	r3, r7, r3
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2240      	movs	r2, #64	; 0x40
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_UART_IRQHandler+0x5e0>
 8009caa:	23a0      	movs	r3, #160	; 0xa0
 8009cac:	18fb      	adds	r3, r7, r3
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2240      	movs	r2, #64	; 0x40
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	d004      	beq.n	8009cc0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	0018      	movs	r0, r3
 8009cba:	f000 fd62 	bl	800a782 <UART_EndTransmit_IT>
    return;
 8009cbe:	e02c      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cc0:	23a4      	movs	r3, #164	; 0xa4
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	2380      	movs	r3, #128	; 0x80
 8009cc8:	041b      	lsls	r3, r3, #16
 8009cca:	4013      	ands	r3, r2
 8009ccc:	d00b      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x606>
 8009cce:	23a0      	movs	r3, #160	; 0xa0
 8009cd0:	18fb      	adds	r3, r7, r3
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	2380      	movs	r3, #128	; 0x80
 8009cd6:	05db      	lsls	r3, r3, #23
 8009cd8:	4013      	ands	r3, r2
 8009cda:	d004      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f001 f9ec 	bl	800b0bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ce4:	e019      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ce6:	23a4      	movs	r3, #164	; 0xa4
 8009ce8:	18fb      	adds	r3, r7, r3
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	045b      	lsls	r3, r3, #17
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	d012      	beq.n	8009d1a <HAL_UART_IRQHandler+0x63a>
 8009cf4:	23a0      	movs	r3, #160	; 0xa0
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	da0d      	bge.n	8009d1a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	0018      	movs	r0, r3
 8009d02:	f001 f9d3 	bl	800b0ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d06:	e008      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
      return;
 8009d08:	46c0      	nop			; (mov r8, r8)
 8009d0a:	e006      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
    return;
 8009d0c:	46c0      	nop			; (mov r8, r8)
 8009d0e:	e004      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
      return;
 8009d10:	46c0      	nop			; (mov r8, r8)
 8009d12:	e002      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
      return;
 8009d14:	46c0      	nop			; (mov r8, r8)
 8009d16:	e000      	b.n	8009d1a <HAL_UART_IRQHandler+0x63a>
    return;
 8009d18:	46c0      	nop			; (mov r8, r8)
  }
}
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	b02a      	add	sp, #168	; 0xa8
 8009d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009d20:	fffffeff 	.word	0xfffffeff
 8009d24:	fffffedf 	.word	0xfffffedf
 8009d28:	effffffe 	.word	0xeffffffe

08009d2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d34:	46c0      	nop			; (mov r8, r8)
 8009d36:	46bd      	mov	sp, r7
 8009d38:	b002      	add	sp, #8
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d44:	46c0      	nop			; (mov r8, r8)
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b002      	add	sp, #8
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	000a      	movs	r2, r1
 8009d56:	1cbb      	adds	r3, r7, #2
 8009d58:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	b002      	add	sp, #8
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d6c:	231a      	movs	r3, #26
 8009d6e:	18fb      	adds	r3, r7, r3
 8009d70:	2200      	movs	r2, #0
 8009d72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4abc      	ldr	r2, [pc, #752]	; (800a084 <UART_SetConfig+0x320>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	0019      	movs	r1, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	4ab7      	ldr	r2, [pc, #732]	; (800a088 <UART_SetConfig+0x324>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	0019      	movs	r1, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	4aae      	ldr	r2, [pc, #696]	; (800a08c <UART_SetConfig+0x328>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	0019      	movs	r1, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	220f      	movs	r2, #15
 8009de8:	4393      	bics	r3, r2
 8009dea:	0019      	movs	r1, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4aa4      	ldr	r2, [pc, #656]	; (800a090 <UART_SetConfig+0x32c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d127      	bne.n	8009e52 <UART_SetConfig+0xee>
 8009e02:	4ba4      	ldr	r3, [pc, #656]	; (800a094 <UART_SetConfig+0x330>)
 8009e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e06:	2203      	movs	r2, #3
 8009e08:	4013      	ands	r3, r2
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d017      	beq.n	8009e3e <UART_SetConfig+0xda>
 8009e0e:	d81b      	bhi.n	8009e48 <UART_SetConfig+0xe4>
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d00a      	beq.n	8009e2a <UART_SetConfig+0xc6>
 8009e14:	d818      	bhi.n	8009e48 <UART_SetConfig+0xe4>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <UART_SetConfig+0xbc>
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d00a      	beq.n	8009e34 <UART_SetConfig+0xd0>
 8009e1e:	e013      	b.n	8009e48 <UART_SetConfig+0xe4>
 8009e20:	231b      	movs	r3, #27
 8009e22:	18fb      	adds	r3, r7, r3
 8009e24:	2200      	movs	r2, #0
 8009e26:	701a      	strb	r2, [r3, #0]
 8009e28:	e058      	b.n	8009edc <UART_SetConfig+0x178>
 8009e2a:	231b      	movs	r3, #27
 8009e2c:	18fb      	adds	r3, r7, r3
 8009e2e:	2202      	movs	r2, #2
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	e053      	b.n	8009edc <UART_SetConfig+0x178>
 8009e34:	231b      	movs	r3, #27
 8009e36:	18fb      	adds	r3, r7, r3
 8009e38:	2204      	movs	r2, #4
 8009e3a:	701a      	strb	r2, [r3, #0]
 8009e3c:	e04e      	b.n	8009edc <UART_SetConfig+0x178>
 8009e3e:	231b      	movs	r3, #27
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	2208      	movs	r2, #8
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	e049      	b.n	8009edc <UART_SetConfig+0x178>
 8009e48:	231b      	movs	r3, #27
 8009e4a:	18fb      	adds	r3, r7, r3
 8009e4c:	2210      	movs	r2, #16
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e044      	b.n	8009edc <UART_SetConfig+0x178>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a90      	ldr	r2, [pc, #576]	; (800a098 <UART_SetConfig+0x334>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d127      	bne.n	8009eac <UART_SetConfig+0x148>
 8009e5c:	4b8d      	ldr	r3, [pc, #564]	; (800a094 <UART_SetConfig+0x330>)
 8009e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e60:	220c      	movs	r2, #12
 8009e62:	4013      	ands	r3, r2
 8009e64:	2b0c      	cmp	r3, #12
 8009e66:	d017      	beq.n	8009e98 <UART_SetConfig+0x134>
 8009e68:	d81b      	bhi.n	8009ea2 <UART_SetConfig+0x13e>
 8009e6a:	2b08      	cmp	r3, #8
 8009e6c:	d00a      	beq.n	8009e84 <UART_SetConfig+0x120>
 8009e6e:	d818      	bhi.n	8009ea2 <UART_SetConfig+0x13e>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <UART_SetConfig+0x116>
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d00a      	beq.n	8009e8e <UART_SetConfig+0x12a>
 8009e78:	e013      	b.n	8009ea2 <UART_SetConfig+0x13e>
 8009e7a:	231b      	movs	r3, #27
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	2200      	movs	r2, #0
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	e02b      	b.n	8009edc <UART_SetConfig+0x178>
 8009e84:	231b      	movs	r3, #27
 8009e86:	18fb      	adds	r3, r7, r3
 8009e88:	2202      	movs	r2, #2
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	e026      	b.n	8009edc <UART_SetConfig+0x178>
 8009e8e:	231b      	movs	r3, #27
 8009e90:	18fb      	adds	r3, r7, r3
 8009e92:	2204      	movs	r2, #4
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	e021      	b.n	8009edc <UART_SetConfig+0x178>
 8009e98:	231b      	movs	r3, #27
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	701a      	strb	r2, [r3, #0]
 8009ea0:	e01c      	b.n	8009edc <UART_SetConfig+0x178>
 8009ea2:	231b      	movs	r3, #27
 8009ea4:	18fb      	adds	r3, r7, r3
 8009ea6:	2210      	movs	r2, #16
 8009ea8:	701a      	strb	r2, [r3, #0]
 8009eaa:	e017      	b.n	8009edc <UART_SetConfig+0x178>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a7a      	ldr	r2, [pc, #488]	; (800a09c <UART_SetConfig+0x338>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d104      	bne.n	8009ec0 <UART_SetConfig+0x15c>
 8009eb6:	231b      	movs	r3, #27
 8009eb8:	18fb      	adds	r3, r7, r3
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	e00d      	b.n	8009edc <UART_SetConfig+0x178>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a76      	ldr	r2, [pc, #472]	; (800a0a0 <UART_SetConfig+0x33c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d104      	bne.n	8009ed4 <UART_SetConfig+0x170>
 8009eca:	231b      	movs	r3, #27
 8009ecc:	18fb      	adds	r3, r7, r3
 8009ece:	2200      	movs	r2, #0
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e003      	b.n	8009edc <UART_SetConfig+0x178>
 8009ed4:	231b      	movs	r3, #27
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	2210      	movs	r2, #16
 8009eda:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69da      	ldr	r2, [r3, #28]
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	021b      	lsls	r3, r3, #8
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d000      	beq.n	8009eea <UART_SetConfig+0x186>
 8009ee8:	e065      	b.n	8009fb6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8009eea:	231b      	movs	r3, #27
 8009eec:	18fb      	adds	r3, r7, r3
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d015      	beq.n	8009f20 <UART_SetConfig+0x1bc>
 8009ef4:	dc18      	bgt.n	8009f28 <UART_SetConfig+0x1c4>
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d00d      	beq.n	8009f16 <UART_SetConfig+0x1b2>
 8009efa:	dc15      	bgt.n	8009f28 <UART_SetConfig+0x1c4>
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <UART_SetConfig+0x1a2>
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d005      	beq.n	8009f10 <UART_SetConfig+0x1ac>
 8009f04:	e010      	b.n	8009f28 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f06:	f7fd ff75 	bl	8007df4 <HAL_RCC_GetPCLK1Freq>
 8009f0a:	0003      	movs	r3, r0
 8009f0c:	617b      	str	r3, [r7, #20]
        break;
 8009f0e:	e012      	b.n	8009f36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f10:	4b64      	ldr	r3, [pc, #400]	; (800a0a4 <UART_SetConfig+0x340>)
 8009f12:	617b      	str	r3, [r7, #20]
        break;
 8009f14:	e00f      	b.n	8009f36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f16:	f7fd fee1 	bl	8007cdc <HAL_RCC_GetSysClockFreq>
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	617b      	str	r3, [r7, #20]
        break;
 8009f1e:	e00a      	b.n	8009f36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f20:	2380      	movs	r3, #128	; 0x80
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	617b      	str	r3, [r7, #20]
        break;
 8009f26:	e006      	b.n	8009f36 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009f2c:	231a      	movs	r3, #26
 8009f2e:	18fb      	adds	r3, r7, r3
 8009f30:	2201      	movs	r2, #1
 8009f32:	701a      	strb	r2, [r3, #0]
        break;
 8009f34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d100      	bne.n	8009f3e <UART_SetConfig+0x1da>
 8009f3c:	e08d      	b.n	800a05a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f42:	4b59      	ldr	r3, [pc, #356]	; (800a0a8 <UART_SetConfig+0x344>)
 8009f44:	0052      	lsls	r2, r2, #1
 8009f46:	5ad3      	ldrh	r3, [r2, r3]
 8009f48:	0019      	movs	r1, r3
 8009f4a:	6978      	ldr	r0, [r7, #20]
 8009f4c:	f7f6 f8f4 	bl	8000138 <__udivsi3>
 8009f50:	0003      	movs	r3, r0
 8009f52:	005a      	lsls	r2, r3, #1
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	085b      	lsrs	r3, r3, #1
 8009f5a:	18d2      	adds	r2, r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	0019      	movs	r1, r3
 8009f62:	0010      	movs	r0, r2
 8009f64:	f7f6 f8e8 	bl	8000138 <__udivsi3>
 8009f68:	0003      	movs	r3, r0
 8009f6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	2b0f      	cmp	r3, #15
 8009f70:	d91c      	bls.n	8009fac <UART_SetConfig+0x248>
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	025b      	lsls	r3, r3, #9
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d217      	bcs.n	8009fac <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	200e      	movs	r0, #14
 8009f82:	183b      	adds	r3, r7, r0
 8009f84:	210f      	movs	r1, #15
 8009f86:	438a      	bics	r2, r1
 8009f88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	2207      	movs	r2, #7
 8009f92:	4013      	ands	r3, r2
 8009f94:	b299      	uxth	r1, r3
 8009f96:	183b      	adds	r3, r7, r0
 8009f98:	183a      	adds	r2, r7, r0
 8009f9a:	8812      	ldrh	r2, [r2, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	183a      	adds	r2, r7, r0
 8009fa6:	8812      	ldrh	r2, [r2, #0]
 8009fa8:	60da      	str	r2, [r3, #12]
 8009faa:	e056      	b.n	800a05a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009fac:	231a      	movs	r3, #26
 8009fae:	18fb      	adds	r3, r7, r3
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	701a      	strb	r2, [r3, #0]
 8009fb4:	e051      	b.n	800a05a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fb6:	231b      	movs	r3, #27
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d015      	beq.n	8009fec <UART_SetConfig+0x288>
 8009fc0:	dc18      	bgt.n	8009ff4 <UART_SetConfig+0x290>
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d00d      	beq.n	8009fe2 <UART_SetConfig+0x27e>
 8009fc6:	dc15      	bgt.n	8009ff4 <UART_SetConfig+0x290>
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <UART_SetConfig+0x26e>
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d005      	beq.n	8009fdc <UART_SetConfig+0x278>
 8009fd0:	e010      	b.n	8009ff4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fd2:	f7fd ff0f 	bl	8007df4 <HAL_RCC_GetPCLK1Freq>
 8009fd6:	0003      	movs	r3, r0
 8009fd8:	617b      	str	r3, [r7, #20]
        break;
 8009fda:	e012      	b.n	800a002 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fdc:	4b31      	ldr	r3, [pc, #196]	; (800a0a4 <UART_SetConfig+0x340>)
 8009fde:	617b      	str	r3, [r7, #20]
        break;
 8009fe0:	e00f      	b.n	800a002 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fe2:	f7fd fe7b 	bl	8007cdc <HAL_RCC_GetSysClockFreq>
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	617b      	str	r3, [r7, #20]
        break;
 8009fea:	e00a      	b.n	800a002 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fec:	2380      	movs	r3, #128	; 0x80
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	617b      	str	r3, [r7, #20]
        break;
 8009ff2:	e006      	b.n	800a002 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ff8:	231a      	movs	r3, #26
 8009ffa:	18fb      	adds	r3, r7, r3
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	701a      	strb	r2, [r3, #0]
        break;
 800a000:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d028      	beq.n	800a05a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a00c:	4b26      	ldr	r3, [pc, #152]	; (800a0a8 <UART_SetConfig+0x344>)
 800a00e:	0052      	lsls	r2, r2, #1
 800a010:	5ad3      	ldrh	r3, [r2, r3]
 800a012:	0019      	movs	r1, r3
 800a014:	6978      	ldr	r0, [r7, #20]
 800a016:	f7f6 f88f 	bl	8000138 <__udivsi3>
 800a01a:	0003      	movs	r3, r0
 800a01c:	001a      	movs	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	085b      	lsrs	r3, r3, #1
 800a024:	18d2      	adds	r2, r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	0019      	movs	r1, r3
 800a02c:	0010      	movs	r0, r2
 800a02e:	f7f6 f883 	bl	8000138 <__udivsi3>
 800a032:	0003      	movs	r3, r0
 800a034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b0f      	cmp	r3, #15
 800a03a:	d90a      	bls.n	800a052 <UART_SetConfig+0x2ee>
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	2380      	movs	r3, #128	; 0x80
 800a040:	025b      	lsls	r3, r3, #9
 800a042:	429a      	cmp	r2, r3
 800a044:	d205      	bcs.n	800a052 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	b29a      	uxth	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60da      	str	r2, [r3, #12]
 800a050:	e003      	b.n	800a05a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a052:	231a      	movs	r3, #26
 800a054:	18fb      	adds	r3, r7, r3
 800a056:	2201      	movs	r2, #1
 800a058:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	226a      	movs	r2, #106	; 0x6a
 800a05e:	2101      	movs	r1, #1
 800a060:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2268      	movs	r2, #104	; 0x68
 800a066:	2101      	movs	r1, #1
 800a068:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a076:	231a      	movs	r3, #26
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	781b      	ldrb	r3, [r3, #0]
}
 800a07c:	0018      	movs	r0, r3
 800a07e:	46bd      	mov	sp, r7
 800a080:	b008      	add	sp, #32
 800a082:	bd80      	pop	{r7, pc}
 800a084:	cfff69f3 	.word	0xcfff69f3
 800a088:	ffffcfff 	.word	0xffffcfff
 800a08c:	11fff4ff 	.word	0x11fff4ff
 800a090:	40013800 	.word	0x40013800
 800a094:	40021000 	.word	0x40021000
 800a098:	40004400 	.word	0x40004400
 800a09c:	40004800 	.word	0x40004800
 800a0a0:	40004c00 	.word	0x40004c00
 800a0a4:	00f42400 	.word	0x00f42400
 800a0a8:	0800fff0 	.word	0x0800fff0

0800a0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	d00b      	beq.n	800a0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	4a4a      	ldr	r2, [pc, #296]	; (800a1f0 <UART_AdvFeatureConfig+0x144>)
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	0019      	movs	r1, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	2202      	movs	r2, #2
 800a0dc:	4013      	ands	r3, r2
 800a0de:	d00b      	beq.n	800a0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	4a43      	ldr	r2, [pc, #268]	; (800a1f4 <UART_AdvFeatureConfig+0x148>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	0019      	movs	r1, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	4013      	ands	r3, r2
 800a100:	d00b      	beq.n	800a11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	4a3b      	ldr	r2, [pc, #236]	; (800a1f8 <UART_AdvFeatureConfig+0x14c>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	0019      	movs	r1, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11e:	2208      	movs	r2, #8
 800a120:	4013      	ands	r3, r2
 800a122:	d00b      	beq.n	800a13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	4a34      	ldr	r2, [pc, #208]	; (800a1fc <UART_AdvFeatureConfig+0x150>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	0019      	movs	r1, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	2210      	movs	r2, #16
 800a142:	4013      	ands	r3, r2
 800a144:	d00b      	beq.n	800a15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	4a2c      	ldr	r2, [pc, #176]	; (800a200 <UART_AdvFeatureConfig+0x154>)
 800a14e:	4013      	ands	r3, r2
 800a150:	0019      	movs	r1, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	2220      	movs	r2, #32
 800a164:	4013      	ands	r3, r2
 800a166:	d00b      	beq.n	800a180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	4a25      	ldr	r2, [pc, #148]	; (800a204 <UART_AdvFeatureConfig+0x158>)
 800a170:	4013      	ands	r3, r2
 800a172:	0019      	movs	r1, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	2240      	movs	r2, #64	; 0x40
 800a186:	4013      	ands	r3, r2
 800a188:	d01d      	beq.n	800a1c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <UART_AdvFeatureConfig+0x15c>)
 800a192:	4013      	ands	r3, r2
 800a194:	0019      	movs	r1, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1a6:	2380      	movs	r3, #128	; 0x80
 800a1a8:	035b      	lsls	r3, r3, #13
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d10b      	bne.n	800a1c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	4a15      	ldr	r2, [pc, #84]	; (800a20c <UART_AdvFeatureConfig+0x160>)
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	0019      	movs	r1, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ca:	2280      	movs	r2, #128	; 0x80
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	d00b      	beq.n	800a1e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4a0e      	ldr	r2, [pc, #56]	; (800a210 <UART_AdvFeatureConfig+0x164>)
 800a1d8:	4013      	ands	r3, r2
 800a1da:	0019      	movs	r1, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	605a      	str	r2, [r3, #4]
  }
}
 800a1e8:	46c0      	nop			; (mov r8, r8)
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	b002      	add	sp, #8
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	fffdffff 	.word	0xfffdffff
 800a1f4:	fffeffff 	.word	0xfffeffff
 800a1f8:	fffbffff 	.word	0xfffbffff
 800a1fc:	ffff7fff 	.word	0xffff7fff
 800a200:	ffffefff 	.word	0xffffefff
 800a204:	ffffdfff 	.word	0xffffdfff
 800a208:	ffefffff 	.word	0xffefffff
 800a20c:	ff9fffff 	.word	0xff9fffff
 800a210:	fff7ffff 	.word	0xfff7ffff

0800a214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af02      	add	r7, sp, #8
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2290      	movs	r2, #144	; 0x90
 800a220:	2100      	movs	r1, #0
 800a222:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a224:	f7fc f866 	bl	80062f4 <HAL_GetTick>
 800a228:	0003      	movs	r3, r0
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2208      	movs	r2, #8
 800a234:	4013      	ands	r3, r2
 800a236:	2b08      	cmp	r3, #8
 800a238:	d10c      	bne.n	800a254 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2280      	movs	r2, #128	; 0x80
 800a23e:	0391      	lsls	r1, r2, #14
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4a1a      	ldr	r2, [pc, #104]	; (800a2ac <UART_CheckIdleState+0x98>)
 800a244:	9200      	str	r2, [sp, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	f000 f832 	bl	800a2b0 <UART_WaitOnFlagUntilTimeout>
 800a24c:	1e03      	subs	r3, r0, #0
 800a24e:	d001      	beq.n	800a254 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e026      	b.n	800a2a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2204      	movs	r2, #4
 800a25c:	4013      	ands	r3, r2
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d10c      	bne.n	800a27c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2280      	movs	r2, #128	; 0x80
 800a266:	03d1      	lsls	r1, r2, #15
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	4a10      	ldr	r2, [pc, #64]	; (800a2ac <UART_CheckIdleState+0x98>)
 800a26c:	9200      	str	r2, [sp, #0]
 800a26e:	2200      	movs	r2, #0
 800a270:	f000 f81e 	bl	800a2b0 <UART_WaitOnFlagUntilTimeout>
 800a274:	1e03      	subs	r3, r0, #0
 800a276:	d001      	beq.n	800a27c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e012      	b.n	800a2a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2288      	movs	r2, #136	; 0x88
 800a280:	2120      	movs	r1, #32
 800a282:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	228c      	movs	r2, #140	; 0x8c
 800a288:	2120      	movs	r1, #32
 800a28a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2284      	movs	r2, #132	; 0x84
 800a29c:	2100      	movs	r1, #0
 800a29e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	b004      	add	sp, #16
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	01ffffff 	.word	0x01ffffff

0800a2b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b094      	sub	sp, #80	; 0x50
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	1dfb      	adds	r3, r7, #7
 800a2be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c0:	e0a7      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	d100      	bne.n	800a2ca <UART_WaitOnFlagUntilTimeout+0x1a>
 800a2c8:	e0a3      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ca:	f7fc f813 	bl	80062f4 <HAL_GetTick>
 800a2ce:	0002      	movs	r2, r0
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d302      	bcc.n	800a2e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d13f      	bne.n	800a360 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	f383 8810 	msr	PRIMASK, r3
}
 800a2f4:	46c0      	nop			; (mov r8, r8)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	494e      	ldr	r1, [pc, #312]	; (800a43c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a302:	400a      	ands	r2, r1
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a308:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	f383 8810 	msr	PRIMASK, r3
}
 800a310:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a312:	f3ef 8310 	mrs	r3, PRIMASK
 800a316:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a31a:	643b      	str	r3, [r7, #64]	; 0x40
 800a31c:	2301      	movs	r3, #1
 800a31e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	f383 8810 	msr	PRIMASK, r3
}
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2101      	movs	r1, #1
 800a334:	438a      	bics	r2, r1
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33e:	f383 8810 	msr	PRIMASK, r3
}
 800a342:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2288      	movs	r2, #136	; 0x88
 800a348:	2120      	movs	r1, #32
 800a34a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	228c      	movs	r2, #140	; 0x8c
 800a350:	2120      	movs	r1, #32
 800a352:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2284      	movs	r2, #132	; 0x84
 800a358:	2100      	movs	r1, #0
 800a35a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e069      	b.n	800a434 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2204      	movs	r2, #4
 800a368:	4013      	ands	r3, r2
 800a36a:	d052      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	69da      	ldr	r2, [r3, #28]
 800a372:	2380      	movs	r3, #128	; 0x80
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	401a      	ands	r2, r3
 800a378:	2380      	movs	r3, #128	; 0x80
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d148      	bne.n	800a412 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2280      	movs	r2, #128	; 0x80
 800a386:	0112      	lsls	r2, r2, #4
 800a388:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a38a:	f3ef 8310 	mrs	r3, PRIMASK
 800a38e:	613b      	str	r3, [r7, #16]
  return(result);
 800a390:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a392:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a394:	2301      	movs	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f383 8810 	msr	PRIMASK, r3
}
 800a39e:	46c0      	nop			; (mov r8, r8)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4924      	ldr	r1, [pc, #144]	; (800a43c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a3ac:	400a      	ands	r2, r1
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	f383 8810 	msr	PRIMASK, r3
}
 800a3ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a3c2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	f383 8810 	msr	PRIMASK, r3
}
 800a3d0:	46c0      	nop			; (mov r8, r8)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2101      	movs	r1, #1
 800a3de:	438a      	bics	r2, r1
 800a3e0:	609a      	str	r2, [r3, #8]
 800a3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	f383 8810 	msr	PRIMASK, r3
}
 800a3ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2288      	movs	r2, #136	; 0x88
 800a3f2:	2120      	movs	r1, #32
 800a3f4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	228c      	movs	r2, #140	; 0x8c
 800a3fa:	2120      	movs	r1, #32
 800a3fc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2290      	movs	r2, #144	; 0x90
 800a402:	2120      	movs	r1, #32
 800a404:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2284      	movs	r2, #132	; 0x84
 800a40a:	2100      	movs	r1, #0
 800a40c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e010      	b.n	800a434 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	4013      	ands	r3, r2
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	425a      	negs	r2, r3
 800a422:	4153      	adcs	r3, r2
 800a424:	b2db      	uxtb	r3, r3
 800a426:	001a      	movs	r2, r3
 800a428:	1dfb      	adds	r3, r7, #7
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d100      	bne.n	800a432 <UART_WaitOnFlagUntilTimeout+0x182>
 800a430:	e747      	b.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	0018      	movs	r0, r3
 800a436:	46bd      	mov	sp, r7
 800a438:	b014      	add	sp, #80	; 0x50
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	fffffe5f 	.word	0xfffffe5f

0800a440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b098      	sub	sp, #96	; 0x60
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	1dbb      	adds	r3, r7, #6
 800a44c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	1dba      	adds	r2, r7, #6
 800a458:	215c      	movs	r1, #92	; 0x5c
 800a45a:	8812      	ldrh	r2, [r2, #0]
 800a45c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	1dba      	adds	r2, r7, #6
 800a462:	215e      	movs	r1, #94	; 0x5e
 800a464:	8812      	ldrh	r2, [r2, #0]
 800a466:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	2380      	movs	r3, #128	; 0x80
 800a474:	015b      	lsls	r3, r3, #5
 800a476:	429a      	cmp	r2, r3
 800a478:	d10d      	bne.n	800a496 <UART_Start_Receive_IT+0x56>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d104      	bne.n	800a48c <UART_Start_Receive_IT+0x4c>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2260      	movs	r2, #96	; 0x60
 800a486:	497b      	ldr	r1, [pc, #492]	; (800a674 <UART_Start_Receive_IT+0x234>)
 800a488:	5299      	strh	r1, [r3, r2]
 800a48a:	e02e      	b.n	800a4ea <UART_Start_Receive_IT+0xaa>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2260      	movs	r2, #96	; 0x60
 800a490:	21ff      	movs	r1, #255	; 0xff
 800a492:	5299      	strh	r1, [r3, r2]
 800a494:	e029      	b.n	800a4ea <UART_Start_Receive_IT+0xaa>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10d      	bne.n	800a4ba <UART_Start_Receive_IT+0x7a>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d104      	bne.n	800a4b0 <UART_Start_Receive_IT+0x70>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2260      	movs	r2, #96	; 0x60
 800a4aa:	21ff      	movs	r1, #255	; 0xff
 800a4ac:	5299      	strh	r1, [r3, r2]
 800a4ae:	e01c      	b.n	800a4ea <UART_Start_Receive_IT+0xaa>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2260      	movs	r2, #96	; 0x60
 800a4b4:	217f      	movs	r1, #127	; 0x7f
 800a4b6:	5299      	strh	r1, [r3, r2]
 800a4b8:	e017      	b.n	800a4ea <UART_Start_Receive_IT+0xaa>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689a      	ldr	r2, [r3, #8]
 800a4be:	2380      	movs	r3, #128	; 0x80
 800a4c0:	055b      	lsls	r3, r3, #21
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d10d      	bne.n	800a4e2 <UART_Start_Receive_IT+0xa2>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d104      	bne.n	800a4d8 <UART_Start_Receive_IT+0x98>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2260      	movs	r2, #96	; 0x60
 800a4d2:	217f      	movs	r1, #127	; 0x7f
 800a4d4:	5299      	strh	r1, [r3, r2]
 800a4d6:	e008      	b.n	800a4ea <UART_Start_Receive_IT+0xaa>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2260      	movs	r2, #96	; 0x60
 800a4dc:	213f      	movs	r1, #63	; 0x3f
 800a4de:	5299      	strh	r1, [r3, r2]
 800a4e0:	e003      	b.n	800a4ea <UART_Start_Receive_IT+0xaa>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2260      	movs	r2, #96	; 0x60
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2290      	movs	r2, #144	; 0x90
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	228c      	movs	r2, #140	; 0x8c
 800a4f6:	2122      	movs	r1, #34	; 0x22
 800a4f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a4fe:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800a500:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a502:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a504:	2301      	movs	r3, #1
 800a506:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a50a:	f383 8810 	msr	PRIMASK, r3
}
 800a50e:	46c0      	nop			; (mov r8, r8)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689a      	ldr	r2, [r3, #8]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2101      	movs	r1, #1
 800a51c:	430a      	orrs	r2, r1
 800a51e:	609a      	str	r2, [r3, #8]
 800a520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a522:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a526:	f383 8810 	msr	PRIMASK, r3
}
 800a52a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a530:	2380      	movs	r3, #128	; 0x80
 800a532:	059b      	lsls	r3, r3, #22
 800a534:	429a      	cmp	r2, r3
 800a536:	d150      	bne.n	800a5da <UART_Start_Receive_IT+0x19a>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2268      	movs	r2, #104	; 0x68
 800a53c:	5a9b      	ldrh	r3, [r3, r2]
 800a53e:	1dba      	adds	r2, r7, #6
 800a540:	8812      	ldrh	r2, [r2, #0]
 800a542:	429a      	cmp	r2, r3
 800a544:	d349      	bcc.n	800a5da <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	2380      	movs	r3, #128	; 0x80
 800a54c:	015b      	lsls	r3, r3, #5
 800a54e:	429a      	cmp	r2, r3
 800a550:	d107      	bne.n	800a562 <UART_Start_Receive_IT+0x122>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	4a46      	ldr	r2, [pc, #280]	; (800a678 <UART_Start_Receive_IT+0x238>)
 800a55e:	675a      	str	r2, [r3, #116]	; 0x74
 800a560:	e002      	b.n	800a568 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4a45      	ldr	r2, [pc, #276]	; (800a67c <UART_Start_Receive_IT+0x23c>)
 800a566:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d019      	beq.n	800a5a4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a570:	f3ef 8310 	mrs	r3, PRIMASK
 800a574:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a578:	65bb      	str	r3, [r7, #88]	; 0x58
 800a57a:	2301      	movs	r3, #1
 800a57c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	f383 8810 	msr	PRIMASK, r3
}
 800a584:	46c0      	nop			; (mov r8, r8)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2180      	movs	r1, #128	; 0x80
 800a592:	0049      	lsls	r1, r1, #1
 800a594:	430a      	orrs	r2, r1
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59e:	f383 8810 	msr	PRIMASK, r3
}
 800a5a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5ac:	657b      	str	r3, [r7, #84]	; 0x54
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	f383 8810 	msr	PRIMASK, r3
}
 800a5b8:	46c0      	nop			; (mov r8, r8)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2180      	movs	r1, #128	; 0x80
 800a5c6:	0549      	lsls	r1, r1, #21
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	609a      	str	r2, [r3, #8]
 800a5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	f383 8810 	msr	PRIMASK, r3
}
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	e047      	b.n	800a66a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	2380      	movs	r3, #128	; 0x80
 800a5e0:	015b      	lsls	r3, r3, #5
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d107      	bne.n	800a5f6 <UART_Start_Receive_IT+0x1b6>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d103      	bne.n	800a5f6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4a23      	ldr	r2, [pc, #140]	; (800a680 <UART_Start_Receive_IT+0x240>)
 800a5f2:	675a      	str	r2, [r3, #116]	; 0x74
 800a5f4:	e002      	b.n	800a5fc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4a22      	ldr	r2, [pc, #136]	; (800a684 <UART_Start_Receive_IT+0x244>)
 800a5fa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d019      	beq.n	800a638 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a604:	f3ef 8310 	mrs	r3, PRIMASK
 800a608:	61fb      	str	r3, [r7, #28]
  return(result);
 800a60a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a60c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a60e:	2301      	movs	r3, #1
 800a610:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	f383 8810 	msr	PRIMASK, r3
}
 800a618:	46c0      	nop			; (mov r8, r8)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2190      	movs	r1, #144	; 0x90
 800a626:	0049      	lsls	r1, r1, #1
 800a628:	430a      	orrs	r2, r1
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	f383 8810 	msr	PRIMASK, r3
}
 800a636:	e018      	b.n	800a66a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a638:	f3ef 8310 	mrs	r3, PRIMASK
 800a63c:	613b      	str	r3, [r7, #16]
  return(result);
 800a63e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a640:	653b      	str	r3, [r7, #80]	; 0x50
 800a642:	2301      	movs	r3, #1
 800a644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f383 8810 	msr	PRIMASK, r3
}
 800a64c:	46c0      	nop			; (mov r8, r8)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2120      	movs	r1, #32
 800a65a:	430a      	orrs	r2, r1
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a660:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	f383 8810 	msr	PRIMASK, r3
}
 800a668:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	0018      	movs	r0, r3
 800a66e:	46bd      	mov	sp, r7
 800a670:	b018      	add	sp, #96	; 0x60
 800a672:	bd80      	pop	{r7, pc}
 800a674:	000001ff 	.word	0x000001ff
 800a678:	0800adb1 	.word	0x0800adb1
 800a67c:	0800aac5 	.word	0x0800aac5
 800a680:	0800a951 	.word	0x0800a951
 800a684:	0800a7dd 	.word	0x0800a7dd

0800a688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08e      	sub	sp, #56	; 0x38
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a690:	f3ef 8310 	mrs	r3, PRIMASK
 800a694:	617b      	str	r3, [r7, #20]
  return(result);
 800a696:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
 800a69a:	2301      	movs	r3, #1
 800a69c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	f383 8810 	msr	PRIMASK, r3
}
 800a6a4:	46c0      	nop			; (mov r8, r8)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4926      	ldr	r1, [pc, #152]	; (800a74c <UART_EndRxTransfer+0xc4>)
 800a6b2:	400a      	ands	r2, r1
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	f383 8810 	msr	PRIMASK, r3
}
 800a6c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a6c6:	623b      	str	r3, [r7, #32]
  return(result);
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6ca:	633b      	str	r3, [r7, #48]	; 0x30
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	f383 8810 	msr	PRIMASK, r3
}
 800a6d6:	46c0      	nop			; (mov r8, r8)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	491b      	ldr	r1, [pc, #108]	; (800a750 <UART_EndRxTransfer+0xc8>)
 800a6e4:	400a      	ands	r2, r1
 800a6e6:	609a      	str	r2, [r3, #8]
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ee:	f383 8810 	msr	PRIMASK, r3
}
 800a6f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d118      	bne.n	800a72e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a700:	60bb      	str	r3, [r7, #8]
  return(result);
 800a702:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a704:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a706:	2301      	movs	r3, #1
 800a708:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f383 8810 	msr	PRIMASK, r3
}
 800a710:	46c0      	nop			; (mov r8, r8)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2110      	movs	r1, #16
 800a71e:	438a      	bics	r2, r1
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f383 8810 	msr	PRIMASK, r3
}
 800a72c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	228c      	movs	r2, #140	; 0x8c
 800a732:	2120      	movs	r1, #32
 800a734:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	46bd      	mov	sp, r7
 800a746:	b00e      	add	sp, #56	; 0x38
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	46c0      	nop			; (mov r8, r8)
 800a74c:	fffffedf 	.word	0xfffffedf
 800a750:	effffffe 	.word	0xeffffffe

0800a754 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a760:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	225e      	movs	r2, #94	; 0x5e
 800a766:	2100      	movs	r1, #0
 800a768:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2256      	movs	r2, #86	; 0x56
 800a76e:	2100      	movs	r1, #0
 800a770:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	0018      	movs	r0, r3
 800a776:	f7ff fae1 	bl	8009d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a77a:	46c0      	nop			; (mov r8, r8)
 800a77c:	46bd      	mov	sp, r7
 800a77e:	b004      	add	sp, #16
 800a780:	bd80      	pop	{r7, pc}

0800a782 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b086      	sub	sp, #24
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a78a:	f3ef 8310 	mrs	r3, PRIMASK
 800a78e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a790:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	2301      	movs	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f383 8810 	msr	PRIMASK, r3
}
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2140      	movs	r1, #64	; 0x40
 800a7ac:	438a      	bics	r2, r1
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f383 8810 	msr	PRIMASK, r3
}
 800a7ba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2288      	movs	r2, #136	; 0x88
 800a7c0:	2120      	movs	r1, #32
 800a7c2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	f7ff faad 	bl	8009d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7d2:	46c0      	nop			; (mov r8, r8)
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	b006      	add	sp, #24
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b090      	sub	sp, #64	; 0x40
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7e4:	203e      	movs	r0, #62	; 0x3e
 800a7e6:	183b      	adds	r3, r7, r0
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	2160      	movs	r1, #96	; 0x60
 800a7ec:	5a52      	ldrh	r2, [r2, r1]
 800a7ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	228c      	movs	r2, #140	; 0x8c
 800a7f4:	589b      	ldr	r3, [r3, r2]
 800a7f6:	2b22      	cmp	r3, #34	; 0x22
 800a7f8:	d000      	beq.n	800a7fc <UART_RxISR_8BIT+0x20>
 800a7fa:	e09a      	b.n	800a932 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a802:	213c      	movs	r1, #60	; 0x3c
 800a804:	187b      	adds	r3, r7, r1
 800a806:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a808:	187b      	adds	r3, r7, r1
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	183b      	adds	r3, r7, r0
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b2d9      	uxtb	r1, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a818:	400a      	ands	r2, r1
 800a81a:	b2d2      	uxtb	r2, r2
 800a81c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	225e      	movs	r2, #94	; 0x5e
 800a82c:	5a9b      	ldrh	r3, [r3, r2]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	3b01      	subs	r3, #1
 800a832:	b299      	uxth	r1, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	225e      	movs	r2, #94	; 0x5e
 800a838:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	225e      	movs	r2, #94	; 0x5e
 800a83e:	5a9b      	ldrh	r3, [r3, r2]
 800a840:	b29b      	uxth	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d000      	beq.n	800a848 <UART_RxISR_8BIT+0x6c>
 800a846:	e07c      	b.n	800a942 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a848:	f3ef 8310 	mrs	r3, PRIMASK
 800a84c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a84e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a850:	63bb      	str	r3, [r7, #56]	; 0x38
 800a852:	2301      	movs	r3, #1
 800a854:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f383 8810 	msr	PRIMASK, r3
}
 800a85c:	46c0      	nop			; (mov r8, r8)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4938      	ldr	r1, [pc, #224]	; (800a94c <UART_RxISR_8BIT+0x170>)
 800a86a:	400a      	ands	r2, r1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	f383 8810 	msr	PRIMASK, r3
}
 800a878:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a87a:	f3ef 8310 	mrs	r3, PRIMASK
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
 800a884:	2301      	movs	r3, #1
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	f383 8810 	msr	PRIMASK, r3
}
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689a      	ldr	r2, [r3, #8]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2101      	movs	r1, #1
 800a89c:	438a      	bics	r2, r1
 800a89e:	609a      	str	r2, [r3, #8]
 800a8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	f383 8810 	msr	PRIMASK, r3
}
 800a8aa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	228c      	movs	r2, #140	; 0x8c
 800a8b0:	2120      	movs	r1, #32
 800a8b2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d12f      	bne.n	800a928 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a8d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8d4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8d6:	633b      	str	r3, [r7, #48]	; 0x30
 800a8d8:	2301      	movs	r3, #1
 800a8da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f383 8810 	msr	PRIMASK, r3
}
 800a8e2:	46c0      	nop			; (mov r8, r8)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2110      	movs	r1, #16
 800a8f0:	438a      	bics	r2, r1
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f383 8810 	msr	PRIMASK, r3
}
 800a8fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	2210      	movs	r2, #16
 800a908:	4013      	ands	r3, r2
 800a90a:	2b10      	cmp	r3, #16
 800a90c:	d103      	bne.n	800a916 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2210      	movs	r2, #16
 800a914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	225c      	movs	r2, #92	; 0x5c
 800a91a:	5a9a      	ldrh	r2, [r3, r2]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	0011      	movs	r1, r2
 800a920:	0018      	movs	r0, r3
 800a922:	f7ff fa13 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a926:	e00c      	b.n	800a942 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	0018      	movs	r0, r3
 800a92c:	f7fb f8f2 	bl	8005b14 <HAL_UART_RxCpltCallback>
}
 800a930:	e007      	b.n	800a942 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	699a      	ldr	r2, [r3, #24]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2108      	movs	r1, #8
 800a93e:	430a      	orrs	r2, r1
 800a940:	619a      	str	r2, [r3, #24]
}
 800a942:	46c0      	nop			; (mov r8, r8)
 800a944:	46bd      	mov	sp, r7
 800a946:	b010      	add	sp, #64	; 0x40
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	fffffedf 	.word	0xfffffedf

0800a950 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b090      	sub	sp, #64	; 0x40
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a958:	203e      	movs	r0, #62	; 0x3e
 800a95a:	183b      	adds	r3, r7, r0
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	2160      	movs	r1, #96	; 0x60
 800a960:	5a52      	ldrh	r2, [r2, r1]
 800a962:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	228c      	movs	r2, #140	; 0x8c
 800a968:	589b      	ldr	r3, [r3, r2]
 800a96a:	2b22      	cmp	r3, #34	; 0x22
 800a96c:	d000      	beq.n	800a970 <UART_RxISR_16BIT+0x20>
 800a96e:	e09a      	b.n	800aaa6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a976:	213c      	movs	r1, #60	; 0x3c
 800a978:	187b      	adds	r3, r7, r1
 800a97a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a980:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800a982:	187b      	adds	r3, r7, r1
 800a984:	183a      	adds	r2, r7, r0
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	8812      	ldrh	r2, [r2, #0]
 800a98a:	4013      	ands	r3, r2
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a996:	1c9a      	adds	r2, r3, #2
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	225e      	movs	r2, #94	; 0x5e
 800a9a0:	5a9b      	ldrh	r3, [r3, r2]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	b299      	uxth	r1, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	225e      	movs	r2, #94	; 0x5e
 800a9ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	225e      	movs	r2, #94	; 0x5e
 800a9b2:	5a9b      	ldrh	r3, [r3, r2]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d000      	beq.n	800a9bc <UART_RxISR_16BIT+0x6c>
 800a9ba:	e07c      	b.n	800aab6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c0:	617b      	str	r3, [r7, #20]
  return(result);
 800a9c2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	f383 8810 	msr	PRIMASK, r3
}
 800a9d0:	46c0      	nop			; (mov r8, r8)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4938      	ldr	r1, [pc, #224]	; (800aac0 <UART_RxISR_16BIT+0x170>)
 800a9de:	400a      	ands	r2, r1
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	f383 8810 	msr	PRIMASK, r3
}
 800a9ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a9f2:	623b      	str	r3, [r7, #32]
  return(result);
 800a9f4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	f383 8810 	msr	PRIMASK, r3
}
 800aa02:	46c0      	nop			; (mov r8, r8)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689a      	ldr	r2, [r3, #8]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2101      	movs	r1, #1
 800aa10:	438a      	bics	r2, r1
 800aa12:	609a      	str	r2, [r3, #8]
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	f383 8810 	msr	PRIMASK, r3
}
 800aa1e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	228c      	movs	r2, #140	; 0x8c
 800aa24:	2120      	movs	r1, #32
 800aa26:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d12f      	bne.n	800aa9c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa42:	f3ef 8310 	mrs	r3, PRIMASK
 800aa46:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa48:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f383 8810 	msr	PRIMASK, r3
}
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2110      	movs	r1, #16
 800aa64:	438a      	bics	r2, r1
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f383 8810 	msr	PRIMASK, r3
}
 800aa72:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	2210      	movs	r2, #16
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	2b10      	cmp	r3, #16
 800aa80:	d103      	bne.n	800aa8a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2210      	movs	r2, #16
 800aa88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	225c      	movs	r2, #92	; 0x5c
 800aa8e:	5a9a      	ldrh	r2, [r3, r2]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	0011      	movs	r1, r2
 800aa94:	0018      	movs	r0, r3
 800aa96:	f7ff f959 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa9a:	e00c      	b.n	800aab6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f7fb f838 	bl	8005b14 <HAL_UART_RxCpltCallback>
}
 800aaa4:	e007      	b.n	800aab6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	699a      	ldr	r2, [r3, #24]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2108      	movs	r1, #8
 800aab2:	430a      	orrs	r2, r1
 800aab4:	619a      	str	r2, [r3, #24]
}
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	46bd      	mov	sp, r7
 800aaba:	b010      	add	sp, #64	; 0x40
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	fffffedf 	.word	0xfffffedf

0800aac4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b09c      	sub	sp, #112	; 0x70
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aacc:	236a      	movs	r3, #106	; 0x6a
 800aace:	18fb      	adds	r3, r7, r3
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	2160      	movs	r1, #96	; 0x60
 800aad4:	5a52      	ldrh	r2, [r2, r1]
 800aad6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	228c      	movs	r2, #140	; 0x8c
 800aaf4:	589b      	ldr	r3, [r3, r2]
 800aaf6:	2b22      	cmp	r3, #34	; 0x22
 800aaf8:	d000      	beq.n	800aafc <UART_RxISR_8BIT_FIFOEN+0x38>
 800aafa:	e144      	b.n	800ad86 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aafc:	235e      	movs	r3, #94	; 0x5e
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	2168      	movs	r1, #104	; 0x68
 800ab04:	5a52      	ldrh	r2, [r2, r1]
 800ab06:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab08:	e0eb      	b.n	800ace2 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab10:	215c      	movs	r1, #92	; 0x5c
 800ab12:	187b      	adds	r3, r7, r1
 800ab14:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab16:	187b      	adds	r3, r7, r1
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	236a      	movs	r3, #106	; 0x6a
 800ab1e:	18fb      	adds	r3, r7, r3
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	b2d9      	uxtb	r1, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab28:	400a      	ands	r2, r1
 800ab2a:	b2d2      	uxtb	r2, r2
 800ab2c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	225e      	movs	r2, #94	; 0x5e
 800ab3c:	5a9b      	ldrh	r3, [r3, r2]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b299      	uxth	r1, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	225e      	movs	r2, #94	; 0x5e
 800ab48:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab54:	2207      	movs	r2, #7
 800ab56:	4013      	ands	r3, r2
 800ab58:	d049      	beq.n	800abee <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	4013      	ands	r3, r2
 800ab60:	d010      	beq.n	800ab84 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800ab62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab64:	2380      	movs	r3, #128	; 0x80
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	4013      	ands	r3, r2
 800ab6a:	d00b      	beq.n	800ab84 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2201      	movs	r2, #1
 800ab72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2290      	movs	r2, #144	; 0x90
 800ab78:	589b      	ldr	r3, [r3, r2]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2190      	movs	r1, #144	; 0x90
 800ab82:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab86:	2202      	movs	r2, #2
 800ab88:	4013      	ands	r3, r2
 800ab8a:	d00f      	beq.n	800abac <UART_RxISR_8BIT_FIFOEN+0xe8>
 800ab8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4013      	ands	r3, r2
 800ab92:	d00b      	beq.n	800abac <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2290      	movs	r2, #144	; 0x90
 800aba0:	589b      	ldr	r3, [r3, r2]
 800aba2:	2204      	movs	r2, #4
 800aba4:	431a      	orrs	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2190      	movs	r1, #144	; 0x90
 800abaa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abae:	2204      	movs	r2, #4
 800abb0:	4013      	ands	r3, r2
 800abb2:	d00f      	beq.n	800abd4 <UART_RxISR_8BIT_FIFOEN+0x110>
 800abb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abb6:	2201      	movs	r2, #1
 800abb8:	4013      	ands	r3, r2
 800abba:	d00b      	beq.n	800abd4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2204      	movs	r2, #4
 800abc2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2290      	movs	r2, #144	; 0x90
 800abc8:	589b      	ldr	r3, [r3, r2]
 800abca:	2202      	movs	r2, #2
 800abcc:	431a      	orrs	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2190      	movs	r1, #144	; 0x90
 800abd2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2290      	movs	r2, #144	; 0x90
 800abd8:	589b      	ldr	r3, [r3, r2]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d007      	beq.n	800abee <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	0018      	movs	r0, r3
 800abe2:	f7ff f8ab 	bl	8009d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2290      	movs	r2, #144	; 0x90
 800abea:	2100      	movs	r1, #0
 800abec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	225e      	movs	r2, #94	; 0x5e
 800abf2:	5a9b      	ldrh	r3, [r3, r2]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d173      	bne.n	800ace2 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abfa:	f3ef 8310 	mrs	r3, PRIMASK
 800abfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac02:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac04:	2301      	movs	r3, #1
 800ac06:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	f383 8810 	msr	PRIMASK, r3
}
 800ac0e:	46c0      	nop			; (mov r8, r8)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4961      	ldr	r1, [pc, #388]	; (800ada0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800ac1c:	400a      	ands	r2, r1
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac26:	f383 8810 	msr	PRIMASK, r3
}
 800ac2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac30:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800ac32:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac34:	657b      	str	r3, [r7, #84]	; 0x54
 800ac36:	2301      	movs	r3, #1
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3c:	f383 8810 	msr	PRIMASK, r3
}
 800ac40:	46c0      	nop			; (mov r8, r8)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4955      	ldr	r1, [pc, #340]	; (800ada4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800ac4e:	400a      	ands	r2, r1
 800ac50:	609a      	str	r2, [r3, #8]
 800ac52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac58:	f383 8810 	msr	PRIMASK, r3
}
 800ac5c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	228c      	movs	r2, #140	; 0x8c
 800ac62:	2120      	movs	r1, #32
 800ac64:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d12f      	bne.n	800acda <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac80:	f3ef 8310 	mrs	r3, PRIMASK
 800ac84:	623b      	str	r3, [r7, #32]
  return(result);
 800ac86:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac88:	653b      	str	r3, [r7, #80]	; 0x50
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	f383 8810 	msr	PRIMASK, r3
}
 800ac94:	46c0      	nop			; (mov r8, r8)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2110      	movs	r1, #16
 800aca2:	438a      	bics	r2, r1
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	f383 8810 	msr	PRIMASK, r3
}
 800acb0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	2210      	movs	r2, #16
 800acba:	4013      	ands	r3, r2
 800acbc:	2b10      	cmp	r3, #16
 800acbe:	d103      	bne.n	800acc8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2210      	movs	r2, #16
 800acc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	225c      	movs	r2, #92	; 0x5c
 800accc:	5a9a      	ldrh	r2, [r3, r2]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	0011      	movs	r1, r2
 800acd2:	0018      	movs	r0, r3
 800acd4:	f7ff f83a 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
 800acd8:	e003      	b.n	800ace2 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	0018      	movs	r0, r3
 800acde:	f7fa ff19 	bl	8005b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ace2:	235e      	movs	r3, #94	; 0x5e
 800ace4:	18fb      	adds	r3, r7, r3
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d004      	beq.n	800acf6 <UART_RxISR_8BIT_FIFOEN+0x232>
 800acec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acee:	2220      	movs	r2, #32
 800acf0:	4013      	ands	r3, r2
 800acf2:	d000      	beq.n	800acf6 <UART_RxISR_8BIT_FIFOEN+0x232>
 800acf4:	e709      	b.n	800ab0a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800acf6:	204e      	movs	r0, #78	; 0x4e
 800acf8:	183b      	adds	r3, r7, r0
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	215e      	movs	r1, #94	; 0x5e
 800acfe:	5a52      	ldrh	r2, [r2, r1]
 800ad00:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad02:	0001      	movs	r1, r0
 800ad04:	187b      	adds	r3, r7, r1
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d044      	beq.n	800ad96 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2268      	movs	r2, #104	; 0x68
 800ad10:	5a9b      	ldrh	r3, [r3, r2]
 800ad12:	187a      	adds	r2, r7, r1
 800ad14:	8812      	ldrh	r2, [r2, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d23d      	bcs.n	800ad96 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad20:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad22:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad24:	2301      	movs	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f383 8810 	msr	PRIMASK, r3
}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	689a      	ldr	r2, [r3, #8]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	491b      	ldr	r1, [pc, #108]	; (800ada8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800ad3c:	400a      	ands	r2, r1
 800ad3e:	609a      	str	r2, [r3, #8]
 800ad40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f383 8810 	msr	PRIMASK, r3
}
 800ad4a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a17      	ldr	r2, [pc, #92]	; (800adac <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800ad50:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad52:	f3ef 8310 	mrs	r3, PRIMASK
 800ad56:	617b      	str	r3, [r7, #20]
  return(result);
 800ad58:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad5a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	f383 8810 	msr	PRIMASK, r3
}
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2120      	movs	r1, #32
 800ad74:	430a      	orrs	r2, r1
 800ad76:	601a      	str	r2, [r3, #0]
 800ad78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	f383 8810 	msr	PRIMASK, r3
}
 800ad82:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad84:	e007      	b.n	800ad96 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2108      	movs	r1, #8
 800ad92:	430a      	orrs	r2, r1
 800ad94:	619a      	str	r2, [r3, #24]
}
 800ad96:	46c0      	nop			; (mov r8, r8)
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	b01c      	add	sp, #112	; 0x70
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	46c0      	nop			; (mov r8, r8)
 800ada0:	fffffeff 	.word	0xfffffeff
 800ada4:	effffffe 	.word	0xeffffffe
 800ada8:	efffffff 	.word	0xefffffff
 800adac:	0800a7dd 	.word	0x0800a7dd

0800adb0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b09e      	sub	sp, #120	; 0x78
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800adb8:	2372      	movs	r3, #114	; 0x72
 800adba:	18fb      	adds	r3, r7, r3
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	2160      	movs	r1, #96	; 0x60
 800adc0:	5a52      	ldrh	r2, [r2, r1]
 800adc2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	228c      	movs	r2, #140	; 0x8c
 800ade0:	589b      	ldr	r3, [r3, r2]
 800ade2:	2b22      	cmp	r3, #34	; 0x22
 800ade4:	d000      	beq.n	800ade8 <UART_RxISR_16BIT_FIFOEN+0x38>
 800ade6:	e144      	b.n	800b072 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ade8:	2366      	movs	r3, #102	; 0x66
 800adea:	18fb      	adds	r3, r7, r3
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	2168      	movs	r1, #104	; 0x68
 800adf0:	5a52      	ldrh	r2, [r2, r1]
 800adf2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800adf4:	e0eb      	b.n	800afce <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adfc:	2164      	movs	r1, #100	; 0x64
 800adfe:	187b      	adds	r3, r7, r1
 800ae00:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae06:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae08:	187b      	adds	r3, r7, r1
 800ae0a:	2272      	movs	r2, #114	; 0x72
 800ae0c:	18ba      	adds	r2, r7, r2
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	8812      	ldrh	r2, [r2, #0]
 800ae12:	4013      	ands	r3, r2
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1e:	1c9a      	adds	r2, r3, #2
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	225e      	movs	r2, #94	; 0x5e
 800ae28:	5a9b      	ldrh	r3, [r3, r2]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	b299      	uxth	r1, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	225e      	movs	r2, #94	; 0x5e
 800ae34:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae40:	2207      	movs	r2, #7
 800ae42:	4013      	ands	r3, r2
 800ae44:	d049      	beq.n	800aeda <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae48:	2201      	movs	r2, #1
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	d010      	beq.n	800ae70 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800ae4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae50:	2380      	movs	r3, #128	; 0x80
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	4013      	ands	r3, r2
 800ae56:	d00b      	beq.n	800ae70 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2290      	movs	r2, #144	; 0x90
 800ae64:	589b      	ldr	r3, [r3, r2]
 800ae66:	2201      	movs	r2, #1
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2190      	movs	r1, #144	; 0x90
 800ae6e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae72:	2202      	movs	r2, #2
 800ae74:	4013      	ands	r3, r2
 800ae76:	d00f      	beq.n	800ae98 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800ae78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	d00b      	beq.n	800ae98 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2202      	movs	r2, #2
 800ae86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2290      	movs	r2, #144	; 0x90
 800ae8c:	589b      	ldr	r3, [r3, r2]
 800ae8e:	2204      	movs	r2, #4
 800ae90:	431a      	orrs	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2190      	movs	r1, #144	; 0x90
 800ae96:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae9a:	2204      	movs	r2, #4
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	d00f      	beq.n	800aec0 <UART_RxISR_16BIT_FIFOEN+0x110>
 800aea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aea2:	2201      	movs	r2, #1
 800aea4:	4013      	ands	r3, r2
 800aea6:	d00b      	beq.n	800aec0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2204      	movs	r2, #4
 800aeae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2290      	movs	r2, #144	; 0x90
 800aeb4:	589b      	ldr	r3, [r3, r2]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2190      	movs	r1, #144	; 0x90
 800aebe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2290      	movs	r2, #144	; 0x90
 800aec4:	589b      	ldr	r3, [r3, r2]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d007      	beq.n	800aeda <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	0018      	movs	r0, r3
 800aece:	f7fe ff35 	bl	8009d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2290      	movs	r2, #144	; 0x90
 800aed6:	2100      	movs	r1, #0
 800aed8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	225e      	movs	r2, #94	; 0x5e
 800aede:	5a9b      	ldrh	r3, [r3, r2]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d173      	bne.n	800afce <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aee6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aef0:	2301      	movs	r3, #1
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef6:	f383 8810 	msr	PRIMASK, r3
}
 800aefa:	46c0      	nop			; (mov r8, r8)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4961      	ldr	r1, [pc, #388]	; (800b08c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800af08:	400a      	ands	r2, r1
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	f383 8810 	msr	PRIMASK, r3
}
 800af16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af18:	f3ef 8310 	mrs	r3, PRIMASK
 800af1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800af1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af20:	65bb      	str	r3, [r7, #88]	; 0x58
 800af22:	2301      	movs	r3, #1
 800af24:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af28:	f383 8810 	msr	PRIMASK, r3
}
 800af2c:	46c0      	nop			; (mov r8, r8)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4955      	ldr	r1, [pc, #340]	; (800b090 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800af3a:	400a      	ands	r2, r1
 800af3c:	609a      	str	r2, [r3, #8]
 800af3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af40:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af44:	f383 8810 	msr	PRIMASK, r3
}
 800af48:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	228c      	movs	r2, #140	; 0x8c
 800af4e:	2120      	movs	r1, #32
 800af50:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af62:	2b01      	cmp	r3, #1
 800af64:	d12f      	bne.n	800afc6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af6c:	f3ef 8310 	mrs	r3, PRIMASK
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af74:	657b      	str	r3, [r7, #84]	; 0x54
 800af76:	2301      	movs	r3, #1
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7c:	f383 8810 	msr	PRIMASK, r3
}
 800af80:	46c0      	nop			; (mov r8, r8)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2110      	movs	r1, #16
 800af8e:	438a      	bics	r2, r1
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af98:	f383 8810 	msr	PRIMASK, r3
}
 800af9c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	2210      	movs	r2, #16
 800afa6:	4013      	ands	r3, r2
 800afa8:	2b10      	cmp	r3, #16
 800afaa:	d103      	bne.n	800afb4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2210      	movs	r2, #16
 800afb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	225c      	movs	r2, #92	; 0x5c
 800afb8:	5a9a      	ldrh	r2, [r3, r2]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	0011      	movs	r1, r2
 800afbe:	0018      	movs	r0, r3
 800afc0:	f7fe fec4 	bl	8009d4c <HAL_UARTEx_RxEventCallback>
 800afc4:	e003      	b.n	800afce <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	0018      	movs	r0, r3
 800afca:	f7fa fda3 	bl	8005b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800afce:	2366      	movs	r3, #102	; 0x66
 800afd0:	18fb      	adds	r3, r7, r3
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d004      	beq.n	800afe2 <UART_RxISR_16BIT_FIFOEN+0x232>
 800afd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afda:	2220      	movs	r2, #32
 800afdc:	4013      	ands	r3, r2
 800afde:	d000      	beq.n	800afe2 <UART_RxISR_16BIT_FIFOEN+0x232>
 800afe0:	e709      	b.n	800adf6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800afe2:	2052      	movs	r0, #82	; 0x52
 800afe4:	183b      	adds	r3, r7, r0
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	215e      	movs	r1, #94	; 0x5e
 800afea:	5a52      	ldrh	r2, [r2, r1]
 800afec:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800afee:	0001      	movs	r1, r0
 800aff0:	187b      	adds	r3, r7, r1
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d044      	beq.n	800b082 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2268      	movs	r2, #104	; 0x68
 800affc:	5a9b      	ldrh	r3, [r3, r2]
 800affe:	187a      	adds	r2, r7, r1
 800b000:	8812      	ldrh	r2, [r2, #0]
 800b002:	429a      	cmp	r2, r3
 800b004:	d23d      	bcs.n	800b082 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b006:	f3ef 8310 	mrs	r3, PRIMASK
 800b00a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b00c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b00e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b010:	2301      	movs	r3, #1
 800b012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f383 8810 	msr	PRIMASK, r3
}
 800b01a:	46c0      	nop			; (mov r8, r8)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689a      	ldr	r2, [r3, #8]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	491b      	ldr	r1, [pc, #108]	; (800b094 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800b028:	400a      	ands	r2, r1
 800b02a:	609a      	str	r2, [r3, #8]
 800b02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b02e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f383 8810 	msr	PRIMASK, r3
}
 800b036:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a17      	ldr	r2, [pc, #92]	; (800b098 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800b03c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b03e:	f3ef 8310 	mrs	r3, PRIMASK
 800b042:	61bb      	str	r3, [r7, #24]
  return(result);
 800b044:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b046:	64bb      	str	r3, [r7, #72]	; 0x48
 800b048:	2301      	movs	r3, #1
 800b04a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	f383 8810 	msr	PRIMASK, r3
}
 800b052:	46c0      	nop			; (mov r8, r8)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2120      	movs	r1, #32
 800b060:	430a      	orrs	r2, r1
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b066:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	f383 8810 	msr	PRIMASK, r3
}
 800b06e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b070:	e007      	b.n	800b082 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	699a      	ldr	r2, [r3, #24]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2108      	movs	r1, #8
 800b07e:	430a      	orrs	r2, r1
 800b080:	619a      	str	r2, [r3, #24]
}
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	46bd      	mov	sp, r7
 800b086:	b01e      	add	sp, #120	; 0x78
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	fffffeff 	.word	0xfffffeff
 800b090:	effffffe 	.word	0xeffffffe
 800b094:	efffffff 	.word	0xefffffff
 800b098:	0800a951 	.word	0x0800a951

0800b09c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b0a4:	46c0      	nop			; (mov r8, r8)
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	b002      	add	sp, #8
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b0b4:	46c0      	nop			; (mov r8, r8)
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	b002      	add	sp, #8
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b0c4:	46c0      	nop			; (mov r8, r8)
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	b002      	add	sp, #8
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <__errno>:
 800b0cc:	4b01      	ldr	r3, [pc, #4]	; (800b0d4 <__errno+0x8>)
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	4770      	bx	lr
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	200002b0 	.word	0x200002b0

0800b0d8 <__libc_init_array>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	2600      	movs	r6, #0
 800b0dc:	4d0c      	ldr	r5, [pc, #48]	; (800b110 <__libc_init_array+0x38>)
 800b0de:	4c0d      	ldr	r4, [pc, #52]	; (800b114 <__libc_init_array+0x3c>)
 800b0e0:	1b64      	subs	r4, r4, r5
 800b0e2:	10a4      	asrs	r4, r4, #2
 800b0e4:	42a6      	cmp	r6, r4
 800b0e6:	d109      	bne.n	800b0fc <__libc_init_array+0x24>
 800b0e8:	2600      	movs	r6, #0
 800b0ea:	f004 fe25 	bl	800fd38 <_init>
 800b0ee:	4d0a      	ldr	r5, [pc, #40]	; (800b118 <__libc_init_array+0x40>)
 800b0f0:	4c0a      	ldr	r4, [pc, #40]	; (800b11c <__libc_init_array+0x44>)
 800b0f2:	1b64      	subs	r4, r4, r5
 800b0f4:	10a4      	asrs	r4, r4, #2
 800b0f6:	42a6      	cmp	r6, r4
 800b0f8:	d105      	bne.n	800b106 <__libc_init_array+0x2e>
 800b0fa:	bd70      	pop	{r4, r5, r6, pc}
 800b0fc:	00b3      	lsls	r3, r6, #2
 800b0fe:	58eb      	ldr	r3, [r5, r3]
 800b100:	4798      	blx	r3
 800b102:	3601      	adds	r6, #1
 800b104:	e7ee      	b.n	800b0e4 <__libc_init_array+0xc>
 800b106:	00b3      	lsls	r3, r6, #2
 800b108:	58eb      	ldr	r3, [r5, r3]
 800b10a:	4798      	blx	r3
 800b10c:	3601      	adds	r6, #1
 800b10e:	e7f2      	b.n	800b0f6 <__libc_init_array+0x1e>
 800b110:	080104ac 	.word	0x080104ac
 800b114:	080104ac 	.word	0x080104ac
 800b118:	080104ac 	.word	0x080104ac
 800b11c:	080104b0 	.word	0x080104b0

0800b120 <memcpy>:
 800b120:	2300      	movs	r3, #0
 800b122:	b510      	push	{r4, lr}
 800b124:	429a      	cmp	r2, r3
 800b126:	d100      	bne.n	800b12a <memcpy+0xa>
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	5ccc      	ldrb	r4, [r1, r3]
 800b12c:	54c4      	strb	r4, [r0, r3]
 800b12e:	3301      	adds	r3, #1
 800b130:	e7f8      	b.n	800b124 <memcpy+0x4>

0800b132 <memset>:
 800b132:	0003      	movs	r3, r0
 800b134:	1882      	adds	r2, r0, r2
 800b136:	4293      	cmp	r3, r2
 800b138:	d100      	bne.n	800b13c <memset+0xa>
 800b13a:	4770      	bx	lr
 800b13c:	7019      	strb	r1, [r3, #0]
 800b13e:	3301      	adds	r3, #1
 800b140:	e7f9      	b.n	800b136 <memset+0x4>

0800b142 <__cvt>:
 800b142:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b144:	001e      	movs	r6, r3
 800b146:	2300      	movs	r3, #0
 800b148:	0014      	movs	r4, r2
 800b14a:	b08b      	sub	sp, #44	; 0x2c
 800b14c:	429e      	cmp	r6, r3
 800b14e:	da04      	bge.n	800b15a <__cvt+0x18>
 800b150:	2180      	movs	r1, #128	; 0x80
 800b152:	0609      	lsls	r1, r1, #24
 800b154:	1873      	adds	r3, r6, r1
 800b156:	001e      	movs	r6, r3
 800b158:	232d      	movs	r3, #45	; 0x2d
 800b15a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b15c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b15e:	7013      	strb	r3, [r2, #0]
 800b160:	2320      	movs	r3, #32
 800b162:	2203      	movs	r2, #3
 800b164:	439f      	bics	r7, r3
 800b166:	2f46      	cmp	r7, #70	; 0x46
 800b168:	d007      	beq.n	800b17a <__cvt+0x38>
 800b16a:	003b      	movs	r3, r7
 800b16c:	3b45      	subs	r3, #69	; 0x45
 800b16e:	4259      	negs	r1, r3
 800b170:	414b      	adcs	r3, r1
 800b172:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b174:	3a01      	subs	r2, #1
 800b176:	18cb      	adds	r3, r1, r3
 800b178:	9310      	str	r3, [sp, #64]	; 0x40
 800b17a:	ab09      	add	r3, sp, #36	; 0x24
 800b17c:	9304      	str	r3, [sp, #16]
 800b17e:	ab08      	add	r3, sp, #32
 800b180:	9303      	str	r3, [sp, #12]
 800b182:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b184:	9200      	str	r2, [sp, #0]
 800b186:	9302      	str	r3, [sp, #8]
 800b188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b18a:	0022      	movs	r2, r4
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	0033      	movs	r3, r6
 800b190:	f001 fdc4 	bl	800cd1c <_dtoa_r>
 800b194:	0005      	movs	r5, r0
 800b196:	2f47      	cmp	r7, #71	; 0x47
 800b198:	d102      	bne.n	800b1a0 <__cvt+0x5e>
 800b19a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b19c:	07db      	lsls	r3, r3, #31
 800b19e:	d528      	bpl.n	800b1f2 <__cvt+0xb0>
 800b1a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1a2:	18eb      	adds	r3, r5, r3
 800b1a4:	9307      	str	r3, [sp, #28]
 800b1a6:	2f46      	cmp	r7, #70	; 0x46
 800b1a8:	d114      	bne.n	800b1d4 <__cvt+0x92>
 800b1aa:	782b      	ldrb	r3, [r5, #0]
 800b1ac:	2b30      	cmp	r3, #48	; 0x30
 800b1ae:	d10c      	bne.n	800b1ca <__cvt+0x88>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	0020      	movs	r0, r4
 800b1b6:	0031      	movs	r1, r6
 800b1b8:	f7f5 f944 	bl	8000444 <__aeabi_dcmpeq>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d104      	bne.n	800b1ca <__cvt+0x88>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1cc:	9a07      	ldr	r2, [sp, #28]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	18d3      	adds	r3, r2, r3
 800b1d2:	9307      	str	r3, [sp, #28]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	0020      	movs	r0, r4
 800b1da:	0031      	movs	r1, r6
 800b1dc:	f7f5 f932 	bl	8000444 <__aeabi_dcmpeq>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d001      	beq.n	800b1e8 <__cvt+0xa6>
 800b1e4:	9b07      	ldr	r3, [sp, #28]
 800b1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e8:	2230      	movs	r2, #48	; 0x30
 800b1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ec:	9907      	ldr	r1, [sp, #28]
 800b1ee:	428b      	cmp	r3, r1
 800b1f0:	d306      	bcc.n	800b200 <__cvt+0xbe>
 800b1f2:	0028      	movs	r0, r5
 800b1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b1f8:	1b5b      	subs	r3, r3, r5
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	b00b      	add	sp, #44	; 0x2c
 800b1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b200:	1c59      	adds	r1, r3, #1
 800b202:	9109      	str	r1, [sp, #36]	; 0x24
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	e7f0      	b.n	800b1ea <__cvt+0xa8>

0800b208 <__exponent>:
 800b208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20a:	1c83      	adds	r3, r0, #2
 800b20c:	b087      	sub	sp, #28
 800b20e:	9303      	str	r3, [sp, #12]
 800b210:	0005      	movs	r5, r0
 800b212:	000c      	movs	r4, r1
 800b214:	232b      	movs	r3, #43	; 0x2b
 800b216:	7002      	strb	r2, [r0, #0]
 800b218:	2900      	cmp	r1, #0
 800b21a:	da01      	bge.n	800b220 <__exponent+0x18>
 800b21c:	424c      	negs	r4, r1
 800b21e:	3302      	adds	r3, #2
 800b220:	706b      	strb	r3, [r5, #1]
 800b222:	2c09      	cmp	r4, #9
 800b224:	dd31      	ble.n	800b28a <__exponent+0x82>
 800b226:	270a      	movs	r7, #10
 800b228:	ab04      	add	r3, sp, #16
 800b22a:	1dde      	adds	r6, r3, #7
 800b22c:	0020      	movs	r0, r4
 800b22e:	0039      	movs	r1, r7
 800b230:	9601      	str	r6, [sp, #4]
 800b232:	f7f5 f8f1 	bl	8000418 <__aeabi_idivmod>
 800b236:	3e01      	subs	r6, #1
 800b238:	3130      	adds	r1, #48	; 0x30
 800b23a:	0020      	movs	r0, r4
 800b23c:	7031      	strb	r1, [r6, #0]
 800b23e:	0039      	movs	r1, r7
 800b240:	9402      	str	r4, [sp, #8]
 800b242:	f7f5 f803 	bl	800024c <__divsi3>
 800b246:	9b02      	ldr	r3, [sp, #8]
 800b248:	0004      	movs	r4, r0
 800b24a:	2b63      	cmp	r3, #99	; 0x63
 800b24c:	dcee      	bgt.n	800b22c <__exponent+0x24>
 800b24e:	9b01      	ldr	r3, [sp, #4]
 800b250:	3430      	adds	r4, #48	; 0x30
 800b252:	1e9a      	subs	r2, r3, #2
 800b254:	0013      	movs	r3, r2
 800b256:	9903      	ldr	r1, [sp, #12]
 800b258:	7014      	strb	r4, [r2, #0]
 800b25a:	a804      	add	r0, sp, #16
 800b25c:	3007      	adds	r0, #7
 800b25e:	4298      	cmp	r0, r3
 800b260:	d80e      	bhi.n	800b280 <__exponent+0x78>
 800b262:	ab04      	add	r3, sp, #16
 800b264:	3307      	adds	r3, #7
 800b266:	2000      	movs	r0, #0
 800b268:	429a      	cmp	r2, r3
 800b26a:	d804      	bhi.n	800b276 <__exponent+0x6e>
 800b26c:	ab04      	add	r3, sp, #16
 800b26e:	3009      	adds	r0, #9
 800b270:	18c0      	adds	r0, r0, r3
 800b272:	9b01      	ldr	r3, [sp, #4]
 800b274:	1ac0      	subs	r0, r0, r3
 800b276:	9b03      	ldr	r3, [sp, #12]
 800b278:	1818      	adds	r0, r3, r0
 800b27a:	1b40      	subs	r0, r0, r5
 800b27c:	b007      	add	sp, #28
 800b27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b280:	7818      	ldrb	r0, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	7008      	strb	r0, [r1, #0]
 800b286:	3101      	adds	r1, #1
 800b288:	e7e7      	b.n	800b25a <__exponent+0x52>
 800b28a:	2330      	movs	r3, #48	; 0x30
 800b28c:	18e4      	adds	r4, r4, r3
 800b28e:	70ab      	strb	r3, [r5, #2]
 800b290:	1d28      	adds	r0, r5, #4
 800b292:	70ec      	strb	r4, [r5, #3]
 800b294:	e7f1      	b.n	800b27a <__exponent+0x72>
	...

0800b298 <_printf_float>:
 800b298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b29a:	b095      	sub	sp, #84	; 0x54
 800b29c:	000c      	movs	r4, r1
 800b29e:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a0:	001e      	movs	r6, r3
 800b2a2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b2a4:	0007      	movs	r7, r0
 800b2a6:	f002 fec7 	bl	800e038 <_localeconv_r>
 800b2aa:	6803      	ldr	r3, [r0, #0]
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b2b0:	f7f4 ff26 	bl	8000100 <strlen>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9312      	str	r3, [sp, #72]	; 0x48
 800b2b8:	7e23      	ldrb	r3, [r4, #24]
 800b2ba:	2207      	movs	r2, #7
 800b2bc:	930a      	str	r3, [sp, #40]	; 0x28
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	900e      	str	r0, [sp, #56]	; 0x38
 800b2c2:	930d      	str	r3, [sp, #52]	; 0x34
 800b2c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	05c9      	lsls	r1, r1, #23
 800b2ca:	d547      	bpl.n	800b35c <_printf_float+0xc4>
 800b2cc:	189b      	adds	r3, r3, r2
 800b2ce:	4393      	bics	r3, r2
 800b2d0:	001a      	movs	r2, r3
 800b2d2:	3208      	adds	r2, #8
 800b2d4:	602a      	str	r2, [r5, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	64a2      	str	r2, [r4, #72]	; 0x48
 800b2dc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b2de:	2201      	movs	r2, #1
 800b2e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b2e2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e6:	006b      	lsls	r3, r5, #1
 800b2e8:	085b      	lsrs	r3, r3, #1
 800b2ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b2ee:	4ba7      	ldr	r3, [pc, #668]	; (800b58c <_printf_float+0x2f4>)
 800b2f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b2f2:	4252      	negs	r2, r2
 800b2f4:	f7f7 fd84 	bl	8002e00 <__aeabi_dcmpun>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d131      	bne.n	800b360 <_printf_float+0xc8>
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	4ba3      	ldr	r3, [pc, #652]	; (800b58c <_printf_float+0x2f4>)
 800b300:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b302:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b304:	4252      	negs	r2, r2
 800b306:	f7f5 f8ad 	bl	8000464 <__aeabi_dcmple>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d128      	bne.n	800b360 <_printf_float+0xc8>
 800b30e:	2200      	movs	r2, #0
 800b310:	2300      	movs	r3, #0
 800b312:	0029      	movs	r1, r5
 800b314:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b316:	f7f5 f89b 	bl	8000450 <__aeabi_dcmplt>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d003      	beq.n	800b326 <_printf_float+0x8e>
 800b31e:	0023      	movs	r3, r4
 800b320:	222d      	movs	r2, #45	; 0x2d
 800b322:	3343      	adds	r3, #67	; 0x43
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b328:	4d99      	ldr	r5, [pc, #612]	; (800b590 <_printf_float+0x2f8>)
 800b32a:	2b47      	cmp	r3, #71	; 0x47
 800b32c:	d900      	bls.n	800b330 <_printf_float+0x98>
 800b32e:	4d99      	ldr	r5, [pc, #612]	; (800b594 <_printf_float+0x2fc>)
 800b330:	2303      	movs	r3, #3
 800b332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	3301      	adds	r3, #1
 800b338:	439a      	bics	r2, r3
 800b33a:	2300      	movs	r3, #0
 800b33c:	6022      	str	r2, [r4, #0]
 800b33e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b342:	0021      	movs	r1, r4
 800b344:	0038      	movs	r0, r7
 800b346:	9600      	str	r6, [sp, #0]
 800b348:	aa13      	add	r2, sp, #76	; 0x4c
 800b34a:	f000 f9e7 	bl	800b71c <_printf_common>
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	d000      	beq.n	800b354 <_printf_float+0xbc>
 800b352:	e0a2      	b.n	800b49a <_printf_float+0x202>
 800b354:	2001      	movs	r0, #1
 800b356:	4240      	negs	r0, r0
 800b358:	b015      	add	sp, #84	; 0x54
 800b35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b35c:	3307      	adds	r3, #7
 800b35e:	e7b6      	b.n	800b2ce <_printf_float+0x36>
 800b360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b362:	002b      	movs	r3, r5
 800b364:	0010      	movs	r0, r2
 800b366:	0029      	movs	r1, r5
 800b368:	f7f7 fd4a 	bl	8002e00 <__aeabi_dcmpun>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d00b      	beq.n	800b388 <_printf_float+0xf0>
 800b370:	2d00      	cmp	r5, #0
 800b372:	da03      	bge.n	800b37c <_printf_float+0xe4>
 800b374:	0023      	movs	r3, r4
 800b376:	222d      	movs	r2, #45	; 0x2d
 800b378:	3343      	adds	r3, #67	; 0x43
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37e:	4d86      	ldr	r5, [pc, #536]	; (800b598 <_printf_float+0x300>)
 800b380:	2b47      	cmp	r3, #71	; 0x47
 800b382:	d9d5      	bls.n	800b330 <_printf_float+0x98>
 800b384:	4d85      	ldr	r5, [pc, #532]	; (800b59c <_printf_float+0x304>)
 800b386:	e7d3      	b.n	800b330 <_printf_float+0x98>
 800b388:	2220      	movs	r2, #32
 800b38a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b38c:	6863      	ldr	r3, [r4, #4]
 800b38e:	4391      	bics	r1, r2
 800b390:	910f      	str	r1, [sp, #60]	; 0x3c
 800b392:	1c5a      	adds	r2, r3, #1
 800b394:	d149      	bne.n	800b42a <_printf_float+0x192>
 800b396:	3307      	adds	r3, #7
 800b398:	6063      	str	r3, [r4, #4]
 800b39a:	2380      	movs	r3, #128	; 0x80
 800b39c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	9206      	str	r2, [sp, #24]
 800b3a6:	aa12      	add	r2, sp, #72	; 0x48
 800b3a8:	9205      	str	r2, [sp, #20]
 800b3aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ac:	a908      	add	r1, sp, #32
 800b3ae:	9204      	str	r2, [sp, #16]
 800b3b0:	aa11      	add	r2, sp, #68	; 0x44
 800b3b2:	9203      	str	r2, [sp, #12]
 800b3b4:	2223      	movs	r2, #35	; 0x23
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	9301      	str	r3, [sp, #4]
 800b3ba:	6863      	ldr	r3, [r4, #4]
 800b3bc:	1852      	adds	r2, r2, r1
 800b3be:	9202      	str	r2, [sp, #8]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	0038      	movs	r0, r7
 800b3c4:	002b      	movs	r3, r5
 800b3c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3c8:	f7ff febb 	bl	800b142 <__cvt>
 800b3cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3ce:	0005      	movs	r5, r0
 800b3d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b3d2:	2b47      	cmp	r3, #71	; 0x47
 800b3d4:	d108      	bne.n	800b3e8 <_printf_float+0x150>
 800b3d6:	1ccb      	adds	r3, r1, #3
 800b3d8:	db02      	blt.n	800b3e0 <_printf_float+0x148>
 800b3da:	6863      	ldr	r3, [r4, #4]
 800b3dc:	4299      	cmp	r1, r3
 800b3de:	dd48      	ble.n	800b472 <_printf_float+0x1da>
 800b3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e2:	3b02      	subs	r3, #2
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ea:	2b65      	cmp	r3, #101	; 0x65
 800b3ec:	d824      	bhi.n	800b438 <_printf_float+0x1a0>
 800b3ee:	0020      	movs	r0, r4
 800b3f0:	001a      	movs	r2, r3
 800b3f2:	3901      	subs	r1, #1
 800b3f4:	3050      	adds	r0, #80	; 0x50
 800b3f6:	9111      	str	r1, [sp, #68]	; 0x44
 800b3f8:	f7ff ff06 	bl	800b208 <__exponent>
 800b3fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3fe:	900b      	str	r0, [sp, #44]	; 0x2c
 800b400:	1813      	adds	r3, r2, r0
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	2a01      	cmp	r2, #1
 800b406:	dc02      	bgt.n	800b40e <_printf_float+0x176>
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	07d2      	lsls	r2, r2, #31
 800b40c:	d501      	bpl.n	800b412 <_printf_float+0x17a>
 800b40e:	3301      	adds	r3, #1
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	2323      	movs	r3, #35	; 0x23
 800b414:	aa08      	add	r2, sp, #32
 800b416:	189b      	adds	r3, r3, r2
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d100      	bne.n	800b420 <_printf_float+0x188>
 800b41e:	e78f      	b.n	800b340 <_printf_float+0xa8>
 800b420:	0023      	movs	r3, r4
 800b422:	222d      	movs	r2, #45	; 0x2d
 800b424:	3343      	adds	r3, #67	; 0x43
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	e78a      	b.n	800b340 <_printf_float+0xa8>
 800b42a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b42c:	2a47      	cmp	r2, #71	; 0x47
 800b42e:	d1b4      	bne.n	800b39a <_printf_float+0x102>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1b2      	bne.n	800b39a <_printf_float+0x102>
 800b434:	3301      	adds	r3, #1
 800b436:	e7af      	b.n	800b398 <_printf_float+0x100>
 800b438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43a:	2b66      	cmp	r3, #102	; 0x66
 800b43c:	d11b      	bne.n	800b476 <_printf_float+0x1de>
 800b43e:	6863      	ldr	r3, [r4, #4]
 800b440:	2900      	cmp	r1, #0
 800b442:	dd0d      	ble.n	800b460 <_printf_float+0x1c8>
 800b444:	6121      	str	r1, [r4, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d102      	bne.n	800b450 <_printf_float+0x1b8>
 800b44a:	6822      	ldr	r2, [r4, #0]
 800b44c:	07d2      	lsls	r2, r2, #31
 800b44e:	d502      	bpl.n	800b456 <_printf_float+0x1be>
 800b450:	3301      	adds	r3, #1
 800b452:	1859      	adds	r1, r3, r1
 800b454:	6121      	str	r1, [r4, #16]
 800b456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b458:	65a3      	str	r3, [r4, #88]	; 0x58
 800b45a:	2300      	movs	r3, #0
 800b45c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b45e:	e7d8      	b.n	800b412 <_printf_float+0x17a>
 800b460:	2b00      	cmp	r3, #0
 800b462:	d103      	bne.n	800b46c <_printf_float+0x1d4>
 800b464:	2201      	movs	r2, #1
 800b466:	6821      	ldr	r1, [r4, #0]
 800b468:	4211      	tst	r1, r2
 800b46a:	d000      	beq.n	800b46e <_printf_float+0x1d6>
 800b46c:	1c9a      	adds	r2, r3, #2
 800b46e:	6122      	str	r2, [r4, #16]
 800b470:	e7f1      	b.n	800b456 <_printf_float+0x1be>
 800b472:	2367      	movs	r3, #103	; 0x67
 800b474:	930a      	str	r3, [sp, #40]	; 0x28
 800b476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b47a:	4293      	cmp	r3, r2
 800b47c:	db06      	blt.n	800b48c <_printf_float+0x1f4>
 800b47e:	6822      	ldr	r2, [r4, #0]
 800b480:	6123      	str	r3, [r4, #16]
 800b482:	07d2      	lsls	r2, r2, #31
 800b484:	d5e7      	bpl.n	800b456 <_printf_float+0x1be>
 800b486:	3301      	adds	r3, #1
 800b488:	6123      	str	r3, [r4, #16]
 800b48a:	e7e4      	b.n	800b456 <_printf_float+0x1be>
 800b48c:	2101      	movs	r1, #1
 800b48e:	2b00      	cmp	r3, #0
 800b490:	dc01      	bgt.n	800b496 <_printf_float+0x1fe>
 800b492:	1849      	adds	r1, r1, r1
 800b494:	1ac9      	subs	r1, r1, r3
 800b496:	1852      	adds	r2, r2, r1
 800b498:	e7e9      	b.n	800b46e <_printf_float+0x1d6>
 800b49a:	6822      	ldr	r2, [r4, #0]
 800b49c:	0553      	lsls	r3, r2, #21
 800b49e:	d407      	bmi.n	800b4b0 <_printf_float+0x218>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	002a      	movs	r2, r5
 800b4a4:	0038      	movs	r0, r7
 800b4a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4a8:	47b0      	blx	r6
 800b4aa:	1c43      	adds	r3, r0, #1
 800b4ac:	d128      	bne.n	800b500 <_printf_float+0x268>
 800b4ae:	e751      	b.n	800b354 <_printf_float+0xbc>
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	2b65      	cmp	r3, #101	; 0x65
 800b4b4:	d800      	bhi.n	800b4b8 <_printf_float+0x220>
 800b4b6:	e0e1      	b.n	800b67c <_printf_float+0x3e4>
 800b4b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b4ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f7f4 ffc0 	bl	8000444 <__aeabi_dcmpeq>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d031      	beq.n	800b52c <_printf_float+0x294>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	0038      	movs	r0, r7
 800b4cc:	4a34      	ldr	r2, [pc, #208]	; (800b5a0 <_printf_float+0x308>)
 800b4ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4d0:	47b0      	blx	r6
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d100      	bne.n	800b4d8 <_printf_float+0x240>
 800b4d6:	e73d      	b.n	800b354 <_printf_float+0xbc>
 800b4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	db02      	blt.n	800b4e6 <_printf_float+0x24e>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	07db      	lsls	r3, r3, #31
 800b4e4:	d50c      	bpl.n	800b500 <_printf_float+0x268>
 800b4e6:	0038      	movs	r0, r7
 800b4e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ee:	47b0      	blx	r6
 800b4f0:	2500      	movs	r5, #0
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	d100      	bne.n	800b4f8 <_printf_float+0x260>
 800b4f6:	e72d      	b.n	800b354 <_printf_float+0xbc>
 800b4f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	42ab      	cmp	r3, r5
 800b4fe:	dc0a      	bgt.n	800b516 <_printf_float+0x27e>
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	079b      	lsls	r3, r3, #30
 800b504:	d500      	bpl.n	800b508 <_printf_float+0x270>
 800b506:	e106      	b.n	800b716 <_printf_float+0x47e>
 800b508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b50a:	68e0      	ldr	r0, [r4, #12]
 800b50c:	4298      	cmp	r0, r3
 800b50e:	db00      	blt.n	800b512 <_printf_float+0x27a>
 800b510:	e722      	b.n	800b358 <_printf_float+0xc0>
 800b512:	0018      	movs	r0, r3
 800b514:	e720      	b.n	800b358 <_printf_float+0xc0>
 800b516:	0022      	movs	r2, r4
 800b518:	2301      	movs	r3, #1
 800b51a:	0038      	movs	r0, r7
 800b51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b51e:	321a      	adds	r2, #26
 800b520:	47b0      	blx	r6
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	d100      	bne.n	800b528 <_printf_float+0x290>
 800b526:	e715      	b.n	800b354 <_printf_float+0xbc>
 800b528:	3501      	adds	r5, #1
 800b52a:	e7e5      	b.n	800b4f8 <_printf_float+0x260>
 800b52c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b52e:	2b00      	cmp	r3, #0
 800b530:	dc38      	bgt.n	800b5a4 <_printf_float+0x30c>
 800b532:	2301      	movs	r3, #1
 800b534:	0038      	movs	r0, r7
 800b536:	4a1a      	ldr	r2, [pc, #104]	; (800b5a0 <_printf_float+0x308>)
 800b538:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b53a:	47b0      	blx	r6
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d100      	bne.n	800b542 <_printf_float+0x2aa>
 800b540:	e708      	b.n	800b354 <_printf_float+0xbc>
 800b542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b546:	4313      	orrs	r3, r2
 800b548:	d102      	bne.n	800b550 <_printf_float+0x2b8>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	07db      	lsls	r3, r3, #31
 800b54e:	d5d7      	bpl.n	800b500 <_printf_float+0x268>
 800b550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b552:	0038      	movs	r0, r7
 800b554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b556:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b558:	47b0      	blx	r6
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	d100      	bne.n	800b560 <_printf_float+0x2c8>
 800b55e:	e6f9      	b.n	800b354 <_printf_float+0xbc>
 800b560:	2300      	movs	r3, #0
 800b562:	930a      	str	r3, [sp, #40]	; 0x28
 800b564:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b568:	425b      	negs	r3, r3
 800b56a:	4293      	cmp	r3, r2
 800b56c:	dc01      	bgt.n	800b572 <_printf_float+0x2da>
 800b56e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b570:	e797      	b.n	800b4a2 <_printf_float+0x20a>
 800b572:	0022      	movs	r2, r4
 800b574:	2301      	movs	r3, #1
 800b576:	0038      	movs	r0, r7
 800b578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b57a:	321a      	adds	r2, #26
 800b57c:	47b0      	blx	r6
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	d100      	bne.n	800b584 <_printf_float+0x2ec>
 800b582:	e6e7      	b.n	800b354 <_printf_float+0xbc>
 800b584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b586:	3301      	adds	r3, #1
 800b588:	e7eb      	b.n	800b562 <_printf_float+0x2ca>
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	7fefffff 	.word	0x7fefffff
 800b590:	0801000c 	.word	0x0801000c
 800b594:	08010010 	.word	0x08010010
 800b598:	08010014 	.word	0x08010014
 800b59c:	08010018 	.word	0x08010018
 800b5a0:	0801001c 	.word	0x0801001c
 800b5a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	dd00      	ble.n	800b5b0 <_printf_float+0x318>
 800b5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	dc3c      	bgt.n	800b630 <_printf_float+0x398>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	930d      	str	r3, [sp, #52]	; 0x34
 800b5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5bc:	43db      	mvns	r3, r3
 800b5be:	17db      	asrs	r3, r3, #31
 800b5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	dc34      	bgt.n	800b640 <_printf_float+0x3a8>
 800b5d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	db3d      	blt.n	800b65a <_printf_float+0x3c2>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	07db      	lsls	r3, r3, #31
 800b5e2:	d43a      	bmi.n	800b65a <_printf_float+0x3c2>
 800b5e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	1a52      	subs	r2, r2, r1
 800b5ee:	920a      	str	r2, [sp, #40]	; 0x28
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	dd00      	ble.n	800b5f6 <_printf_float+0x35e>
 800b5f4:	930a      	str	r3, [sp, #40]	; 0x28
 800b5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	dc36      	bgt.n	800b66a <_printf_float+0x3d2>
 800b5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5fe:	2500      	movs	r5, #0
 800b600:	43db      	mvns	r3, r3
 800b602:	17db      	asrs	r3, r3, #31
 800b604:	930b      	str	r3, [sp, #44]	; 0x2c
 800b606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b60a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b60c:	1a9b      	subs	r3, r3, r2
 800b60e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b610:	400a      	ands	r2, r1
 800b612:	1a9b      	subs	r3, r3, r2
 800b614:	42ab      	cmp	r3, r5
 800b616:	dc00      	bgt.n	800b61a <_printf_float+0x382>
 800b618:	e772      	b.n	800b500 <_printf_float+0x268>
 800b61a:	0022      	movs	r2, r4
 800b61c:	2301      	movs	r3, #1
 800b61e:	0038      	movs	r0, r7
 800b620:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b622:	321a      	adds	r2, #26
 800b624:	47b0      	blx	r6
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d100      	bne.n	800b62c <_printf_float+0x394>
 800b62a:	e693      	b.n	800b354 <_printf_float+0xbc>
 800b62c:	3501      	adds	r5, #1
 800b62e:	e7ea      	b.n	800b606 <_printf_float+0x36e>
 800b630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b632:	002a      	movs	r2, r5
 800b634:	0038      	movs	r0, r7
 800b636:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b638:	47b0      	blx	r6
 800b63a:	1c43      	adds	r3, r0, #1
 800b63c:	d1bb      	bne.n	800b5b6 <_printf_float+0x31e>
 800b63e:	e689      	b.n	800b354 <_printf_float+0xbc>
 800b640:	0022      	movs	r2, r4
 800b642:	2301      	movs	r3, #1
 800b644:	0038      	movs	r0, r7
 800b646:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b648:	321a      	adds	r2, #26
 800b64a:	47b0      	blx	r6
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d100      	bne.n	800b652 <_printf_float+0x3ba>
 800b650:	e680      	b.n	800b354 <_printf_float+0xbc>
 800b652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b654:	3301      	adds	r3, #1
 800b656:	930d      	str	r3, [sp, #52]	; 0x34
 800b658:	e7b3      	b.n	800b5c2 <_printf_float+0x32a>
 800b65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b65c:	0038      	movs	r0, r7
 800b65e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b660:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b662:	47b0      	blx	r6
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d1bd      	bne.n	800b5e4 <_printf_float+0x34c>
 800b668:	e674      	b.n	800b354 <_printf_float+0xbc>
 800b66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b66c:	0038      	movs	r0, r7
 800b66e:	18ea      	adds	r2, r5, r3
 800b670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b674:	47b0      	blx	r6
 800b676:	1c43      	adds	r3, r0, #1
 800b678:	d1c0      	bne.n	800b5fc <_printf_float+0x364>
 800b67a:	e66b      	b.n	800b354 <_printf_float+0xbc>
 800b67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b67e:	2b01      	cmp	r3, #1
 800b680:	dc02      	bgt.n	800b688 <_printf_float+0x3f0>
 800b682:	2301      	movs	r3, #1
 800b684:	421a      	tst	r2, r3
 800b686:	d034      	beq.n	800b6f2 <_printf_float+0x45a>
 800b688:	2301      	movs	r3, #1
 800b68a:	002a      	movs	r2, r5
 800b68c:	0038      	movs	r0, r7
 800b68e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b690:	47b0      	blx	r6
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d100      	bne.n	800b698 <_printf_float+0x400>
 800b696:	e65d      	b.n	800b354 <_printf_float+0xbc>
 800b698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b69a:	0038      	movs	r0, r7
 800b69c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b69e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6a0:	47b0      	blx	r6
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d100      	bne.n	800b6a8 <_printf_float+0x410>
 800b6a6:	e655      	b.n	800b354 <_printf_float+0xbc>
 800b6a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b6aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f7f4 fec8 	bl	8000444 <__aeabi_dcmpeq>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d11a      	bne.n	800b6ee <_printf_float+0x456>
 800b6b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6ba:	1c6a      	adds	r2, r5, #1
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	0038      	movs	r0, r7
 800b6c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6c2:	47b0      	blx	r6
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d10e      	bne.n	800b6e6 <_printf_float+0x44e>
 800b6c8:	e644      	b.n	800b354 <_printf_float+0xbc>
 800b6ca:	0022      	movs	r2, r4
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	0038      	movs	r0, r7
 800b6d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6d2:	321a      	adds	r2, #26
 800b6d4:	47b0      	blx	r6
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d100      	bne.n	800b6dc <_printf_float+0x444>
 800b6da:	e63b      	b.n	800b354 <_printf_float+0xbc>
 800b6dc:	3501      	adds	r5, #1
 800b6de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	42ab      	cmp	r3, r5
 800b6e4:	dcf1      	bgt.n	800b6ca <_printf_float+0x432>
 800b6e6:	0022      	movs	r2, r4
 800b6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ea:	3250      	adds	r2, #80	; 0x50
 800b6ec:	e6da      	b.n	800b4a4 <_printf_float+0x20c>
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	e7f5      	b.n	800b6de <_printf_float+0x446>
 800b6f2:	002a      	movs	r2, r5
 800b6f4:	e7e3      	b.n	800b6be <_printf_float+0x426>
 800b6f6:	0022      	movs	r2, r4
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	0038      	movs	r0, r7
 800b6fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6fe:	3219      	adds	r2, #25
 800b700:	47b0      	blx	r6
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	d100      	bne.n	800b708 <_printf_float+0x470>
 800b706:	e625      	b.n	800b354 <_printf_float+0xbc>
 800b708:	3501      	adds	r5, #1
 800b70a:	68e3      	ldr	r3, [r4, #12]
 800b70c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	42ab      	cmp	r3, r5
 800b712:	dcf0      	bgt.n	800b6f6 <_printf_float+0x45e>
 800b714:	e6f8      	b.n	800b508 <_printf_float+0x270>
 800b716:	2500      	movs	r5, #0
 800b718:	e7f7      	b.n	800b70a <_printf_float+0x472>
 800b71a:	46c0      	nop			; (mov r8, r8)

0800b71c <_printf_common>:
 800b71c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b71e:	0015      	movs	r5, r2
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	688a      	ldr	r2, [r1, #8]
 800b724:	690b      	ldr	r3, [r1, #16]
 800b726:	000c      	movs	r4, r1
 800b728:	9000      	str	r0, [sp, #0]
 800b72a:	4293      	cmp	r3, r2
 800b72c:	da00      	bge.n	800b730 <_printf_common+0x14>
 800b72e:	0013      	movs	r3, r2
 800b730:	0022      	movs	r2, r4
 800b732:	602b      	str	r3, [r5, #0]
 800b734:	3243      	adds	r2, #67	; 0x43
 800b736:	7812      	ldrb	r2, [r2, #0]
 800b738:	2a00      	cmp	r2, #0
 800b73a:	d001      	beq.n	800b740 <_printf_common+0x24>
 800b73c:	3301      	adds	r3, #1
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	069b      	lsls	r3, r3, #26
 800b744:	d502      	bpl.n	800b74c <_printf_common+0x30>
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	3302      	adds	r3, #2
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	6822      	ldr	r2, [r4, #0]
 800b74e:	2306      	movs	r3, #6
 800b750:	0017      	movs	r7, r2
 800b752:	401f      	ands	r7, r3
 800b754:	421a      	tst	r2, r3
 800b756:	d027      	beq.n	800b7a8 <_printf_common+0x8c>
 800b758:	0023      	movs	r3, r4
 800b75a:	3343      	adds	r3, #67	; 0x43
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	1e5a      	subs	r2, r3, #1
 800b760:	4193      	sbcs	r3, r2
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	0692      	lsls	r2, r2, #26
 800b766:	d430      	bmi.n	800b7ca <_printf_common+0xae>
 800b768:	0022      	movs	r2, r4
 800b76a:	9901      	ldr	r1, [sp, #4]
 800b76c:	9800      	ldr	r0, [sp, #0]
 800b76e:	9e08      	ldr	r6, [sp, #32]
 800b770:	3243      	adds	r2, #67	; 0x43
 800b772:	47b0      	blx	r6
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d025      	beq.n	800b7c4 <_printf_common+0xa8>
 800b778:	2306      	movs	r3, #6
 800b77a:	6820      	ldr	r0, [r4, #0]
 800b77c:	682a      	ldr	r2, [r5, #0]
 800b77e:	68e1      	ldr	r1, [r4, #12]
 800b780:	2500      	movs	r5, #0
 800b782:	4003      	ands	r3, r0
 800b784:	2b04      	cmp	r3, #4
 800b786:	d103      	bne.n	800b790 <_printf_common+0x74>
 800b788:	1a8d      	subs	r5, r1, r2
 800b78a:	43eb      	mvns	r3, r5
 800b78c:	17db      	asrs	r3, r3, #31
 800b78e:	401d      	ands	r5, r3
 800b790:	68a3      	ldr	r3, [r4, #8]
 800b792:	6922      	ldr	r2, [r4, #16]
 800b794:	4293      	cmp	r3, r2
 800b796:	dd01      	ble.n	800b79c <_printf_common+0x80>
 800b798:	1a9b      	subs	r3, r3, r2
 800b79a:	18ed      	adds	r5, r5, r3
 800b79c:	2700      	movs	r7, #0
 800b79e:	42bd      	cmp	r5, r7
 800b7a0:	d120      	bne.n	800b7e4 <_printf_common+0xc8>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e010      	b.n	800b7c8 <_printf_common+0xac>
 800b7a6:	3701      	adds	r7, #1
 800b7a8:	68e3      	ldr	r3, [r4, #12]
 800b7aa:	682a      	ldr	r2, [r5, #0]
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	42bb      	cmp	r3, r7
 800b7b0:	ddd2      	ble.n	800b758 <_printf_common+0x3c>
 800b7b2:	0022      	movs	r2, r4
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	9901      	ldr	r1, [sp, #4]
 800b7b8:	9800      	ldr	r0, [sp, #0]
 800b7ba:	9e08      	ldr	r6, [sp, #32]
 800b7bc:	3219      	adds	r2, #25
 800b7be:	47b0      	blx	r6
 800b7c0:	1c43      	adds	r3, r0, #1
 800b7c2:	d1f0      	bne.n	800b7a6 <_printf_common+0x8a>
 800b7c4:	2001      	movs	r0, #1
 800b7c6:	4240      	negs	r0, r0
 800b7c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7ca:	2030      	movs	r0, #48	; 0x30
 800b7cc:	18e1      	adds	r1, r4, r3
 800b7ce:	3143      	adds	r1, #67	; 0x43
 800b7d0:	7008      	strb	r0, [r1, #0]
 800b7d2:	0021      	movs	r1, r4
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	3145      	adds	r1, #69	; 0x45
 800b7d8:	7809      	ldrb	r1, [r1, #0]
 800b7da:	18a2      	adds	r2, r4, r2
 800b7dc:	3243      	adds	r2, #67	; 0x43
 800b7de:	3302      	adds	r3, #2
 800b7e0:	7011      	strb	r1, [r2, #0]
 800b7e2:	e7c1      	b.n	800b768 <_printf_common+0x4c>
 800b7e4:	0022      	movs	r2, r4
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	9901      	ldr	r1, [sp, #4]
 800b7ea:	9800      	ldr	r0, [sp, #0]
 800b7ec:	9e08      	ldr	r6, [sp, #32]
 800b7ee:	321a      	adds	r2, #26
 800b7f0:	47b0      	blx	r6
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	d0e6      	beq.n	800b7c4 <_printf_common+0xa8>
 800b7f6:	3701      	adds	r7, #1
 800b7f8:	e7d1      	b.n	800b79e <_printf_common+0x82>
	...

0800b7fc <_printf_i>:
 800b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fe:	b08b      	sub	sp, #44	; 0x2c
 800b800:	9206      	str	r2, [sp, #24]
 800b802:	000a      	movs	r2, r1
 800b804:	3243      	adds	r2, #67	; 0x43
 800b806:	9307      	str	r3, [sp, #28]
 800b808:	9005      	str	r0, [sp, #20]
 800b80a:	9204      	str	r2, [sp, #16]
 800b80c:	7e0a      	ldrb	r2, [r1, #24]
 800b80e:	000c      	movs	r4, r1
 800b810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b812:	2a78      	cmp	r2, #120	; 0x78
 800b814:	d807      	bhi.n	800b826 <_printf_i+0x2a>
 800b816:	2a62      	cmp	r2, #98	; 0x62
 800b818:	d809      	bhi.n	800b82e <_printf_i+0x32>
 800b81a:	2a00      	cmp	r2, #0
 800b81c:	d100      	bne.n	800b820 <_printf_i+0x24>
 800b81e:	e0c1      	b.n	800b9a4 <_printf_i+0x1a8>
 800b820:	2a58      	cmp	r2, #88	; 0x58
 800b822:	d100      	bne.n	800b826 <_printf_i+0x2a>
 800b824:	e08c      	b.n	800b940 <_printf_i+0x144>
 800b826:	0026      	movs	r6, r4
 800b828:	3642      	adds	r6, #66	; 0x42
 800b82a:	7032      	strb	r2, [r6, #0]
 800b82c:	e022      	b.n	800b874 <_printf_i+0x78>
 800b82e:	0010      	movs	r0, r2
 800b830:	3863      	subs	r0, #99	; 0x63
 800b832:	2815      	cmp	r0, #21
 800b834:	d8f7      	bhi.n	800b826 <_printf_i+0x2a>
 800b836:	f7f4 fc75 	bl	8000124 <__gnu_thumb1_case_shi>
 800b83a:	0016      	.short	0x0016
 800b83c:	fff6001f 	.word	0xfff6001f
 800b840:	fff6fff6 	.word	0xfff6fff6
 800b844:	001ffff6 	.word	0x001ffff6
 800b848:	fff6fff6 	.word	0xfff6fff6
 800b84c:	fff6fff6 	.word	0xfff6fff6
 800b850:	003600a8 	.word	0x003600a8
 800b854:	fff6009a 	.word	0xfff6009a
 800b858:	00b9fff6 	.word	0x00b9fff6
 800b85c:	0036fff6 	.word	0x0036fff6
 800b860:	fff6fff6 	.word	0xfff6fff6
 800b864:	009e      	.short	0x009e
 800b866:	0026      	movs	r6, r4
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	3642      	adds	r6, #66	; 0x42
 800b86c:	1d11      	adds	r1, r2, #4
 800b86e:	6019      	str	r1, [r3, #0]
 800b870:	6813      	ldr	r3, [r2, #0]
 800b872:	7033      	strb	r3, [r6, #0]
 800b874:	2301      	movs	r3, #1
 800b876:	e0a7      	b.n	800b9c8 <_printf_i+0x1cc>
 800b878:	6808      	ldr	r0, [r1, #0]
 800b87a:	6819      	ldr	r1, [r3, #0]
 800b87c:	1d0a      	adds	r2, r1, #4
 800b87e:	0605      	lsls	r5, r0, #24
 800b880:	d50b      	bpl.n	800b89a <_printf_i+0x9e>
 800b882:	680d      	ldr	r5, [r1, #0]
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	2d00      	cmp	r5, #0
 800b888:	da03      	bge.n	800b892 <_printf_i+0x96>
 800b88a:	232d      	movs	r3, #45	; 0x2d
 800b88c:	9a04      	ldr	r2, [sp, #16]
 800b88e:	426d      	negs	r5, r5
 800b890:	7013      	strb	r3, [r2, #0]
 800b892:	4b61      	ldr	r3, [pc, #388]	; (800ba18 <_printf_i+0x21c>)
 800b894:	270a      	movs	r7, #10
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	e01b      	b.n	800b8d2 <_printf_i+0xd6>
 800b89a:	680d      	ldr	r5, [r1, #0]
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	0641      	lsls	r1, r0, #25
 800b8a0:	d5f1      	bpl.n	800b886 <_printf_i+0x8a>
 800b8a2:	b22d      	sxth	r5, r5
 800b8a4:	e7ef      	b.n	800b886 <_printf_i+0x8a>
 800b8a6:	680d      	ldr	r5, [r1, #0]
 800b8a8:	6819      	ldr	r1, [r3, #0]
 800b8aa:	1d08      	adds	r0, r1, #4
 800b8ac:	6018      	str	r0, [r3, #0]
 800b8ae:	062e      	lsls	r6, r5, #24
 800b8b0:	d501      	bpl.n	800b8b6 <_printf_i+0xba>
 800b8b2:	680d      	ldr	r5, [r1, #0]
 800b8b4:	e003      	b.n	800b8be <_printf_i+0xc2>
 800b8b6:	066d      	lsls	r5, r5, #25
 800b8b8:	d5fb      	bpl.n	800b8b2 <_printf_i+0xb6>
 800b8ba:	680d      	ldr	r5, [r1, #0]
 800b8bc:	b2ad      	uxth	r5, r5
 800b8be:	4b56      	ldr	r3, [pc, #344]	; (800ba18 <_printf_i+0x21c>)
 800b8c0:	2708      	movs	r7, #8
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	2a6f      	cmp	r2, #111	; 0x6f
 800b8c6:	d000      	beq.n	800b8ca <_printf_i+0xce>
 800b8c8:	3702      	adds	r7, #2
 800b8ca:	0023      	movs	r3, r4
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	3343      	adds	r3, #67	; 0x43
 800b8d0:	701a      	strb	r2, [r3, #0]
 800b8d2:	6863      	ldr	r3, [r4, #4]
 800b8d4:	60a3      	str	r3, [r4, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	db03      	blt.n	800b8e2 <_printf_i+0xe6>
 800b8da:	2204      	movs	r2, #4
 800b8dc:	6821      	ldr	r1, [r4, #0]
 800b8de:	4391      	bics	r1, r2
 800b8e0:	6021      	str	r1, [r4, #0]
 800b8e2:	2d00      	cmp	r5, #0
 800b8e4:	d102      	bne.n	800b8ec <_printf_i+0xf0>
 800b8e6:	9e04      	ldr	r6, [sp, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00c      	beq.n	800b906 <_printf_i+0x10a>
 800b8ec:	9e04      	ldr	r6, [sp, #16]
 800b8ee:	0028      	movs	r0, r5
 800b8f0:	0039      	movs	r1, r7
 800b8f2:	f7f4 fca7 	bl	8000244 <__aeabi_uidivmod>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	3e01      	subs	r6, #1
 800b8fa:	5c5b      	ldrb	r3, [r3, r1]
 800b8fc:	7033      	strb	r3, [r6, #0]
 800b8fe:	002b      	movs	r3, r5
 800b900:	0005      	movs	r5, r0
 800b902:	429f      	cmp	r7, r3
 800b904:	d9f3      	bls.n	800b8ee <_printf_i+0xf2>
 800b906:	2f08      	cmp	r7, #8
 800b908:	d109      	bne.n	800b91e <_printf_i+0x122>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	07db      	lsls	r3, r3, #31
 800b90e:	d506      	bpl.n	800b91e <_printf_i+0x122>
 800b910:	6863      	ldr	r3, [r4, #4]
 800b912:	6922      	ldr	r2, [r4, #16]
 800b914:	4293      	cmp	r3, r2
 800b916:	dc02      	bgt.n	800b91e <_printf_i+0x122>
 800b918:	2330      	movs	r3, #48	; 0x30
 800b91a:	3e01      	subs	r6, #1
 800b91c:	7033      	strb	r3, [r6, #0]
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	1b9b      	subs	r3, r3, r6
 800b922:	6123      	str	r3, [r4, #16]
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	0021      	movs	r1, r4
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	9805      	ldr	r0, [sp, #20]
 800b92c:	9b06      	ldr	r3, [sp, #24]
 800b92e:	aa09      	add	r2, sp, #36	; 0x24
 800b930:	f7ff fef4 	bl	800b71c <_printf_common>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d14c      	bne.n	800b9d2 <_printf_i+0x1d6>
 800b938:	2001      	movs	r0, #1
 800b93a:	4240      	negs	r0, r0
 800b93c:	b00b      	add	sp, #44	; 0x2c
 800b93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b940:	3145      	adds	r1, #69	; 0x45
 800b942:	700a      	strb	r2, [r1, #0]
 800b944:	4a34      	ldr	r2, [pc, #208]	; (800ba18 <_printf_i+0x21c>)
 800b946:	9203      	str	r2, [sp, #12]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	6821      	ldr	r1, [r4, #0]
 800b94c:	ca20      	ldmia	r2!, {r5}
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	0608      	lsls	r0, r1, #24
 800b952:	d516      	bpl.n	800b982 <_printf_i+0x186>
 800b954:	07cb      	lsls	r3, r1, #31
 800b956:	d502      	bpl.n	800b95e <_printf_i+0x162>
 800b958:	2320      	movs	r3, #32
 800b95a:	4319      	orrs	r1, r3
 800b95c:	6021      	str	r1, [r4, #0]
 800b95e:	2710      	movs	r7, #16
 800b960:	2d00      	cmp	r5, #0
 800b962:	d1b2      	bne.n	800b8ca <_printf_i+0xce>
 800b964:	2320      	movs	r3, #32
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	439a      	bics	r2, r3
 800b96a:	6022      	str	r2, [r4, #0]
 800b96c:	e7ad      	b.n	800b8ca <_printf_i+0xce>
 800b96e:	2220      	movs	r2, #32
 800b970:	6809      	ldr	r1, [r1, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	6022      	str	r2, [r4, #0]
 800b976:	0022      	movs	r2, r4
 800b978:	2178      	movs	r1, #120	; 0x78
 800b97a:	3245      	adds	r2, #69	; 0x45
 800b97c:	7011      	strb	r1, [r2, #0]
 800b97e:	4a27      	ldr	r2, [pc, #156]	; (800ba1c <_printf_i+0x220>)
 800b980:	e7e1      	b.n	800b946 <_printf_i+0x14a>
 800b982:	0648      	lsls	r0, r1, #25
 800b984:	d5e6      	bpl.n	800b954 <_printf_i+0x158>
 800b986:	b2ad      	uxth	r5, r5
 800b988:	e7e4      	b.n	800b954 <_printf_i+0x158>
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	680d      	ldr	r5, [r1, #0]
 800b98e:	1d10      	adds	r0, r2, #4
 800b990:	6949      	ldr	r1, [r1, #20]
 800b992:	6018      	str	r0, [r3, #0]
 800b994:	6813      	ldr	r3, [r2, #0]
 800b996:	062e      	lsls	r6, r5, #24
 800b998:	d501      	bpl.n	800b99e <_printf_i+0x1a2>
 800b99a:	6019      	str	r1, [r3, #0]
 800b99c:	e002      	b.n	800b9a4 <_printf_i+0x1a8>
 800b99e:	066d      	lsls	r5, r5, #25
 800b9a0:	d5fb      	bpl.n	800b99a <_printf_i+0x19e>
 800b9a2:	8019      	strh	r1, [r3, #0]
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9e04      	ldr	r6, [sp, #16]
 800b9a8:	6123      	str	r3, [r4, #16]
 800b9aa:	e7bb      	b.n	800b924 <_printf_i+0x128>
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	1d11      	adds	r1, r2, #4
 800b9b0:	6019      	str	r1, [r3, #0]
 800b9b2:	6816      	ldr	r6, [r2, #0]
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	0030      	movs	r0, r6
 800b9b8:	6862      	ldr	r2, [r4, #4]
 800b9ba:	f002 fb5d 	bl	800e078 <memchr>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d001      	beq.n	800b9c6 <_printf_i+0x1ca>
 800b9c2:	1b80      	subs	r0, r0, r6
 800b9c4:	6060      	str	r0, [r4, #4]
 800b9c6:	6863      	ldr	r3, [r4, #4]
 800b9c8:	6123      	str	r3, [r4, #16]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	9a04      	ldr	r2, [sp, #16]
 800b9ce:	7013      	strb	r3, [r2, #0]
 800b9d0:	e7a8      	b.n	800b924 <_printf_i+0x128>
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	0032      	movs	r2, r6
 800b9d6:	9906      	ldr	r1, [sp, #24]
 800b9d8:	9805      	ldr	r0, [sp, #20]
 800b9da:	9d07      	ldr	r5, [sp, #28]
 800b9dc:	47a8      	blx	r5
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d0aa      	beq.n	800b938 <_printf_i+0x13c>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	079b      	lsls	r3, r3, #30
 800b9e6:	d415      	bmi.n	800ba14 <_printf_i+0x218>
 800b9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ea:	68e0      	ldr	r0, [r4, #12]
 800b9ec:	4298      	cmp	r0, r3
 800b9ee:	daa5      	bge.n	800b93c <_printf_i+0x140>
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	e7a3      	b.n	800b93c <_printf_i+0x140>
 800b9f4:	0022      	movs	r2, r4
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	9906      	ldr	r1, [sp, #24]
 800b9fa:	9805      	ldr	r0, [sp, #20]
 800b9fc:	9e07      	ldr	r6, [sp, #28]
 800b9fe:	3219      	adds	r2, #25
 800ba00:	47b0      	blx	r6
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	d098      	beq.n	800b938 <_printf_i+0x13c>
 800ba06:	3501      	adds	r5, #1
 800ba08:	68e3      	ldr	r3, [r4, #12]
 800ba0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba0c:	1a9b      	subs	r3, r3, r2
 800ba0e:	42ab      	cmp	r3, r5
 800ba10:	dcf0      	bgt.n	800b9f4 <_printf_i+0x1f8>
 800ba12:	e7e9      	b.n	800b9e8 <_printf_i+0x1ec>
 800ba14:	2500      	movs	r5, #0
 800ba16:	e7f7      	b.n	800ba08 <_printf_i+0x20c>
 800ba18:	0801001e 	.word	0x0801001e
 800ba1c:	0801002f 	.word	0x0801002f

0800ba20 <_scanf_float>:
 800ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba22:	b08b      	sub	sp, #44	; 0x2c
 800ba24:	0015      	movs	r5, r2
 800ba26:	9001      	str	r0, [sp, #4]
 800ba28:	22ae      	movs	r2, #174	; 0xae
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	9306      	str	r3, [sp, #24]
 800ba2e:	688b      	ldr	r3, [r1, #8]
 800ba30:	000e      	movs	r6, r1
 800ba32:	1e59      	subs	r1, r3, #1
 800ba34:	0052      	lsls	r2, r2, #1
 800ba36:	9005      	str	r0, [sp, #20]
 800ba38:	4291      	cmp	r1, r2
 800ba3a:	d905      	bls.n	800ba48 <_scanf_float+0x28>
 800ba3c:	3b5e      	subs	r3, #94	; 0x5e
 800ba3e:	3bff      	subs	r3, #255	; 0xff
 800ba40:	9305      	str	r3, [sp, #20]
 800ba42:	235e      	movs	r3, #94	; 0x5e
 800ba44:	33ff      	adds	r3, #255	; 0xff
 800ba46:	60b3      	str	r3, [r6, #8]
 800ba48:	23f0      	movs	r3, #240	; 0xf0
 800ba4a:	6832      	ldr	r2, [r6, #0]
 800ba4c:	00db      	lsls	r3, r3, #3
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	0033      	movs	r3, r6
 800ba54:	2400      	movs	r4, #0
 800ba56:	331c      	adds	r3, #28
 800ba58:	001f      	movs	r7, r3
 800ba5a:	9303      	str	r3, [sp, #12]
 800ba5c:	9402      	str	r4, [sp, #8]
 800ba5e:	9408      	str	r4, [sp, #32]
 800ba60:	9407      	str	r4, [sp, #28]
 800ba62:	9400      	str	r4, [sp, #0]
 800ba64:	9404      	str	r4, [sp, #16]
 800ba66:	68b2      	ldr	r2, [r6, #8]
 800ba68:	2a00      	cmp	r2, #0
 800ba6a:	d00a      	beq.n	800ba82 <_scanf_float+0x62>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b4e      	cmp	r3, #78	; 0x4e
 800ba72:	d844      	bhi.n	800bafe <_scanf_float+0xde>
 800ba74:	0018      	movs	r0, r3
 800ba76:	2b40      	cmp	r3, #64	; 0x40
 800ba78:	d82c      	bhi.n	800bad4 <_scanf_float+0xb4>
 800ba7a:	382b      	subs	r0, #43	; 0x2b
 800ba7c:	b2c1      	uxtb	r1, r0
 800ba7e:	290e      	cmp	r1, #14
 800ba80:	d92a      	bls.n	800bad8 <_scanf_float+0xb8>
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <_scanf_float+0x70>
 800ba88:	6832      	ldr	r2, [r6, #0]
 800ba8a:	4ba4      	ldr	r3, [pc, #656]	; (800bd1c <_scanf_float+0x2fc>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	6033      	str	r3, [r6, #0]
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d900      	bls.n	800ba9a <_scanf_float+0x7a>
 800ba98:	e0f9      	b.n	800bc8e <_scanf_float+0x26e>
 800ba9a:	24be      	movs	r4, #190	; 0xbe
 800ba9c:	0064      	lsls	r4, r4, #1
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	429f      	cmp	r7, r3
 800baa2:	d900      	bls.n	800baa6 <_scanf_float+0x86>
 800baa4:	e0e9      	b.n	800bc7a <_scanf_float+0x25a>
 800baa6:	2301      	movs	r3, #1
 800baa8:	9302      	str	r3, [sp, #8]
 800baaa:	e185      	b.n	800bdb8 <_scanf_float+0x398>
 800baac:	0018      	movs	r0, r3
 800baae:	3861      	subs	r0, #97	; 0x61
 800bab0:	280d      	cmp	r0, #13
 800bab2:	d8e6      	bhi.n	800ba82 <_scanf_float+0x62>
 800bab4:	f7f4 fb36 	bl	8000124 <__gnu_thumb1_case_shi>
 800bab8:	ffe50083 	.word	0xffe50083
 800babc:	ffe5ffe5 	.word	0xffe5ffe5
 800bac0:	00a200b6 	.word	0x00a200b6
 800bac4:	ffe5ffe5 	.word	0xffe5ffe5
 800bac8:	ffe50089 	.word	0xffe50089
 800bacc:	ffe5ffe5 	.word	0xffe5ffe5
 800bad0:	0065ffe5 	.word	0x0065ffe5
 800bad4:	3841      	subs	r0, #65	; 0x41
 800bad6:	e7eb      	b.n	800bab0 <_scanf_float+0x90>
 800bad8:	280e      	cmp	r0, #14
 800bada:	d8d2      	bhi.n	800ba82 <_scanf_float+0x62>
 800badc:	f7f4 fb22 	bl	8000124 <__gnu_thumb1_case_shi>
 800bae0:	ffd1004b 	.word	0xffd1004b
 800bae4:	0098004b 	.word	0x0098004b
 800bae8:	0020ffd1 	.word	0x0020ffd1
 800baec:	00400040 	.word	0x00400040
 800baf0:	00400040 	.word	0x00400040
 800baf4:	00400040 	.word	0x00400040
 800baf8:	00400040 	.word	0x00400040
 800bafc:	0040      	.short	0x0040
 800bafe:	2b6e      	cmp	r3, #110	; 0x6e
 800bb00:	d809      	bhi.n	800bb16 <_scanf_float+0xf6>
 800bb02:	2b60      	cmp	r3, #96	; 0x60
 800bb04:	d8d2      	bhi.n	800baac <_scanf_float+0x8c>
 800bb06:	2b54      	cmp	r3, #84	; 0x54
 800bb08:	d07d      	beq.n	800bc06 <_scanf_float+0x1e6>
 800bb0a:	2b59      	cmp	r3, #89	; 0x59
 800bb0c:	d1b9      	bne.n	800ba82 <_scanf_float+0x62>
 800bb0e:	2c07      	cmp	r4, #7
 800bb10:	d1b7      	bne.n	800ba82 <_scanf_float+0x62>
 800bb12:	2408      	movs	r4, #8
 800bb14:	e02c      	b.n	800bb70 <_scanf_float+0x150>
 800bb16:	2b74      	cmp	r3, #116	; 0x74
 800bb18:	d075      	beq.n	800bc06 <_scanf_float+0x1e6>
 800bb1a:	2b79      	cmp	r3, #121	; 0x79
 800bb1c:	d0f7      	beq.n	800bb0e <_scanf_float+0xee>
 800bb1e:	e7b0      	b.n	800ba82 <_scanf_float+0x62>
 800bb20:	6831      	ldr	r1, [r6, #0]
 800bb22:	05c8      	lsls	r0, r1, #23
 800bb24:	d51c      	bpl.n	800bb60 <_scanf_float+0x140>
 800bb26:	2380      	movs	r3, #128	; 0x80
 800bb28:	4399      	bics	r1, r3
 800bb2a:	9b00      	ldr	r3, [sp, #0]
 800bb2c:	6031      	str	r1, [r6, #0]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	9b05      	ldr	r3, [sp, #20]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d003      	beq.n	800bb40 <_scanf_float+0x120>
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	3201      	adds	r2, #1
 800bb3c:	9305      	str	r3, [sp, #20]
 800bb3e:	60b2      	str	r2, [r6, #8]
 800bb40:	68b3      	ldr	r3, [r6, #8]
 800bb42:	3b01      	subs	r3, #1
 800bb44:	60b3      	str	r3, [r6, #8]
 800bb46:	6933      	ldr	r3, [r6, #16]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	6133      	str	r3, [r6, #16]
 800bb4c:	686b      	ldr	r3, [r5, #4]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	606b      	str	r3, [r5, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dc00      	bgt.n	800bb58 <_scanf_float+0x138>
 800bb56:	e086      	b.n	800bc66 <_scanf_float+0x246>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	602b      	str	r3, [r5, #0]
 800bb5e:	e782      	b.n	800ba66 <_scanf_float+0x46>
 800bb60:	9a02      	ldr	r2, [sp, #8]
 800bb62:	1912      	adds	r2, r2, r4
 800bb64:	2a00      	cmp	r2, #0
 800bb66:	d18c      	bne.n	800ba82 <_scanf_float+0x62>
 800bb68:	4a6d      	ldr	r2, [pc, #436]	; (800bd20 <_scanf_float+0x300>)
 800bb6a:	6831      	ldr	r1, [r6, #0]
 800bb6c:	400a      	ands	r2, r1
 800bb6e:	6032      	str	r2, [r6, #0]
 800bb70:	703b      	strb	r3, [r7, #0]
 800bb72:	3701      	adds	r7, #1
 800bb74:	e7e4      	b.n	800bb40 <_scanf_float+0x120>
 800bb76:	2180      	movs	r1, #128	; 0x80
 800bb78:	6832      	ldr	r2, [r6, #0]
 800bb7a:	420a      	tst	r2, r1
 800bb7c:	d081      	beq.n	800ba82 <_scanf_float+0x62>
 800bb7e:	438a      	bics	r2, r1
 800bb80:	e7f5      	b.n	800bb6e <_scanf_float+0x14e>
 800bb82:	9a02      	ldr	r2, [sp, #8]
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	d10f      	bne.n	800bba8 <_scanf_float+0x188>
 800bb88:	9a00      	ldr	r2, [sp, #0]
 800bb8a:	2a00      	cmp	r2, #0
 800bb8c:	d10f      	bne.n	800bbae <_scanf_float+0x18e>
 800bb8e:	6832      	ldr	r2, [r6, #0]
 800bb90:	21e0      	movs	r1, #224	; 0xe0
 800bb92:	0010      	movs	r0, r2
 800bb94:	00c9      	lsls	r1, r1, #3
 800bb96:	4008      	ands	r0, r1
 800bb98:	4288      	cmp	r0, r1
 800bb9a:	d108      	bne.n	800bbae <_scanf_float+0x18e>
 800bb9c:	4961      	ldr	r1, [pc, #388]	; (800bd24 <_scanf_float+0x304>)
 800bb9e:	400a      	ands	r2, r1
 800bba0:	6032      	str	r2, [r6, #0]
 800bba2:	2201      	movs	r2, #1
 800bba4:	9202      	str	r2, [sp, #8]
 800bba6:	e7e3      	b.n	800bb70 <_scanf_float+0x150>
 800bba8:	9a02      	ldr	r2, [sp, #8]
 800bbaa:	2a02      	cmp	r2, #2
 800bbac:	d059      	beq.n	800bc62 <_scanf_float+0x242>
 800bbae:	2c01      	cmp	r4, #1
 800bbb0:	d002      	beq.n	800bbb8 <_scanf_float+0x198>
 800bbb2:	2c04      	cmp	r4, #4
 800bbb4:	d000      	beq.n	800bbb8 <_scanf_float+0x198>
 800bbb6:	e764      	b.n	800ba82 <_scanf_float+0x62>
 800bbb8:	3401      	adds	r4, #1
 800bbba:	b2e4      	uxtb	r4, r4
 800bbbc:	e7d8      	b.n	800bb70 <_scanf_float+0x150>
 800bbbe:	9a02      	ldr	r2, [sp, #8]
 800bbc0:	2a01      	cmp	r2, #1
 800bbc2:	d000      	beq.n	800bbc6 <_scanf_float+0x1a6>
 800bbc4:	e75d      	b.n	800ba82 <_scanf_float+0x62>
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	e7ec      	b.n	800bba4 <_scanf_float+0x184>
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	d110      	bne.n	800bbf0 <_scanf_float+0x1d0>
 800bbce:	9a00      	ldr	r2, [sp, #0]
 800bbd0:	2a00      	cmp	r2, #0
 800bbd2:	d000      	beq.n	800bbd6 <_scanf_float+0x1b6>
 800bbd4:	e758      	b.n	800ba88 <_scanf_float+0x68>
 800bbd6:	6832      	ldr	r2, [r6, #0]
 800bbd8:	21e0      	movs	r1, #224	; 0xe0
 800bbda:	0010      	movs	r0, r2
 800bbdc:	00c9      	lsls	r1, r1, #3
 800bbde:	4008      	ands	r0, r1
 800bbe0:	4288      	cmp	r0, r1
 800bbe2:	d000      	beq.n	800bbe6 <_scanf_float+0x1c6>
 800bbe4:	e754      	b.n	800ba90 <_scanf_float+0x70>
 800bbe6:	494f      	ldr	r1, [pc, #316]	; (800bd24 <_scanf_float+0x304>)
 800bbe8:	3401      	adds	r4, #1
 800bbea:	400a      	ands	r2, r1
 800bbec:	6032      	str	r2, [r6, #0]
 800bbee:	e7bf      	b.n	800bb70 <_scanf_float+0x150>
 800bbf0:	21fd      	movs	r1, #253	; 0xfd
 800bbf2:	1ee2      	subs	r2, r4, #3
 800bbf4:	420a      	tst	r2, r1
 800bbf6:	d000      	beq.n	800bbfa <_scanf_float+0x1da>
 800bbf8:	e743      	b.n	800ba82 <_scanf_float+0x62>
 800bbfa:	e7dd      	b.n	800bbb8 <_scanf_float+0x198>
 800bbfc:	2c02      	cmp	r4, #2
 800bbfe:	d000      	beq.n	800bc02 <_scanf_float+0x1e2>
 800bc00:	e73f      	b.n	800ba82 <_scanf_float+0x62>
 800bc02:	2403      	movs	r4, #3
 800bc04:	e7b4      	b.n	800bb70 <_scanf_float+0x150>
 800bc06:	2c06      	cmp	r4, #6
 800bc08:	d000      	beq.n	800bc0c <_scanf_float+0x1ec>
 800bc0a:	e73a      	b.n	800ba82 <_scanf_float+0x62>
 800bc0c:	2407      	movs	r4, #7
 800bc0e:	e7af      	b.n	800bb70 <_scanf_float+0x150>
 800bc10:	6832      	ldr	r2, [r6, #0]
 800bc12:	0591      	lsls	r1, r2, #22
 800bc14:	d400      	bmi.n	800bc18 <_scanf_float+0x1f8>
 800bc16:	e734      	b.n	800ba82 <_scanf_float+0x62>
 800bc18:	4943      	ldr	r1, [pc, #268]	; (800bd28 <_scanf_float+0x308>)
 800bc1a:	400a      	ands	r2, r1
 800bc1c:	6032      	str	r2, [r6, #0]
 800bc1e:	9a00      	ldr	r2, [sp, #0]
 800bc20:	9204      	str	r2, [sp, #16]
 800bc22:	e7a5      	b.n	800bb70 <_scanf_float+0x150>
 800bc24:	21a0      	movs	r1, #160	; 0xa0
 800bc26:	2080      	movs	r0, #128	; 0x80
 800bc28:	6832      	ldr	r2, [r6, #0]
 800bc2a:	00c9      	lsls	r1, r1, #3
 800bc2c:	4011      	ands	r1, r2
 800bc2e:	00c0      	lsls	r0, r0, #3
 800bc30:	4281      	cmp	r1, r0
 800bc32:	d006      	beq.n	800bc42 <_scanf_float+0x222>
 800bc34:	4202      	tst	r2, r0
 800bc36:	d100      	bne.n	800bc3a <_scanf_float+0x21a>
 800bc38:	e723      	b.n	800ba82 <_scanf_float+0x62>
 800bc3a:	9900      	ldr	r1, [sp, #0]
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	d100      	bne.n	800bc42 <_scanf_float+0x222>
 800bc40:	e726      	b.n	800ba90 <_scanf_float+0x70>
 800bc42:	0591      	lsls	r1, r2, #22
 800bc44:	d404      	bmi.n	800bc50 <_scanf_float+0x230>
 800bc46:	9900      	ldr	r1, [sp, #0]
 800bc48:	9804      	ldr	r0, [sp, #16]
 800bc4a:	9708      	str	r7, [sp, #32]
 800bc4c:	1a09      	subs	r1, r1, r0
 800bc4e:	9107      	str	r1, [sp, #28]
 800bc50:	4934      	ldr	r1, [pc, #208]	; (800bd24 <_scanf_float+0x304>)
 800bc52:	400a      	ands	r2, r1
 800bc54:	21c0      	movs	r1, #192	; 0xc0
 800bc56:	0049      	lsls	r1, r1, #1
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	6032      	str	r2, [r6, #0]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	9200      	str	r2, [sp, #0]
 800bc60:	e786      	b.n	800bb70 <_scanf_float+0x150>
 800bc62:	2203      	movs	r2, #3
 800bc64:	e79e      	b.n	800bba4 <_scanf_float+0x184>
 800bc66:	23c0      	movs	r3, #192	; 0xc0
 800bc68:	005b      	lsls	r3, r3, #1
 800bc6a:	0029      	movs	r1, r5
 800bc6c:	58f3      	ldr	r3, [r6, r3]
 800bc6e:	9801      	ldr	r0, [sp, #4]
 800bc70:	4798      	blx	r3
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d100      	bne.n	800bc78 <_scanf_float+0x258>
 800bc76:	e6f6      	b.n	800ba66 <_scanf_float+0x46>
 800bc78:	e703      	b.n	800ba82 <_scanf_float+0x62>
 800bc7a:	3f01      	subs	r7, #1
 800bc7c:	5933      	ldr	r3, [r6, r4]
 800bc7e:	002a      	movs	r2, r5
 800bc80:	7839      	ldrb	r1, [r7, #0]
 800bc82:	9801      	ldr	r0, [sp, #4]
 800bc84:	4798      	blx	r3
 800bc86:	6933      	ldr	r3, [r6, #16]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	6133      	str	r3, [r6, #16]
 800bc8c:	e707      	b.n	800ba9e <_scanf_float+0x7e>
 800bc8e:	1e63      	subs	r3, r4, #1
 800bc90:	2b06      	cmp	r3, #6
 800bc92:	d80e      	bhi.n	800bcb2 <_scanf_float+0x292>
 800bc94:	9702      	str	r7, [sp, #8]
 800bc96:	2c02      	cmp	r4, #2
 800bc98:	d920      	bls.n	800bcdc <_scanf_float+0x2bc>
 800bc9a:	1be3      	subs	r3, r4, r7
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	9b02      	ldr	r3, [sp, #8]
 800bca2:	9a05      	ldr	r2, [sp, #20]
 800bca4:	189b      	adds	r3, r3, r2
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b03      	cmp	r3, #3
 800bcaa:	d827      	bhi.n	800bcfc <_scanf_float+0x2dc>
 800bcac:	3c03      	subs	r4, #3
 800bcae:	b2e4      	uxtb	r4, r4
 800bcb0:	1b3f      	subs	r7, r7, r4
 800bcb2:	6833      	ldr	r3, [r6, #0]
 800bcb4:	05da      	lsls	r2, r3, #23
 800bcb6:	d554      	bpl.n	800bd62 <_scanf_float+0x342>
 800bcb8:	055b      	lsls	r3, r3, #21
 800bcba:	d537      	bpl.n	800bd2c <_scanf_float+0x30c>
 800bcbc:	24be      	movs	r4, #190	; 0xbe
 800bcbe:	0064      	lsls	r4, r4, #1
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	429f      	cmp	r7, r3
 800bcc4:	d800      	bhi.n	800bcc8 <_scanf_float+0x2a8>
 800bcc6:	e6ee      	b.n	800baa6 <_scanf_float+0x86>
 800bcc8:	3f01      	subs	r7, #1
 800bcca:	5933      	ldr	r3, [r6, r4]
 800bccc:	002a      	movs	r2, r5
 800bcce:	7839      	ldrb	r1, [r7, #0]
 800bcd0:	9801      	ldr	r0, [sp, #4]
 800bcd2:	4798      	blx	r3
 800bcd4:	6933      	ldr	r3, [r6, #16]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	6133      	str	r3, [r6, #16]
 800bcda:	e7f1      	b.n	800bcc0 <_scanf_float+0x2a0>
 800bcdc:	24be      	movs	r4, #190	; 0xbe
 800bcde:	0064      	lsls	r4, r4, #1
 800bce0:	9b03      	ldr	r3, [sp, #12]
 800bce2:	429f      	cmp	r7, r3
 800bce4:	d800      	bhi.n	800bce8 <_scanf_float+0x2c8>
 800bce6:	e6de      	b.n	800baa6 <_scanf_float+0x86>
 800bce8:	3f01      	subs	r7, #1
 800bcea:	5933      	ldr	r3, [r6, r4]
 800bcec:	002a      	movs	r2, r5
 800bcee:	7839      	ldrb	r1, [r7, #0]
 800bcf0:	9801      	ldr	r0, [sp, #4]
 800bcf2:	4798      	blx	r3
 800bcf4:	6933      	ldr	r3, [r6, #16]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	6133      	str	r3, [r6, #16]
 800bcfa:	e7f1      	b.n	800bce0 <_scanf_float+0x2c0>
 800bcfc:	9b02      	ldr	r3, [sp, #8]
 800bcfe:	002a      	movs	r2, r5
 800bd00:	3b01      	subs	r3, #1
 800bd02:	7819      	ldrb	r1, [r3, #0]
 800bd04:	9302      	str	r3, [sp, #8]
 800bd06:	23be      	movs	r3, #190	; 0xbe
 800bd08:	005b      	lsls	r3, r3, #1
 800bd0a:	58f3      	ldr	r3, [r6, r3]
 800bd0c:	9801      	ldr	r0, [sp, #4]
 800bd0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd10:	4798      	blx	r3
 800bd12:	6933      	ldr	r3, [r6, #16]
 800bd14:	3b01      	subs	r3, #1
 800bd16:	6133      	str	r3, [r6, #16]
 800bd18:	e7c2      	b.n	800bca0 <_scanf_float+0x280>
 800bd1a:	46c0      	nop			; (mov r8, r8)
 800bd1c:	fffffeff 	.word	0xfffffeff
 800bd20:	fffffe7f 	.word	0xfffffe7f
 800bd24:	fffff87f 	.word	0xfffff87f
 800bd28:	fffffd7f 	.word	0xfffffd7f
 800bd2c:	6933      	ldr	r3, [r6, #16]
 800bd2e:	1e7c      	subs	r4, r7, #1
 800bd30:	7821      	ldrb	r1, [r4, #0]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	6133      	str	r3, [r6, #16]
 800bd36:	2965      	cmp	r1, #101	; 0x65
 800bd38:	d00c      	beq.n	800bd54 <_scanf_float+0x334>
 800bd3a:	2945      	cmp	r1, #69	; 0x45
 800bd3c:	d00a      	beq.n	800bd54 <_scanf_float+0x334>
 800bd3e:	23be      	movs	r3, #190	; 0xbe
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	58f3      	ldr	r3, [r6, r3]
 800bd44:	002a      	movs	r2, r5
 800bd46:	9801      	ldr	r0, [sp, #4]
 800bd48:	4798      	blx	r3
 800bd4a:	6933      	ldr	r3, [r6, #16]
 800bd4c:	1ebc      	subs	r4, r7, #2
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	7821      	ldrb	r1, [r4, #0]
 800bd52:	6133      	str	r3, [r6, #16]
 800bd54:	23be      	movs	r3, #190	; 0xbe
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	002a      	movs	r2, r5
 800bd5a:	58f3      	ldr	r3, [r6, r3]
 800bd5c:	9801      	ldr	r0, [sp, #4]
 800bd5e:	4798      	blx	r3
 800bd60:	0027      	movs	r7, r4
 800bd62:	6832      	ldr	r2, [r6, #0]
 800bd64:	2310      	movs	r3, #16
 800bd66:	0011      	movs	r1, r2
 800bd68:	4019      	ands	r1, r3
 800bd6a:	9102      	str	r1, [sp, #8]
 800bd6c:	421a      	tst	r2, r3
 800bd6e:	d158      	bne.n	800be22 <_scanf_float+0x402>
 800bd70:	23c0      	movs	r3, #192	; 0xc0
 800bd72:	7039      	strb	r1, [r7, #0]
 800bd74:	6832      	ldr	r2, [r6, #0]
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	4013      	ands	r3, r2
 800bd7a:	2280      	movs	r2, #128	; 0x80
 800bd7c:	00d2      	lsls	r2, r2, #3
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d11d      	bne.n	800bdbe <_scanf_float+0x39e>
 800bd82:	9b04      	ldr	r3, [sp, #16]
 800bd84:	9a00      	ldr	r2, [sp, #0]
 800bd86:	9900      	ldr	r1, [sp, #0]
 800bd88:	1a9a      	subs	r2, r3, r2
 800bd8a:	428b      	cmp	r3, r1
 800bd8c:	d124      	bne.n	800bdd8 <_scanf_float+0x3b8>
 800bd8e:	2200      	movs	r2, #0
 800bd90:	9903      	ldr	r1, [sp, #12]
 800bd92:	9801      	ldr	r0, [sp, #4]
 800bd94:	f000 fe9c 	bl	800cad0 <_strtod_r>
 800bd98:	9b06      	ldr	r3, [sp, #24]
 800bd9a:	000d      	movs	r5, r1
 800bd9c:	6831      	ldr	r1, [r6, #0]
 800bd9e:	0004      	movs	r4, r0
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	078a      	lsls	r2, r1, #30
 800bda4:	d525      	bpl.n	800bdf2 <_scanf_float+0x3d2>
 800bda6:	1d1a      	adds	r2, r3, #4
 800bda8:	9906      	ldr	r1, [sp, #24]
 800bdaa:	600a      	str	r2, [r1, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	601c      	str	r4, [r3, #0]
 800bdb0:	605d      	str	r5, [r3, #4]
 800bdb2:	68f3      	ldr	r3, [r6, #12]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	60f3      	str	r3, [r6, #12]
 800bdb8:	9802      	ldr	r0, [sp, #8]
 800bdba:	b00b      	add	sp, #44	; 0x2c
 800bdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdbe:	9b07      	ldr	r3, [sp, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0e4      	beq.n	800bd8e <_scanf_float+0x36e>
 800bdc4:	9b08      	ldr	r3, [sp, #32]
 800bdc6:	9a02      	ldr	r2, [sp, #8]
 800bdc8:	1c59      	adds	r1, r3, #1
 800bdca:	9801      	ldr	r0, [sp, #4]
 800bdcc:	230a      	movs	r3, #10
 800bdce:	f000 ff15 	bl	800cbfc <_strtol_r>
 800bdd2:	9b07      	ldr	r3, [sp, #28]
 800bdd4:	9f08      	ldr	r7, [sp, #32]
 800bdd6:	1ac2      	subs	r2, r0, r3
 800bdd8:	0033      	movs	r3, r6
 800bdda:	3370      	adds	r3, #112	; 0x70
 800bddc:	33ff      	adds	r3, #255	; 0xff
 800bdde:	429f      	cmp	r7, r3
 800bde0:	d302      	bcc.n	800bde8 <_scanf_float+0x3c8>
 800bde2:	0037      	movs	r7, r6
 800bde4:	376f      	adds	r7, #111	; 0x6f
 800bde6:	37ff      	adds	r7, #255	; 0xff
 800bde8:	0038      	movs	r0, r7
 800bdea:	490f      	ldr	r1, [pc, #60]	; (800be28 <_scanf_float+0x408>)
 800bdec:	f000 f824 	bl	800be38 <siprintf>
 800bdf0:	e7cd      	b.n	800bd8e <_scanf_float+0x36e>
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	0749      	lsls	r1, r1, #29
 800bdf6:	d4d7      	bmi.n	800bda8 <_scanf_float+0x388>
 800bdf8:	9906      	ldr	r1, [sp, #24]
 800bdfa:	0020      	movs	r0, r4
 800bdfc:	600a      	str	r2, [r1, #0]
 800bdfe:	681f      	ldr	r7, [r3, #0]
 800be00:	0022      	movs	r2, r4
 800be02:	002b      	movs	r3, r5
 800be04:	0029      	movs	r1, r5
 800be06:	f7f6 fffb 	bl	8002e00 <__aeabi_dcmpun>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d004      	beq.n	800be18 <_scanf_float+0x3f8>
 800be0e:	4807      	ldr	r0, [pc, #28]	; (800be2c <_scanf_float+0x40c>)
 800be10:	f000 f80e 	bl	800be30 <nanf>
 800be14:	6038      	str	r0, [r7, #0]
 800be16:	e7cc      	b.n	800bdb2 <_scanf_float+0x392>
 800be18:	0020      	movs	r0, r4
 800be1a:	0029      	movs	r1, r5
 800be1c:	f7f7 f8e2 	bl	8002fe4 <__aeabi_d2f>
 800be20:	e7f8      	b.n	800be14 <_scanf_float+0x3f4>
 800be22:	2300      	movs	r3, #0
 800be24:	e640      	b.n	800baa8 <_scanf_float+0x88>
 800be26:	46c0      	nop			; (mov r8, r8)
 800be28:	08010040 	.word	0x08010040
 800be2c:	08010448 	.word	0x08010448

0800be30 <nanf>:
 800be30:	4800      	ldr	r0, [pc, #0]	; (800be34 <nanf+0x4>)
 800be32:	4770      	bx	lr
 800be34:	7fc00000 	.word	0x7fc00000

0800be38 <siprintf>:
 800be38:	b40e      	push	{r1, r2, r3}
 800be3a:	b500      	push	{lr}
 800be3c:	490b      	ldr	r1, [pc, #44]	; (800be6c <siprintf+0x34>)
 800be3e:	b09c      	sub	sp, #112	; 0x70
 800be40:	ab1d      	add	r3, sp, #116	; 0x74
 800be42:	9002      	str	r0, [sp, #8]
 800be44:	9006      	str	r0, [sp, #24]
 800be46:	9107      	str	r1, [sp, #28]
 800be48:	9104      	str	r1, [sp, #16]
 800be4a:	4809      	ldr	r0, [pc, #36]	; (800be70 <siprintf+0x38>)
 800be4c:	4909      	ldr	r1, [pc, #36]	; (800be74 <siprintf+0x3c>)
 800be4e:	cb04      	ldmia	r3!, {r2}
 800be50:	9105      	str	r1, [sp, #20]
 800be52:	6800      	ldr	r0, [r0, #0]
 800be54:	a902      	add	r1, sp, #8
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	f002 ff54 	bl	800ed04 <_svfiprintf_r>
 800be5c:	2300      	movs	r3, #0
 800be5e:	9a02      	ldr	r2, [sp, #8]
 800be60:	7013      	strb	r3, [r2, #0]
 800be62:	b01c      	add	sp, #112	; 0x70
 800be64:	bc08      	pop	{r3}
 800be66:	b003      	add	sp, #12
 800be68:	4718      	bx	r3
 800be6a:	46c0      	nop			; (mov r8, r8)
 800be6c:	7fffffff 	.word	0x7fffffff
 800be70:	200002b0 	.word	0x200002b0
 800be74:	ffff0208 	.word	0xffff0208

0800be78 <sulp>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	0016      	movs	r6, r2
 800be7c:	000d      	movs	r5, r1
 800be7e:	f002 fc8b 	bl	800e798 <__ulp>
 800be82:	2e00      	cmp	r6, #0
 800be84:	d00d      	beq.n	800bea2 <sulp+0x2a>
 800be86:	236b      	movs	r3, #107	; 0x6b
 800be88:	006a      	lsls	r2, r5, #1
 800be8a:	0d52      	lsrs	r2, r2, #21
 800be8c:	1a9b      	subs	r3, r3, r2
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dd07      	ble.n	800bea2 <sulp+0x2a>
 800be92:	2400      	movs	r4, #0
 800be94:	4a03      	ldr	r2, [pc, #12]	; (800bea4 <sulp+0x2c>)
 800be96:	051b      	lsls	r3, r3, #20
 800be98:	189d      	adds	r5, r3, r2
 800be9a:	002b      	movs	r3, r5
 800be9c:	0022      	movs	r2, r4
 800be9e:	f7f6 f9b1 	bl	8002204 <__aeabi_dmul>
 800bea2:	bd70      	pop	{r4, r5, r6, pc}
 800bea4:	3ff00000 	.word	0x3ff00000

0800bea8 <_strtod_l>:
 800bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beaa:	001d      	movs	r5, r3
 800beac:	2300      	movs	r3, #0
 800beae:	b0a5      	sub	sp, #148	; 0x94
 800beb0:	9320      	str	r3, [sp, #128]	; 0x80
 800beb2:	4bac      	ldr	r3, [pc, #688]	; (800c164 <_strtod_l+0x2bc>)
 800beb4:	9005      	str	r0, [sp, #20]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	9108      	str	r1, [sp, #32]
 800beba:	0018      	movs	r0, r3
 800bebc:	9307      	str	r3, [sp, #28]
 800bebe:	921b      	str	r2, [sp, #108]	; 0x6c
 800bec0:	f7f4 f91e 	bl	8000100 <strlen>
 800bec4:	2600      	movs	r6, #0
 800bec6:	0004      	movs	r4, r0
 800bec8:	2700      	movs	r7, #0
 800beca:	9b08      	ldr	r3, [sp, #32]
 800becc:	931f      	str	r3, [sp, #124]	; 0x7c
 800bece:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bed0:	7813      	ldrb	r3, [r2, #0]
 800bed2:	2b2b      	cmp	r3, #43	; 0x2b
 800bed4:	d058      	beq.n	800bf88 <_strtod_l+0xe0>
 800bed6:	d844      	bhi.n	800bf62 <_strtod_l+0xba>
 800bed8:	2b0d      	cmp	r3, #13
 800beda:	d83d      	bhi.n	800bf58 <_strtod_l+0xb0>
 800bedc:	2b08      	cmp	r3, #8
 800bede:	d83d      	bhi.n	800bf5c <_strtod_l+0xb4>
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d047      	beq.n	800bf74 <_strtod_l+0xcc>
 800bee4:	2300      	movs	r3, #0
 800bee6:	930e      	str	r3, [sp, #56]	; 0x38
 800bee8:	2200      	movs	r2, #0
 800beea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800beec:	920a      	str	r2, [sp, #40]	; 0x28
 800beee:	9306      	str	r3, [sp, #24]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b30      	cmp	r3, #48	; 0x30
 800bef4:	d000      	beq.n	800bef8 <_strtod_l+0x50>
 800bef6:	e07f      	b.n	800bff8 <_strtod_l+0x150>
 800bef8:	9b06      	ldr	r3, [sp, #24]
 800befa:	3220      	adds	r2, #32
 800befc:	785b      	ldrb	r3, [r3, #1]
 800befe:	4393      	bics	r3, r2
 800bf00:	2b58      	cmp	r3, #88	; 0x58
 800bf02:	d000      	beq.n	800bf06 <_strtod_l+0x5e>
 800bf04:	e06e      	b.n	800bfe4 <_strtod_l+0x13c>
 800bf06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf08:	9502      	str	r5, [sp, #8]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	ab20      	add	r3, sp, #128	; 0x80
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4a95      	ldr	r2, [pc, #596]	; (800c168 <_strtod_l+0x2c0>)
 800bf12:	ab21      	add	r3, sp, #132	; 0x84
 800bf14:	9805      	ldr	r0, [sp, #20]
 800bf16:	a91f      	add	r1, sp, #124	; 0x7c
 800bf18:	f001 fd84 	bl	800da24 <__gethex>
 800bf1c:	2307      	movs	r3, #7
 800bf1e:	0005      	movs	r5, r0
 800bf20:	0004      	movs	r4, r0
 800bf22:	401d      	ands	r5, r3
 800bf24:	4218      	tst	r0, r3
 800bf26:	d006      	beq.n	800bf36 <_strtod_l+0x8e>
 800bf28:	2d06      	cmp	r5, #6
 800bf2a:	d12f      	bne.n	800bf8c <_strtod_l+0xe4>
 800bf2c:	9b06      	ldr	r3, [sp, #24]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	931f      	str	r3, [sp, #124]	; 0x7c
 800bf32:	2300      	movs	r3, #0
 800bf34:	930e      	str	r3, [sp, #56]	; 0x38
 800bf36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <_strtod_l+0x9a>
 800bf3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf3e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d01c      	beq.n	800bf82 <_strtod_l+0xda>
 800bf48:	2380      	movs	r3, #128	; 0x80
 800bf4a:	0032      	movs	r2, r6
 800bf4c:	061b      	lsls	r3, r3, #24
 800bf4e:	18fb      	adds	r3, r7, r3
 800bf50:	0010      	movs	r0, r2
 800bf52:	0019      	movs	r1, r3
 800bf54:	b025      	add	sp, #148	; 0x94
 800bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d1c3      	bne.n	800bee4 <_strtod_l+0x3c>
 800bf5c:	3201      	adds	r2, #1
 800bf5e:	921f      	str	r2, [sp, #124]	; 0x7c
 800bf60:	e7b5      	b.n	800bece <_strtod_l+0x26>
 800bf62:	2b2d      	cmp	r3, #45	; 0x2d
 800bf64:	d1be      	bne.n	800bee4 <_strtod_l+0x3c>
 800bf66:	3b2c      	subs	r3, #44	; 0x2c
 800bf68:	930e      	str	r3, [sp, #56]	; 0x38
 800bf6a:	1c53      	adds	r3, r2, #1
 800bf6c:	931f      	str	r3, [sp, #124]	; 0x7c
 800bf6e:	7853      	ldrb	r3, [r2, #1]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1b9      	bne.n	800bee8 <_strtod_l+0x40>
 800bf74:	9b08      	ldr	r3, [sp, #32]
 800bf76:	931f      	str	r3, [sp, #124]	; 0x7c
 800bf78:	2300      	movs	r3, #0
 800bf7a:	930e      	str	r3, [sp, #56]	; 0x38
 800bf7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1dc      	bne.n	800bf3c <_strtod_l+0x94>
 800bf82:	0032      	movs	r2, r6
 800bf84:	003b      	movs	r3, r7
 800bf86:	e7e3      	b.n	800bf50 <_strtod_l+0xa8>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e7ed      	b.n	800bf68 <_strtod_l+0xc0>
 800bf8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	d007      	beq.n	800bfa2 <_strtod_l+0xfa>
 800bf92:	2135      	movs	r1, #53	; 0x35
 800bf94:	a822      	add	r0, sp, #136	; 0x88
 800bf96:	f002 fd00 	bl	800e99a <__copybits>
 800bf9a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bf9c:	9805      	ldr	r0, [sp, #20]
 800bf9e:	f002 f8bb 	bl	800e118 <_Bfree>
 800bfa2:	1e68      	subs	r0, r5, #1
 800bfa4:	2804      	cmp	r0, #4
 800bfa6:	d806      	bhi.n	800bfb6 <_strtod_l+0x10e>
 800bfa8:	f7f4 f8b2 	bl	8000110 <__gnu_thumb1_case_uqi>
 800bfac:	1816030b 	.word	0x1816030b
 800bfb0:	0b          	.byte	0x0b
 800bfb1:	00          	.byte	0x00
 800bfb2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800bfb4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800bfb6:	0723      	lsls	r3, r4, #28
 800bfb8:	d5bd      	bpl.n	800bf36 <_strtod_l+0x8e>
 800bfba:	2380      	movs	r3, #128	; 0x80
 800bfbc:	061b      	lsls	r3, r3, #24
 800bfbe:	431f      	orrs	r7, r3
 800bfc0:	e7b9      	b.n	800bf36 <_strtod_l+0x8e>
 800bfc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfc4:	4a69      	ldr	r2, [pc, #420]	; (800c16c <_strtod_l+0x2c4>)
 800bfc6:	496a      	ldr	r1, [pc, #424]	; (800c170 <_strtod_l+0x2c8>)
 800bfc8:	401a      	ands	r2, r3
 800bfca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfcc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800bfce:	185b      	adds	r3, r3, r1
 800bfd0:	051b      	lsls	r3, r3, #20
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	0017      	movs	r7, r2
 800bfd6:	e7ee      	b.n	800bfb6 <_strtod_l+0x10e>
 800bfd8:	4f66      	ldr	r7, [pc, #408]	; (800c174 <_strtod_l+0x2cc>)
 800bfda:	e7ec      	b.n	800bfb6 <_strtod_l+0x10e>
 800bfdc:	2601      	movs	r6, #1
 800bfde:	4f66      	ldr	r7, [pc, #408]	; (800c178 <_strtod_l+0x2d0>)
 800bfe0:	4276      	negs	r6, r6
 800bfe2:	e7e8      	b.n	800bfb6 <_strtod_l+0x10e>
 800bfe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	921f      	str	r2, [sp, #124]	; 0x7c
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	2b30      	cmp	r3, #48	; 0x30
 800bfee:	d0f9      	beq.n	800bfe4 <_strtod_l+0x13c>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d0a0      	beq.n	800bf36 <_strtod_l+0x8e>
 800bff4:	2301      	movs	r3, #1
 800bff6:	930a      	str	r3, [sp, #40]	; 0x28
 800bff8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bffa:	220a      	movs	r2, #10
 800bffc:	9310      	str	r3, [sp, #64]	; 0x40
 800bffe:	2300      	movs	r3, #0
 800c000:	930f      	str	r3, [sp, #60]	; 0x3c
 800c002:	930b      	str	r3, [sp, #44]	; 0x2c
 800c004:	9309      	str	r3, [sp, #36]	; 0x24
 800c006:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c008:	7805      	ldrb	r5, [r0, #0]
 800c00a:	002b      	movs	r3, r5
 800c00c:	3b30      	subs	r3, #48	; 0x30
 800c00e:	b2d9      	uxtb	r1, r3
 800c010:	2909      	cmp	r1, #9
 800c012:	d927      	bls.n	800c064 <_strtod_l+0x1bc>
 800c014:	0022      	movs	r2, r4
 800c016:	9907      	ldr	r1, [sp, #28]
 800c018:	f002 ff8c 	bl	800ef34 <strncmp>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d033      	beq.n	800c088 <_strtod_l+0x1e0>
 800c020:	2000      	movs	r0, #0
 800c022:	002b      	movs	r3, r5
 800c024:	4684      	mov	ip, r0
 800c026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c028:	900c      	str	r0, [sp, #48]	; 0x30
 800c02a:	9206      	str	r2, [sp, #24]
 800c02c:	2220      	movs	r2, #32
 800c02e:	0019      	movs	r1, r3
 800c030:	4391      	bics	r1, r2
 800c032:	000a      	movs	r2, r1
 800c034:	2100      	movs	r1, #0
 800c036:	9107      	str	r1, [sp, #28]
 800c038:	2a45      	cmp	r2, #69	; 0x45
 800c03a:	d000      	beq.n	800c03e <_strtod_l+0x196>
 800c03c:	e0c5      	b.n	800c1ca <_strtod_l+0x322>
 800c03e:	9b06      	ldr	r3, [sp, #24]
 800c040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c042:	4303      	orrs	r3, r0
 800c044:	4313      	orrs	r3, r2
 800c046:	428b      	cmp	r3, r1
 800c048:	d094      	beq.n	800bf74 <_strtod_l+0xcc>
 800c04a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c04c:	9308      	str	r3, [sp, #32]
 800c04e:	3301      	adds	r3, #1
 800c050:	931f      	str	r3, [sp, #124]	; 0x7c
 800c052:	9b08      	ldr	r3, [sp, #32]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b2b      	cmp	r3, #43	; 0x2b
 800c058:	d076      	beq.n	800c148 <_strtod_l+0x2a0>
 800c05a:	000c      	movs	r4, r1
 800c05c:	2b2d      	cmp	r3, #45	; 0x2d
 800c05e:	d179      	bne.n	800c154 <_strtod_l+0x2ac>
 800c060:	2401      	movs	r4, #1
 800c062:	e072      	b.n	800c14a <_strtod_l+0x2a2>
 800c064:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c066:	2908      	cmp	r1, #8
 800c068:	dc09      	bgt.n	800c07e <_strtod_l+0x1d6>
 800c06a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c06c:	4351      	muls	r1, r2
 800c06e:	185b      	adds	r3, r3, r1
 800c070:	930b      	str	r3, [sp, #44]	; 0x2c
 800c072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c074:	3001      	adds	r0, #1
 800c076:	3301      	adds	r3, #1
 800c078:	9309      	str	r3, [sp, #36]	; 0x24
 800c07a:	901f      	str	r0, [sp, #124]	; 0x7c
 800c07c:	e7c3      	b.n	800c006 <_strtod_l+0x15e>
 800c07e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c080:	4351      	muls	r1, r2
 800c082:	185b      	adds	r3, r3, r1
 800c084:	930f      	str	r3, [sp, #60]	; 0x3c
 800c086:	e7f4      	b.n	800c072 <_strtod_l+0x1ca>
 800c088:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c08c:	191c      	adds	r4, r3, r4
 800c08e:	941f      	str	r4, [sp, #124]	; 0x7c
 800c090:	7823      	ldrb	r3, [r4, #0]
 800c092:	2a00      	cmp	r2, #0
 800c094:	d039      	beq.n	800c10a <_strtod_l+0x262>
 800c096:	900c      	str	r0, [sp, #48]	; 0x30
 800c098:	9206      	str	r2, [sp, #24]
 800c09a:	001a      	movs	r2, r3
 800c09c:	3a30      	subs	r2, #48	; 0x30
 800c09e:	2a09      	cmp	r2, #9
 800c0a0:	d912      	bls.n	800c0c8 <_strtod_l+0x220>
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	4694      	mov	ip, r2
 800c0a6:	e7c1      	b.n	800c02c <_strtod_l+0x184>
 800c0a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	1c5a      	adds	r2, r3, #1
 800c0ae:	921f      	str	r2, [sp, #124]	; 0x7c
 800c0b0:	785b      	ldrb	r3, [r3, #1]
 800c0b2:	2b30      	cmp	r3, #48	; 0x30
 800c0b4:	d0f8      	beq.n	800c0a8 <_strtod_l+0x200>
 800c0b6:	001a      	movs	r2, r3
 800c0b8:	3a31      	subs	r2, #49	; 0x31
 800c0ba:	2a08      	cmp	r2, #8
 800c0bc:	d83f      	bhi.n	800c13e <_strtod_l+0x296>
 800c0be:	900c      	str	r0, [sp, #48]	; 0x30
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c0c4:	9006      	str	r0, [sp, #24]
 800c0c6:	9210      	str	r2, [sp, #64]	; 0x40
 800c0c8:	001a      	movs	r2, r3
 800c0ca:	1c41      	adds	r1, r0, #1
 800c0cc:	3a30      	subs	r2, #48	; 0x30
 800c0ce:	2b30      	cmp	r3, #48	; 0x30
 800c0d0:	d015      	beq.n	800c0fe <_strtod_l+0x256>
 800c0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0d4:	185b      	adds	r3, r3, r1
 800c0d6:	210a      	movs	r1, #10
 800c0d8:	930c      	str	r3, [sp, #48]	; 0x30
 800c0da:	9b06      	ldr	r3, [sp, #24]
 800c0dc:	18c4      	adds	r4, r0, r3
 800c0de:	42a3      	cmp	r3, r4
 800c0e0:	d115      	bne.n	800c10e <_strtod_l+0x266>
 800c0e2:	9906      	ldr	r1, [sp, #24]
 800c0e4:	9b06      	ldr	r3, [sp, #24]
 800c0e6:	3101      	adds	r1, #1
 800c0e8:	1809      	adds	r1, r1, r0
 800c0ea:	181b      	adds	r3, r3, r0
 800c0ec:	9106      	str	r1, [sp, #24]
 800c0ee:	2b08      	cmp	r3, #8
 800c0f0:	dc1b      	bgt.n	800c12a <_strtod_l+0x282>
 800c0f2:	230a      	movs	r3, #10
 800c0f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0f6:	434b      	muls	r3, r1
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	18d3      	adds	r3, r2, r3
 800c0fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c100:	0008      	movs	r0, r1
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	921f      	str	r2, [sp, #124]	; 0x7c
 800c106:	785b      	ldrb	r3, [r3, #1]
 800c108:	e7c7      	b.n	800c09a <_strtod_l+0x1f2>
 800c10a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c10c:	e7d1      	b.n	800c0b2 <_strtod_l+0x20a>
 800c10e:	2b08      	cmp	r3, #8
 800c110:	dc04      	bgt.n	800c11c <_strtod_l+0x274>
 800c112:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c114:	434d      	muls	r5, r1
 800c116:	950b      	str	r5, [sp, #44]	; 0x2c
 800c118:	3301      	adds	r3, #1
 800c11a:	e7e0      	b.n	800c0de <_strtod_l+0x236>
 800c11c:	1c5d      	adds	r5, r3, #1
 800c11e:	2d10      	cmp	r5, #16
 800c120:	dcfa      	bgt.n	800c118 <_strtod_l+0x270>
 800c122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c124:	434d      	muls	r5, r1
 800c126:	950f      	str	r5, [sp, #60]	; 0x3c
 800c128:	e7f6      	b.n	800c118 <_strtod_l+0x270>
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	2100      	movs	r1, #0
 800c12e:	2b10      	cmp	r3, #16
 800c130:	dce5      	bgt.n	800c0fe <_strtod_l+0x256>
 800c132:	230a      	movs	r3, #10
 800c134:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c136:	4343      	muls	r3, r0
 800c138:	18d3      	adds	r3, r2, r3
 800c13a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c13c:	e7df      	b.n	800c0fe <_strtod_l+0x256>
 800c13e:	2200      	movs	r2, #0
 800c140:	920c      	str	r2, [sp, #48]	; 0x30
 800c142:	9206      	str	r2, [sp, #24]
 800c144:	3201      	adds	r2, #1
 800c146:	e7ad      	b.n	800c0a4 <_strtod_l+0x1fc>
 800c148:	2400      	movs	r4, #0
 800c14a:	9b08      	ldr	r3, [sp, #32]
 800c14c:	3302      	adds	r3, #2
 800c14e:	931f      	str	r3, [sp, #124]	; 0x7c
 800c150:	9b08      	ldr	r3, [sp, #32]
 800c152:	789b      	ldrb	r3, [r3, #2]
 800c154:	001a      	movs	r2, r3
 800c156:	3a30      	subs	r2, #48	; 0x30
 800c158:	2a09      	cmp	r2, #9
 800c15a:	d913      	bls.n	800c184 <_strtod_l+0x2dc>
 800c15c:	9a08      	ldr	r2, [sp, #32]
 800c15e:	921f      	str	r2, [sp, #124]	; 0x7c
 800c160:	2200      	movs	r2, #0
 800c162:	e031      	b.n	800c1c8 <_strtod_l+0x320>
 800c164:	08010290 	.word	0x08010290
 800c168:	08010048 	.word	0x08010048
 800c16c:	ffefffff 	.word	0xffefffff
 800c170:	00000433 	.word	0x00000433
 800c174:	7ff00000 	.word	0x7ff00000
 800c178:	7fffffff 	.word	0x7fffffff
 800c17c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	921f      	str	r2, [sp, #124]	; 0x7c
 800c182:	785b      	ldrb	r3, [r3, #1]
 800c184:	2b30      	cmp	r3, #48	; 0x30
 800c186:	d0f9      	beq.n	800c17c <_strtod_l+0x2d4>
 800c188:	2200      	movs	r2, #0
 800c18a:	9207      	str	r2, [sp, #28]
 800c18c:	001a      	movs	r2, r3
 800c18e:	3a31      	subs	r2, #49	; 0x31
 800c190:	2a08      	cmp	r2, #8
 800c192:	d81a      	bhi.n	800c1ca <_strtod_l+0x322>
 800c194:	3b30      	subs	r3, #48	; 0x30
 800c196:	001a      	movs	r2, r3
 800c198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c19a:	9307      	str	r3, [sp, #28]
 800c19c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c19e:	1c59      	adds	r1, r3, #1
 800c1a0:	911f      	str	r1, [sp, #124]	; 0x7c
 800c1a2:	785b      	ldrb	r3, [r3, #1]
 800c1a4:	001d      	movs	r5, r3
 800c1a6:	3d30      	subs	r5, #48	; 0x30
 800c1a8:	2d09      	cmp	r5, #9
 800c1aa:	d939      	bls.n	800c220 <_strtod_l+0x378>
 800c1ac:	9d07      	ldr	r5, [sp, #28]
 800c1ae:	1b49      	subs	r1, r1, r5
 800c1b0:	4db0      	ldr	r5, [pc, #704]	; (800c474 <_strtod_l+0x5cc>)
 800c1b2:	9507      	str	r5, [sp, #28]
 800c1b4:	2908      	cmp	r1, #8
 800c1b6:	dc03      	bgt.n	800c1c0 <_strtod_l+0x318>
 800c1b8:	9207      	str	r2, [sp, #28]
 800c1ba:	42aa      	cmp	r2, r5
 800c1bc:	dd00      	ble.n	800c1c0 <_strtod_l+0x318>
 800c1be:	9507      	str	r5, [sp, #28]
 800c1c0:	2c00      	cmp	r4, #0
 800c1c2:	d002      	beq.n	800c1ca <_strtod_l+0x322>
 800c1c4:	9a07      	ldr	r2, [sp, #28]
 800c1c6:	4252      	negs	r2, r2
 800c1c8:	9207      	str	r2, [sp, #28]
 800c1ca:	9a06      	ldr	r2, [sp, #24]
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	d14b      	bne.n	800c268 <_strtod_l+0x3c0>
 800c1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1d2:	4310      	orrs	r0, r2
 800c1d4:	d000      	beq.n	800c1d8 <_strtod_l+0x330>
 800c1d6:	e6ae      	b.n	800bf36 <_strtod_l+0x8e>
 800c1d8:	4662      	mov	r2, ip
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	d000      	beq.n	800c1e0 <_strtod_l+0x338>
 800c1de:	e6c9      	b.n	800bf74 <_strtod_l+0xcc>
 800c1e0:	2b69      	cmp	r3, #105	; 0x69
 800c1e2:	d025      	beq.n	800c230 <_strtod_l+0x388>
 800c1e4:	dc21      	bgt.n	800c22a <_strtod_l+0x382>
 800c1e6:	2b49      	cmp	r3, #73	; 0x49
 800c1e8:	d022      	beq.n	800c230 <_strtod_l+0x388>
 800c1ea:	2b4e      	cmp	r3, #78	; 0x4e
 800c1ec:	d000      	beq.n	800c1f0 <_strtod_l+0x348>
 800c1ee:	e6c1      	b.n	800bf74 <_strtod_l+0xcc>
 800c1f0:	49a1      	ldr	r1, [pc, #644]	; (800c478 <_strtod_l+0x5d0>)
 800c1f2:	a81f      	add	r0, sp, #124	; 0x7c
 800c1f4:	f001 fe64 	bl	800dec0 <__match>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d100      	bne.n	800c1fe <_strtod_l+0x356>
 800c1fc:	e6ba      	b.n	800bf74 <_strtod_l+0xcc>
 800c1fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b28      	cmp	r3, #40	; 0x28
 800c204:	d12a      	bne.n	800c25c <_strtod_l+0x3b4>
 800c206:	499d      	ldr	r1, [pc, #628]	; (800c47c <_strtod_l+0x5d4>)
 800c208:	aa22      	add	r2, sp, #136	; 0x88
 800c20a:	a81f      	add	r0, sp, #124	; 0x7c
 800c20c:	f001 fe6c 	bl	800dee8 <__hexnan>
 800c210:	2805      	cmp	r0, #5
 800c212:	d123      	bne.n	800c25c <_strtod_l+0x3b4>
 800c214:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c216:	4a9a      	ldr	r2, [pc, #616]	; (800c480 <_strtod_l+0x5d8>)
 800c218:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800c21a:	431a      	orrs	r2, r3
 800c21c:	0017      	movs	r7, r2
 800c21e:	e68a      	b.n	800bf36 <_strtod_l+0x8e>
 800c220:	210a      	movs	r1, #10
 800c222:	434a      	muls	r2, r1
 800c224:	18d2      	adds	r2, r2, r3
 800c226:	3a30      	subs	r2, #48	; 0x30
 800c228:	e7b8      	b.n	800c19c <_strtod_l+0x2f4>
 800c22a:	2b6e      	cmp	r3, #110	; 0x6e
 800c22c:	d0e0      	beq.n	800c1f0 <_strtod_l+0x348>
 800c22e:	e6a1      	b.n	800bf74 <_strtod_l+0xcc>
 800c230:	4994      	ldr	r1, [pc, #592]	; (800c484 <_strtod_l+0x5dc>)
 800c232:	a81f      	add	r0, sp, #124	; 0x7c
 800c234:	f001 fe44 	bl	800dec0 <__match>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d100      	bne.n	800c23e <_strtod_l+0x396>
 800c23c:	e69a      	b.n	800bf74 <_strtod_l+0xcc>
 800c23e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c240:	4991      	ldr	r1, [pc, #580]	; (800c488 <_strtod_l+0x5e0>)
 800c242:	3b01      	subs	r3, #1
 800c244:	a81f      	add	r0, sp, #124	; 0x7c
 800c246:	931f      	str	r3, [sp, #124]	; 0x7c
 800c248:	f001 fe3a 	bl	800dec0 <__match>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d102      	bne.n	800c256 <_strtod_l+0x3ae>
 800c250:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c252:	3301      	adds	r3, #1
 800c254:	931f      	str	r3, [sp, #124]	; 0x7c
 800c256:	2600      	movs	r6, #0
 800c258:	4f89      	ldr	r7, [pc, #548]	; (800c480 <_strtod_l+0x5d8>)
 800c25a:	e66c      	b.n	800bf36 <_strtod_l+0x8e>
 800c25c:	488b      	ldr	r0, [pc, #556]	; (800c48c <_strtod_l+0x5e4>)
 800c25e:	f002 fe51 	bl	800ef04 <nan>
 800c262:	0006      	movs	r6, r0
 800c264:	000f      	movs	r7, r1
 800c266:	e666      	b.n	800bf36 <_strtod_l+0x8e>
 800c268:	9b07      	ldr	r3, [sp, #28]
 800c26a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c26c:	1a9b      	subs	r3, r3, r2
 800c26e:	930a      	str	r3, [sp, #40]	; 0x28
 800c270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <_strtod_l+0x3d2>
 800c276:	9b06      	ldr	r3, [sp, #24]
 800c278:	9309      	str	r3, [sp, #36]	; 0x24
 800c27a:	9c06      	ldr	r4, [sp, #24]
 800c27c:	2c10      	cmp	r4, #16
 800c27e:	dd00      	ble.n	800c282 <_strtod_l+0x3da>
 800c280:	2410      	movs	r4, #16
 800c282:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c284:	f7f6 fe40 	bl	8002f08 <__aeabi_ui2d>
 800c288:	9b06      	ldr	r3, [sp, #24]
 800c28a:	0006      	movs	r6, r0
 800c28c:	000f      	movs	r7, r1
 800c28e:	2b09      	cmp	r3, #9
 800c290:	dd15      	ble.n	800c2be <_strtod_l+0x416>
 800c292:	0022      	movs	r2, r4
 800c294:	4b7e      	ldr	r3, [pc, #504]	; (800c490 <_strtod_l+0x5e8>)
 800c296:	3a09      	subs	r2, #9
 800c298:	00d2      	lsls	r2, r2, #3
 800c29a:	189b      	adds	r3, r3, r2
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	f7f5 ffb0 	bl	8002204 <__aeabi_dmul>
 800c2a4:	0006      	movs	r6, r0
 800c2a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c2a8:	000f      	movs	r7, r1
 800c2aa:	f7f6 fe2d 	bl	8002f08 <__aeabi_ui2d>
 800c2ae:	0002      	movs	r2, r0
 800c2b0:	000b      	movs	r3, r1
 800c2b2:	0030      	movs	r0, r6
 800c2b4:	0039      	movs	r1, r7
 800c2b6:	f7f5 f867 	bl	8001388 <__aeabi_dadd>
 800c2ba:	0006      	movs	r6, r0
 800c2bc:	000f      	movs	r7, r1
 800c2be:	9b06      	ldr	r3, [sp, #24]
 800c2c0:	2b0f      	cmp	r3, #15
 800c2c2:	dc39      	bgt.n	800c338 <_strtod_l+0x490>
 800c2c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d100      	bne.n	800c2cc <_strtod_l+0x424>
 800c2ca:	e634      	b.n	800bf36 <_strtod_l+0x8e>
 800c2cc:	dd24      	ble.n	800c318 <_strtod_l+0x470>
 800c2ce:	2b16      	cmp	r3, #22
 800c2d0:	dc09      	bgt.n	800c2e6 <_strtod_l+0x43e>
 800c2d2:	496f      	ldr	r1, [pc, #444]	; (800c490 <_strtod_l+0x5e8>)
 800c2d4:	00db      	lsls	r3, r3, #3
 800c2d6:	18c9      	adds	r1, r1, r3
 800c2d8:	0032      	movs	r2, r6
 800c2da:	6808      	ldr	r0, [r1, #0]
 800c2dc:	6849      	ldr	r1, [r1, #4]
 800c2de:	003b      	movs	r3, r7
 800c2e0:	f7f5 ff90 	bl	8002204 <__aeabi_dmul>
 800c2e4:	e7bd      	b.n	800c262 <_strtod_l+0x3ba>
 800c2e6:	2325      	movs	r3, #37	; 0x25
 800c2e8:	9a06      	ldr	r2, [sp, #24]
 800c2ea:	1a9b      	subs	r3, r3, r2
 800c2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	db22      	blt.n	800c338 <_strtod_l+0x490>
 800c2f2:	240f      	movs	r4, #15
 800c2f4:	9b06      	ldr	r3, [sp, #24]
 800c2f6:	4d66      	ldr	r5, [pc, #408]	; (800c490 <_strtod_l+0x5e8>)
 800c2f8:	1ae4      	subs	r4, r4, r3
 800c2fa:	00e1      	lsls	r1, r4, #3
 800c2fc:	1869      	adds	r1, r5, r1
 800c2fe:	0032      	movs	r2, r6
 800c300:	6808      	ldr	r0, [r1, #0]
 800c302:	6849      	ldr	r1, [r1, #4]
 800c304:	003b      	movs	r3, r7
 800c306:	f7f5 ff7d 	bl	8002204 <__aeabi_dmul>
 800c30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c30c:	1b1c      	subs	r4, r3, r4
 800c30e:	00e4      	lsls	r4, r4, #3
 800c310:	192c      	adds	r4, r5, r4
 800c312:	6822      	ldr	r2, [r4, #0]
 800c314:	6863      	ldr	r3, [r4, #4]
 800c316:	e7e3      	b.n	800c2e0 <_strtod_l+0x438>
 800c318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c31a:	3316      	adds	r3, #22
 800c31c:	db0c      	blt.n	800c338 <_strtod_l+0x490>
 800c31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c320:	9a07      	ldr	r2, [sp, #28]
 800c322:	0030      	movs	r0, r6
 800c324:	1a9a      	subs	r2, r3, r2
 800c326:	4b5a      	ldr	r3, [pc, #360]	; (800c490 <_strtod_l+0x5e8>)
 800c328:	00d2      	lsls	r2, r2, #3
 800c32a:	189b      	adds	r3, r3, r2
 800c32c:	0039      	movs	r1, r7
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f7f5 fb65 	bl	8001a00 <__aeabi_ddiv>
 800c336:	e794      	b.n	800c262 <_strtod_l+0x3ba>
 800c338:	9b06      	ldr	r3, [sp, #24]
 800c33a:	1b1c      	subs	r4, r3, r4
 800c33c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c33e:	18e4      	adds	r4, r4, r3
 800c340:	2c00      	cmp	r4, #0
 800c342:	dd72      	ble.n	800c42a <_strtod_l+0x582>
 800c344:	230f      	movs	r3, #15
 800c346:	0021      	movs	r1, r4
 800c348:	4019      	ands	r1, r3
 800c34a:	421c      	tst	r4, r3
 800c34c:	d00a      	beq.n	800c364 <_strtod_l+0x4bc>
 800c34e:	00cb      	lsls	r3, r1, #3
 800c350:	494f      	ldr	r1, [pc, #316]	; (800c490 <_strtod_l+0x5e8>)
 800c352:	0032      	movs	r2, r6
 800c354:	18c9      	adds	r1, r1, r3
 800c356:	6808      	ldr	r0, [r1, #0]
 800c358:	6849      	ldr	r1, [r1, #4]
 800c35a:	003b      	movs	r3, r7
 800c35c:	f7f5 ff52 	bl	8002204 <__aeabi_dmul>
 800c360:	0006      	movs	r6, r0
 800c362:	000f      	movs	r7, r1
 800c364:	230f      	movs	r3, #15
 800c366:	439c      	bics	r4, r3
 800c368:	d04a      	beq.n	800c400 <_strtod_l+0x558>
 800c36a:	3326      	adds	r3, #38	; 0x26
 800c36c:	33ff      	adds	r3, #255	; 0xff
 800c36e:	429c      	cmp	r4, r3
 800c370:	dd22      	ble.n	800c3b8 <_strtod_l+0x510>
 800c372:	2300      	movs	r3, #0
 800c374:	9306      	str	r3, [sp, #24]
 800c376:	9307      	str	r3, [sp, #28]
 800c378:	930b      	str	r3, [sp, #44]	; 0x2c
 800c37a:	9309      	str	r3, [sp, #36]	; 0x24
 800c37c:	2322      	movs	r3, #34	; 0x22
 800c37e:	2600      	movs	r6, #0
 800c380:	9a05      	ldr	r2, [sp, #20]
 800c382:	4f3f      	ldr	r7, [pc, #252]	; (800c480 <_strtod_l+0x5d8>)
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c388:	42b3      	cmp	r3, r6
 800c38a:	d100      	bne.n	800c38e <_strtod_l+0x4e6>
 800c38c:	e5d3      	b.n	800bf36 <_strtod_l+0x8e>
 800c38e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c390:	9805      	ldr	r0, [sp, #20]
 800c392:	f001 fec1 	bl	800e118 <_Bfree>
 800c396:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c398:	9805      	ldr	r0, [sp, #20]
 800c39a:	f001 febd 	bl	800e118 <_Bfree>
 800c39e:	9907      	ldr	r1, [sp, #28]
 800c3a0:	9805      	ldr	r0, [sp, #20]
 800c3a2:	f001 feb9 	bl	800e118 <_Bfree>
 800c3a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3a8:	9805      	ldr	r0, [sp, #20]
 800c3aa:	f001 feb5 	bl	800e118 <_Bfree>
 800c3ae:	9906      	ldr	r1, [sp, #24]
 800c3b0:	9805      	ldr	r0, [sp, #20]
 800c3b2:	f001 feb1 	bl	800e118 <_Bfree>
 800c3b6:	e5be      	b.n	800bf36 <_strtod_l+0x8e>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	0030      	movs	r0, r6
 800c3bc:	0039      	movs	r1, r7
 800c3be:	4d35      	ldr	r5, [pc, #212]	; (800c494 <_strtod_l+0x5ec>)
 800c3c0:	1124      	asrs	r4, r4, #4
 800c3c2:	9308      	str	r3, [sp, #32]
 800c3c4:	2c01      	cmp	r4, #1
 800c3c6:	dc1e      	bgt.n	800c406 <_strtod_l+0x55e>
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <_strtod_l+0x528>
 800c3cc:	0006      	movs	r6, r0
 800c3ce:	000f      	movs	r7, r1
 800c3d0:	4b31      	ldr	r3, [pc, #196]	; (800c498 <_strtod_l+0x5f0>)
 800c3d2:	0032      	movs	r2, r6
 800c3d4:	18ff      	adds	r7, r7, r3
 800c3d6:	9b08      	ldr	r3, [sp, #32]
 800c3d8:	00dd      	lsls	r5, r3, #3
 800c3da:	4b2e      	ldr	r3, [pc, #184]	; (800c494 <_strtod_l+0x5ec>)
 800c3dc:	195d      	adds	r5, r3, r5
 800c3de:	6828      	ldr	r0, [r5, #0]
 800c3e0:	6869      	ldr	r1, [r5, #4]
 800c3e2:	003b      	movs	r3, r7
 800c3e4:	f7f5 ff0e 	bl	8002204 <__aeabi_dmul>
 800c3e8:	4b25      	ldr	r3, [pc, #148]	; (800c480 <_strtod_l+0x5d8>)
 800c3ea:	4a2c      	ldr	r2, [pc, #176]	; (800c49c <_strtod_l+0x5f4>)
 800c3ec:	0006      	movs	r6, r0
 800c3ee:	400b      	ands	r3, r1
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d8be      	bhi.n	800c372 <_strtod_l+0x4ca>
 800c3f4:	4a2a      	ldr	r2, [pc, #168]	; (800c4a0 <_strtod_l+0x5f8>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d913      	bls.n	800c422 <_strtod_l+0x57a>
 800c3fa:	2601      	movs	r6, #1
 800c3fc:	4f29      	ldr	r7, [pc, #164]	; (800c4a4 <_strtod_l+0x5fc>)
 800c3fe:	4276      	negs	r6, r6
 800c400:	2300      	movs	r3, #0
 800c402:	9308      	str	r3, [sp, #32]
 800c404:	e087      	b.n	800c516 <_strtod_l+0x66e>
 800c406:	2201      	movs	r2, #1
 800c408:	4214      	tst	r4, r2
 800c40a:	d004      	beq.n	800c416 <_strtod_l+0x56e>
 800c40c:	682a      	ldr	r2, [r5, #0]
 800c40e:	686b      	ldr	r3, [r5, #4]
 800c410:	f7f5 fef8 	bl	8002204 <__aeabi_dmul>
 800c414:	2301      	movs	r3, #1
 800c416:	9a08      	ldr	r2, [sp, #32]
 800c418:	1064      	asrs	r4, r4, #1
 800c41a:	3201      	adds	r2, #1
 800c41c:	9208      	str	r2, [sp, #32]
 800c41e:	3508      	adds	r5, #8
 800c420:	e7d0      	b.n	800c3c4 <_strtod_l+0x51c>
 800c422:	23d4      	movs	r3, #212	; 0xd4
 800c424:	049b      	lsls	r3, r3, #18
 800c426:	18cf      	adds	r7, r1, r3
 800c428:	e7ea      	b.n	800c400 <_strtod_l+0x558>
 800c42a:	2c00      	cmp	r4, #0
 800c42c:	d0e8      	beq.n	800c400 <_strtod_l+0x558>
 800c42e:	4264      	negs	r4, r4
 800c430:	220f      	movs	r2, #15
 800c432:	0023      	movs	r3, r4
 800c434:	4013      	ands	r3, r2
 800c436:	4214      	tst	r4, r2
 800c438:	d00a      	beq.n	800c450 <_strtod_l+0x5a8>
 800c43a:	00da      	lsls	r2, r3, #3
 800c43c:	4b14      	ldr	r3, [pc, #80]	; (800c490 <_strtod_l+0x5e8>)
 800c43e:	0030      	movs	r0, r6
 800c440:	189b      	adds	r3, r3, r2
 800c442:	0039      	movs	r1, r7
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f7f5 fada 	bl	8001a00 <__aeabi_ddiv>
 800c44c:	0006      	movs	r6, r0
 800c44e:	000f      	movs	r7, r1
 800c450:	1124      	asrs	r4, r4, #4
 800c452:	d0d5      	beq.n	800c400 <_strtod_l+0x558>
 800c454:	2c1f      	cmp	r4, #31
 800c456:	dd27      	ble.n	800c4a8 <_strtod_l+0x600>
 800c458:	2300      	movs	r3, #0
 800c45a:	9306      	str	r3, [sp, #24]
 800c45c:	9307      	str	r3, [sp, #28]
 800c45e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c460:	9309      	str	r3, [sp, #36]	; 0x24
 800c462:	2322      	movs	r3, #34	; 0x22
 800c464:	9a05      	ldr	r2, [sp, #20]
 800c466:	2600      	movs	r6, #0
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c46c:	2700      	movs	r7, #0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d18d      	bne.n	800c38e <_strtod_l+0x4e6>
 800c472:	e560      	b.n	800bf36 <_strtod_l+0x8e>
 800c474:	00004e1f 	.word	0x00004e1f
 800c478:	08010019 	.word	0x08010019
 800c47c:	0801005c 	.word	0x0801005c
 800c480:	7ff00000 	.word	0x7ff00000
 800c484:	08010011 	.word	0x08010011
 800c488:	0801019c 	.word	0x0801019c
 800c48c:	08010448 	.word	0x08010448
 800c490:	08010328 	.word	0x08010328
 800c494:	08010300 	.word	0x08010300
 800c498:	fcb00000 	.word	0xfcb00000
 800c49c:	7ca00000 	.word	0x7ca00000
 800c4a0:	7c900000 	.word	0x7c900000
 800c4a4:	7fefffff 	.word	0x7fefffff
 800c4a8:	2310      	movs	r3, #16
 800c4aa:	0022      	movs	r2, r4
 800c4ac:	401a      	ands	r2, r3
 800c4ae:	9208      	str	r2, [sp, #32]
 800c4b0:	421c      	tst	r4, r3
 800c4b2:	d001      	beq.n	800c4b8 <_strtod_l+0x610>
 800c4b4:	335a      	adds	r3, #90	; 0x5a
 800c4b6:	9308      	str	r3, [sp, #32]
 800c4b8:	0030      	movs	r0, r6
 800c4ba:	0039      	movs	r1, r7
 800c4bc:	2300      	movs	r3, #0
 800c4be:	4dc5      	ldr	r5, [pc, #788]	; (800c7d4 <_strtod_l+0x92c>)
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	4214      	tst	r4, r2
 800c4c4:	d004      	beq.n	800c4d0 <_strtod_l+0x628>
 800c4c6:	682a      	ldr	r2, [r5, #0]
 800c4c8:	686b      	ldr	r3, [r5, #4]
 800c4ca:	f7f5 fe9b 	bl	8002204 <__aeabi_dmul>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	1064      	asrs	r4, r4, #1
 800c4d2:	3508      	adds	r5, #8
 800c4d4:	2c00      	cmp	r4, #0
 800c4d6:	d1f3      	bne.n	800c4c0 <_strtod_l+0x618>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <_strtod_l+0x638>
 800c4dc:	0006      	movs	r6, r0
 800c4de:	000f      	movs	r7, r1
 800c4e0:	9b08      	ldr	r3, [sp, #32]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00f      	beq.n	800c506 <_strtod_l+0x65e>
 800c4e6:	236b      	movs	r3, #107	; 0x6b
 800c4e8:	007a      	lsls	r2, r7, #1
 800c4ea:	0d52      	lsrs	r2, r2, #21
 800c4ec:	0039      	movs	r1, r7
 800c4ee:	1a9b      	subs	r3, r3, r2
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	dd08      	ble.n	800c506 <_strtod_l+0x65e>
 800c4f4:	2b1f      	cmp	r3, #31
 800c4f6:	dc00      	bgt.n	800c4fa <_strtod_l+0x652>
 800c4f8:	e124      	b.n	800c744 <_strtod_l+0x89c>
 800c4fa:	2600      	movs	r6, #0
 800c4fc:	2b34      	cmp	r3, #52	; 0x34
 800c4fe:	dc00      	bgt.n	800c502 <_strtod_l+0x65a>
 800c500:	e119      	b.n	800c736 <_strtod_l+0x88e>
 800c502:	27dc      	movs	r7, #220	; 0xdc
 800c504:	04bf      	lsls	r7, r7, #18
 800c506:	2200      	movs	r2, #0
 800c508:	2300      	movs	r3, #0
 800c50a:	0030      	movs	r0, r6
 800c50c:	0039      	movs	r1, r7
 800c50e:	f7f3 ff99 	bl	8000444 <__aeabi_dcmpeq>
 800c512:	2800      	cmp	r0, #0
 800c514:	d1a0      	bne.n	800c458 <_strtod_l+0x5b0>
 800c516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c51e:	9b06      	ldr	r3, [sp, #24]
 800c520:	9805      	ldr	r0, [sp, #20]
 800c522:	f001 fe61 	bl	800e1e8 <__s2b>
 800c526:	900b      	str	r0, [sp, #44]	; 0x2c
 800c528:	2800      	cmp	r0, #0
 800c52a:	d100      	bne.n	800c52e <_strtod_l+0x686>
 800c52c:	e721      	b.n	800c372 <_strtod_l+0x4ca>
 800c52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c530:	9907      	ldr	r1, [sp, #28]
 800c532:	17da      	asrs	r2, r3, #31
 800c534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c536:	1a5b      	subs	r3, r3, r1
 800c538:	401a      	ands	r2, r3
 800c53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c53c:	9215      	str	r2, [sp, #84]	; 0x54
 800c53e:	43db      	mvns	r3, r3
 800c540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c542:	17db      	asrs	r3, r3, #31
 800c544:	401a      	ands	r2, r3
 800c546:	2300      	movs	r3, #0
 800c548:	921a      	str	r2, [sp, #104]	; 0x68
 800c54a:	9306      	str	r3, [sp, #24]
 800c54c:	9307      	str	r3, [sp, #28]
 800c54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c550:	9805      	ldr	r0, [sp, #20]
 800c552:	6859      	ldr	r1, [r3, #4]
 800c554:	f001 fd9c 	bl	800e090 <_Balloc>
 800c558:	9009      	str	r0, [sp, #36]	; 0x24
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d100      	bne.n	800c560 <_strtod_l+0x6b8>
 800c55e:	e70d      	b.n	800c37c <_strtod_l+0x4d4>
 800c560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	310c      	adds	r1, #12
 800c568:	1c9a      	adds	r2, r3, #2
 800c56a:	0092      	lsls	r2, r2, #2
 800c56c:	300c      	adds	r0, #12
 800c56e:	930c      	str	r3, [sp, #48]	; 0x30
 800c570:	f7fe fdd6 	bl	800b120 <memcpy>
 800c574:	ab22      	add	r3, sp, #136	; 0x88
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	ab21      	add	r3, sp, #132	; 0x84
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	0032      	movs	r2, r6
 800c57e:	003b      	movs	r3, r7
 800c580:	9805      	ldr	r0, [sp, #20]
 800c582:	9612      	str	r6, [sp, #72]	; 0x48
 800c584:	9713      	str	r7, [sp, #76]	; 0x4c
 800c586:	f002 f97b 	bl	800e880 <__d2b>
 800c58a:	9020      	str	r0, [sp, #128]	; 0x80
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d100      	bne.n	800c592 <_strtod_l+0x6ea>
 800c590:	e6f4      	b.n	800c37c <_strtod_l+0x4d4>
 800c592:	2101      	movs	r1, #1
 800c594:	9805      	ldr	r0, [sp, #20]
 800c596:	f001 febb 	bl	800e310 <__i2b>
 800c59a:	9007      	str	r0, [sp, #28]
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d100      	bne.n	800c5a2 <_strtod_l+0x6fa>
 800c5a0:	e6ec      	b.n	800c37c <_strtod_l+0x4d4>
 800c5a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c5a6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c5a8:	1ad4      	subs	r4, r2, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	db01      	blt.n	800c5b2 <_strtod_l+0x70a>
 800c5ae:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c5b0:	195d      	adds	r5, r3, r5
 800c5b2:	9908      	ldr	r1, [sp, #32]
 800c5b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c5b6:	1a5b      	subs	r3, r3, r1
 800c5b8:	2136      	movs	r1, #54	; 0x36
 800c5ba:	189b      	adds	r3, r3, r2
 800c5bc:	1a8a      	subs	r2, r1, r2
 800c5be:	4986      	ldr	r1, [pc, #536]	; (800c7d8 <_strtod_l+0x930>)
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	468c      	mov	ip, r1
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	9110      	str	r1, [sp, #64]	; 0x40
 800c5ca:	9014      	str	r0, [sp, #80]	; 0x50
 800c5cc:	4563      	cmp	r3, ip
 800c5ce:	da07      	bge.n	800c5e0 <_strtod_l+0x738>
 800c5d0:	4661      	mov	r1, ip
 800c5d2:	1ac9      	subs	r1, r1, r3
 800c5d4:	1a52      	subs	r2, r2, r1
 800c5d6:	291f      	cmp	r1, #31
 800c5d8:	dd00      	ble.n	800c5dc <_strtod_l+0x734>
 800c5da:	e0b8      	b.n	800c74e <_strtod_l+0x8a6>
 800c5dc:	4088      	lsls	r0, r1
 800c5de:	9014      	str	r0, [sp, #80]	; 0x50
 800c5e0:	18ab      	adds	r3, r5, r2
 800c5e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5e4:	18a4      	adds	r4, r4, r2
 800c5e6:	9b08      	ldr	r3, [sp, #32]
 800c5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5ea:	191c      	adds	r4, r3, r4
 800c5ec:	002b      	movs	r3, r5
 800c5ee:	4295      	cmp	r5, r2
 800c5f0:	dd00      	ble.n	800c5f4 <_strtod_l+0x74c>
 800c5f2:	0013      	movs	r3, r2
 800c5f4:	42a3      	cmp	r3, r4
 800c5f6:	dd00      	ble.n	800c5fa <_strtod_l+0x752>
 800c5f8:	0023      	movs	r3, r4
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dd04      	ble.n	800c608 <_strtod_l+0x760>
 800c5fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c600:	1ae4      	subs	r4, r4, r3
 800c602:	1ad2      	subs	r2, r2, r3
 800c604:	920c      	str	r2, [sp, #48]	; 0x30
 800c606:	1aed      	subs	r5, r5, r3
 800c608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	dd17      	ble.n	800c63e <_strtod_l+0x796>
 800c60e:	001a      	movs	r2, r3
 800c610:	9907      	ldr	r1, [sp, #28]
 800c612:	9805      	ldr	r0, [sp, #20]
 800c614:	f001 ff42 	bl	800e49c <__pow5mult>
 800c618:	9007      	str	r0, [sp, #28]
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d100      	bne.n	800c620 <_strtod_l+0x778>
 800c61e:	e6ad      	b.n	800c37c <_strtod_l+0x4d4>
 800c620:	0001      	movs	r1, r0
 800c622:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c624:	9805      	ldr	r0, [sp, #20]
 800c626:	f001 fe89 	bl	800e33c <__multiply>
 800c62a:	900f      	str	r0, [sp, #60]	; 0x3c
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d100      	bne.n	800c632 <_strtod_l+0x78a>
 800c630:	e6a4      	b.n	800c37c <_strtod_l+0x4d4>
 800c632:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c634:	9805      	ldr	r0, [sp, #20]
 800c636:	f001 fd6f 	bl	800e118 <_Bfree>
 800c63a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c63c:	9320      	str	r3, [sp, #128]	; 0x80
 800c63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c640:	2b00      	cmp	r3, #0
 800c642:	dd00      	ble.n	800c646 <_strtod_l+0x79e>
 800c644:	e089      	b.n	800c75a <_strtod_l+0x8b2>
 800c646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c648:	2b00      	cmp	r3, #0
 800c64a:	dd08      	ble.n	800c65e <_strtod_l+0x7b6>
 800c64c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c64e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c650:	9805      	ldr	r0, [sp, #20]
 800c652:	f001 ff23 	bl	800e49c <__pow5mult>
 800c656:	9009      	str	r0, [sp, #36]	; 0x24
 800c658:	2800      	cmp	r0, #0
 800c65a:	d100      	bne.n	800c65e <_strtod_l+0x7b6>
 800c65c:	e68e      	b.n	800c37c <_strtod_l+0x4d4>
 800c65e:	2c00      	cmp	r4, #0
 800c660:	dd08      	ble.n	800c674 <_strtod_l+0x7cc>
 800c662:	0022      	movs	r2, r4
 800c664:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c666:	9805      	ldr	r0, [sp, #20]
 800c668:	f001 ff74 	bl	800e554 <__lshift>
 800c66c:	9009      	str	r0, [sp, #36]	; 0x24
 800c66e:	2800      	cmp	r0, #0
 800c670:	d100      	bne.n	800c674 <_strtod_l+0x7cc>
 800c672:	e683      	b.n	800c37c <_strtod_l+0x4d4>
 800c674:	2d00      	cmp	r5, #0
 800c676:	dd08      	ble.n	800c68a <_strtod_l+0x7e2>
 800c678:	002a      	movs	r2, r5
 800c67a:	9907      	ldr	r1, [sp, #28]
 800c67c:	9805      	ldr	r0, [sp, #20]
 800c67e:	f001 ff69 	bl	800e554 <__lshift>
 800c682:	9007      	str	r0, [sp, #28]
 800c684:	2800      	cmp	r0, #0
 800c686:	d100      	bne.n	800c68a <_strtod_l+0x7e2>
 800c688:	e678      	b.n	800c37c <_strtod_l+0x4d4>
 800c68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c68c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c68e:	9805      	ldr	r0, [sp, #20]
 800c690:	f001 ffea 	bl	800e668 <__mdiff>
 800c694:	9006      	str	r0, [sp, #24]
 800c696:	2800      	cmp	r0, #0
 800c698:	d100      	bne.n	800c69c <_strtod_l+0x7f4>
 800c69a:	e66f      	b.n	800c37c <_strtod_l+0x4d4>
 800c69c:	2200      	movs	r2, #0
 800c69e:	68c3      	ldr	r3, [r0, #12]
 800c6a0:	9907      	ldr	r1, [sp, #28]
 800c6a2:	60c2      	str	r2, [r0, #12]
 800c6a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6a6:	f001 ffc3 	bl	800e630 <__mcmp>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	da5f      	bge.n	800c76e <_strtod_l+0x8c6>
 800c6ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6b0:	4333      	orrs	r3, r6
 800c6b2:	d000      	beq.n	800c6b6 <_strtod_l+0x80e>
 800c6b4:	e08a      	b.n	800c7cc <_strtod_l+0x924>
 800c6b6:	033b      	lsls	r3, r7, #12
 800c6b8:	d000      	beq.n	800c6bc <_strtod_l+0x814>
 800c6ba:	e087      	b.n	800c7cc <_strtod_l+0x924>
 800c6bc:	22d6      	movs	r2, #214	; 0xd6
 800c6be:	4b47      	ldr	r3, [pc, #284]	; (800c7dc <_strtod_l+0x934>)
 800c6c0:	04d2      	lsls	r2, r2, #19
 800c6c2:	403b      	ands	r3, r7
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d800      	bhi.n	800c6ca <_strtod_l+0x822>
 800c6c8:	e080      	b.n	800c7cc <_strtod_l+0x924>
 800c6ca:	9b06      	ldr	r3, [sp, #24]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d104      	bne.n	800c6de <_strtod_l+0x836>
 800c6d4:	9b06      	ldr	r3, [sp, #24]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	930a      	str	r3, [sp, #40]	; 0x28
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	dd76      	ble.n	800c7cc <_strtod_l+0x924>
 800c6de:	9906      	ldr	r1, [sp, #24]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	9805      	ldr	r0, [sp, #20]
 800c6e4:	f001 ff36 	bl	800e554 <__lshift>
 800c6e8:	9907      	ldr	r1, [sp, #28]
 800c6ea:	9006      	str	r0, [sp, #24]
 800c6ec:	f001 ffa0 	bl	800e630 <__mcmp>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	dd6b      	ble.n	800c7cc <_strtod_l+0x924>
 800c6f4:	9908      	ldr	r1, [sp, #32]
 800c6f6:	003b      	movs	r3, r7
 800c6f8:	4a38      	ldr	r2, [pc, #224]	; (800c7dc <_strtod_l+0x934>)
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	d100      	bne.n	800c700 <_strtod_l+0x858>
 800c6fe:	e092      	b.n	800c826 <_strtod_l+0x97e>
 800c700:	0011      	movs	r1, r2
 800c702:	20d6      	movs	r0, #214	; 0xd6
 800c704:	4039      	ands	r1, r7
 800c706:	04c0      	lsls	r0, r0, #19
 800c708:	4281      	cmp	r1, r0
 800c70a:	dd00      	ble.n	800c70e <_strtod_l+0x866>
 800c70c:	e08b      	b.n	800c826 <_strtod_l+0x97e>
 800c70e:	23dc      	movs	r3, #220	; 0xdc
 800c710:	049b      	lsls	r3, r3, #18
 800c712:	4299      	cmp	r1, r3
 800c714:	dc00      	bgt.n	800c718 <_strtod_l+0x870>
 800c716:	e6a4      	b.n	800c462 <_strtod_l+0x5ba>
 800c718:	0030      	movs	r0, r6
 800c71a:	0039      	movs	r1, r7
 800c71c:	2200      	movs	r2, #0
 800c71e:	4b30      	ldr	r3, [pc, #192]	; (800c7e0 <_strtod_l+0x938>)
 800c720:	f7f5 fd70 	bl	8002204 <__aeabi_dmul>
 800c724:	0006      	movs	r6, r0
 800c726:	000f      	movs	r7, r1
 800c728:	4308      	orrs	r0, r1
 800c72a:	d000      	beq.n	800c72e <_strtod_l+0x886>
 800c72c:	e62f      	b.n	800c38e <_strtod_l+0x4e6>
 800c72e:	2322      	movs	r3, #34	; 0x22
 800c730:	9a05      	ldr	r2, [sp, #20]
 800c732:	6013      	str	r3, [r2, #0]
 800c734:	e62b      	b.n	800c38e <_strtod_l+0x4e6>
 800c736:	234b      	movs	r3, #75	; 0x4b
 800c738:	1a9a      	subs	r2, r3, r2
 800c73a:	3b4c      	subs	r3, #76	; 0x4c
 800c73c:	4093      	lsls	r3, r2
 800c73e:	4019      	ands	r1, r3
 800c740:	000f      	movs	r7, r1
 800c742:	e6e0      	b.n	800c506 <_strtod_l+0x65e>
 800c744:	2201      	movs	r2, #1
 800c746:	4252      	negs	r2, r2
 800c748:	409a      	lsls	r2, r3
 800c74a:	4016      	ands	r6, r2
 800c74c:	e6db      	b.n	800c506 <_strtod_l+0x65e>
 800c74e:	4925      	ldr	r1, [pc, #148]	; (800c7e4 <_strtod_l+0x93c>)
 800c750:	1acb      	subs	r3, r1, r3
 800c752:	0001      	movs	r1, r0
 800c754:	4099      	lsls	r1, r3
 800c756:	9110      	str	r1, [sp, #64]	; 0x40
 800c758:	e741      	b.n	800c5de <_strtod_l+0x736>
 800c75a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c75c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c75e:	9805      	ldr	r0, [sp, #20]
 800c760:	f001 fef8 	bl	800e554 <__lshift>
 800c764:	9020      	str	r0, [sp, #128]	; 0x80
 800c766:	2800      	cmp	r0, #0
 800c768:	d000      	beq.n	800c76c <_strtod_l+0x8c4>
 800c76a:	e76c      	b.n	800c646 <_strtod_l+0x79e>
 800c76c:	e606      	b.n	800c37c <_strtod_l+0x4d4>
 800c76e:	970c      	str	r7, [sp, #48]	; 0x30
 800c770:	2800      	cmp	r0, #0
 800c772:	d176      	bne.n	800c862 <_strtod_l+0x9ba>
 800c774:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c776:	033b      	lsls	r3, r7, #12
 800c778:	0b1b      	lsrs	r3, r3, #12
 800c77a:	2a00      	cmp	r2, #0
 800c77c:	d038      	beq.n	800c7f0 <_strtod_l+0x948>
 800c77e:	4a1a      	ldr	r2, [pc, #104]	; (800c7e8 <_strtod_l+0x940>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d138      	bne.n	800c7f6 <_strtod_l+0x94e>
 800c784:	2201      	movs	r2, #1
 800c786:	9b08      	ldr	r3, [sp, #32]
 800c788:	4252      	negs	r2, r2
 800c78a:	0031      	movs	r1, r6
 800c78c:	0010      	movs	r0, r2
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00b      	beq.n	800c7aa <_strtod_l+0x902>
 800c792:	24d4      	movs	r4, #212	; 0xd4
 800c794:	4b11      	ldr	r3, [pc, #68]	; (800c7dc <_strtod_l+0x934>)
 800c796:	0010      	movs	r0, r2
 800c798:	403b      	ands	r3, r7
 800c79a:	04e4      	lsls	r4, r4, #19
 800c79c:	42a3      	cmp	r3, r4
 800c79e:	d804      	bhi.n	800c7aa <_strtod_l+0x902>
 800c7a0:	306c      	adds	r0, #108	; 0x6c
 800c7a2:	0d1b      	lsrs	r3, r3, #20
 800c7a4:	1ac3      	subs	r3, r0, r3
 800c7a6:	409a      	lsls	r2, r3
 800c7a8:	0010      	movs	r0, r2
 800c7aa:	4281      	cmp	r1, r0
 800c7ac:	d123      	bne.n	800c7f6 <_strtod_l+0x94e>
 800c7ae:	4b0f      	ldr	r3, [pc, #60]	; (800c7ec <_strtod_l+0x944>)
 800c7b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d102      	bne.n	800c7bc <_strtod_l+0x914>
 800c7b6:	1c4b      	adds	r3, r1, #1
 800c7b8:	d100      	bne.n	800c7bc <_strtod_l+0x914>
 800c7ba:	e5df      	b.n	800c37c <_strtod_l+0x4d4>
 800c7bc:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <_strtod_l+0x934>)
 800c7be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7c0:	2600      	movs	r6, #0
 800c7c2:	401a      	ands	r2, r3
 800c7c4:	0013      	movs	r3, r2
 800c7c6:	2280      	movs	r2, #128	; 0x80
 800c7c8:	0352      	lsls	r2, r2, #13
 800c7ca:	189f      	adds	r7, r3, r2
 800c7cc:	9b08      	ldr	r3, [sp, #32]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1a2      	bne.n	800c718 <_strtod_l+0x870>
 800c7d2:	e5dc      	b.n	800c38e <_strtod_l+0x4e6>
 800c7d4:	08010070 	.word	0x08010070
 800c7d8:	fffffc02 	.word	0xfffffc02
 800c7dc:	7ff00000 	.word	0x7ff00000
 800c7e0:	39500000 	.word	0x39500000
 800c7e4:	fffffbe2 	.word	0xfffffbe2
 800c7e8:	000fffff 	.word	0x000fffff
 800c7ec:	7fefffff 	.word	0x7fefffff
 800c7f0:	4333      	orrs	r3, r6
 800c7f2:	d100      	bne.n	800c7f6 <_strtod_l+0x94e>
 800c7f4:	e77e      	b.n	800c6f4 <_strtod_l+0x84c>
 800c7f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01d      	beq.n	800c838 <_strtod_l+0x990>
 800c7fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c800:	4213      	tst	r3, r2
 800c802:	d0e3      	beq.n	800c7cc <_strtod_l+0x924>
 800c804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c806:	0030      	movs	r0, r6
 800c808:	0039      	movs	r1, r7
 800c80a:	9a08      	ldr	r2, [sp, #32]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d017      	beq.n	800c840 <_strtod_l+0x998>
 800c810:	f7ff fb32 	bl	800be78 <sulp>
 800c814:	0002      	movs	r2, r0
 800c816:	000b      	movs	r3, r1
 800c818:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c81a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c81c:	f7f4 fdb4 	bl	8001388 <__aeabi_dadd>
 800c820:	0006      	movs	r6, r0
 800c822:	000f      	movs	r7, r1
 800c824:	e7d2      	b.n	800c7cc <_strtod_l+0x924>
 800c826:	2601      	movs	r6, #1
 800c828:	4013      	ands	r3, r2
 800c82a:	4a99      	ldr	r2, [pc, #612]	; (800ca90 <_strtod_l+0xbe8>)
 800c82c:	4276      	negs	r6, r6
 800c82e:	189b      	adds	r3, r3, r2
 800c830:	4a98      	ldr	r2, [pc, #608]	; (800ca94 <_strtod_l+0xbec>)
 800c832:	431a      	orrs	r2, r3
 800c834:	0017      	movs	r7, r2
 800c836:	e7c9      	b.n	800c7cc <_strtod_l+0x924>
 800c838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c83a:	4233      	tst	r3, r6
 800c83c:	d0c6      	beq.n	800c7cc <_strtod_l+0x924>
 800c83e:	e7e1      	b.n	800c804 <_strtod_l+0x95c>
 800c840:	f7ff fb1a 	bl	800be78 <sulp>
 800c844:	0002      	movs	r2, r0
 800c846:	000b      	movs	r3, r1
 800c848:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c84a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c84c:	f7f5 ff46 	bl	80026dc <__aeabi_dsub>
 800c850:	2200      	movs	r2, #0
 800c852:	2300      	movs	r3, #0
 800c854:	0006      	movs	r6, r0
 800c856:	000f      	movs	r7, r1
 800c858:	f7f3 fdf4 	bl	8000444 <__aeabi_dcmpeq>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d0b5      	beq.n	800c7cc <_strtod_l+0x924>
 800c860:	e5ff      	b.n	800c462 <_strtod_l+0x5ba>
 800c862:	9907      	ldr	r1, [sp, #28]
 800c864:	9806      	ldr	r0, [sp, #24]
 800c866:	f002 f86f 	bl	800e948 <__ratio>
 800c86a:	2380      	movs	r3, #128	; 0x80
 800c86c:	2200      	movs	r2, #0
 800c86e:	05db      	lsls	r3, r3, #23
 800c870:	0004      	movs	r4, r0
 800c872:	000d      	movs	r5, r1
 800c874:	f7f3 fdf6 	bl	8000464 <__aeabi_dcmple>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d075      	beq.n	800c968 <_strtod_l+0xac0>
 800c87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d047      	beq.n	800c912 <_strtod_l+0xa6a>
 800c882:	2300      	movs	r3, #0
 800c884:	4c84      	ldr	r4, [pc, #528]	; (800ca98 <_strtod_l+0xbf0>)
 800c886:	2500      	movs	r5, #0
 800c888:	9310      	str	r3, [sp, #64]	; 0x40
 800c88a:	9411      	str	r4, [sp, #68]	; 0x44
 800c88c:	4c82      	ldr	r4, [pc, #520]	; (800ca98 <_strtod_l+0xbf0>)
 800c88e:	4a83      	ldr	r2, [pc, #524]	; (800ca9c <_strtod_l+0xbf4>)
 800c890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c892:	4013      	ands	r3, r2
 800c894:	9314      	str	r3, [sp, #80]	; 0x50
 800c896:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c898:	4b81      	ldr	r3, [pc, #516]	; (800caa0 <_strtod_l+0xbf8>)
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d000      	beq.n	800c8a0 <_strtod_l+0x9f8>
 800c89e:	e0ac      	b.n	800c9fa <_strtod_l+0xb52>
 800c8a0:	4a80      	ldr	r2, [pc, #512]	; (800caa4 <_strtod_l+0xbfc>)
 800c8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8a4:	4694      	mov	ip, r2
 800c8a6:	4463      	add	r3, ip
 800c8a8:	001f      	movs	r7, r3
 800c8aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8ae:	0030      	movs	r0, r6
 800c8b0:	0039      	movs	r1, r7
 800c8b2:	920c      	str	r2, [sp, #48]	; 0x30
 800c8b4:	930d      	str	r3, [sp, #52]	; 0x34
 800c8b6:	f001 ff6f 	bl	800e798 <__ulp>
 800c8ba:	0002      	movs	r2, r0
 800c8bc:	000b      	movs	r3, r1
 800c8be:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c8c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c8c2:	f7f5 fc9f 	bl	8002204 <__aeabi_dmul>
 800c8c6:	0032      	movs	r2, r6
 800c8c8:	003b      	movs	r3, r7
 800c8ca:	f7f4 fd5d 	bl	8001388 <__aeabi_dadd>
 800c8ce:	4a73      	ldr	r2, [pc, #460]	; (800ca9c <_strtod_l+0xbf4>)
 800c8d0:	4b75      	ldr	r3, [pc, #468]	; (800caa8 <_strtod_l+0xc00>)
 800c8d2:	0006      	movs	r6, r0
 800c8d4:	400a      	ands	r2, r1
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d95e      	bls.n	800c998 <_strtod_l+0xaf0>
 800c8da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c8dc:	4b73      	ldr	r3, [pc, #460]	; (800caac <_strtod_l+0xc04>)
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d103      	bne.n	800c8ea <_strtod_l+0xa42>
 800c8e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	d100      	bne.n	800c8ea <_strtod_l+0xa42>
 800c8e8:	e548      	b.n	800c37c <_strtod_l+0x4d4>
 800c8ea:	2601      	movs	r6, #1
 800c8ec:	4f6f      	ldr	r7, [pc, #444]	; (800caac <_strtod_l+0xc04>)
 800c8ee:	4276      	negs	r6, r6
 800c8f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c8f2:	9805      	ldr	r0, [sp, #20]
 800c8f4:	f001 fc10 	bl	800e118 <_Bfree>
 800c8f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8fa:	9805      	ldr	r0, [sp, #20]
 800c8fc:	f001 fc0c 	bl	800e118 <_Bfree>
 800c900:	9907      	ldr	r1, [sp, #28]
 800c902:	9805      	ldr	r0, [sp, #20]
 800c904:	f001 fc08 	bl	800e118 <_Bfree>
 800c908:	9906      	ldr	r1, [sp, #24]
 800c90a:	9805      	ldr	r0, [sp, #20]
 800c90c:	f001 fc04 	bl	800e118 <_Bfree>
 800c910:	e61d      	b.n	800c54e <_strtod_l+0x6a6>
 800c912:	2e00      	cmp	r6, #0
 800c914:	d11c      	bne.n	800c950 <_strtod_l+0xaa8>
 800c916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c918:	031b      	lsls	r3, r3, #12
 800c91a:	d11f      	bne.n	800c95c <_strtod_l+0xab4>
 800c91c:	2200      	movs	r2, #0
 800c91e:	0020      	movs	r0, r4
 800c920:	0029      	movs	r1, r5
 800c922:	4b5d      	ldr	r3, [pc, #372]	; (800ca98 <_strtod_l+0xbf0>)
 800c924:	f7f3 fd94 	bl	8000450 <__aeabi_dcmplt>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d11a      	bne.n	800c962 <_strtod_l+0xaba>
 800c92c:	0020      	movs	r0, r4
 800c92e:	0029      	movs	r1, r5
 800c930:	2200      	movs	r2, #0
 800c932:	4b5f      	ldr	r3, [pc, #380]	; (800cab0 <_strtod_l+0xc08>)
 800c934:	f7f5 fc66 	bl	8002204 <__aeabi_dmul>
 800c938:	0005      	movs	r5, r0
 800c93a:	000c      	movs	r4, r1
 800c93c:	2380      	movs	r3, #128	; 0x80
 800c93e:	061b      	lsls	r3, r3, #24
 800c940:	18e3      	adds	r3, r4, r3
 800c942:	951c      	str	r5, [sp, #112]	; 0x70
 800c944:	931d      	str	r3, [sp, #116]	; 0x74
 800c946:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c94a:	9210      	str	r2, [sp, #64]	; 0x40
 800c94c:	9311      	str	r3, [sp, #68]	; 0x44
 800c94e:	e79e      	b.n	800c88e <_strtod_l+0x9e6>
 800c950:	2e01      	cmp	r6, #1
 800c952:	d103      	bne.n	800c95c <_strtod_l+0xab4>
 800c954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c956:	2b00      	cmp	r3, #0
 800c958:	d100      	bne.n	800c95c <_strtod_l+0xab4>
 800c95a:	e582      	b.n	800c462 <_strtod_l+0x5ba>
 800c95c:	2300      	movs	r3, #0
 800c95e:	4c55      	ldr	r4, [pc, #340]	; (800cab4 <_strtod_l+0xc0c>)
 800c960:	e791      	b.n	800c886 <_strtod_l+0x9de>
 800c962:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c964:	4c52      	ldr	r4, [pc, #328]	; (800cab0 <_strtod_l+0xc08>)
 800c966:	e7e9      	b.n	800c93c <_strtod_l+0xa94>
 800c968:	2200      	movs	r2, #0
 800c96a:	0020      	movs	r0, r4
 800c96c:	0029      	movs	r1, r5
 800c96e:	4b50      	ldr	r3, [pc, #320]	; (800cab0 <_strtod_l+0xc08>)
 800c970:	f7f5 fc48 	bl	8002204 <__aeabi_dmul>
 800c974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c976:	0005      	movs	r5, r0
 800c978:	000b      	movs	r3, r1
 800c97a:	000c      	movs	r4, r1
 800c97c:	2a00      	cmp	r2, #0
 800c97e:	d107      	bne.n	800c990 <_strtod_l+0xae8>
 800c980:	2280      	movs	r2, #128	; 0x80
 800c982:	0612      	lsls	r2, r2, #24
 800c984:	188b      	adds	r3, r1, r2
 800c986:	9016      	str	r0, [sp, #88]	; 0x58
 800c988:	9317      	str	r3, [sp, #92]	; 0x5c
 800c98a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c98c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c98e:	e7dc      	b.n	800c94a <_strtod_l+0xaa2>
 800c990:	0002      	movs	r2, r0
 800c992:	9216      	str	r2, [sp, #88]	; 0x58
 800c994:	9317      	str	r3, [sp, #92]	; 0x5c
 800c996:	e7f8      	b.n	800c98a <_strtod_l+0xae2>
 800c998:	23d4      	movs	r3, #212	; 0xd4
 800c99a:	049b      	lsls	r3, r3, #18
 800c99c:	18cf      	adds	r7, r1, r3
 800c99e:	9b08      	ldr	r3, [sp, #32]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1a5      	bne.n	800c8f0 <_strtod_l+0xa48>
 800c9a4:	4b3d      	ldr	r3, [pc, #244]	; (800ca9c <_strtod_l+0xbf4>)
 800c9a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9a8:	403b      	ands	r3, r7
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d1a0      	bne.n	800c8f0 <_strtod_l+0xa48>
 800c9ae:	0028      	movs	r0, r5
 800c9b0:	0021      	movs	r1, r4
 800c9b2:	f7f3 fdcd 	bl	8000550 <__aeabi_d2lz>
 800c9b6:	f7f3 fe07 	bl	80005c8 <__aeabi_l2d>
 800c9ba:	0002      	movs	r2, r0
 800c9bc:	000b      	movs	r3, r1
 800c9be:	0028      	movs	r0, r5
 800c9c0:	0021      	movs	r1, r4
 800c9c2:	f7f5 fe8b 	bl	80026dc <__aeabi_dsub>
 800c9c6:	033b      	lsls	r3, r7, #12
 800c9c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9ca:	0b1b      	lsrs	r3, r3, #12
 800c9cc:	4333      	orrs	r3, r6
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	0004      	movs	r4, r0
 800c9d2:	000d      	movs	r5, r1
 800c9d4:	4a38      	ldr	r2, [pc, #224]	; (800cab8 <_strtod_l+0xc10>)
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d055      	beq.n	800ca86 <_strtod_l+0xbde>
 800c9da:	4b38      	ldr	r3, [pc, #224]	; (800cabc <_strtod_l+0xc14>)
 800c9dc:	f7f3 fd38 	bl	8000450 <__aeabi_dcmplt>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d000      	beq.n	800c9e6 <_strtod_l+0xb3e>
 800c9e4:	e4d3      	b.n	800c38e <_strtod_l+0x4e6>
 800c9e6:	0020      	movs	r0, r4
 800c9e8:	0029      	movs	r1, r5
 800c9ea:	4a35      	ldr	r2, [pc, #212]	; (800cac0 <_strtod_l+0xc18>)
 800c9ec:	4b30      	ldr	r3, [pc, #192]	; (800cab0 <_strtod_l+0xc08>)
 800c9ee:	f7f3 fd43 	bl	8000478 <__aeabi_dcmpgt>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d100      	bne.n	800c9f8 <_strtod_l+0xb50>
 800c9f6:	e77b      	b.n	800c8f0 <_strtod_l+0xa48>
 800c9f8:	e4c9      	b.n	800c38e <_strtod_l+0x4e6>
 800c9fa:	9b08      	ldr	r3, [sp, #32]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d02b      	beq.n	800ca58 <_strtod_l+0xbb0>
 800ca00:	23d4      	movs	r3, #212	; 0xd4
 800ca02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca04:	04db      	lsls	r3, r3, #19
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d826      	bhi.n	800ca58 <_strtod_l+0xbb0>
 800ca0a:	0028      	movs	r0, r5
 800ca0c:	0021      	movs	r1, r4
 800ca0e:	4a2d      	ldr	r2, [pc, #180]	; (800cac4 <_strtod_l+0xc1c>)
 800ca10:	4b2d      	ldr	r3, [pc, #180]	; (800cac8 <_strtod_l+0xc20>)
 800ca12:	f7f3 fd27 	bl	8000464 <__aeabi_dcmple>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d017      	beq.n	800ca4a <_strtod_l+0xba2>
 800ca1a:	0028      	movs	r0, r5
 800ca1c:	0021      	movs	r1, r4
 800ca1e:	f7f3 fd79 	bl	8000514 <__aeabi_d2uiz>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d100      	bne.n	800ca28 <_strtod_l+0xb80>
 800ca26:	3001      	adds	r0, #1
 800ca28:	f7f6 fa6e 	bl	8002f08 <__aeabi_ui2d>
 800ca2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca2e:	0005      	movs	r5, r0
 800ca30:	000b      	movs	r3, r1
 800ca32:	000c      	movs	r4, r1
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	d122      	bne.n	800ca7e <_strtod_l+0xbd6>
 800ca38:	2280      	movs	r2, #128	; 0x80
 800ca3a:	0612      	lsls	r2, r2, #24
 800ca3c:	188b      	adds	r3, r1, r2
 800ca3e:	9018      	str	r0, [sp, #96]	; 0x60
 800ca40:	9319      	str	r3, [sp, #100]	; 0x64
 800ca42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca46:	9210      	str	r2, [sp, #64]	; 0x40
 800ca48:	9311      	str	r3, [sp, #68]	; 0x44
 800ca4a:	22d6      	movs	r2, #214	; 0xd6
 800ca4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca4e:	04d2      	lsls	r2, r2, #19
 800ca50:	189b      	adds	r3, r3, r2
 800ca52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca54:	1a9b      	subs	r3, r3, r2
 800ca56:	9311      	str	r3, [sp, #68]	; 0x44
 800ca58:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ca5c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800ca5e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ca60:	f001 fe9a 	bl	800e798 <__ulp>
 800ca64:	0002      	movs	r2, r0
 800ca66:	000b      	movs	r3, r1
 800ca68:	0030      	movs	r0, r6
 800ca6a:	0039      	movs	r1, r7
 800ca6c:	f7f5 fbca 	bl	8002204 <__aeabi_dmul>
 800ca70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca74:	f7f4 fc88 	bl	8001388 <__aeabi_dadd>
 800ca78:	0006      	movs	r6, r0
 800ca7a:	000f      	movs	r7, r1
 800ca7c:	e78f      	b.n	800c99e <_strtod_l+0xaf6>
 800ca7e:	0002      	movs	r2, r0
 800ca80:	9218      	str	r2, [sp, #96]	; 0x60
 800ca82:	9319      	str	r3, [sp, #100]	; 0x64
 800ca84:	e7dd      	b.n	800ca42 <_strtod_l+0xb9a>
 800ca86:	4b11      	ldr	r3, [pc, #68]	; (800cacc <_strtod_l+0xc24>)
 800ca88:	f7f3 fce2 	bl	8000450 <__aeabi_dcmplt>
 800ca8c:	e7b1      	b.n	800c9f2 <_strtod_l+0xb4a>
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	fff00000 	.word	0xfff00000
 800ca94:	000fffff 	.word	0x000fffff
 800ca98:	3ff00000 	.word	0x3ff00000
 800ca9c:	7ff00000 	.word	0x7ff00000
 800caa0:	7fe00000 	.word	0x7fe00000
 800caa4:	fcb00000 	.word	0xfcb00000
 800caa8:	7c9fffff 	.word	0x7c9fffff
 800caac:	7fefffff 	.word	0x7fefffff
 800cab0:	3fe00000 	.word	0x3fe00000
 800cab4:	bff00000 	.word	0xbff00000
 800cab8:	94a03595 	.word	0x94a03595
 800cabc:	3fdfffff 	.word	0x3fdfffff
 800cac0:	35afe535 	.word	0x35afe535
 800cac4:	ffc00000 	.word	0xffc00000
 800cac8:	41dfffff 	.word	0x41dfffff
 800cacc:	3fcfffff 	.word	0x3fcfffff

0800cad0 <_strtod_r>:
 800cad0:	b510      	push	{r4, lr}
 800cad2:	4b02      	ldr	r3, [pc, #8]	; (800cadc <_strtod_r+0xc>)
 800cad4:	f7ff f9e8 	bl	800bea8 <_strtod_l>
 800cad8:	bd10      	pop	{r4, pc}
 800cada:	46c0      	nop			; (mov r8, r8)
 800cadc:	20000318 	.word	0x20000318

0800cae0 <_strtol_l.constprop.0>:
 800cae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae2:	b087      	sub	sp, #28
 800cae4:	001e      	movs	r6, r3
 800cae6:	9005      	str	r0, [sp, #20]
 800cae8:	9101      	str	r1, [sp, #4]
 800caea:	9202      	str	r2, [sp, #8]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d045      	beq.n	800cb7c <_strtol_l.constprop.0+0x9c>
 800caf0:	000b      	movs	r3, r1
 800caf2:	2e24      	cmp	r6, #36	; 0x24
 800caf4:	d842      	bhi.n	800cb7c <_strtol_l.constprop.0+0x9c>
 800caf6:	4a3f      	ldr	r2, [pc, #252]	; (800cbf4 <_strtol_l.constprop.0+0x114>)
 800caf8:	2108      	movs	r1, #8
 800cafa:	4694      	mov	ip, r2
 800cafc:	001a      	movs	r2, r3
 800cafe:	4660      	mov	r0, ip
 800cb00:	7814      	ldrb	r4, [r2, #0]
 800cb02:	3301      	adds	r3, #1
 800cb04:	5d00      	ldrb	r0, [r0, r4]
 800cb06:	001d      	movs	r5, r3
 800cb08:	0007      	movs	r7, r0
 800cb0a:	400f      	ands	r7, r1
 800cb0c:	4208      	tst	r0, r1
 800cb0e:	d1f5      	bne.n	800cafc <_strtol_l.constprop.0+0x1c>
 800cb10:	2c2d      	cmp	r4, #45	; 0x2d
 800cb12:	d13a      	bne.n	800cb8a <_strtol_l.constprop.0+0xaa>
 800cb14:	2701      	movs	r7, #1
 800cb16:	781c      	ldrb	r4, [r3, #0]
 800cb18:	1c95      	adds	r5, r2, #2
 800cb1a:	2e00      	cmp	r6, #0
 800cb1c:	d065      	beq.n	800cbea <_strtol_l.constprop.0+0x10a>
 800cb1e:	2e10      	cmp	r6, #16
 800cb20:	d109      	bne.n	800cb36 <_strtol_l.constprop.0+0x56>
 800cb22:	2c30      	cmp	r4, #48	; 0x30
 800cb24:	d107      	bne.n	800cb36 <_strtol_l.constprop.0+0x56>
 800cb26:	2220      	movs	r2, #32
 800cb28:	782b      	ldrb	r3, [r5, #0]
 800cb2a:	4393      	bics	r3, r2
 800cb2c:	2b58      	cmp	r3, #88	; 0x58
 800cb2e:	d157      	bne.n	800cbe0 <_strtol_l.constprop.0+0x100>
 800cb30:	2610      	movs	r6, #16
 800cb32:	786c      	ldrb	r4, [r5, #1]
 800cb34:	3502      	adds	r5, #2
 800cb36:	4b30      	ldr	r3, [pc, #192]	; (800cbf8 <_strtol_l.constprop.0+0x118>)
 800cb38:	0031      	movs	r1, r6
 800cb3a:	18fb      	adds	r3, r7, r3
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	f7f3 fb80 	bl	8000244 <__aeabi_uidivmod>
 800cb44:	2300      	movs	r3, #0
 800cb46:	2201      	movs	r2, #1
 800cb48:	4684      	mov	ip, r0
 800cb4a:	0018      	movs	r0, r3
 800cb4c:	9104      	str	r1, [sp, #16]
 800cb4e:	4252      	negs	r2, r2
 800cb50:	0021      	movs	r1, r4
 800cb52:	3930      	subs	r1, #48	; 0x30
 800cb54:	2909      	cmp	r1, #9
 800cb56:	d81d      	bhi.n	800cb94 <_strtol_l.constprop.0+0xb4>
 800cb58:	000c      	movs	r4, r1
 800cb5a:	42a6      	cmp	r6, r4
 800cb5c:	dd28      	ble.n	800cbb0 <_strtol_l.constprop.0+0xd0>
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	db24      	blt.n	800cbac <_strtol_l.constprop.0+0xcc>
 800cb62:	0013      	movs	r3, r2
 800cb64:	4584      	cmp	ip, r0
 800cb66:	d306      	bcc.n	800cb76 <_strtol_l.constprop.0+0x96>
 800cb68:	d102      	bne.n	800cb70 <_strtol_l.constprop.0+0x90>
 800cb6a:	9904      	ldr	r1, [sp, #16]
 800cb6c:	42a1      	cmp	r1, r4
 800cb6e:	db02      	blt.n	800cb76 <_strtol_l.constprop.0+0x96>
 800cb70:	2301      	movs	r3, #1
 800cb72:	4370      	muls	r0, r6
 800cb74:	1820      	adds	r0, r4, r0
 800cb76:	782c      	ldrb	r4, [r5, #0]
 800cb78:	3501      	adds	r5, #1
 800cb7a:	e7e9      	b.n	800cb50 <_strtol_l.constprop.0+0x70>
 800cb7c:	f7fe faa6 	bl	800b0cc <__errno>
 800cb80:	2316      	movs	r3, #22
 800cb82:	6003      	str	r3, [r0, #0]
 800cb84:	2000      	movs	r0, #0
 800cb86:	b007      	add	sp, #28
 800cb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb8a:	2c2b      	cmp	r4, #43	; 0x2b
 800cb8c:	d1c5      	bne.n	800cb1a <_strtol_l.constprop.0+0x3a>
 800cb8e:	781c      	ldrb	r4, [r3, #0]
 800cb90:	1c95      	adds	r5, r2, #2
 800cb92:	e7c2      	b.n	800cb1a <_strtol_l.constprop.0+0x3a>
 800cb94:	0021      	movs	r1, r4
 800cb96:	3941      	subs	r1, #65	; 0x41
 800cb98:	2919      	cmp	r1, #25
 800cb9a:	d801      	bhi.n	800cba0 <_strtol_l.constprop.0+0xc0>
 800cb9c:	3c37      	subs	r4, #55	; 0x37
 800cb9e:	e7dc      	b.n	800cb5a <_strtol_l.constprop.0+0x7a>
 800cba0:	0021      	movs	r1, r4
 800cba2:	3961      	subs	r1, #97	; 0x61
 800cba4:	2919      	cmp	r1, #25
 800cba6:	d803      	bhi.n	800cbb0 <_strtol_l.constprop.0+0xd0>
 800cba8:	3c57      	subs	r4, #87	; 0x57
 800cbaa:	e7d6      	b.n	800cb5a <_strtol_l.constprop.0+0x7a>
 800cbac:	0013      	movs	r3, r2
 800cbae:	e7e2      	b.n	800cb76 <_strtol_l.constprop.0+0x96>
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	da09      	bge.n	800cbc8 <_strtol_l.constprop.0+0xe8>
 800cbb4:	2322      	movs	r3, #34	; 0x22
 800cbb6:	9a05      	ldr	r2, [sp, #20]
 800cbb8:	9803      	ldr	r0, [sp, #12]
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	9b02      	ldr	r3, [sp, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0e1      	beq.n	800cb86 <_strtol_l.constprop.0+0xa6>
 800cbc2:	1e6b      	subs	r3, r5, #1
 800cbc4:	9301      	str	r3, [sp, #4]
 800cbc6:	e007      	b.n	800cbd8 <_strtol_l.constprop.0+0xf8>
 800cbc8:	2f00      	cmp	r7, #0
 800cbca:	d000      	beq.n	800cbce <_strtol_l.constprop.0+0xee>
 800cbcc:	4240      	negs	r0, r0
 800cbce:	9a02      	ldr	r2, [sp, #8]
 800cbd0:	2a00      	cmp	r2, #0
 800cbd2:	d0d8      	beq.n	800cb86 <_strtol_l.constprop.0+0xa6>
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1f4      	bne.n	800cbc2 <_strtol_l.constprop.0+0xe2>
 800cbd8:	9b02      	ldr	r3, [sp, #8]
 800cbda:	9a01      	ldr	r2, [sp, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e7d2      	b.n	800cb86 <_strtol_l.constprop.0+0xa6>
 800cbe0:	2430      	movs	r4, #48	; 0x30
 800cbe2:	2e00      	cmp	r6, #0
 800cbe4:	d1a7      	bne.n	800cb36 <_strtol_l.constprop.0+0x56>
 800cbe6:	3608      	adds	r6, #8
 800cbe8:	e7a5      	b.n	800cb36 <_strtol_l.constprop.0+0x56>
 800cbea:	2c30      	cmp	r4, #48	; 0x30
 800cbec:	d09b      	beq.n	800cb26 <_strtol_l.constprop.0+0x46>
 800cbee:	260a      	movs	r6, #10
 800cbf0:	e7a1      	b.n	800cb36 <_strtol_l.constprop.0+0x56>
 800cbf2:	46c0      	nop			; (mov r8, r8)
 800cbf4:	08010099 	.word	0x08010099
 800cbf8:	7fffffff 	.word	0x7fffffff

0800cbfc <_strtol_r>:
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	f7ff ff6f 	bl	800cae0 <_strtol_l.constprop.0>
 800cc02:	bd10      	pop	{r4, pc}

0800cc04 <quorem>:
 800cc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc06:	0006      	movs	r6, r0
 800cc08:	690b      	ldr	r3, [r1, #16]
 800cc0a:	6932      	ldr	r2, [r6, #16]
 800cc0c:	b087      	sub	sp, #28
 800cc0e:	2000      	movs	r0, #0
 800cc10:	9103      	str	r1, [sp, #12]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	db65      	blt.n	800cce2 <quorem+0xde>
 800cc16:	3b01      	subs	r3, #1
 800cc18:	009c      	lsls	r4, r3, #2
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	000b      	movs	r3, r1
 800cc1e:	3314      	adds	r3, #20
 800cc20:	9305      	str	r3, [sp, #20]
 800cc22:	191b      	adds	r3, r3, r4
 800cc24:	9304      	str	r3, [sp, #16]
 800cc26:	0033      	movs	r3, r6
 800cc28:	3314      	adds	r3, #20
 800cc2a:	9302      	str	r3, [sp, #8]
 800cc2c:	191c      	adds	r4, r3, r4
 800cc2e:	9b04      	ldr	r3, [sp, #16]
 800cc30:	6827      	ldr	r7, [r4, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	0038      	movs	r0, r7
 800cc36:	1c5d      	adds	r5, r3, #1
 800cc38:	0029      	movs	r1, r5
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	f7f3 fa7c 	bl	8000138 <__udivsi3>
 800cc40:	9001      	str	r0, [sp, #4]
 800cc42:	42af      	cmp	r7, r5
 800cc44:	d324      	bcc.n	800cc90 <quorem+0x8c>
 800cc46:	2500      	movs	r5, #0
 800cc48:	46ac      	mov	ip, r5
 800cc4a:	9802      	ldr	r0, [sp, #8]
 800cc4c:	9f05      	ldr	r7, [sp, #20]
 800cc4e:	cf08      	ldmia	r7!, {r3}
 800cc50:	9a01      	ldr	r2, [sp, #4]
 800cc52:	b299      	uxth	r1, r3
 800cc54:	4351      	muls	r1, r2
 800cc56:	0c1b      	lsrs	r3, r3, #16
 800cc58:	4353      	muls	r3, r2
 800cc5a:	1949      	adds	r1, r1, r5
 800cc5c:	0c0a      	lsrs	r2, r1, #16
 800cc5e:	189b      	adds	r3, r3, r2
 800cc60:	6802      	ldr	r2, [r0, #0]
 800cc62:	b289      	uxth	r1, r1
 800cc64:	b292      	uxth	r2, r2
 800cc66:	4462      	add	r2, ip
 800cc68:	1a52      	subs	r2, r2, r1
 800cc6a:	6801      	ldr	r1, [r0, #0]
 800cc6c:	0c1d      	lsrs	r5, r3, #16
 800cc6e:	0c09      	lsrs	r1, r1, #16
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	1acb      	subs	r3, r1, r3
 800cc74:	1411      	asrs	r1, r2, #16
 800cc76:	185b      	adds	r3, r3, r1
 800cc78:	1419      	asrs	r1, r3, #16
 800cc7a:	b292      	uxth	r2, r2
 800cc7c:	041b      	lsls	r3, r3, #16
 800cc7e:	431a      	orrs	r2, r3
 800cc80:	9b04      	ldr	r3, [sp, #16]
 800cc82:	468c      	mov	ip, r1
 800cc84:	c004      	stmia	r0!, {r2}
 800cc86:	42bb      	cmp	r3, r7
 800cc88:	d2e1      	bcs.n	800cc4e <quorem+0x4a>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d030      	beq.n	800ccf2 <quorem+0xee>
 800cc90:	0030      	movs	r0, r6
 800cc92:	9903      	ldr	r1, [sp, #12]
 800cc94:	f001 fccc 	bl	800e630 <__mcmp>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	db21      	blt.n	800cce0 <quorem+0xdc>
 800cc9c:	0030      	movs	r0, r6
 800cc9e:	2400      	movs	r4, #0
 800cca0:	9b01      	ldr	r3, [sp, #4]
 800cca2:	9903      	ldr	r1, [sp, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	3014      	adds	r0, #20
 800ccaa:	3114      	adds	r1, #20
 800ccac:	6803      	ldr	r3, [r0, #0]
 800ccae:	c920      	ldmia	r1!, {r5}
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	1914      	adds	r4, r2, r4
 800ccb4:	b2aa      	uxth	r2, r5
 800ccb6:	1aa2      	subs	r2, r4, r2
 800ccb8:	0c1b      	lsrs	r3, r3, #16
 800ccba:	0c2d      	lsrs	r5, r5, #16
 800ccbc:	1414      	asrs	r4, r2, #16
 800ccbe:	1b5b      	subs	r3, r3, r5
 800ccc0:	191b      	adds	r3, r3, r4
 800ccc2:	141c      	asrs	r4, r3, #16
 800ccc4:	b292      	uxth	r2, r2
 800ccc6:	041b      	lsls	r3, r3, #16
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	c008      	stmia	r0!, {r3}
 800cccc:	9b04      	ldr	r3, [sp, #16]
 800ccce:	428b      	cmp	r3, r1
 800ccd0:	d2ec      	bcs.n	800ccac <quorem+0xa8>
 800ccd2:	9b00      	ldr	r3, [sp, #0]
 800ccd4:	9a02      	ldr	r2, [sp, #8]
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	18d3      	adds	r3, r2, r3
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	2a00      	cmp	r2, #0
 800ccde:	d015      	beq.n	800cd0c <quorem+0x108>
 800cce0:	9801      	ldr	r0, [sp, #4]
 800cce2:	b007      	add	sp, #28
 800cce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d106      	bne.n	800ccfa <quorem+0xf6>
 800ccec:	9b00      	ldr	r3, [sp, #0]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	9b02      	ldr	r3, [sp, #8]
 800ccf4:	3c04      	subs	r4, #4
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	d3f5      	bcc.n	800cce6 <quorem+0xe2>
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	6133      	str	r3, [r6, #16]
 800ccfe:	e7c7      	b.n	800cc90 <quorem+0x8c>
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	2a00      	cmp	r2, #0
 800cd04:	d106      	bne.n	800cd14 <quorem+0x110>
 800cd06:	9a00      	ldr	r2, [sp, #0]
 800cd08:	3a01      	subs	r2, #1
 800cd0a:	9200      	str	r2, [sp, #0]
 800cd0c:	9a02      	ldr	r2, [sp, #8]
 800cd0e:	3b04      	subs	r3, #4
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d3f5      	bcc.n	800cd00 <quorem+0xfc>
 800cd14:	9b00      	ldr	r3, [sp, #0]
 800cd16:	6133      	str	r3, [r6, #16]
 800cd18:	e7e2      	b.n	800cce0 <quorem+0xdc>
	...

0800cd1c <_dtoa_r>:
 800cd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd1e:	b09d      	sub	sp, #116	; 0x74
 800cd20:	9202      	str	r2, [sp, #8]
 800cd22:	9303      	str	r3, [sp, #12]
 800cd24:	9b02      	ldr	r3, [sp, #8]
 800cd26:	9c03      	ldr	r4, [sp, #12]
 800cd28:	9308      	str	r3, [sp, #32]
 800cd2a:	9409      	str	r4, [sp, #36]	; 0x24
 800cd2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cd2e:	0007      	movs	r7, r0
 800cd30:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800cd32:	2c00      	cmp	r4, #0
 800cd34:	d10e      	bne.n	800cd54 <_dtoa_r+0x38>
 800cd36:	2010      	movs	r0, #16
 800cd38:	f001 f982 	bl	800e040 <malloc>
 800cd3c:	1e02      	subs	r2, r0, #0
 800cd3e:	6278      	str	r0, [r7, #36]	; 0x24
 800cd40:	d104      	bne.n	800cd4c <_dtoa_r+0x30>
 800cd42:	21ea      	movs	r1, #234	; 0xea
 800cd44:	4bc7      	ldr	r3, [pc, #796]	; (800d064 <_dtoa_r+0x348>)
 800cd46:	48c8      	ldr	r0, [pc, #800]	; (800d068 <_dtoa_r+0x34c>)
 800cd48:	f002 f914 	bl	800ef74 <__assert_func>
 800cd4c:	6044      	str	r4, [r0, #4]
 800cd4e:	6084      	str	r4, [r0, #8]
 800cd50:	6004      	str	r4, [r0, #0]
 800cd52:	60c4      	str	r4, [r0, #12]
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	6819      	ldr	r1, [r3, #0]
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d00a      	beq.n	800cd72 <_dtoa_r+0x56>
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	2301      	movs	r3, #1
 800cd60:	4093      	lsls	r3, r2
 800cd62:	604a      	str	r2, [r1, #4]
 800cd64:	608b      	str	r3, [r1, #8]
 800cd66:	0038      	movs	r0, r7
 800cd68:	f001 f9d6 	bl	800e118 <_Bfree>
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	da20      	bge.n	800cdba <_dtoa_r+0x9e>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	602b      	str	r3, [r5, #0]
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	085b      	lsrs	r3, r3, #1
 800cd82:	9309      	str	r3, [sp, #36]	; 0x24
 800cd84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cd86:	4bb9      	ldr	r3, [pc, #740]	; (800d06c <_dtoa_r+0x350>)
 800cd88:	4ab8      	ldr	r2, [pc, #736]	; (800d06c <_dtoa_r+0x350>)
 800cd8a:	402b      	ands	r3, r5
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d117      	bne.n	800cdc0 <_dtoa_r+0xa4>
 800cd90:	4bb7      	ldr	r3, [pc, #732]	; (800d070 <_dtoa_r+0x354>)
 800cd92:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cd94:	0328      	lsls	r0, r5, #12
 800cd96:	6013      	str	r3, [r2, #0]
 800cd98:	9b02      	ldr	r3, [sp, #8]
 800cd9a:	0b00      	lsrs	r0, r0, #12
 800cd9c:	4318      	orrs	r0, r3
 800cd9e:	d101      	bne.n	800cda4 <_dtoa_r+0x88>
 800cda0:	f000 fdbf 	bl	800d922 <_dtoa_r+0xc06>
 800cda4:	48b3      	ldr	r0, [pc, #716]	; (800d074 <_dtoa_r+0x358>)
 800cda6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cda8:	9006      	str	r0, [sp, #24]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <_dtoa_r+0x98>
 800cdae:	4bb2      	ldr	r3, [pc, #712]	; (800d078 <_dtoa_r+0x35c>)
 800cdb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	9806      	ldr	r0, [sp, #24]
 800cdb6:	b01d      	add	sp, #116	; 0x74
 800cdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdba:	2300      	movs	r3, #0
 800cdbc:	602b      	str	r3, [r5, #0]
 800cdbe:	e7e1      	b.n	800cd84 <_dtoa_r+0x68>
 800cdc0:	9b08      	ldr	r3, [sp, #32]
 800cdc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cdc4:	9312      	str	r3, [sp, #72]	; 0x48
 800cdc6:	9413      	str	r4, [sp, #76]	; 0x4c
 800cdc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cdca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f7f3 fb38 	bl	8000444 <__aeabi_dcmpeq>
 800cdd4:	1e04      	subs	r4, r0, #0
 800cdd6:	d009      	beq.n	800cdec <_dtoa_r+0xd0>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cddc:	6013      	str	r3, [r2, #0]
 800cdde:	4ba7      	ldr	r3, [pc, #668]	; (800d07c <_dtoa_r+0x360>)
 800cde0:	9306      	str	r3, [sp, #24]
 800cde2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0e5      	beq.n	800cdb4 <_dtoa_r+0x98>
 800cde8:	4ba5      	ldr	r3, [pc, #660]	; (800d080 <_dtoa_r+0x364>)
 800cdea:	e7e1      	b.n	800cdb0 <_dtoa_r+0x94>
 800cdec:	ab1a      	add	r3, sp, #104	; 0x68
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	ab1b      	add	r3, sp, #108	; 0x6c
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	0038      	movs	r0, r7
 800cdf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdfa:	f001 fd41 	bl	800e880 <__d2b>
 800cdfe:	006e      	lsls	r6, r5, #1
 800ce00:	9005      	str	r0, [sp, #20]
 800ce02:	0d76      	lsrs	r6, r6, #21
 800ce04:	d100      	bne.n	800ce08 <_dtoa_r+0xec>
 800ce06:	e07c      	b.n	800cf02 <_dtoa_r+0x1e6>
 800ce08:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ce0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ce0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce0e:	4a9d      	ldr	r2, [pc, #628]	; (800d084 <_dtoa_r+0x368>)
 800ce10:	031b      	lsls	r3, r3, #12
 800ce12:	0b1b      	lsrs	r3, r3, #12
 800ce14:	431a      	orrs	r2, r3
 800ce16:	0011      	movs	r1, r2
 800ce18:	4b9b      	ldr	r3, [pc, #620]	; (800d088 <_dtoa_r+0x36c>)
 800ce1a:	9418      	str	r4, [sp, #96]	; 0x60
 800ce1c:	18f6      	adds	r6, r6, r3
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4b9a      	ldr	r3, [pc, #616]	; (800d08c <_dtoa_r+0x370>)
 800ce22:	f7f5 fc5b 	bl	80026dc <__aeabi_dsub>
 800ce26:	4a9a      	ldr	r2, [pc, #616]	; (800d090 <_dtoa_r+0x374>)
 800ce28:	4b9a      	ldr	r3, [pc, #616]	; (800d094 <_dtoa_r+0x378>)
 800ce2a:	f7f5 f9eb 	bl	8002204 <__aeabi_dmul>
 800ce2e:	4a9a      	ldr	r2, [pc, #616]	; (800d098 <_dtoa_r+0x37c>)
 800ce30:	4b9a      	ldr	r3, [pc, #616]	; (800d09c <_dtoa_r+0x380>)
 800ce32:	f7f4 faa9 	bl	8001388 <__aeabi_dadd>
 800ce36:	0004      	movs	r4, r0
 800ce38:	0030      	movs	r0, r6
 800ce3a:	000d      	movs	r5, r1
 800ce3c:	f7f6 f834 	bl	8002ea8 <__aeabi_i2d>
 800ce40:	4a97      	ldr	r2, [pc, #604]	; (800d0a0 <_dtoa_r+0x384>)
 800ce42:	4b98      	ldr	r3, [pc, #608]	; (800d0a4 <_dtoa_r+0x388>)
 800ce44:	f7f5 f9de 	bl	8002204 <__aeabi_dmul>
 800ce48:	0002      	movs	r2, r0
 800ce4a:	000b      	movs	r3, r1
 800ce4c:	0020      	movs	r0, r4
 800ce4e:	0029      	movs	r1, r5
 800ce50:	f7f4 fa9a 	bl	8001388 <__aeabi_dadd>
 800ce54:	0004      	movs	r4, r0
 800ce56:	000d      	movs	r5, r1
 800ce58:	f7f5 fff0 	bl	8002e3c <__aeabi_d2iz>
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	9002      	str	r0, [sp, #8]
 800ce60:	2300      	movs	r3, #0
 800ce62:	0020      	movs	r0, r4
 800ce64:	0029      	movs	r1, r5
 800ce66:	f7f3 faf3 	bl	8000450 <__aeabi_dcmplt>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d00b      	beq.n	800ce86 <_dtoa_r+0x16a>
 800ce6e:	9802      	ldr	r0, [sp, #8]
 800ce70:	f7f6 f81a 	bl	8002ea8 <__aeabi_i2d>
 800ce74:	002b      	movs	r3, r5
 800ce76:	0022      	movs	r2, r4
 800ce78:	f7f3 fae4 	bl	8000444 <__aeabi_dcmpeq>
 800ce7c:	4243      	negs	r3, r0
 800ce7e:	4158      	adcs	r0, r3
 800ce80:	9b02      	ldr	r3, [sp, #8]
 800ce82:	1a1b      	subs	r3, r3, r0
 800ce84:	9302      	str	r3, [sp, #8]
 800ce86:	2301      	movs	r3, #1
 800ce88:	9316      	str	r3, [sp, #88]	; 0x58
 800ce8a:	9b02      	ldr	r3, [sp, #8]
 800ce8c:	2b16      	cmp	r3, #22
 800ce8e:	d80f      	bhi.n	800ceb0 <_dtoa_r+0x194>
 800ce90:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ce92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ce94:	00da      	lsls	r2, r3, #3
 800ce96:	4b84      	ldr	r3, [pc, #528]	; (800d0a8 <_dtoa_r+0x38c>)
 800ce98:	189b      	adds	r3, r3, r2
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f7f3 fad7 	bl	8000450 <__aeabi_dcmplt>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d049      	beq.n	800cf3a <_dtoa_r+0x21e>
 800cea6:	9b02      	ldr	r3, [sp, #8]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	9302      	str	r3, [sp, #8]
 800ceac:	2300      	movs	r3, #0
 800ceae:	9316      	str	r3, [sp, #88]	; 0x58
 800ceb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ceb2:	1b9e      	subs	r6, r3, r6
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	930a      	str	r3, [sp, #40]	; 0x28
 800ceb8:	0033      	movs	r3, r6
 800ceba:	3b01      	subs	r3, #1
 800cebc:	930d      	str	r3, [sp, #52]	; 0x34
 800cebe:	d504      	bpl.n	800ceca <_dtoa_r+0x1ae>
 800cec0:	2301      	movs	r3, #1
 800cec2:	1b9b      	subs	r3, r3, r6
 800cec4:	930a      	str	r3, [sp, #40]	; 0x28
 800cec6:	2300      	movs	r3, #0
 800cec8:	930d      	str	r3, [sp, #52]	; 0x34
 800ceca:	9b02      	ldr	r3, [sp, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	db36      	blt.n	800cf3e <_dtoa_r+0x222>
 800ced0:	9a02      	ldr	r2, [sp, #8]
 800ced2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ced4:	4694      	mov	ip, r2
 800ced6:	4463      	add	r3, ip
 800ced8:	930d      	str	r3, [sp, #52]	; 0x34
 800ceda:	2300      	movs	r3, #0
 800cedc:	9215      	str	r2, [sp, #84]	; 0x54
 800cede:	930e      	str	r3, [sp, #56]	; 0x38
 800cee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cee2:	2401      	movs	r4, #1
 800cee4:	2b09      	cmp	r3, #9
 800cee6:	d864      	bhi.n	800cfb2 <_dtoa_r+0x296>
 800cee8:	2b05      	cmp	r3, #5
 800ceea:	dd02      	ble.n	800cef2 <_dtoa_r+0x1d6>
 800ceec:	2400      	movs	r4, #0
 800ceee:	3b04      	subs	r3, #4
 800cef0:	9322      	str	r3, [sp, #136]	; 0x88
 800cef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cef4:	1e98      	subs	r0, r3, #2
 800cef6:	2803      	cmp	r0, #3
 800cef8:	d864      	bhi.n	800cfc4 <_dtoa_r+0x2a8>
 800cefa:	f7f3 f909 	bl	8000110 <__gnu_thumb1_case_uqi>
 800cefe:	3829      	.short	0x3829
 800cf00:	5836      	.short	0x5836
 800cf02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cf04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cf06:	189e      	adds	r6, r3, r2
 800cf08:	4b68      	ldr	r3, [pc, #416]	; (800d0ac <_dtoa_r+0x390>)
 800cf0a:	18f2      	adds	r2, r6, r3
 800cf0c:	2a20      	cmp	r2, #32
 800cf0e:	dd0f      	ble.n	800cf30 <_dtoa_r+0x214>
 800cf10:	2340      	movs	r3, #64	; 0x40
 800cf12:	1a9b      	subs	r3, r3, r2
 800cf14:	409d      	lsls	r5, r3
 800cf16:	4b66      	ldr	r3, [pc, #408]	; (800d0b0 <_dtoa_r+0x394>)
 800cf18:	9802      	ldr	r0, [sp, #8]
 800cf1a:	18f3      	adds	r3, r6, r3
 800cf1c:	40d8      	lsrs	r0, r3
 800cf1e:	4328      	orrs	r0, r5
 800cf20:	f7f5 fff2 	bl	8002f08 <__aeabi_ui2d>
 800cf24:	2301      	movs	r3, #1
 800cf26:	4c63      	ldr	r4, [pc, #396]	; (800d0b4 <_dtoa_r+0x398>)
 800cf28:	3e01      	subs	r6, #1
 800cf2a:	1909      	adds	r1, r1, r4
 800cf2c:	9318      	str	r3, [sp, #96]	; 0x60
 800cf2e:	e776      	b.n	800ce1e <_dtoa_r+0x102>
 800cf30:	2320      	movs	r3, #32
 800cf32:	9802      	ldr	r0, [sp, #8]
 800cf34:	1a9b      	subs	r3, r3, r2
 800cf36:	4098      	lsls	r0, r3
 800cf38:	e7f2      	b.n	800cf20 <_dtoa_r+0x204>
 800cf3a:	9016      	str	r0, [sp, #88]	; 0x58
 800cf3c:	e7b8      	b.n	800ceb0 <_dtoa_r+0x194>
 800cf3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf40:	9a02      	ldr	r2, [sp, #8]
 800cf42:	1a9b      	subs	r3, r3, r2
 800cf44:	930a      	str	r3, [sp, #40]	; 0x28
 800cf46:	4253      	negs	r3, r2
 800cf48:	930e      	str	r3, [sp, #56]	; 0x38
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9315      	str	r3, [sp, #84]	; 0x54
 800cf4e:	e7c7      	b.n	800cee0 <_dtoa_r+0x1c4>
 800cf50:	2300      	movs	r3, #0
 800cf52:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cf56:	930c      	str	r3, [sp, #48]	; 0x30
 800cf58:	9307      	str	r3, [sp, #28]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	dc13      	bgt.n	800cf86 <_dtoa_r+0x26a>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	001a      	movs	r2, r3
 800cf62:	930c      	str	r3, [sp, #48]	; 0x30
 800cf64:	9307      	str	r3, [sp, #28]
 800cf66:	9223      	str	r2, [sp, #140]	; 0x8c
 800cf68:	e00d      	b.n	800cf86 <_dtoa_r+0x26a>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e7f1      	b.n	800cf52 <_dtoa_r+0x236>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cf72:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf74:	4694      	mov	ip, r2
 800cf76:	9b02      	ldr	r3, [sp, #8]
 800cf78:	4463      	add	r3, ip
 800cf7a:	930c      	str	r3, [sp, #48]	; 0x30
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	9307      	str	r3, [sp, #28]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	dc00      	bgt.n	800cf86 <_dtoa_r+0x26a>
 800cf84:	2301      	movs	r3, #1
 800cf86:	2200      	movs	r2, #0
 800cf88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf8a:	6042      	str	r2, [r0, #4]
 800cf8c:	3204      	adds	r2, #4
 800cf8e:	0015      	movs	r5, r2
 800cf90:	3514      	adds	r5, #20
 800cf92:	6841      	ldr	r1, [r0, #4]
 800cf94:	429d      	cmp	r5, r3
 800cf96:	d919      	bls.n	800cfcc <_dtoa_r+0x2b0>
 800cf98:	0038      	movs	r0, r7
 800cf9a:	f001 f879 	bl	800e090 <_Balloc>
 800cf9e:	9006      	str	r0, [sp, #24]
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d117      	bne.n	800cfd4 <_dtoa_r+0x2b8>
 800cfa4:	21d5      	movs	r1, #213	; 0xd5
 800cfa6:	0002      	movs	r2, r0
 800cfa8:	4b43      	ldr	r3, [pc, #268]	; (800d0b8 <_dtoa_r+0x39c>)
 800cfaa:	0049      	lsls	r1, r1, #1
 800cfac:	e6cb      	b.n	800cd46 <_dtoa_r+0x2a>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e7de      	b.n	800cf70 <_dtoa_r+0x254>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	940f      	str	r4, [sp, #60]	; 0x3c
 800cfb6:	9322      	str	r3, [sp, #136]	; 0x88
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	930c      	str	r3, [sp, #48]	; 0x30
 800cfbc:	9307      	str	r3, [sp, #28]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	3313      	adds	r3, #19
 800cfc2:	e7d0      	b.n	800cf66 <_dtoa_r+0x24a>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfc8:	3b02      	subs	r3, #2
 800cfca:	e7f6      	b.n	800cfba <_dtoa_r+0x29e>
 800cfcc:	3101      	adds	r1, #1
 800cfce:	6041      	str	r1, [r0, #4]
 800cfd0:	0052      	lsls	r2, r2, #1
 800cfd2:	e7dc      	b.n	800cf8e <_dtoa_r+0x272>
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	9a06      	ldr	r2, [sp, #24]
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	9b07      	ldr	r3, [sp, #28]
 800cfdc:	2b0e      	cmp	r3, #14
 800cfde:	d900      	bls.n	800cfe2 <_dtoa_r+0x2c6>
 800cfe0:	e0eb      	b.n	800d1ba <_dtoa_r+0x49e>
 800cfe2:	2c00      	cmp	r4, #0
 800cfe4:	d100      	bne.n	800cfe8 <_dtoa_r+0x2cc>
 800cfe6:	e0e8      	b.n	800d1ba <_dtoa_r+0x49e>
 800cfe8:	9b02      	ldr	r3, [sp, #8]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	dd68      	ble.n	800d0c0 <_dtoa_r+0x3a4>
 800cfee:	001a      	movs	r2, r3
 800cff0:	210f      	movs	r1, #15
 800cff2:	4b2d      	ldr	r3, [pc, #180]	; (800d0a8 <_dtoa_r+0x38c>)
 800cff4:	400a      	ands	r2, r1
 800cff6:	00d2      	lsls	r2, r2, #3
 800cff8:	189b      	adds	r3, r3, r2
 800cffa:	681d      	ldr	r5, [r3, #0]
 800cffc:	685e      	ldr	r6, [r3, #4]
 800cffe:	9b02      	ldr	r3, [sp, #8]
 800d000:	111c      	asrs	r4, r3, #4
 800d002:	2302      	movs	r3, #2
 800d004:	9310      	str	r3, [sp, #64]	; 0x40
 800d006:	9b02      	ldr	r3, [sp, #8]
 800d008:	05db      	lsls	r3, r3, #23
 800d00a:	d50b      	bpl.n	800d024 <_dtoa_r+0x308>
 800d00c:	4b2b      	ldr	r3, [pc, #172]	; (800d0bc <_dtoa_r+0x3a0>)
 800d00e:	400c      	ands	r4, r1
 800d010:	6a1a      	ldr	r2, [r3, #32]
 800d012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d014:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d016:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d018:	f7f4 fcf2 	bl	8001a00 <__aeabi_ddiv>
 800d01c:	2303      	movs	r3, #3
 800d01e:	9008      	str	r0, [sp, #32]
 800d020:	9109      	str	r1, [sp, #36]	; 0x24
 800d022:	9310      	str	r3, [sp, #64]	; 0x40
 800d024:	4b25      	ldr	r3, [pc, #148]	; (800d0bc <_dtoa_r+0x3a0>)
 800d026:	9314      	str	r3, [sp, #80]	; 0x50
 800d028:	2c00      	cmp	r4, #0
 800d02a:	d108      	bne.n	800d03e <_dtoa_r+0x322>
 800d02c:	9808      	ldr	r0, [sp, #32]
 800d02e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d030:	002a      	movs	r2, r5
 800d032:	0033      	movs	r3, r6
 800d034:	f7f4 fce4 	bl	8001a00 <__aeabi_ddiv>
 800d038:	9008      	str	r0, [sp, #32]
 800d03a:	9109      	str	r1, [sp, #36]	; 0x24
 800d03c:	e05c      	b.n	800d0f8 <_dtoa_r+0x3dc>
 800d03e:	2301      	movs	r3, #1
 800d040:	421c      	tst	r4, r3
 800d042:	d00b      	beq.n	800d05c <_dtoa_r+0x340>
 800d044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d046:	0028      	movs	r0, r5
 800d048:	3301      	adds	r3, #1
 800d04a:	9310      	str	r3, [sp, #64]	; 0x40
 800d04c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d04e:	0031      	movs	r1, r6
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	f7f5 f8d6 	bl	8002204 <__aeabi_dmul>
 800d058:	0005      	movs	r5, r0
 800d05a:	000e      	movs	r6, r1
 800d05c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d05e:	1064      	asrs	r4, r4, #1
 800d060:	3308      	adds	r3, #8
 800d062:	e7e0      	b.n	800d026 <_dtoa_r+0x30a>
 800d064:	080101a6 	.word	0x080101a6
 800d068:	080101bd 	.word	0x080101bd
 800d06c:	7ff00000 	.word	0x7ff00000
 800d070:	0000270f 	.word	0x0000270f
 800d074:	080101a2 	.word	0x080101a2
 800d078:	080101a5 	.word	0x080101a5
 800d07c:	0801001c 	.word	0x0801001c
 800d080:	0801001d 	.word	0x0801001d
 800d084:	3ff00000 	.word	0x3ff00000
 800d088:	fffffc01 	.word	0xfffffc01
 800d08c:	3ff80000 	.word	0x3ff80000
 800d090:	636f4361 	.word	0x636f4361
 800d094:	3fd287a7 	.word	0x3fd287a7
 800d098:	8b60c8b3 	.word	0x8b60c8b3
 800d09c:	3fc68a28 	.word	0x3fc68a28
 800d0a0:	509f79fb 	.word	0x509f79fb
 800d0a4:	3fd34413 	.word	0x3fd34413
 800d0a8:	08010328 	.word	0x08010328
 800d0ac:	00000432 	.word	0x00000432
 800d0b0:	00000412 	.word	0x00000412
 800d0b4:	fe100000 	.word	0xfe100000
 800d0b8:	08010218 	.word	0x08010218
 800d0bc:	08010300 	.word	0x08010300
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	9310      	str	r3, [sp, #64]	; 0x40
 800d0c4:	9b02      	ldr	r3, [sp, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d016      	beq.n	800d0f8 <_dtoa_r+0x3dc>
 800d0ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d0cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d0ce:	425c      	negs	r4, r3
 800d0d0:	230f      	movs	r3, #15
 800d0d2:	4ab6      	ldr	r2, [pc, #728]	; (800d3ac <_dtoa_r+0x690>)
 800d0d4:	4023      	ands	r3, r4
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	18d3      	adds	r3, r2, r3
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	f7f5 f891 	bl	8002204 <__aeabi_dmul>
 800d0e2:	2601      	movs	r6, #1
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9008      	str	r0, [sp, #32]
 800d0e8:	9109      	str	r1, [sp, #36]	; 0x24
 800d0ea:	4db1      	ldr	r5, [pc, #708]	; (800d3b0 <_dtoa_r+0x694>)
 800d0ec:	1124      	asrs	r4, r4, #4
 800d0ee:	2c00      	cmp	r4, #0
 800d0f0:	d000      	beq.n	800d0f4 <_dtoa_r+0x3d8>
 800d0f2:	e094      	b.n	800d21e <_dtoa_r+0x502>
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d19f      	bne.n	800d038 <_dtoa_r+0x31c>
 800d0f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d100      	bne.n	800d100 <_dtoa_r+0x3e4>
 800d0fe:	e09b      	b.n	800d238 <_dtoa_r+0x51c>
 800d100:	9c08      	ldr	r4, [sp, #32]
 800d102:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d104:	2200      	movs	r2, #0
 800d106:	0020      	movs	r0, r4
 800d108:	0029      	movs	r1, r5
 800d10a:	4baa      	ldr	r3, [pc, #680]	; (800d3b4 <_dtoa_r+0x698>)
 800d10c:	f7f3 f9a0 	bl	8000450 <__aeabi_dcmplt>
 800d110:	2800      	cmp	r0, #0
 800d112:	d100      	bne.n	800d116 <_dtoa_r+0x3fa>
 800d114:	e090      	b.n	800d238 <_dtoa_r+0x51c>
 800d116:	9b07      	ldr	r3, [sp, #28]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d100      	bne.n	800d11e <_dtoa_r+0x402>
 800d11c:	e08c      	b.n	800d238 <_dtoa_r+0x51c>
 800d11e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d120:	2b00      	cmp	r3, #0
 800d122:	dd46      	ble.n	800d1b2 <_dtoa_r+0x496>
 800d124:	9b02      	ldr	r3, [sp, #8]
 800d126:	2200      	movs	r2, #0
 800d128:	0020      	movs	r0, r4
 800d12a:	0029      	movs	r1, r5
 800d12c:	1e5e      	subs	r6, r3, #1
 800d12e:	4ba2      	ldr	r3, [pc, #648]	; (800d3b8 <_dtoa_r+0x69c>)
 800d130:	f7f5 f868 	bl	8002204 <__aeabi_dmul>
 800d134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d136:	9008      	str	r0, [sp, #32]
 800d138:	9109      	str	r1, [sp, #36]	; 0x24
 800d13a:	3301      	adds	r3, #1
 800d13c:	9310      	str	r3, [sp, #64]	; 0x40
 800d13e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d140:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d142:	9c08      	ldr	r4, [sp, #32]
 800d144:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d146:	9314      	str	r3, [sp, #80]	; 0x50
 800d148:	f7f5 feae 	bl	8002ea8 <__aeabi_i2d>
 800d14c:	0022      	movs	r2, r4
 800d14e:	002b      	movs	r3, r5
 800d150:	f7f5 f858 	bl	8002204 <__aeabi_dmul>
 800d154:	2200      	movs	r2, #0
 800d156:	4b99      	ldr	r3, [pc, #612]	; (800d3bc <_dtoa_r+0x6a0>)
 800d158:	f7f4 f916 	bl	8001388 <__aeabi_dadd>
 800d15c:	9010      	str	r0, [sp, #64]	; 0x40
 800d15e:	9111      	str	r1, [sp, #68]	; 0x44
 800d160:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d162:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d164:	9208      	str	r2, [sp, #32]
 800d166:	9309      	str	r3, [sp, #36]	; 0x24
 800d168:	4a95      	ldr	r2, [pc, #596]	; (800d3c0 <_dtoa_r+0x6a4>)
 800d16a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d16c:	4694      	mov	ip, r2
 800d16e:	4463      	add	r3, ip
 800d170:	9317      	str	r3, [sp, #92]	; 0x5c
 800d172:	9309      	str	r3, [sp, #36]	; 0x24
 800d174:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d176:	2b00      	cmp	r3, #0
 800d178:	d161      	bne.n	800d23e <_dtoa_r+0x522>
 800d17a:	2200      	movs	r2, #0
 800d17c:	0020      	movs	r0, r4
 800d17e:	0029      	movs	r1, r5
 800d180:	4b90      	ldr	r3, [pc, #576]	; (800d3c4 <_dtoa_r+0x6a8>)
 800d182:	f7f5 faab 	bl	80026dc <__aeabi_dsub>
 800d186:	9a08      	ldr	r2, [sp, #32]
 800d188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d18a:	0004      	movs	r4, r0
 800d18c:	000d      	movs	r5, r1
 800d18e:	f7f3 f973 	bl	8000478 <__aeabi_dcmpgt>
 800d192:	2800      	cmp	r0, #0
 800d194:	d000      	beq.n	800d198 <_dtoa_r+0x47c>
 800d196:	e2af      	b.n	800d6f8 <_dtoa_r+0x9dc>
 800d198:	488b      	ldr	r0, [pc, #556]	; (800d3c8 <_dtoa_r+0x6ac>)
 800d19a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d19c:	4684      	mov	ip, r0
 800d19e:	4461      	add	r1, ip
 800d1a0:	000b      	movs	r3, r1
 800d1a2:	0020      	movs	r0, r4
 800d1a4:	0029      	movs	r1, r5
 800d1a6:	9a08      	ldr	r2, [sp, #32]
 800d1a8:	f7f3 f952 	bl	8000450 <__aeabi_dcmplt>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d000      	beq.n	800d1b2 <_dtoa_r+0x496>
 800d1b0:	e29f      	b.n	800d6f2 <_dtoa_r+0x9d6>
 800d1b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d1b6:	9308      	str	r3, [sp, #32]
 800d1b8:	9409      	str	r4, [sp, #36]	; 0x24
 800d1ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	da00      	bge.n	800d1c2 <_dtoa_r+0x4a6>
 800d1c0:	e172      	b.n	800d4a8 <_dtoa_r+0x78c>
 800d1c2:	9a02      	ldr	r2, [sp, #8]
 800d1c4:	2a0e      	cmp	r2, #14
 800d1c6:	dd00      	ble.n	800d1ca <_dtoa_r+0x4ae>
 800d1c8:	e16e      	b.n	800d4a8 <_dtoa_r+0x78c>
 800d1ca:	4b78      	ldr	r3, [pc, #480]	; (800d3ac <_dtoa_r+0x690>)
 800d1cc:	00d2      	lsls	r2, r2, #3
 800d1ce:	189b      	adds	r3, r3, r2
 800d1d0:	685c      	ldr	r4, [r3, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	930a      	str	r3, [sp, #40]	; 0x28
 800d1d6:	940b      	str	r4, [sp, #44]	; 0x2c
 800d1d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	db00      	blt.n	800d1e0 <_dtoa_r+0x4c4>
 800d1de:	e0f7      	b.n	800d3d0 <_dtoa_r+0x6b4>
 800d1e0:	9b07      	ldr	r3, [sp, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dd00      	ble.n	800d1e8 <_dtoa_r+0x4cc>
 800d1e6:	e0f3      	b.n	800d3d0 <_dtoa_r+0x6b4>
 800d1e8:	d000      	beq.n	800d1ec <_dtoa_r+0x4d0>
 800d1ea:	e282      	b.n	800d6f2 <_dtoa_r+0x9d6>
 800d1ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	4b74      	ldr	r3, [pc, #464]	; (800d3c4 <_dtoa_r+0x6a8>)
 800d1f4:	f7f5 f806 	bl	8002204 <__aeabi_dmul>
 800d1f8:	9a08      	ldr	r2, [sp, #32]
 800d1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1fc:	f7f3 f946 	bl	800048c <__aeabi_dcmpge>
 800d200:	9e07      	ldr	r6, [sp, #28]
 800d202:	0035      	movs	r5, r6
 800d204:	2800      	cmp	r0, #0
 800d206:	d000      	beq.n	800d20a <_dtoa_r+0x4ee>
 800d208:	e259      	b.n	800d6be <_dtoa_r+0x9a2>
 800d20a:	9b06      	ldr	r3, [sp, #24]
 800d20c:	9a06      	ldr	r2, [sp, #24]
 800d20e:	3301      	adds	r3, #1
 800d210:	9308      	str	r3, [sp, #32]
 800d212:	2331      	movs	r3, #49	; 0x31
 800d214:	7013      	strb	r3, [r2, #0]
 800d216:	9b02      	ldr	r3, [sp, #8]
 800d218:	3301      	adds	r3, #1
 800d21a:	9302      	str	r3, [sp, #8]
 800d21c:	e254      	b.n	800d6c8 <_dtoa_r+0x9ac>
 800d21e:	4234      	tst	r4, r6
 800d220:	d007      	beq.n	800d232 <_dtoa_r+0x516>
 800d222:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d224:	3301      	adds	r3, #1
 800d226:	9310      	str	r3, [sp, #64]	; 0x40
 800d228:	682a      	ldr	r2, [r5, #0]
 800d22a:	686b      	ldr	r3, [r5, #4]
 800d22c:	f7f4 ffea 	bl	8002204 <__aeabi_dmul>
 800d230:	0033      	movs	r3, r6
 800d232:	1064      	asrs	r4, r4, #1
 800d234:	3508      	adds	r5, #8
 800d236:	e75a      	b.n	800d0ee <_dtoa_r+0x3d2>
 800d238:	9e02      	ldr	r6, [sp, #8]
 800d23a:	9b07      	ldr	r3, [sp, #28]
 800d23c:	e780      	b.n	800d140 <_dtoa_r+0x424>
 800d23e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d240:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d242:	1e5a      	subs	r2, r3, #1
 800d244:	4b59      	ldr	r3, [pc, #356]	; (800d3ac <_dtoa_r+0x690>)
 800d246:	00d2      	lsls	r2, r2, #3
 800d248:	189b      	adds	r3, r3, r2
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	2900      	cmp	r1, #0
 800d250:	d051      	beq.n	800d2f6 <_dtoa_r+0x5da>
 800d252:	2000      	movs	r0, #0
 800d254:	495d      	ldr	r1, [pc, #372]	; (800d3cc <_dtoa_r+0x6b0>)
 800d256:	f7f4 fbd3 	bl	8001a00 <__aeabi_ddiv>
 800d25a:	9a08      	ldr	r2, [sp, #32]
 800d25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d25e:	f7f5 fa3d 	bl	80026dc <__aeabi_dsub>
 800d262:	9a06      	ldr	r2, [sp, #24]
 800d264:	9b06      	ldr	r3, [sp, #24]
 800d266:	4694      	mov	ip, r2
 800d268:	9317      	str	r3, [sp, #92]	; 0x5c
 800d26a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d26c:	9010      	str	r0, [sp, #64]	; 0x40
 800d26e:	9111      	str	r1, [sp, #68]	; 0x44
 800d270:	4463      	add	r3, ip
 800d272:	9319      	str	r3, [sp, #100]	; 0x64
 800d274:	0029      	movs	r1, r5
 800d276:	0020      	movs	r0, r4
 800d278:	f7f5 fde0 	bl	8002e3c <__aeabi_d2iz>
 800d27c:	9014      	str	r0, [sp, #80]	; 0x50
 800d27e:	f7f5 fe13 	bl	8002ea8 <__aeabi_i2d>
 800d282:	0002      	movs	r2, r0
 800d284:	000b      	movs	r3, r1
 800d286:	0020      	movs	r0, r4
 800d288:	0029      	movs	r1, r5
 800d28a:	f7f5 fa27 	bl	80026dc <__aeabi_dsub>
 800d28e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d290:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d292:	3301      	adds	r3, #1
 800d294:	9308      	str	r3, [sp, #32]
 800d296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d298:	0004      	movs	r4, r0
 800d29a:	3330      	adds	r3, #48	; 0x30
 800d29c:	7013      	strb	r3, [r2, #0]
 800d29e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2a2:	000d      	movs	r5, r1
 800d2a4:	f7f3 f8d4 	bl	8000450 <__aeabi_dcmplt>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d175      	bne.n	800d398 <_dtoa_r+0x67c>
 800d2ac:	0022      	movs	r2, r4
 800d2ae:	002b      	movs	r3, r5
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	4940      	ldr	r1, [pc, #256]	; (800d3b4 <_dtoa_r+0x698>)
 800d2b4:	f7f5 fa12 	bl	80026dc <__aeabi_dsub>
 800d2b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2bc:	f7f3 f8c8 	bl	8000450 <__aeabi_dcmplt>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d000      	beq.n	800d2c6 <_dtoa_r+0x5aa>
 800d2c4:	e0d2      	b.n	800d46c <_dtoa_r+0x750>
 800d2c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2c8:	9a08      	ldr	r2, [sp, #32]
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d100      	bne.n	800d2d0 <_dtoa_r+0x5b4>
 800d2ce:	e770      	b.n	800d1b2 <_dtoa_r+0x496>
 800d2d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d2d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	4b38      	ldr	r3, [pc, #224]	; (800d3b8 <_dtoa_r+0x69c>)
 800d2d8:	f7f4 ff94 	bl	8002204 <__aeabi_dmul>
 800d2dc:	4b36      	ldr	r3, [pc, #216]	; (800d3b8 <_dtoa_r+0x69c>)
 800d2de:	9010      	str	r0, [sp, #64]	; 0x40
 800d2e0:	9111      	str	r1, [sp, #68]	; 0x44
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	0020      	movs	r0, r4
 800d2e6:	0029      	movs	r1, r5
 800d2e8:	f7f4 ff8c 	bl	8002204 <__aeabi_dmul>
 800d2ec:	9b08      	ldr	r3, [sp, #32]
 800d2ee:	0004      	movs	r4, r0
 800d2f0:	000d      	movs	r5, r1
 800d2f2:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2f4:	e7be      	b.n	800d274 <_dtoa_r+0x558>
 800d2f6:	9808      	ldr	r0, [sp, #32]
 800d2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2fa:	f7f4 ff83 	bl	8002204 <__aeabi_dmul>
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	9b06      	ldr	r3, [sp, #24]
 800d302:	4694      	mov	ip, r2
 800d304:	9308      	str	r3, [sp, #32]
 800d306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d308:	9010      	str	r0, [sp, #64]	; 0x40
 800d30a:	9111      	str	r1, [sp, #68]	; 0x44
 800d30c:	4463      	add	r3, ip
 800d30e:	9319      	str	r3, [sp, #100]	; 0x64
 800d310:	0029      	movs	r1, r5
 800d312:	0020      	movs	r0, r4
 800d314:	f7f5 fd92 	bl	8002e3c <__aeabi_d2iz>
 800d318:	9017      	str	r0, [sp, #92]	; 0x5c
 800d31a:	f7f5 fdc5 	bl	8002ea8 <__aeabi_i2d>
 800d31e:	0002      	movs	r2, r0
 800d320:	000b      	movs	r3, r1
 800d322:	0020      	movs	r0, r4
 800d324:	0029      	movs	r1, r5
 800d326:	f7f5 f9d9 	bl	80026dc <__aeabi_dsub>
 800d32a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d32c:	9a08      	ldr	r2, [sp, #32]
 800d32e:	3330      	adds	r3, #48	; 0x30
 800d330:	7013      	strb	r3, [r2, #0]
 800d332:	0013      	movs	r3, r2
 800d334:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d336:	3301      	adds	r3, #1
 800d338:	0004      	movs	r4, r0
 800d33a:	000d      	movs	r5, r1
 800d33c:	9308      	str	r3, [sp, #32]
 800d33e:	4293      	cmp	r3, r2
 800d340:	d12c      	bne.n	800d39c <_dtoa_r+0x680>
 800d342:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d344:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d346:	9a06      	ldr	r2, [sp, #24]
 800d348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d34a:	4694      	mov	ip, r2
 800d34c:	4463      	add	r3, ip
 800d34e:	2200      	movs	r2, #0
 800d350:	9308      	str	r3, [sp, #32]
 800d352:	4b1e      	ldr	r3, [pc, #120]	; (800d3cc <_dtoa_r+0x6b0>)
 800d354:	f7f4 f818 	bl	8001388 <__aeabi_dadd>
 800d358:	0002      	movs	r2, r0
 800d35a:	000b      	movs	r3, r1
 800d35c:	0020      	movs	r0, r4
 800d35e:	0029      	movs	r1, r5
 800d360:	f7f3 f88a 	bl	8000478 <__aeabi_dcmpgt>
 800d364:	2800      	cmp	r0, #0
 800d366:	d000      	beq.n	800d36a <_dtoa_r+0x64e>
 800d368:	e080      	b.n	800d46c <_dtoa_r+0x750>
 800d36a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d36c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d36e:	2000      	movs	r0, #0
 800d370:	4916      	ldr	r1, [pc, #88]	; (800d3cc <_dtoa_r+0x6b0>)
 800d372:	f7f5 f9b3 	bl	80026dc <__aeabi_dsub>
 800d376:	0002      	movs	r2, r0
 800d378:	000b      	movs	r3, r1
 800d37a:	0020      	movs	r0, r4
 800d37c:	0029      	movs	r1, r5
 800d37e:	f7f3 f867 	bl	8000450 <__aeabi_dcmplt>
 800d382:	2800      	cmp	r0, #0
 800d384:	d100      	bne.n	800d388 <_dtoa_r+0x66c>
 800d386:	e714      	b.n	800d1b2 <_dtoa_r+0x496>
 800d388:	9b08      	ldr	r3, [sp, #32]
 800d38a:	001a      	movs	r2, r3
 800d38c:	3a01      	subs	r2, #1
 800d38e:	9208      	str	r2, [sp, #32]
 800d390:	7812      	ldrb	r2, [r2, #0]
 800d392:	2a30      	cmp	r2, #48	; 0x30
 800d394:	d0f8      	beq.n	800d388 <_dtoa_r+0x66c>
 800d396:	9308      	str	r3, [sp, #32]
 800d398:	9602      	str	r6, [sp, #8]
 800d39a:	e055      	b.n	800d448 <_dtoa_r+0x72c>
 800d39c:	2200      	movs	r2, #0
 800d39e:	4b06      	ldr	r3, [pc, #24]	; (800d3b8 <_dtoa_r+0x69c>)
 800d3a0:	f7f4 ff30 	bl	8002204 <__aeabi_dmul>
 800d3a4:	0004      	movs	r4, r0
 800d3a6:	000d      	movs	r5, r1
 800d3a8:	e7b2      	b.n	800d310 <_dtoa_r+0x5f4>
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	08010328 	.word	0x08010328
 800d3b0:	08010300 	.word	0x08010300
 800d3b4:	3ff00000 	.word	0x3ff00000
 800d3b8:	40240000 	.word	0x40240000
 800d3bc:	401c0000 	.word	0x401c0000
 800d3c0:	fcc00000 	.word	0xfcc00000
 800d3c4:	40140000 	.word	0x40140000
 800d3c8:	7cc00000 	.word	0x7cc00000
 800d3cc:	3fe00000 	.word	0x3fe00000
 800d3d0:	9b07      	ldr	r3, [sp, #28]
 800d3d2:	9e06      	ldr	r6, [sp, #24]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	199b      	adds	r3, r3, r6
 800d3d8:	930c      	str	r3, [sp, #48]	; 0x30
 800d3da:	9c08      	ldr	r4, [sp, #32]
 800d3dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d3de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3e2:	0020      	movs	r0, r4
 800d3e4:	0029      	movs	r1, r5
 800d3e6:	f7f4 fb0b 	bl	8001a00 <__aeabi_ddiv>
 800d3ea:	f7f5 fd27 	bl	8002e3c <__aeabi_d2iz>
 800d3ee:	9007      	str	r0, [sp, #28]
 800d3f0:	f7f5 fd5a 	bl	8002ea8 <__aeabi_i2d>
 800d3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3f8:	f7f4 ff04 	bl	8002204 <__aeabi_dmul>
 800d3fc:	0002      	movs	r2, r0
 800d3fe:	000b      	movs	r3, r1
 800d400:	0020      	movs	r0, r4
 800d402:	0029      	movs	r1, r5
 800d404:	f7f5 f96a 	bl	80026dc <__aeabi_dsub>
 800d408:	0033      	movs	r3, r6
 800d40a:	9a07      	ldr	r2, [sp, #28]
 800d40c:	3601      	adds	r6, #1
 800d40e:	3230      	adds	r2, #48	; 0x30
 800d410:	701a      	strb	r2, [r3, #0]
 800d412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d414:	9608      	str	r6, [sp, #32]
 800d416:	429a      	cmp	r2, r3
 800d418:	d139      	bne.n	800d48e <_dtoa_r+0x772>
 800d41a:	0002      	movs	r2, r0
 800d41c:	000b      	movs	r3, r1
 800d41e:	f7f3 ffb3 	bl	8001388 <__aeabi_dadd>
 800d422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d426:	0004      	movs	r4, r0
 800d428:	000d      	movs	r5, r1
 800d42a:	f7f3 f825 	bl	8000478 <__aeabi_dcmpgt>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d11b      	bne.n	800d46a <_dtoa_r+0x74e>
 800d432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d436:	0020      	movs	r0, r4
 800d438:	0029      	movs	r1, r5
 800d43a:	f7f3 f803 	bl	8000444 <__aeabi_dcmpeq>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d002      	beq.n	800d448 <_dtoa_r+0x72c>
 800d442:	9b07      	ldr	r3, [sp, #28]
 800d444:	07db      	lsls	r3, r3, #31
 800d446:	d410      	bmi.n	800d46a <_dtoa_r+0x74e>
 800d448:	0038      	movs	r0, r7
 800d44a:	9905      	ldr	r1, [sp, #20]
 800d44c:	f000 fe64 	bl	800e118 <_Bfree>
 800d450:	2300      	movs	r3, #0
 800d452:	9a08      	ldr	r2, [sp, #32]
 800d454:	9802      	ldr	r0, [sp, #8]
 800d456:	7013      	strb	r3, [r2, #0]
 800d458:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d45a:	3001      	adds	r0, #1
 800d45c:	6018      	str	r0, [r3, #0]
 800d45e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d460:	2b00      	cmp	r3, #0
 800d462:	d100      	bne.n	800d466 <_dtoa_r+0x74a>
 800d464:	e4a6      	b.n	800cdb4 <_dtoa_r+0x98>
 800d466:	601a      	str	r2, [r3, #0]
 800d468:	e4a4      	b.n	800cdb4 <_dtoa_r+0x98>
 800d46a:	9e02      	ldr	r6, [sp, #8]
 800d46c:	9b08      	ldr	r3, [sp, #32]
 800d46e:	9308      	str	r3, [sp, #32]
 800d470:	3b01      	subs	r3, #1
 800d472:	781a      	ldrb	r2, [r3, #0]
 800d474:	2a39      	cmp	r2, #57	; 0x39
 800d476:	d106      	bne.n	800d486 <_dtoa_r+0x76a>
 800d478:	9a06      	ldr	r2, [sp, #24]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d1f7      	bne.n	800d46e <_dtoa_r+0x752>
 800d47e:	2230      	movs	r2, #48	; 0x30
 800d480:	9906      	ldr	r1, [sp, #24]
 800d482:	3601      	adds	r6, #1
 800d484:	700a      	strb	r2, [r1, #0]
 800d486:	781a      	ldrb	r2, [r3, #0]
 800d488:	3201      	adds	r2, #1
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	e784      	b.n	800d398 <_dtoa_r+0x67c>
 800d48e:	2200      	movs	r2, #0
 800d490:	4baa      	ldr	r3, [pc, #680]	; (800d73c <_dtoa_r+0xa20>)
 800d492:	f7f4 feb7 	bl	8002204 <__aeabi_dmul>
 800d496:	2200      	movs	r2, #0
 800d498:	2300      	movs	r3, #0
 800d49a:	0004      	movs	r4, r0
 800d49c:	000d      	movs	r5, r1
 800d49e:	f7f2 ffd1 	bl	8000444 <__aeabi_dcmpeq>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d09b      	beq.n	800d3de <_dtoa_r+0x6c2>
 800d4a6:	e7cf      	b.n	800d448 <_dtoa_r+0x72c>
 800d4a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d4aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d4ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	d012      	beq.n	800d4d8 <_dtoa_r+0x7bc>
 800d4b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d4b4:	2a01      	cmp	r2, #1
 800d4b6:	dc66      	bgt.n	800d586 <_dtoa_r+0x86a>
 800d4b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d4ba:	2a00      	cmp	r2, #0
 800d4bc:	d05d      	beq.n	800d57a <_dtoa_r+0x85e>
 800d4be:	4aa0      	ldr	r2, [pc, #640]	; (800d740 <_dtoa_r+0xa24>)
 800d4c0:	189b      	adds	r3, r3, r2
 800d4c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	18d2      	adds	r2, r2, r3
 800d4c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d4ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4cc:	0038      	movs	r0, r7
 800d4ce:	18d3      	adds	r3, r2, r3
 800d4d0:	930d      	str	r3, [sp, #52]	; 0x34
 800d4d2:	f000 ff1d 	bl	800e310 <__i2b>
 800d4d6:	0005      	movs	r5, r0
 800d4d8:	2c00      	cmp	r4, #0
 800d4da:	dd0e      	ble.n	800d4fa <_dtoa_r+0x7de>
 800d4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dd0b      	ble.n	800d4fa <_dtoa_r+0x7de>
 800d4e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4e4:	0023      	movs	r3, r4
 800d4e6:	4294      	cmp	r4, r2
 800d4e8:	dd00      	ble.n	800d4ec <_dtoa_r+0x7d0>
 800d4ea:	0013      	movs	r3, r2
 800d4ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4ee:	1ae4      	subs	r4, r4, r3
 800d4f0:	1ad2      	subs	r2, r2, r3
 800d4f2:	920a      	str	r2, [sp, #40]	; 0x28
 800d4f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	930d      	str	r3, [sp, #52]	; 0x34
 800d4fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d01f      	beq.n	800d540 <_dtoa_r+0x824>
 800d500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d502:	2b00      	cmp	r3, #0
 800d504:	d054      	beq.n	800d5b0 <_dtoa_r+0x894>
 800d506:	2e00      	cmp	r6, #0
 800d508:	dd11      	ble.n	800d52e <_dtoa_r+0x812>
 800d50a:	0029      	movs	r1, r5
 800d50c:	0032      	movs	r2, r6
 800d50e:	0038      	movs	r0, r7
 800d510:	f000 ffc4 	bl	800e49c <__pow5mult>
 800d514:	9a05      	ldr	r2, [sp, #20]
 800d516:	0001      	movs	r1, r0
 800d518:	0005      	movs	r5, r0
 800d51a:	0038      	movs	r0, r7
 800d51c:	f000 ff0e 	bl	800e33c <__multiply>
 800d520:	9905      	ldr	r1, [sp, #20]
 800d522:	9014      	str	r0, [sp, #80]	; 0x50
 800d524:	0038      	movs	r0, r7
 800d526:	f000 fdf7 	bl	800e118 <_Bfree>
 800d52a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d52c:	9305      	str	r3, [sp, #20]
 800d52e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d530:	1b9a      	subs	r2, r3, r6
 800d532:	42b3      	cmp	r3, r6
 800d534:	d004      	beq.n	800d540 <_dtoa_r+0x824>
 800d536:	0038      	movs	r0, r7
 800d538:	9905      	ldr	r1, [sp, #20]
 800d53a:	f000 ffaf 	bl	800e49c <__pow5mult>
 800d53e:	9005      	str	r0, [sp, #20]
 800d540:	2101      	movs	r1, #1
 800d542:	0038      	movs	r0, r7
 800d544:	f000 fee4 	bl	800e310 <__i2b>
 800d548:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d54a:	0006      	movs	r6, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	dd31      	ble.n	800d5b4 <_dtoa_r+0x898>
 800d550:	001a      	movs	r2, r3
 800d552:	0001      	movs	r1, r0
 800d554:	0038      	movs	r0, r7
 800d556:	f000 ffa1 	bl	800e49c <__pow5mult>
 800d55a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d55c:	0006      	movs	r6, r0
 800d55e:	2b01      	cmp	r3, #1
 800d560:	dd2d      	ble.n	800d5be <_dtoa_r+0x8a2>
 800d562:	2300      	movs	r3, #0
 800d564:	930e      	str	r3, [sp, #56]	; 0x38
 800d566:	6933      	ldr	r3, [r6, #16]
 800d568:	3303      	adds	r3, #3
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	18f3      	adds	r3, r6, r3
 800d56e:	6858      	ldr	r0, [r3, #4]
 800d570:	f000 fe86 	bl	800e280 <__hi0bits>
 800d574:	2320      	movs	r3, #32
 800d576:	1a18      	subs	r0, r3, r0
 800d578:	e039      	b.n	800d5ee <_dtoa_r+0x8d2>
 800d57a:	2336      	movs	r3, #54	; 0x36
 800d57c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d57e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d580:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d582:	1a9b      	subs	r3, r3, r2
 800d584:	e79d      	b.n	800d4c2 <_dtoa_r+0x7a6>
 800d586:	9b07      	ldr	r3, [sp, #28]
 800d588:	1e5e      	subs	r6, r3, #1
 800d58a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d58c:	42b3      	cmp	r3, r6
 800d58e:	db07      	blt.n	800d5a0 <_dtoa_r+0x884>
 800d590:	1b9e      	subs	r6, r3, r6
 800d592:	9b07      	ldr	r3, [sp, #28]
 800d594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	da93      	bge.n	800d4c2 <_dtoa_r+0x7a6>
 800d59a:	1ae4      	subs	r4, r4, r3
 800d59c:	2300      	movs	r3, #0
 800d59e:	e790      	b.n	800d4c2 <_dtoa_r+0x7a6>
 800d5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d5a4:	1af3      	subs	r3, r6, r3
 800d5a6:	18d3      	adds	r3, r2, r3
 800d5a8:	960e      	str	r6, [sp, #56]	; 0x38
 800d5aa:	9315      	str	r3, [sp, #84]	; 0x54
 800d5ac:	2600      	movs	r6, #0
 800d5ae:	e7f0      	b.n	800d592 <_dtoa_r+0x876>
 800d5b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5b2:	e7c0      	b.n	800d536 <_dtoa_r+0x81a>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	930e      	str	r3, [sp, #56]	; 0x38
 800d5b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	dc13      	bgt.n	800d5e6 <_dtoa_r+0x8ca>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	930e      	str	r3, [sp, #56]	; 0x38
 800d5c2:	9b08      	ldr	r3, [sp, #32]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10e      	bne.n	800d5e6 <_dtoa_r+0x8ca>
 800d5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ca:	031b      	lsls	r3, r3, #12
 800d5cc:	d10b      	bne.n	800d5e6 <_dtoa_r+0x8ca>
 800d5ce:	4b5d      	ldr	r3, [pc, #372]	; (800d744 <_dtoa_r+0xa28>)
 800d5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5d2:	4213      	tst	r3, r2
 800d5d4:	d007      	beq.n	800d5e6 <_dtoa_r+0x8ca>
 800d5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5d8:	3301      	adds	r3, #1
 800d5da:	930a      	str	r3, [sp, #40]	; 0x28
 800d5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5de:	3301      	adds	r3, #1
 800d5e0:	930d      	str	r3, [sp, #52]	; 0x34
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	930e      	str	r3, [sp, #56]	; 0x38
 800d5e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1bb      	bne.n	800d566 <_dtoa_r+0x84a>
 800d5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5f0:	221f      	movs	r2, #31
 800d5f2:	1818      	adds	r0, r3, r0
 800d5f4:	0003      	movs	r3, r0
 800d5f6:	4013      	ands	r3, r2
 800d5f8:	4210      	tst	r0, r2
 800d5fa:	d046      	beq.n	800d68a <_dtoa_r+0x96e>
 800d5fc:	3201      	adds	r2, #1
 800d5fe:	1ad2      	subs	r2, r2, r3
 800d600:	2a04      	cmp	r2, #4
 800d602:	dd3f      	ble.n	800d684 <_dtoa_r+0x968>
 800d604:	221c      	movs	r2, #28
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d60a:	18e4      	adds	r4, r4, r3
 800d60c:	18d2      	adds	r2, r2, r3
 800d60e:	920a      	str	r2, [sp, #40]	; 0x28
 800d610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d612:	18d3      	adds	r3, r2, r3
 800d614:	930d      	str	r3, [sp, #52]	; 0x34
 800d616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d618:	2b00      	cmp	r3, #0
 800d61a:	dd05      	ble.n	800d628 <_dtoa_r+0x90c>
 800d61c:	001a      	movs	r2, r3
 800d61e:	0038      	movs	r0, r7
 800d620:	9905      	ldr	r1, [sp, #20]
 800d622:	f000 ff97 	bl	800e554 <__lshift>
 800d626:	9005      	str	r0, [sp, #20]
 800d628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dd05      	ble.n	800d63a <_dtoa_r+0x91e>
 800d62e:	0031      	movs	r1, r6
 800d630:	001a      	movs	r2, r3
 800d632:	0038      	movs	r0, r7
 800d634:	f000 ff8e 	bl	800e554 <__lshift>
 800d638:	0006      	movs	r6, r0
 800d63a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d026      	beq.n	800d68e <_dtoa_r+0x972>
 800d640:	0031      	movs	r1, r6
 800d642:	9805      	ldr	r0, [sp, #20]
 800d644:	f000 fff4 	bl	800e630 <__mcmp>
 800d648:	2800      	cmp	r0, #0
 800d64a:	da20      	bge.n	800d68e <_dtoa_r+0x972>
 800d64c:	9b02      	ldr	r3, [sp, #8]
 800d64e:	220a      	movs	r2, #10
 800d650:	3b01      	subs	r3, #1
 800d652:	9302      	str	r3, [sp, #8]
 800d654:	0038      	movs	r0, r7
 800d656:	2300      	movs	r3, #0
 800d658:	9905      	ldr	r1, [sp, #20]
 800d65a:	f000 fd81 	bl	800e160 <__multadd>
 800d65e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d660:	9005      	str	r0, [sp, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d100      	bne.n	800d668 <_dtoa_r+0x94c>
 800d666:	e166      	b.n	800d936 <_dtoa_r+0xc1a>
 800d668:	2300      	movs	r3, #0
 800d66a:	0029      	movs	r1, r5
 800d66c:	220a      	movs	r2, #10
 800d66e:	0038      	movs	r0, r7
 800d670:	f000 fd76 	bl	800e160 <__multadd>
 800d674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d676:	0005      	movs	r5, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	dc47      	bgt.n	800d70c <_dtoa_r+0x9f0>
 800d67c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d67e:	2b02      	cmp	r3, #2
 800d680:	dc0d      	bgt.n	800d69e <_dtoa_r+0x982>
 800d682:	e043      	b.n	800d70c <_dtoa_r+0x9f0>
 800d684:	2a04      	cmp	r2, #4
 800d686:	d0c6      	beq.n	800d616 <_dtoa_r+0x8fa>
 800d688:	0013      	movs	r3, r2
 800d68a:	331c      	adds	r3, #28
 800d68c:	e7bc      	b.n	800d608 <_dtoa_r+0x8ec>
 800d68e:	9b07      	ldr	r3, [sp, #28]
 800d690:	2b00      	cmp	r3, #0
 800d692:	dc35      	bgt.n	800d700 <_dtoa_r+0x9e4>
 800d694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d696:	2b02      	cmp	r3, #2
 800d698:	dd32      	ble.n	800d700 <_dtoa_r+0x9e4>
 800d69a:	9b07      	ldr	r3, [sp, #28]
 800d69c:	930c      	str	r3, [sp, #48]	; 0x30
 800d69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10c      	bne.n	800d6be <_dtoa_r+0x9a2>
 800d6a4:	0031      	movs	r1, r6
 800d6a6:	2205      	movs	r2, #5
 800d6a8:	0038      	movs	r0, r7
 800d6aa:	f000 fd59 	bl	800e160 <__multadd>
 800d6ae:	0006      	movs	r6, r0
 800d6b0:	0001      	movs	r1, r0
 800d6b2:	9805      	ldr	r0, [sp, #20]
 800d6b4:	f000 ffbc 	bl	800e630 <__mcmp>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	dd00      	ble.n	800d6be <_dtoa_r+0x9a2>
 800d6bc:	e5a5      	b.n	800d20a <_dtoa_r+0x4ee>
 800d6be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d6c0:	43db      	mvns	r3, r3
 800d6c2:	9302      	str	r3, [sp, #8]
 800d6c4:	9b06      	ldr	r3, [sp, #24]
 800d6c6:	9308      	str	r3, [sp, #32]
 800d6c8:	2400      	movs	r4, #0
 800d6ca:	0031      	movs	r1, r6
 800d6cc:	0038      	movs	r0, r7
 800d6ce:	f000 fd23 	bl	800e118 <_Bfree>
 800d6d2:	2d00      	cmp	r5, #0
 800d6d4:	d100      	bne.n	800d6d8 <_dtoa_r+0x9bc>
 800d6d6:	e6b7      	b.n	800d448 <_dtoa_r+0x72c>
 800d6d8:	2c00      	cmp	r4, #0
 800d6da:	d005      	beq.n	800d6e8 <_dtoa_r+0x9cc>
 800d6dc:	42ac      	cmp	r4, r5
 800d6de:	d003      	beq.n	800d6e8 <_dtoa_r+0x9cc>
 800d6e0:	0021      	movs	r1, r4
 800d6e2:	0038      	movs	r0, r7
 800d6e4:	f000 fd18 	bl	800e118 <_Bfree>
 800d6e8:	0029      	movs	r1, r5
 800d6ea:	0038      	movs	r0, r7
 800d6ec:	f000 fd14 	bl	800e118 <_Bfree>
 800d6f0:	e6aa      	b.n	800d448 <_dtoa_r+0x72c>
 800d6f2:	2600      	movs	r6, #0
 800d6f4:	0035      	movs	r5, r6
 800d6f6:	e7e2      	b.n	800d6be <_dtoa_r+0x9a2>
 800d6f8:	9602      	str	r6, [sp, #8]
 800d6fa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800d6fc:	0035      	movs	r5, r6
 800d6fe:	e584      	b.n	800d20a <_dtoa_r+0x4ee>
 800d700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d100      	bne.n	800d708 <_dtoa_r+0x9ec>
 800d706:	e0ce      	b.n	800d8a6 <_dtoa_r+0xb8a>
 800d708:	9b07      	ldr	r3, [sp, #28]
 800d70a:	930c      	str	r3, [sp, #48]	; 0x30
 800d70c:	2c00      	cmp	r4, #0
 800d70e:	dd05      	ble.n	800d71c <_dtoa_r+0xa00>
 800d710:	0029      	movs	r1, r5
 800d712:	0022      	movs	r2, r4
 800d714:	0038      	movs	r0, r7
 800d716:	f000 ff1d 	bl	800e554 <__lshift>
 800d71a:	0005      	movs	r5, r0
 800d71c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d71e:	0028      	movs	r0, r5
 800d720:	2b00      	cmp	r3, #0
 800d722:	d022      	beq.n	800d76a <_dtoa_r+0xa4e>
 800d724:	0038      	movs	r0, r7
 800d726:	6869      	ldr	r1, [r5, #4]
 800d728:	f000 fcb2 	bl	800e090 <_Balloc>
 800d72c:	1e04      	subs	r4, r0, #0
 800d72e:	d10f      	bne.n	800d750 <_dtoa_r+0xa34>
 800d730:	0002      	movs	r2, r0
 800d732:	4b05      	ldr	r3, [pc, #20]	; (800d748 <_dtoa_r+0xa2c>)
 800d734:	4905      	ldr	r1, [pc, #20]	; (800d74c <_dtoa_r+0xa30>)
 800d736:	f7ff fb06 	bl	800cd46 <_dtoa_r+0x2a>
 800d73a:	46c0      	nop			; (mov r8, r8)
 800d73c:	40240000 	.word	0x40240000
 800d740:	00000433 	.word	0x00000433
 800d744:	7ff00000 	.word	0x7ff00000
 800d748:	08010218 	.word	0x08010218
 800d74c:	000002ea 	.word	0x000002ea
 800d750:	0029      	movs	r1, r5
 800d752:	692b      	ldr	r3, [r5, #16]
 800d754:	310c      	adds	r1, #12
 800d756:	1c9a      	adds	r2, r3, #2
 800d758:	0092      	lsls	r2, r2, #2
 800d75a:	300c      	adds	r0, #12
 800d75c:	f7fd fce0 	bl	800b120 <memcpy>
 800d760:	2201      	movs	r2, #1
 800d762:	0021      	movs	r1, r4
 800d764:	0038      	movs	r0, r7
 800d766:	f000 fef5 	bl	800e554 <__lshift>
 800d76a:	9b06      	ldr	r3, [sp, #24]
 800d76c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d76e:	930a      	str	r3, [sp, #40]	; 0x28
 800d770:	3b01      	subs	r3, #1
 800d772:	189b      	adds	r3, r3, r2
 800d774:	2201      	movs	r2, #1
 800d776:	002c      	movs	r4, r5
 800d778:	0005      	movs	r5, r0
 800d77a:	9314      	str	r3, [sp, #80]	; 0x50
 800d77c:	9b08      	ldr	r3, [sp, #32]
 800d77e:	4013      	ands	r3, r2
 800d780:	930f      	str	r3, [sp, #60]	; 0x3c
 800d782:	0031      	movs	r1, r6
 800d784:	9805      	ldr	r0, [sp, #20]
 800d786:	f7ff fa3d 	bl	800cc04 <quorem>
 800d78a:	0003      	movs	r3, r0
 800d78c:	0021      	movs	r1, r4
 800d78e:	3330      	adds	r3, #48	; 0x30
 800d790:	900d      	str	r0, [sp, #52]	; 0x34
 800d792:	9805      	ldr	r0, [sp, #20]
 800d794:	9307      	str	r3, [sp, #28]
 800d796:	f000 ff4b 	bl	800e630 <__mcmp>
 800d79a:	002a      	movs	r2, r5
 800d79c:	900e      	str	r0, [sp, #56]	; 0x38
 800d79e:	0031      	movs	r1, r6
 800d7a0:	0038      	movs	r0, r7
 800d7a2:	f000 ff61 	bl	800e668 <__mdiff>
 800d7a6:	68c3      	ldr	r3, [r0, #12]
 800d7a8:	9008      	str	r0, [sp, #32]
 800d7aa:	9310      	str	r3, [sp, #64]	; 0x40
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d7b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d104      	bne.n	800d7c0 <_dtoa_r+0xaa4>
 800d7b6:	0001      	movs	r1, r0
 800d7b8:	9805      	ldr	r0, [sp, #20]
 800d7ba:	f000 ff39 	bl	800e630 <__mcmp>
 800d7be:	900c      	str	r0, [sp, #48]	; 0x30
 800d7c0:	0038      	movs	r0, r7
 800d7c2:	9908      	ldr	r1, [sp, #32]
 800d7c4:	f000 fca8 	bl	800e118 <_Bfree>
 800d7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	9308      	str	r3, [sp, #32]
 800d7d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	d10c      	bne.n	800d7f4 <_dtoa_r+0xad8>
 800d7da:	9b07      	ldr	r3, [sp, #28]
 800d7dc:	2b39      	cmp	r3, #57	; 0x39
 800d7de:	d026      	beq.n	800d82e <_dtoa_r+0xb12>
 800d7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	dd02      	ble.n	800d7ec <_dtoa_r+0xad0>
 800d7e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7e8:	3331      	adds	r3, #49	; 0x31
 800d7ea:	9307      	str	r3, [sp, #28]
 800d7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ee:	9a07      	ldr	r2, [sp, #28]
 800d7f0:	701a      	strb	r2, [r3, #0]
 800d7f2:	e76a      	b.n	800d6ca <_dtoa_r+0x9ae>
 800d7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	db04      	blt.n	800d804 <_dtoa_r+0xae8>
 800d7fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d800:	4313      	orrs	r3, r2
 800d802:	d11f      	bne.n	800d844 <_dtoa_r+0xb28>
 800d804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d806:	2b00      	cmp	r3, #0
 800d808:	ddf0      	ble.n	800d7ec <_dtoa_r+0xad0>
 800d80a:	9905      	ldr	r1, [sp, #20]
 800d80c:	2201      	movs	r2, #1
 800d80e:	0038      	movs	r0, r7
 800d810:	f000 fea0 	bl	800e554 <__lshift>
 800d814:	0031      	movs	r1, r6
 800d816:	9005      	str	r0, [sp, #20]
 800d818:	f000 ff0a 	bl	800e630 <__mcmp>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	dc03      	bgt.n	800d828 <_dtoa_r+0xb0c>
 800d820:	d1e4      	bne.n	800d7ec <_dtoa_r+0xad0>
 800d822:	9b07      	ldr	r3, [sp, #28]
 800d824:	07db      	lsls	r3, r3, #31
 800d826:	d5e1      	bpl.n	800d7ec <_dtoa_r+0xad0>
 800d828:	9b07      	ldr	r3, [sp, #28]
 800d82a:	2b39      	cmp	r3, #57	; 0x39
 800d82c:	d1db      	bne.n	800d7e6 <_dtoa_r+0xaca>
 800d82e:	2339      	movs	r3, #57	; 0x39
 800d830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d832:	7013      	strb	r3, [r2, #0]
 800d834:	9b08      	ldr	r3, [sp, #32]
 800d836:	9308      	str	r3, [sp, #32]
 800d838:	3b01      	subs	r3, #1
 800d83a:	781a      	ldrb	r2, [r3, #0]
 800d83c:	2a39      	cmp	r2, #57	; 0x39
 800d83e:	d068      	beq.n	800d912 <_dtoa_r+0xbf6>
 800d840:	3201      	adds	r2, #1
 800d842:	e7d5      	b.n	800d7f0 <_dtoa_r+0xad4>
 800d844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d846:	2b00      	cmp	r3, #0
 800d848:	dd07      	ble.n	800d85a <_dtoa_r+0xb3e>
 800d84a:	9b07      	ldr	r3, [sp, #28]
 800d84c:	2b39      	cmp	r3, #57	; 0x39
 800d84e:	d0ee      	beq.n	800d82e <_dtoa_r+0xb12>
 800d850:	9b07      	ldr	r3, [sp, #28]
 800d852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d854:	3301      	adds	r3, #1
 800d856:	7013      	strb	r3, [r2, #0]
 800d858:	e737      	b.n	800d6ca <_dtoa_r+0x9ae>
 800d85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d85c:	9a07      	ldr	r2, [sp, #28]
 800d85e:	701a      	strb	r2, [r3, #0]
 800d860:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d864:	4293      	cmp	r3, r2
 800d866:	d03e      	beq.n	800d8e6 <_dtoa_r+0xbca>
 800d868:	2300      	movs	r3, #0
 800d86a:	220a      	movs	r2, #10
 800d86c:	9905      	ldr	r1, [sp, #20]
 800d86e:	0038      	movs	r0, r7
 800d870:	f000 fc76 	bl	800e160 <__multadd>
 800d874:	2300      	movs	r3, #0
 800d876:	9005      	str	r0, [sp, #20]
 800d878:	220a      	movs	r2, #10
 800d87a:	0021      	movs	r1, r4
 800d87c:	0038      	movs	r0, r7
 800d87e:	42ac      	cmp	r4, r5
 800d880:	d106      	bne.n	800d890 <_dtoa_r+0xb74>
 800d882:	f000 fc6d 	bl	800e160 <__multadd>
 800d886:	0004      	movs	r4, r0
 800d888:	0005      	movs	r5, r0
 800d88a:	9b08      	ldr	r3, [sp, #32]
 800d88c:	930a      	str	r3, [sp, #40]	; 0x28
 800d88e:	e778      	b.n	800d782 <_dtoa_r+0xa66>
 800d890:	f000 fc66 	bl	800e160 <__multadd>
 800d894:	0029      	movs	r1, r5
 800d896:	0004      	movs	r4, r0
 800d898:	2300      	movs	r3, #0
 800d89a:	220a      	movs	r2, #10
 800d89c:	0038      	movs	r0, r7
 800d89e:	f000 fc5f 	bl	800e160 <__multadd>
 800d8a2:	0005      	movs	r5, r0
 800d8a4:	e7f1      	b.n	800d88a <_dtoa_r+0xb6e>
 800d8a6:	9b07      	ldr	r3, [sp, #28]
 800d8a8:	930c      	str	r3, [sp, #48]	; 0x30
 800d8aa:	2400      	movs	r4, #0
 800d8ac:	0031      	movs	r1, r6
 800d8ae:	9805      	ldr	r0, [sp, #20]
 800d8b0:	f7ff f9a8 	bl	800cc04 <quorem>
 800d8b4:	9b06      	ldr	r3, [sp, #24]
 800d8b6:	3030      	adds	r0, #48	; 0x30
 800d8b8:	5518      	strb	r0, [r3, r4]
 800d8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8bc:	3401      	adds	r4, #1
 800d8be:	9007      	str	r0, [sp, #28]
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	dd07      	ble.n	800d8d4 <_dtoa_r+0xbb8>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	220a      	movs	r2, #10
 800d8c8:	0038      	movs	r0, r7
 800d8ca:	9905      	ldr	r1, [sp, #20]
 800d8cc:	f000 fc48 	bl	800e160 <__multadd>
 800d8d0:	9005      	str	r0, [sp, #20]
 800d8d2:	e7eb      	b.n	800d8ac <_dtoa_r+0xb90>
 800d8d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	dd00      	ble.n	800d8de <_dtoa_r+0xbc2>
 800d8dc:	0018      	movs	r0, r3
 800d8de:	2400      	movs	r4, #0
 800d8e0:	9b06      	ldr	r3, [sp, #24]
 800d8e2:	181b      	adds	r3, r3, r0
 800d8e4:	9308      	str	r3, [sp, #32]
 800d8e6:	9905      	ldr	r1, [sp, #20]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	0038      	movs	r0, r7
 800d8ec:	f000 fe32 	bl	800e554 <__lshift>
 800d8f0:	0031      	movs	r1, r6
 800d8f2:	9005      	str	r0, [sp, #20]
 800d8f4:	f000 fe9c 	bl	800e630 <__mcmp>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	dc9b      	bgt.n	800d834 <_dtoa_r+0xb18>
 800d8fc:	d102      	bne.n	800d904 <_dtoa_r+0xbe8>
 800d8fe:	9b07      	ldr	r3, [sp, #28]
 800d900:	07db      	lsls	r3, r3, #31
 800d902:	d497      	bmi.n	800d834 <_dtoa_r+0xb18>
 800d904:	9b08      	ldr	r3, [sp, #32]
 800d906:	9308      	str	r3, [sp, #32]
 800d908:	3b01      	subs	r3, #1
 800d90a:	781a      	ldrb	r2, [r3, #0]
 800d90c:	2a30      	cmp	r2, #48	; 0x30
 800d90e:	d0fa      	beq.n	800d906 <_dtoa_r+0xbea>
 800d910:	e6db      	b.n	800d6ca <_dtoa_r+0x9ae>
 800d912:	9a06      	ldr	r2, [sp, #24]
 800d914:	429a      	cmp	r2, r3
 800d916:	d18e      	bne.n	800d836 <_dtoa_r+0xb1a>
 800d918:	9b02      	ldr	r3, [sp, #8]
 800d91a:	3301      	adds	r3, #1
 800d91c:	9302      	str	r3, [sp, #8]
 800d91e:	2331      	movs	r3, #49	; 0x31
 800d920:	e799      	b.n	800d856 <_dtoa_r+0xb3a>
 800d922:	4b09      	ldr	r3, [pc, #36]	; (800d948 <_dtoa_r+0xc2c>)
 800d924:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d926:	9306      	str	r3, [sp, #24]
 800d928:	4b08      	ldr	r3, [pc, #32]	; (800d94c <_dtoa_r+0xc30>)
 800d92a:	2a00      	cmp	r2, #0
 800d92c:	d001      	beq.n	800d932 <_dtoa_r+0xc16>
 800d92e:	f7ff fa3f 	bl	800cdb0 <_dtoa_r+0x94>
 800d932:	f7ff fa3f 	bl	800cdb4 <_dtoa_r+0x98>
 800d936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d938:	2b00      	cmp	r3, #0
 800d93a:	dcb6      	bgt.n	800d8aa <_dtoa_r+0xb8e>
 800d93c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d93e:	2b02      	cmp	r3, #2
 800d940:	dd00      	ble.n	800d944 <_dtoa_r+0xc28>
 800d942:	e6ac      	b.n	800d69e <_dtoa_r+0x982>
 800d944:	e7b1      	b.n	800d8aa <_dtoa_r+0xb8e>
 800d946:	46c0      	nop			; (mov r8, r8)
 800d948:	08010199 	.word	0x08010199
 800d94c:	080101a1 	.word	0x080101a1

0800d950 <rshift>:
 800d950:	0002      	movs	r2, r0
 800d952:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d954:	6904      	ldr	r4, [r0, #16]
 800d956:	3214      	adds	r2, #20
 800d958:	0013      	movs	r3, r2
 800d95a:	b085      	sub	sp, #20
 800d95c:	114f      	asrs	r7, r1, #5
 800d95e:	42bc      	cmp	r4, r7
 800d960:	dd31      	ble.n	800d9c6 <rshift+0x76>
 800d962:	00bb      	lsls	r3, r7, #2
 800d964:	18d3      	adds	r3, r2, r3
 800d966:	261f      	movs	r6, #31
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	000b      	movs	r3, r1
 800d96c:	00a5      	lsls	r5, r4, #2
 800d96e:	4033      	ands	r3, r6
 800d970:	1955      	adds	r5, r2, r5
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	4231      	tst	r1, r6
 800d976:	d10c      	bne.n	800d992 <rshift+0x42>
 800d978:	0016      	movs	r6, r2
 800d97a:	9901      	ldr	r1, [sp, #4]
 800d97c:	428d      	cmp	r5, r1
 800d97e:	d838      	bhi.n	800d9f2 <rshift+0xa2>
 800d980:	9901      	ldr	r1, [sp, #4]
 800d982:	2300      	movs	r3, #0
 800d984:	3903      	subs	r1, #3
 800d986:	428d      	cmp	r5, r1
 800d988:	d301      	bcc.n	800d98e <rshift+0x3e>
 800d98a:	1be3      	subs	r3, r4, r7
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	18d3      	adds	r3, r2, r3
 800d990:	e019      	b.n	800d9c6 <rshift+0x76>
 800d992:	2120      	movs	r1, #32
 800d994:	9b02      	ldr	r3, [sp, #8]
 800d996:	9e01      	ldr	r6, [sp, #4]
 800d998:	1acb      	subs	r3, r1, r3
 800d99a:	9303      	str	r3, [sp, #12]
 800d99c:	ce02      	ldmia	r6!, {r1}
 800d99e:	9b02      	ldr	r3, [sp, #8]
 800d9a0:	4694      	mov	ip, r2
 800d9a2:	40d9      	lsrs	r1, r3
 800d9a4:	9100      	str	r1, [sp, #0]
 800d9a6:	42b5      	cmp	r5, r6
 800d9a8:	d816      	bhi.n	800d9d8 <rshift+0x88>
 800d9aa:	9e01      	ldr	r6, [sp, #4]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	3601      	adds	r6, #1
 800d9b0:	42b5      	cmp	r5, r6
 800d9b2:	d302      	bcc.n	800d9ba <rshift+0x6a>
 800d9b4:	1be3      	subs	r3, r4, r7
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	3b04      	subs	r3, #4
 800d9ba:	9900      	ldr	r1, [sp, #0]
 800d9bc:	18d3      	adds	r3, r2, r3
 800d9be:	6019      	str	r1, [r3, #0]
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	d000      	beq.n	800d9c6 <rshift+0x76>
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	1a99      	subs	r1, r3, r2
 800d9c8:	1089      	asrs	r1, r1, #2
 800d9ca:	6101      	str	r1, [r0, #16]
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d101      	bne.n	800d9d4 <rshift+0x84>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	6143      	str	r3, [r0, #20]
 800d9d4:	b005      	add	sp, #20
 800d9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9d8:	6833      	ldr	r3, [r6, #0]
 800d9da:	9903      	ldr	r1, [sp, #12]
 800d9dc:	408b      	lsls	r3, r1
 800d9de:	9900      	ldr	r1, [sp, #0]
 800d9e0:	4319      	orrs	r1, r3
 800d9e2:	4663      	mov	r3, ip
 800d9e4:	c302      	stmia	r3!, {r1}
 800d9e6:	469c      	mov	ip, r3
 800d9e8:	ce02      	ldmia	r6!, {r1}
 800d9ea:	9b02      	ldr	r3, [sp, #8]
 800d9ec:	40d9      	lsrs	r1, r3
 800d9ee:	9100      	str	r1, [sp, #0]
 800d9f0:	e7d9      	b.n	800d9a6 <rshift+0x56>
 800d9f2:	c908      	ldmia	r1!, {r3}
 800d9f4:	c608      	stmia	r6!, {r3}
 800d9f6:	e7c1      	b.n	800d97c <rshift+0x2c>

0800d9f8 <__hexdig_fun>:
 800d9f8:	0002      	movs	r2, r0
 800d9fa:	3a30      	subs	r2, #48	; 0x30
 800d9fc:	0003      	movs	r3, r0
 800d9fe:	2a09      	cmp	r2, #9
 800da00:	d802      	bhi.n	800da08 <__hexdig_fun+0x10>
 800da02:	3b20      	subs	r3, #32
 800da04:	b2d8      	uxtb	r0, r3
 800da06:	4770      	bx	lr
 800da08:	0002      	movs	r2, r0
 800da0a:	3a61      	subs	r2, #97	; 0x61
 800da0c:	2a05      	cmp	r2, #5
 800da0e:	d801      	bhi.n	800da14 <__hexdig_fun+0x1c>
 800da10:	3b47      	subs	r3, #71	; 0x47
 800da12:	e7f7      	b.n	800da04 <__hexdig_fun+0xc>
 800da14:	001a      	movs	r2, r3
 800da16:	3a41      	subs	r2, #65	; 0x41
 800da18:	2000      	movs	r0, #0
 800da1a:	2a05      	cmp	r2, #5
 800da1c:	d8f3      	bhi.n	800da06 <__hexdig_fun+0xe>
 800da1e:	3b27      	subs	r3, #39	; 0x27
 800da20:	e7f0      	b.n	800da04 <__hexdig_fun+0xc>
	...

0800da24 <__gethex>:
 800da24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da26:	b08d      	sub	sp, #52	; 0x34
 800da28:	930a      	str	r3, [sp, #40]	; 0x28
 800da2a:	4bbf      	ldr	r3, [pc, #764]	; (800dd28 <__gethex+0x304>)
 800da2c:	9005      	str	r0, [sp, #20]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	9109      	str	r1, [sp, #36]	; 0x24
 800da32:	0018      	movs	r0, r3
 800da34:	9202      	str	r2, [sp, #8]
 800da36:	9307      	str	r3, [sp, #28]
 800da38:	f7f2 fb62 	bl	8000100 <strlen>
 800da3c:	2202      	movs	r2, #2
 800da3e:	9b07      	ldr	r3, [sp, #28]
 800da40:	4252      	negs	r2, r2
 800da42:	181b      	adds	r3, r3, r0
 800da44:	3b01      	subs	r3, #1
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	9003      	str	r0, [sp, #12]
 800da4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800da4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4e:	6819      	ldr	r1, [r3, #0]
 800da50:	1c8b      	adds	r3, r1, #2
 800da52:	1a52      	subs	r2, r2, r1
 800da54:	18d1      	adds	r1, r2, r3
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	9108      	str	r1, [sp, #32]
 800da5a:	9901      	ldr	r1, [sp, #4]
 800da5c:	3301      	adds	r3, #1
 800da5e:	7808      	ldrb	r0, [r1, #0]
 800da60:	2830      	cmp	r0, #48	; 0x30
 800da62:	d0f7      	beq.n	800da54 <__gethex+0x30>
 800da64:	f7ff ffc8 	bl	800d9f8 <__hexdig_fun>
 800da68:	2300      	movs	r3, #0
 800da6a:	001c      	movs	r4, r3
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	4298      	cmp	r0, r3
 800da70:	d11f      	bne.n	800dab2 <__gethex+0x8e>
 800da72:	9a03      	ldr	r2, [sp, #12]
 800da74:	9907      	ldr	r1, [sp, #28]
 800da76:	9801      	ldr	r0, [sp, #4]
 800da78:	f001 fa5c 	bl	800ef34 <strncmp>
 800da7c:	0007      	movs	r7, r0
 800da7e:	42a0      	cmp	r0, r4
 800da80:	d000      	beq.n	800da84 <__gethex+0x60>
 800da82:	e06b      	b.n	800db5c <__gethex+0x138>
 800da84:	9b01      	ldr	r3, [sp, #4]
 800da86:	9a03      	ldr	r2, [sp, #12]
 800da88:	5c98      	ldrb	r0, [r3, r2]
 800da8a:	189d      	adds	r5, r3, r2
 800da8c:	f7ff ffb4 	bl	800d9f8 <__hexdig_fun>
 800da90:	2301      	movs	r3, #1
 800da92:	9304      	str	r3, [sp, #16]
 800da94:	42a0      	cmp	r0, r4
 800da96:	d030      	beq.n	800dafa <__gethex+0xd6>
 800da98:	9501      	str	r5, [sp, #4]
 800da9a:	9b01      	ldr	r3, [sp, #4]
 800da9c:	7818      	ldrb	r0, [r3, #0]
 800da9e:	2830      	cmp	r0, #48	; 0x30
 800daa0:	d009      	beq.n	800dab6 <__gethex+0x92>
 800daa2:	f7ff ffa9 	bl	800d9f8 <__hexdig_fun>
 800daa6:	4242      	negs	r2, r0
 800daa8:	4142      	adcs	r2, r0
 800daaa:	2301      	movs	r3, #1
 800daac:	002c      	movs	r4, r5
 800daae:	9204      	str	r2, [sp, #16]
 800dab0:	9308      	str	r3, [sp, #32]
 800dab2:	9d01      	ldr	r5, [sp, #4]
 800dab4:	e004      	b.n	800dac0 <__gethex+0x9c>
 800dab6:	9b01      	ldr	r3, [sp, #4]
 800dab8:	3301      	adds	r3, #1
 800daba:	9301      	str	r3, [sp, #4]
 800dabc:	e7ed      	b.n	800da9a <__gethex+0x76>
 800dabe:	3501      	adds	r5, #1
 800dac0:	7828      	ldrb	r0, [r5, #0]
 800dac2:	f7ff ff99 	bl	800d9f8 <__hexdig_fun>
 800dac6:	1e07      	subs	r7, r0, #0
 800dac8:	d1f9      	bne.n	800dabe <__gethex+0x9a>
 800daca:	0028      	movs	r0, r5
 800dacc:	9a03      	ldr	r2, [sp, #12]
 800dace:	9907      	ldr	r1, [sp, #28]
 800dad0:	f001 fa30 	bl	800ef34 <strncmp>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d10e      	bne.n	800daf6 <__gethex+0xd2>
 800dad8:	2c00      	cmp	r4, #0
 800dada:	d107      	bne.n	800daec <__gethex+0xc8>
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	18ed      	adds	r5, r5, r3
 800dae0:	002c      	movs	r4, r5
 800dae2:	7828      	ldrb	r0, [r5, #0]
 800dae4:	f7ff ff88 	bl	800d9f8 <__hexdig_fun>
 800dae8:	2800      	cmp	r0, #0
 800daea:	d102      	bne.n	800daf2 <__gethex+0xce>
 800daec:	1b64      	subs	r4, r4, r5
 800daee:	00a7      	lsls	r7, r4, #2
 800daf0:	e003      	b.n	800dafa <__gethex+0xd6>
 800daf2:	3501      	adds	r5, #1
 800daf4:	e7f5      	b.n	800dae2 <__gethex+0xbe>
 800daf6:	2c00      	cmp	r4, #0
 800daf8:	d1f8      	bne.n	800daec <__gethex+0xc8>
 800dafa:	2220      	movs	r2, #32
 800dafc:	782b      	ldrb	r3, [r5, #0]
 800dafe:	002e      	movs	r6, r5
 800db00:	4393      	bics	r3, r2
 800db02:	2b50      	cmp	r3, #80	; 0x50
 800db04:	d11d      	bne.n	800db42 <__gethex+0x11e>
 800db06:	786b      	ldrb	r3, [r5, #1]
 800db08:	2b2b      	cmp	r3, #43	; 0x2b
 800db0a:	d02c      	beq.n	800db66 <__gethex+0x142>
 800db0c:	2b2d      	cmp	r3, #45	; 0x2d
 800db0e:	d02e      	beq.n	800db6e <__gethex+0x14a>
 800db10:	2300      	movs	r3, #0
 800db12:	1c6e      	adds	r6, r5, #1
 800db14:	9306      	str	r3, [sp, #24]
 800db16:	7830      	ldrb	r0, [r6, #0]
 800db18:	f7ff ff6e 	bl	800d9f8 <__hexdig_fun>
 800db1c:	1e43      	subs	r3, r0, #1
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b18      	cmp	r3, #24
 800db22:	d82b      	bhi.n	800db7c <__gethex+0x158>
 800db24:	3810      	subs	r0, #16
 800db26:	0004      	movs	r4, r0
 800db28:	7870      	ldrb	r0, [r6, #1]
 800db2a:	f7ff ff65 	bl	800d9f8 <__hexdig_fun>
 800db2e:	1e43      	subs	r3, r0, #1
 800db30:	b2db      	uxtb	r3, r3
 800db32:	3601      	adds	r6, #1
 800db34:	2b18      	cmp	r3, #24
 800db36:	d91c      	bls.n	800db72 <__gethex+0x14e>
 800db38:	9b06      	ldr	r3, [sp, #24]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d000      	beq.n	800db40 <__gethex+0x11c>
 800db3e:	4264      	negs	r4, r4
 800db40:	193f      	adds	r7, r7, r4
 800db42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db44:	601e      	str	r6, [r3, #0]
 800db46:	9b04      	ldr	r3, [sp, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d019      	beq.n	800db80 <__gethex+0x15c>
 800db4c:	2600      	movs	r6, #0
 800db4e:	9b08      	ldr	r3, [sp, #32]
 800db50:	42b3      	cmp	r3, r6
 800db52:	d100      	bne.n	800db56 <__gethex+0x132>
 800db54:	3606      	adds	r6, #6
 800db56:	0030      	movs	r0, r6
 800db58:	b00d      	add	sp, #52	; 0x34
 800db5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db5c:	2301      	movs	r3, #1
 800db5e:	2700      	movs	r7, #0
 800db60:	9d01      	ldr	r5, [sp, #4]
 800db62:	9304      	str	r3, [sp, #16]
 800db64:	e7c9      	b.n	800dafa <__gethex+0xd6>
 800db66:	2300      	movs	r3, #0
 800db68:	9306      	str	r3, [sp, #24]
 800db6a:	1cae      	adds	r6, r5, #2
 800db6c:	e7d3      	b.n	800db16 <__gethex+0xf2>
 800db6e:	2301      	movs	r3, #1
 800db70:	e7fa      	b.n	800db68 <__gethex+0x144>
 800db72:	230a      	movs	r3, #10
 800db74:	435c      	muls	r4, r3
 800db76:	1824      	adds	r4, r4, r0
 800db78:	3c10      	subs	r4, #16
 800db7a:	e7d5      	b.n	800db28 <__gethex+0x104>
 800db7c:	002e      	movs	r6, r5
 800db7e:	e7e0      	b.n	800db42 <__gethex+0x11e>
 800db80:	9b01      	ldr	r3, [sp, #4]
 800db82:	9904      	ldr	r1, [sp, #16]
 800db84:	1aeb      	subs	r3, r5, r3
 800db86:	3b01      	subs	r3, #1
 800db88:	2b07      	cmp	r3, #7
 800db8a:	dc0a      	bgt.n	800dba2 <__gethex+0x17e>
 800db8c:	9805      	ldr	r0, [sp, #20]
 800db8e:	f000 fa7f 	bl	800e090 <_Balloc>
 800db92:	1e04      	subs	r4, r0, #0
 800db94:	d108      	bne.n	800dba8 <__gethex+0x184>
 800db96:	0002      	movs	r2, r0
 800db98:	21de      	movs	r1, #222	; 0xde
 800db9a:	4b64      	ldr	r3, [pc, #400]	; (800dd2c <__gethex+0x308>)
 800db9c:	4864      	ldr	r0, [pc, #400]	; (800dd30 <__gethex+0x30c>)
 800db9e:	f001 f9e9 	bl	800ef74 <__assert_func>
 800dba2:	3101      	adds	r1, #1
 800dba4:	105b      	asrs	r3, r3, #1
 800dba6:	e7ef      	b.n	800db88 <__gethex+0x164>
 800dba8:	0003      	movs	r3, r0
 800dbaa:	3314      	adds	r3, #20
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	001e      	movs	r6, r3
 800dbb4:	9306      	str	r3, [sp, #24]
 800dbb6:	9b01      	ldr	r3, [sp, #4]
 800dbb8:	42ab      	cmp	r3, r5
 800dbba:	d340      	bcc.n	800dc3e <__gethex+0x21a>
 800dbbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dbbe:	9b04      	ldr	r3, [sp, #16]
 800dbc0:	c540      	stmia	r5!, {r6}
 800dbc2:	1aed      	subs	r5, r5, r3
 800dbc4:	10ad      	asrs	r5, r5, #2
 800dbc6:	0030      	movs	r0, r6
 800dbc8:	6125      	str	r5, [r4, #16]
 800dbca:	f000 fb59 	bl	800e280 <__hi0bits>
 800dbce:	9b02      	ldr	r3, [sp, #8]
 800dbd0:	016d      	lsls	r5, r5, #5
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	1a2e      	subs	r6, r5, r0
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	429e      	cmp	r6, r3
 800dbda:	dd5a      	ble.n	800dc92 <__gethex+0x26e>
 800dbdc:	1af6      	subs	r6, r6, r3
 800dbde:	0031      	movs	r1, r6
 800dbe0:	0020      	movs	r0, r4
 800dbe2:	f000 fefb 	bl	800e9dc <__any_on>
 800dbe6:	1e05      	subs	r5, r0, #0
 800dbe8:	d016      	beq.n	800dc18 <__gethex+0x1f4>
 800dbea:	2501      	movs	r5, #1
 800dbec:	211f      	movs	r1, #31
 800dbee:	0028      	movs	r0, r5
 800dbf0:	1e73      	subs	r3, r6, #1
 800dbf2:	4019      	ands	r1, r3
 800dbf4:	4088      	lsls	r0, r1
 800dbf6:	0001      	movs	r1, r0
 800dbf8:	115a      	asrs	r2, r3, #5
 800dbfa:	9804      	ldr	r0, [sp, #16]
 800dbfc:	0092      	lsls	r2, r2, #2
 800dbfe:	5812      	ldr	r2, [r2, r0]
 800dc00:	420a      	tst	r2, r1
 800dc02:	d009      	beq.n	800dc18 <__gethex+0x1f4>
 800dc04:	42ab      	cmp	r3, r5
 800dc06:	dd06      	ble.n	800dc16 <__gethex+0x1f2>
 800dc08:	0020      	movs	r0, r4
 800dc0a:	1eb1      	subs	r1, r6, #2
 800dc0c:	f000 fee6 	bl	800e9dc <__any_on>
 800dc10:	3502      	adds	r5, #2
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d100      	bne.n	800dc18 <__gethex+0x1f4>
 800dc16:	2502      	movs	r5, #2
 800dc18:	0031      	movs	r1, r6
 800dc1a:	0020      	movs	r0, r4
 800dc1c:	f7ff fe98 	bl	800d950 <rshift>
 800dc20:	19bf      	adds	r7, r7, r6
 800dc22:	9b02      	ldr	r3, [sp, #8]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	9303      	str	r3, [sp, #12]
 800dc28:	42bb      	cmp	r3, r7
 800dc2a:	da42      	bge.n	800dcb2 <__gethex+0x28e>
 800dc2c:	0021      	movs	r1, r4
 800dc2e:	9805      	ldr	r0, [sp, #20]
 800dc30:	f000 fa72 	bl	800e118 <_Bfree>
 800dc34:	2300      	movs	r3, #0
 800dc36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc38:	26a3      	movs	r6, #163	; 0xa3
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	e78b      	b.n	800db56 <__gethex+0x132>
 800dc3e:	1e6b      	subs	r3, r5, #1
 800dc40:	9308      	str	r3, [sp, #32]
 800dc42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d014      	beq.n	800dc74 <__gethex+0x250>
 800dc4a:	9b06      	ldr	r3, [sp, #24]
 800dc4c:	2b20      	cmp	r3, #32
 800dc4e:	d104      	bne.n	800dc5a <__gethex+0x236>
 800dc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc52:	c340      	stmia	r3!, {r6}
 800dc54:	2600      	movs	r6, #0
 800dc56:	9309      	str	r3, [sp, #36]	; 0x24
 800dc58:	9606      	str	r6, [sp, #24]
 800dc5a:	9b08      	ldr	r3, [sp, #32]
 800dc5c:	7818      	ldrb	r0, [r3, #0]
 800dc5e:	f7ff fecb 	bl	800d9f8 <__hexdig_fun>
 800dc62:	230f      	movs	r3, #15
 800dc64:	4018      	ands	r0, r3
 800dc66:	9b06      	ldr	r3, [sp, #24]
 800dc68:	9d08      	ldr	r5, [sp, #32]
 800dc6a:	4098      	lsls	r0, r3
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	4306      	orrs	r6, r0
 800dc70:	9306      	str	r3, [sp, #24]
 800dc72:	e7a0      	b.n	800dbb6 <__gethex+0x192>
 800dc74:	2301      	movs	r3, #1
 800dc76:	9a03      	ldr	r2, [sp, #12]
 800dc78:	1a9d      	subs	r5, r3, r2
 800dc7a:	9b08      	ldr	r3, [sp, #32]
 800dc7c:	195d      	adds	r5, r3, r5
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	429d      	cmp	r5, r3
 800dc82:	d3e2      	bcc.n	800dc4a <__gethex+0x226>
 800dc84:	0028      	movs	r0, r5
 800dc86:	9907      	ldr	r1, [sp, #28]
 800dc88:	f001 f954 	bl	800ef34 <strncmp>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d1dc      	bne.n	800dc4a <__gethex+0x226>
 800dc90:	e791      	b.n	800dbb6 <__gethex+0x192>
 800dc92:	9b01      	ldr	r3, [sp, #4]
 800dc94:	2500      	movs	r5, #0
 800dc96:	429e      	cmp	r6, r3
 800dc98:	dac3      	bge.n	800dc22 <__gethex+0x1fe>
 800dc9a:	1b9e      	subs	r6, r3, r6
 800dc9c:	0021      	movs	r1, r4
 800dc9e:	0032      	movs	r2, r6
 800dca0:	9805      	ldr	r0, [sp, #20]
 800dca2:	f000 fc57 	bl	800e554 <__lshift>
 800dca6:	0003      	movs	r3, r0
 800dca8:	3314      	adds	r3, #20
 800dcaa:	0004      	movs	r4, r0
 800dcac:	1bbf      	subs	r7, r7, r6
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	e7b7      	b.n	800dc22 <__gethex+0x1fe>
 800dcb2:	9b02      	ldr	r3, [sp, #8]
 800dcb4:	685e      	ldr	r6, [r3, #4]
 800dcb6:	42be      	cmp	r6, r7
 800dcb8:	dd71      	ble.n	800dd9e <__gethex+0x37a>
 800dcba:	9b01      	ldr	r3, [sp, #4]
 800dcbc:	1bf6      	subs	r6, r6, r7
 800dcbe:	42b3      	cmp	r3, r6
 800dcc0:	dc38      	bgt.n	800dd34 <__gethex+0x310>
 800dcc2:	9b02      	ldr	r3, [sp, #8]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d026      	beq.n	800dd18 <__gethex+0x2f4>
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d028      	beq.n	800dd20 <__gethex+0x2fc>
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d119      	bne.n	800dd06 <__gethex+0x2e2>
 800dcd2:	9b01      	ldr	r3, [sp, #4]
 800dcd4:	42b3      	cmp	r3, r6
 800dcd6:	d116      	bne.n	800dd06 <__gethex+0x2e2>
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d10d      	bne.n	800dcf8 <__gethex+0x2d4>
 800dcdc:	9b02      	ldr	r3, [sp, #8]
 800dcde:	2662      	movs	r6, #98	; 0x62
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	9a01      	ldr	r2, [sp, #4]
 800dce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	2301      	movs	r3, #1
 800dcec:	9a04      	ldr	r2, [sp, #16]
 800dcee:	6123      	str	r3, [r4, #16]
 800dcf0:	6013      	str	r3, [r2, #0]
 800dcf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcf4:	601c      	str	r4, [r3, #0]
 800dcf6:	e72e      	b.n	800db56 <__gethex+0x132>
 800dcf8:	9901      	ldr	r1, [sp, #4]
 800dcfa:	0020      	movs	r0, r4
 800dcfc:	3901      	subs	r1, #1
 800dcfe:	f000 fe6d 	bl	800e9dc <__any_on>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d1ea      	bne.n	800dcdc <__gethex+0x2b8>
 800dd06:	0021      	movs	r1, r4
 800dd08:	9805      	ldr	r0, [sp, #20]
 800dd0a:	f000 fa05 	bl	800e118 <_Bfree>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd12:	2650      	movs	r6, #80	; 0x50
 800dd14:	6013      	str	r3, [r2, #0]
 800dd16:	e71e      	b.n	800db56 <__gethex+0x132>
 800dd18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1f3      	bne.n	800dd06 <__gethex+0x2e2>
 800dd1e:	e7dd      	b.n	800dcdc <__gethex+0x2b8>
 800dd20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1da      	bne.n	800dcdc <__gethex+0x2b8>
 800dd26:	e7ee      	b.n	800dd06 <__gethex+0x2e2>
 800dd28:	08010290 	.word	0x08010290
 800dd2c:	08010218 	.word	0x08010218
 800dd30:	08010229 	.word	0x08010229
 800dd34:	1e77      	subs	r7, r6, #1
 800dd36:	2d00      	cmp	r5, #0
 800dd38:	d12f      	bne.n	800dd9a <__gethex+0x376>
 800dd3a:	2f00      	cmp	r7, #0
 800dd3c:	d004      	beq.n	800dd48 <__gethex+0x324>
 800dd3e:	0039      	movs	r1, r7
 800dd40:	0020      	movs	r0, r4
 800dd42:	f000 fe4b 	bl	800e9dc <__any_on>
 800dd46:	0005      	movs	r5, r0
 800dd48:	231f      	movs	r3, #31
 800dd4a:	117a      	asrs	r2, r7, #5
 800dd4c:	401f      	ands	r7, r3
 800dd4e:	3b1e      	subs	r3, #30
 800dd50:	40bb      	lsls	r3, r7
 800dd52:	9904      	ldr	r1, [sp, #16]
 800dd54:	0092      	lsls	r2, r2, #2
 800dd56:	5852      	ldr	r2, [r2, r1]
 800dd58:	421a      	tst	r2, r3
 800dd5a:	d001      	beq.n	800dd60 <__gethex+0x33c>
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	431d      	orrs	r5, r3
 800dd60:	9b01      	ldr	r3, [sp, #4]
 800dd62:	0031      	movs	r1, r6
 800dd64:	1b9b      	subs	r3, r3, r6
 800dd66:	2602      	movs	r6, #2
 800dd68:	0020      	movs	r0, r4
 800dd6a:	9301      	str	r3, [sp, #4]
 800dd6c:	f7ff fdf0 	bl	800d950 <rshift>
 800dd70:	9b02      	ldr	r3, [sp, #8]
 800dd72:	685f      	ldr	r7, [r3, #4]
 800dd74:	2d00      	cmp	r5, #0
 800dd76:	d041      	beq.n	800ddfc <__gethex+0x3d8>
 800dd78:	9b02      	ldr	r3, [sp, #8]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	2b02      	cmp	r3, #2
 800dd7e:	d010      	beq.n	800dda2 <__gethex+0x37e>
 800dd80:	2b03      	cmp	r3, #3
 800dd82:	d012      	beq.n	800ddaa <__gethex+0x386>
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d106      	bne.n	800dd96 <__gethex+0x372>
 800dd88:	07aa      	lsls	r2, r5, #30
 800dd8a:	d504      	bpl.n	800dd96 <__gethex+0x372>
 800dd8c:	9a04      	ldr	r2, [sp, #16]
 800dd8e:	6810      	ldr	r0, [r2, #0]
 800dd90:	4305      	orrs	r5, r0
 800dd92:	421d      	tst	r5, r3
 800dd94:	d10c      	bne.n	800ddb0 <__gethex+0x38c>
 800dd96:	2310      	movs	r3, #16
 800dd98:	e02f      	b.n	800ddfa <__gethex+0x3d6>
 800dd9a:	2501      	movs	r5, #1
 800dd9c:	e7d4      	b.n	800dd48 <__gethex+0x324>
 800dd9e:	2601      	movs	r6, #1
 800dda0:	e7e8      	b.n	800dd74 <__gethex+0x350>
 800dda2:	2301      	movs	r3, #1
 800dda4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dda6:	1a9b      	subs	r3, r3, r2
 800dda8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ddaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d0f2      	beq.n	800dd96 <__gethex+0x372>
 800ddb0:	6923      	ldr	r3, [r4, #16]
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	9303      	str	r3, [sp, #12]
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	9304      	str	r3, [sp, #16]
 800ddba:	0023      	movs	r3, r4
 800ddbc:	9a04      	ldr	r2, [sp, #16]
 800ddbe:	3314      	adds	r3, #20
 800ddc0:	1899      	adds	r1, r3, r2
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	1c55      	adds	r5, r2, #1
 800ddc6:	d01e      	beq.n	800de06 <__gethex+0x3e2>
 800ddc8:	3201      	adds	r2, #1
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	0023      	movs	r3, r4
 800ddce:	3314      	adds	r3, #20
 800ddd0:	2e02      	cmp	r6, #2
 800ddd2:	d140      	bne.n	800de56 <__gethex+0x432>
 800ddd4:	9a02      	ldr	r2, [sp, #8]
 800ddd6:	9901      	ldr	r1, [sp, #4]
 800ddd8:	6812      	ldr	r2, [r2, #0]
 800ddda:	3a01      	subs	r2, #1
 800dddc:	428a      	cmp	r2, r1
 800ddde:	d10b      	bne.n	800ddf8 <__gethex+0x3d4>
 800dde0:	114a      	asrs	r2, r1, #5
 800dde2:	211f      	movs	r1, #31
 800dde4:	9801      	ldr	r0, [sp, #4]
 800dde6:	0092      	lsls	r2, r2, #2
 800dde8:	4001      	ands	r1, r0
 800ddea:	2001      	movs	r0, #1
 800ddec:	0005      	movs	r5, r0
 800ddee:	408d      	lsls	r5, r1
 800ddf0:	58d3      	ldr	r3, [r2, r3]
 800ddf2:	422b      	tst	r3, r5
 800ddf4:	d000      	beq.n	800ddf8 <__gethex+0x3d4>
 800ddf6:	2601      	movs	r6, #1
 800ddf8:	2320      	movs	r3, #32
 800ddfa:	431e      	orrs	r6, r3
 800ddfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddfe:	601c      	str	r4, [r3, #0]
 800de00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de02:	601f      	str	r7, [r3, #0]
 800de04:	e6a7      	b.n	800db56 <__gethex+0x132>
 800de06:	c301      	stmia	r3!, {r0}
 800de08:	4299      	cmp	r1, r3
 800de0a:	d8da      	bhi.n	800ddc2 <__gethex+0x39e>
 800de0c:	9b03      	ldr	r3, [sp, #12]
 800de0e:	68a2      	ldr	r2, [r4, #8]
 800de10:	4293      	cmp	r3, r2
 800de12:	db17      	blt.n	800de44 <__gethex+0x420>
 800de14:	6863      	ldr	r3, [r4, #4]
 800de16:	9805      	ldr	r0, [sp, #20]
 800de18:	1c59      	adds	r1, r3, #1
 800de1a:	f000 f939 	bl	800e090 <_Balloc>
 800de1e:	1e05      	subs	r5, r0, #0
 800de20:	d103      	bne.n	800de2a <__gethex+0x406>
 800de22:	0002      	movs	r2, r0
 800de24:	2184      	movs	r1, #132	; 0x84
 800de26:	4b1c      	ldr	r3, [pc, #112]	; (800de98 <__gethex+0x474>)
 800de28:	e6b8      	b.n	800db9c <__gethex+0x178>
 800de2a:	0021      	movs	r1, r4
 800de2c:	6923      	ldr	r3, [r4, #16]
 800de2e:	310c      	adds	r1, #12
 800de30:	1c9a      	adds	r2, r3, #2
 800de32:	0092      	lsls	r2, r2, #2
 800de34:	300c      	adds	r0, #12
 800de36:	f7fd f973 	bl	800b120 <memcpy>
 800de3a:	0021      	movs	r1, r4
 800de3c:	9805      	ldr	r0, [sp, #20]
 800de3e:	f000 f96b 	bl	800e118 <_Bfree>
 800de42:	002c      	movs	r4, r5
 800de44:	6923      	ldr	r3, [r4, #16]
 800de46:	1c5a      	adds	r2, r3, #1
 800de48:	6122      	str	r2, [r4, #16]
 800de4a:	2201      	movs	r2, #1
 800de4c:	3304      	adds	r3, #4
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	18e3      	adds	r3, r4, r3
 800de52:	605a      	str	r2, [r3, #4]
 800de54:	e7ba      	b.n	800ddcc <__gethex+0x3a8>
 800de56:	6922      	ldr	r2, [r4, #16]
 800de58:	9903      	ldr	r1, [sp, #12]
 800de5a:	428a      	cmp	r2, r1
 800de5c:	dd09      	ble.n	800de72 <__gethex+0x44e>
 800de5e:	2101      	movs	r1, #1
 800de60:	0020      	movs	r0, r4
 800de62:	f7ff fd75 	bl	800d950 <rshift>
 800de66:	9b02      	ldr	r3, [sp, #8]
 800de68:	3701      	adds	r7, #1
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	42bb      	cmp	r3, r7
 800de6e:	dac2      	bge.n	800ddf6 <__gethex+0x3d2>
 800de70:	e6dc      	b.n	800dc2c <__gethex+0x208>
 800de72:	221f      	movs	r2, #31
 800de74:	9d01      	ldr	r5, [sp, #4]
 800de76:	9901      	ldr	r1, [sp, #4]
 800de78:	2601      	movs	r6, #1
 800de7a:	4015      	ands	r5, r2
 800de7c:	4211      	tst	r1, r2
 800de7e:	d0bb      	beq.n	800ddf8 <__gethex+0x3d4>
 800de80:	9a04      	ldr	r2, [sp, #16]
 800de82:	189b      	adds	r3, r3, r2
 800de84:	3b04      	subs	r3, #4
 800de86:	6818      	ldr	r0, [r3, #0]
 800de88:	f000 f9fa 	bl	800e280 <__hi0bits>
 800de8c:	2320      	movs	r3, #32
 800de8e:	1b5d      	subs	r5, r3, r5
 800de90:	42a8      	cmp	r0, r5
 800de92:	dbe4      	blt.n	800de5e <__gethex+0x43a>
 800de94:	e7b0      	b.n	800ddf8 <__gethex+0x3d4>
 800de96:	46c0      	nop			; (mov r8, r8)
 800de98:	08010218 	.word	0x08010218

0800de9c <L_shift>:
 800de9c:	2308      	movs	r3, #8
 800de9e:	b570      	push	{r4, r5, r6, lr}
 800dea0:	2520      	movs	r5, #32
 800dea2:	1a9a      	subs	r2, r3, r2
 800dea4:	0092      	lsls	r2, r2, #2
 800dea6:	1aad      	subs	r5, r5, r2
 800dea8:	6843      	ldr	r3, [r0, #4]
 800deaa:	6806      	ldr	r6, [r0, #0]
 800deac:	001c      	movs	r4, r3
 800deae:	40ac      	lsls	r4, r5
 800deb0:	40d3      	lsrs	r3, r2
 800deb2:	4334      	orrs	r4, r6
 800deb4:	6004      	str	r4, [r0, #0]
 800deb6:	6043      	str	r3, [r0, #4]
 800deb8:	3004      	adds	r0, #4
 800deba:	4288      	cmp	r0, r1
 800debc:	d3f4      	bcc.n	800dea8 <L_shift+0xc>
 800debe:	bd70      	pop	{r4, r5, r6, pc}

0800dec0 <__match>:
 800dec0:	b530      	push	{r4, r5, lr}
 800dec2:	6803      	ldr	r3, [r0, #0]
 800dec4:	780c      	ldrb	r4, [r1, #0]
 800dec6:	3301      	adds	r3, #1
 800dec8:	2c00      	cmp	r4, #0
 800deca:	d102      	bne.n	800ded2 <__match+0x12>
 800decc:	6003      	str	r3, [r0, #0]
 800dece:	2001      	movs	r0, #1
 800ded0:	bd30      	pop	{r4, r5, pc}
 800ded2:	781a      	ldrb	r2, [r3, #0]
 800ded4:	0015      	movs	r5, r2
 800ded6:	3d41      	subs	r5, #65	; 0x41
 800ded8:	2d19      	cmp	r5, #25
 800deda:	d800      	bhi.n	800dede <__match+0x1e>
 800dedc:	3220      	adds	r2, #32
 800dede:	3101      	adds	r1, #1
 800dee0:	42a2      	cmp	r2, r4
 800dee2:	d0ef      	beq.n	800dec4 <__match+0x4>
 800dee4:	2000      	movs	r0, #0
 800dee6:	e7f3      	b.n	800ded0 <__match+0x10>

0800dee8 <__hexnan>:
 800dee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deea:	680b      	ldr	r3, [r1, #0]
 800deec:	b08b      	sub	sp, #44	; 0x2c
 800deee:	9201      	str	r2, [sp, #4]
 800def0:	9901      	ldr	r1, [sp, #4]
 800def2:	115a      	asrs	r2, r3, #5
 800def4:	0092      	lsls	r2, r2, #2
 800def6:	188a      	adds	r2, r1, r2
 800def8:	9202      	str	r2, [sp, #8]
 800defa:	0019      	movs	r1, r3
 800defc:	221f      	movs	r2, #31
 800defe:	4011      	ands	r1, r2
 800df00:	9008      	str	r0, [sp, #32]
 800df02:	9106      	str	r1, [sp, #24]
 800df04:	4213      	tst	r3, r2
 800df06:	d002      	beq.n	800df0e <__hexnan+0x26>
 800df08:	9b02      	ldr	r3, [sp, #8]
 800df0a:	3304      	adds	r3, #4
 800df0c:	9302      	str	r3, [sp, #8]
 800df0e:	9b02      	ldr	r3, [sp, #8]
 800df10:	2500      	movs	r5, #0
 800df12:	1f1e      	subs	r6, r3, #4
 800df14:	0037      	movs	r7, r6
 800df16:	0034      	movs	r4, r6
 800df18:	9b08      	ldr	r3, [sp, #32]
 800df1a:	6035      	str	r5, [r6, #0]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	9507      	str	r5, [sp, #28]
 800df20:	9305      	str	r3, [sp, #20]
 800df22:	9503      	str	r5, [sp, #12]
 800df24:	9b05      	ldr	r3, [sp, #20]
 800df26:	3301      	adds	r3, #1
 800df28:	9309      	str	r3, [sp, #36]	; 0x24
 800df2a:	9b05      	ldr	r3, [sp, #20]
 800df2c:	785b      	ldrb	r3, [r3, #1]
 800df2e:	9304      	str	r3, [sp, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d028      	beq.n	800df86 <__hexnan+0x9e>
 800df34:	9804      	ldr	r0, [sp, #16]
 800df36:	f7ff fd5f 	bl	800d9f8 <__hexdig_fun>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d154      	bne.n	800dfe8 <__hexnan+0x100>
 800df3e:	9b04      	ldr	r3, [sp, #16]
 800df40:	2b20      	cmp	r3, #32
 800df42:	d819      	bhi.n	800df78 <__hexnan+0x90>
 800df44:	9b03      	ldr	r3, [sp, #12]
 800df46:	9a07      	ldr	r2, [sp, #28]
 800df48:	4293      	cmp	r3, r2
 800df4a:	dd12      	ble.n	800df72 <__hexnan+0x8a>
 800df4c:	42bc      	cmp	r4, r7
 800df4e:	d206      	bcs.n	800df5e <__hexnan+0x76>
 800df50:	2d07      	cmp	r5, #7
 800df52:	dc04      	bgt.n	800df5e <__hexnan+0x76>
 800df54:	002a      	movs	r2, r5
 800df56:	0039      	movs	r1, r7
 800df58:	0020      	movs	r0, r4
 800df5a:	f7ff ff9f 	bl	800de9c <L_shift>
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	2508      	movs	r5, #8
 800df62:	429c      	cmp	r4, r3
 800df64:	d905      	bls.n	800df72 <__hexnan+0x8a>
 800df66:	1f27      	subs	r7, r4, #4
 800df68:	2500      	movs	r5, #0
 800df6a:	003c      	movs	r4, r7
 800df6c:	9b03      	ldr	r3, [sp, #12]
 800df6e:	603d      	str	r5, [r7, #0]
 800df70:	9307      	str	r3, [sp, #28]
 800df72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df74:	9305      	str	r3, [sp, #20]
 800df76:	e7d5      	b.n	800df24 <__hexnan+0x3c>
 800df78:	9b04      	ldr	r3, [sp, #16]
 800df7a:	2b29      	cmp	r3, #41	; 0x29
 800df7c:	d159      	bne.n	800e032 <__hexnan+0x14a>
 800df7e:	9b05      	ldr	r3, [sp, #20]
 800df80:	9a08      	ldr	r2, [sp, #32]
 800df82:	3302      	adds	r3, #2
 800df84:	6013      	str	r3, [r2, #0]
 800df86:	9b03      	ldr	r3, [sp, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d052      	beq.n	800e032 <__hexnan+0x14a>
 800df8c:	42bc      	cmp	r4, r7
 800df8e:	d206      	bcs.n	800df9e <__hexnan+0xb6>
 800df90:	2d07      	cmp	r5, #7
 800df92:	dc04      	bgt.n	800df9e <__hexnan+0xb6>
 800df94:	002a      	movs	r2, r5
 800df96:	0039      	movs	r1, r7
 800df98:	0020      	movs	r0, r4
 800df9a:	f7ff ff7f 	bl	800de9c <L_shift>
 800df9e:	9b01      	ldr	r3, [sp, #4]
 800dfa0:	429c      	cmp	r4, r3
 800dfa2:	d935      	bls.n	800e010 <__hexnan+0x128>
 800dfa4:	001a      	movs	r2, r3
 800dfa6:	0023      	movs	r3, r4
 800dfa8:	cb02      	ldmia	r3!, {r1}
 800dfaa:	c202      	stmia	r2!, {r1}
 800dfac:	429e      	cmp	r6, r3
 800dfae:	d2fb      	bcs.n	800dfa8 <__hexnan+0xc0>
 800dfb0:	9b02      	ldr	r3, [sp, #8]
 800dfb2:	1c61      	adds	r1, r4, #1
 800dfb4:	1eda      	subs	r2, r3, #3
 800dfb6:	2304      	movs	r3, #4
 800dfb8:	4291      	cmp	r1, r2
 800dfba:	d805      	bhi.n	800dfc8 <__hexnan+0xe0>
 800dfbc:	9b02      	ldr	r3, [sp, #8]
 800dfbe:	3b04      	subs	r3, #4
 800dfc0:	1b1b      	subs	r3, r3, r4
 800dfc2:	089b      	lsrs	r3, r3, #2
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	9a01      	ldr	r2, [sp, #4]
 800dfca:	18d3      	adds	r3, r2, r3
 800dfcc:	2200      	movs	r2, #0
 800dfce:	c304      	stmia	r3!, {r2}
 800dfd0:	429e      	cmp	r6, r3
 800dfd2:	d2fc      	bcs.n	800dfce <__hexnan+0xe6>
 800dfd4:	6833      	ldr	r3, [r6, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d104      	bne.n	800dfe4 <__hexnan+0xfc>
 800dfda:	9b01      	ldr	r3, [sp, #4]
 800dfdc:	429e      	cmp	r6, r3
 800dfde:	d126      	bne.n	800e02e <__hexnan+0x146>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	6033      	str	r3, [r6, #0]
 800dfe4:	2005      	movs	r0, #5
 800dfe6:	e025      	b.n	800e034 <__hexnan+0x14c>
 800dfe8:	9b03      	ldr	r3, [sp, #12]
 800dfea:	3501      	adds	r5, #1
 800dfec:	3301      	adds	r3, #1
 800dfee:	9303      	str	r3, [sp, #12]
 800dff0:	2d08      	cmp	r5, #8
 800dff2:	dd06      	ble.n	800e002 <__hexnan+0x11a>
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	429c      	cmp	r4, r3
 800dff8:	d9bb      	bls.n	800df72 <__hexnan+0x8a>
 800dffa:	2300      	movs	r3, #0
 800dffc:	2501      	movs	r5, #1
 800dffe:	3c04      	subs	r4, #4
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	220f      	movs	r2, #15
 800e004:	6823      	ldr	r3, [r4, #0]
 800e006:	4010      	ands	r0, r2
 800e008:	011b      	lsls	r3, r3, #4
 800e00a:	4318      	orrs	r0, r3
 800e00c:	6020      	str	r0, [r4, #0]
 800e00e:	e7b0      	b.n	800df72 <__hexnan+0x8a>
 800e010:	9b06      	ldr	r3, [sp, #24]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d0de      	beq.n	800dfd4 <__hexnan+0xec>
 800e016:	2120      	movs	r1, #32
 800e018:	9a06      	ldr	r2, [sp, #24]
 800e01a:	9b02      	ldr	r3, [sp, #8]
 800e01c:	1a89      	subs	r1, r1, r2
 800e01e:	2201      	movs	r2, #1
 800e020:	4252      	negs	r2, r2
 800e022:	40ca      	lsrs	r2, r1
 800e024:	3b04      	subs	r3, #4
 800e026:	6819      	ldr	r1, [r3, #0]
 800e028:	400a      	ands	r2, r1
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	e7d2      	b.n	800dfd4 <__hexnan+0xec>
 800e02e:	3e04      	subs	r6, #4
 800e030:	e7d0      	b.n	800dfd4 <__hexnan+0xec>
 800e032:	2004      	movs	r0, #4
 800e034:	b00b      	add	sp, #44	; 0x2c
 800e036:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e038 <_localeconv_r>:
 800e038:	4800      	ldr	r0, [pc, #0]	; (800e03c <_localeconv_r+0x4>)
 800e03a:	4770      	bx	lr
 800e03c:	20000408 	.word	0x20000408

0800e040 <malloc>:
 800e040:	b510      	push	{r4, lr}
 800e042:	4b03      	ldr	r3, [pc, #12]	; (800e050 <malloc+0x10>)
 800e044:	0001      	movs	r1, r0
 800e046:	6818      	ldr	r0, [r3, #0]
 800e048:	f000 fd84 	bl	800eb54 <_malloc_r>
 800e04c:	bd10      	pop	{r4, pc}
 800e04e:	46c0      	nop			; (mov r8, r8)
 800e050:	200002b0 	.word	0x200002b0

0800e054 <__ascii_mbtowc>:
 800e054:	b082      	sub	sp, #8
 800e056:	2900      	cmp	r1, #0
 800e058:	d100      	bne.n	800e05c <__ascii_mbtowc+0x8>
 800e05a:	a901      	add	r1, sp, #4
 800e05c:	1e10      	subs	r0, r2, #0
 800e05e:	d006      	beq.n	800e06e <__ascii_mbtowc+0x1a>
 800e060:	2b00      	cmp	r3, #0
 800e062:	d006      	beq.n	800e072 <__ascii_mbtowc+0x1e>
 800e064:	7813      	ldrb	r3, [r2, #0]
 800e066:	600b      	str	r3, [r1, #0]
 800e068:	7810      	ldrb	r0, [r2, #0]
 800e06a:	1e43      	subs	r3, r0, #1
 800e06c:	4198      	sbcs	r0, r3
 800e06e:	b002      	add	sp, #8
 800e070:	4770      	bx	lr
 800e072:	2002      	movs	r0, #2
 800e074:	4240      	negs	r0, r0
 800e076:	e7fa      	b.n	800e06e <__ascii_mbtowc+0x1a>

0800e078 <memchr>:
 800e078:	b2c9      	uxtb	r1, r1
 800e07a:	1882      	adds	r2, r0, r2
 800e07c:	4290      	cmp	r0, r2
 800e07e:	d101      	bne.n	800e084 <memchr+0xc>
 800e080:	2000      	movs	r0, #0
 800e082:	4770      	bx	lr
 800e084:	7803      	ldrb	r3, [r0, #0]
 800e086:	428b      	cmp	r3, r1
 800e088:	d0fb      	beq.n	800e082 <memchr+0xa>
 800e08a:	3001      	adds	r0, #1
 800e08c:	e7f6      	b.n	800e07c <memchr+0x4>
	...

0800e090 <_Balloc>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e094:	0006      	movs	r6, r0
 800e096:	000c      	movs	r4, r1
 800e098:	2d00      	cmp	r5, #0
 800e09a:	d10e      	bne.n	800e0ba <_Balloc+0x2a>
 800e09c:	2010      	movs	r0, #16
 800e09e:	f7ff ffcf 	bl	800e040 <malloc>
 800e0a2:	1e02      	subs	r2, r0, #0
 800e0a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e0a6:	d104      	bne.n	800e0b2 <_Balloc+0x22>
 800e0a8:	2166      	movs	r1, #102	; 0x66
 800e0aa:	4b19      	ldr	r3, [pc, #100]	; (800e110 <_Balloc+0x80>)
 800e0ac:	4819      	ldr	r0, [pc, #100]	; (800e114 <_Balloc+0x84>)
 800e0ae:	f000 ff61 	bl	800ef74 <__assert_func>
 800e0b2:	6045      	str	r5, [r0, #4]
 800e0b4:	6085      	str	r5, [r0, #8]
 800e0b6:	6005      	str	r5, [r0, #0]
 800e0b8:	60c5      	str	r5, [r0, #12]
 800e0ba:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800e0bc:	68eb      	ldr	r3, [r5, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d013      	beq.n	800e0ea <_Balloc+0x5a>
 800e0c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e0c4:	00a2      	lsls	r2, r4, #2
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	189b      	adds	r3, r3, r2
 800e0ca:	6818      	ldr	r0, [r3, #0]
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d118      	bne.n	800e102 <_Balloc+0x72>
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	000d      	movs	r5, r1
 800e0d4:	40a5      	lsls	r5, r4
 800e0d6:	1d6a      	adds	r2, r5, #5
 800e0d8:	0030      	movs	r0, r6
 800e0da:	0092      	lsls	r2, r2, #2
 800e0dc:	f000 fca1 	bl	800ea22 <_calloc_r>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d00c      	beq.n	800e0fe <_Balloc+0x6e>
 800e0e4:	6044      	str	r4, [r0, #4]
 800e0e6:	6085      	str	r5, [r0, #8]
 800e0e8:	e00d      	b.n	800e106 <_Balloc+0x76>
 800e0ea:	2221      	movs	r2, #33	; 0x21
 800e0ec:	2104      	movs	r1, #4
 800e0ee:	0030      	movs	r0, r6
 800e0f0:	f000 fc97 	bl	800ea22 <_calloc_r>
 800e0f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e0f6:	60e8      	str	r0, [r5, #12]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1e1      	bne.n	800e0c2 <_Balloc+0x32>
 800e0fe:	2000      	movs	r0, #0
 800e100:	bd70      	pop	{r4, r5, r6, pc}
 800e102:	6802      	ldr	r2, [r0, #0]
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	2300      	movs	r3, #0
 800e108:	6103      	str	r3, [r0, #16]
 800e10a:	60c3      	str	r3, [r0, #12]
 800e10c:	e7f8      	b.n	800e100 <_Balloc+0x70>
 800e10e:	46c0      	nop			; (mov r8, r8)
 800e110:	080101a6 	.word	0x080101a6
 800e114:	080102a4 	.word	0x080102a4

0800e118 <_Bfree>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e11c:	0005      	movs	r5, r0
 800e11e:	000c      	movs	r4, r1
 800e120:	2e00      	cmp	r6, #0
 800e122:	d10e      	bne.n	800e142 <_Bfree+0x2a>
 800e124:	2010      	movs	r0, #16
 800e126:	f7ff ff8b 	bl	800e040 <malloc>
 800e12a:	1e02      	subs	r2, r0, #0
 800e12c:	6268      	str	r0, [r5, #36]	; 0x24
 800e12e:	d104      	bne.n	800e13a <_Bfree+0x22>
 800e130:	218a      	movs	r1, #138	; 0x8a
 800e132:	4b09      	ldr	r3, [pc, #36]	; (800e158 <_Bfree+0x40>)
 800e134:	4809      	ldr	r0, [pc, #36]	; (800e15c <_Bfree+0x44>)
 800e136:	f000 ff1d 	bl	800ef74 <__assert_func>
 800e13a:	6046      	str	r6, [r0, #4]
 800e13c:	6086      	str	r6, [r0, #8]
 800e13e:	6006      	str	r6, [r0, #0]
 800e140:	60c6      	str	r6, [r0, #12]
 800e142:	2c00      	cmp	r4, #0
 800e144:	d007      	beq.n	800e156 <_Bfree+0x3e>
 800e146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e148:	6862      	ldr	r2, [r4, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	0092      	lsls	r2, r2, #2
 800e14e:	189b      	adds	r3, r3, r2
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	6022      	str	r2, [r4, #0]
 800e154:	601c      	str	r4, [r3, #0]
 800e156:	bd70      	pop	{r4, r5, r6, pc}
 800e158:	080101a6 	.word	0x080101a6
 800e15c:	080102a4 	.word	0x080102a4

0800e160 <__multadd>:
 800e160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e162:	000e      	movs	r6, r1
 800e164:	9001      	str	r0, [sp, #4]
 800e166:	000c      	movs	r4, r1
 800e168:	001d      	movs	r5, r3
 800e16a:	2000      	movs	r0, #0
 800e16c:	690f      	ldr	r7, [r1, #16]
 800e16e:	3614      	adds	r6, #20
 800e170:	6833      	ldr	r3, [r6, #0]
 800e172:	3001      	adds	r0, #1
 800e174:	b299      	uxth	r1, r3
 800e176:	4351      	muls	r1, r2
 800e178:	0c1b      	lsrs	r3, r3, #16
 800e17a:	4353      	muls	r3, r2
 800e17c:	1949      	adds	r1, r1, r5
 800e17e:	0c0d      	lsrs	r5, r1, #16
 800e180:	195b      	adds	r3, r3, r5
 800e182:	0c1d      	lsrs	r5, r3, #16
 800e184:	b289      	uxth	r1, r1
 800e186:	041b      	lsls	r3, r3, #16
 800e188:	185b      	adds	r3, r3, r1
 800e18a:	c608      	stmia	r6!, {r3}
 800e18c:	4287      	cmp	r7, r0
 800e18e:	dcef      	bgt.n	800e170 <__multadd+0x10>
 800e190:	2d00      	cmp	r5, #0
 800e192:	d022      	beq.n	800e1da <__multadd+0x7a>
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	42bb      	cmp	r3, r7
 800e198:	dc19      	bgt.n	800e1ce <__multadd+0x6e>
 800e19a:	6863      	ldr	r3, [r4, #4]
 800e19c:	9801      	ldr	r0, [sp, #4]
 800e19e:	1c59      	adds	r1, r3, #1
 800e1a0:	f7ff ff76 	bl	800e090 <_Balloc>
 800e1a4:	1e06      	subs	r6, r0, #0
 800e1a6:	d105      	bne.n	800e1b4 <__multadd+0x54>
 800e1a8:	0002      	movs	r2, r0
 800e1aa:	21b5      	movs	r1, #181	; 0xb5
 800e1ac:	4b0c      	ldr	r3, [pc, #48]	; (800e1e0 <__multadd+0x80>)
 800e1ae:	480d      	ldr	r0, [pc, #52]	; (800e1e4 <__multadd+0x84>)
 800e1b0:	f000 fee0 	bl	800ef74 <__assert_func>
 800e1b4:	0021      	movs	r1, r4
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	310c      	adds	r1, #12
 800e1ba:	1c9a      	adds	r2, r3, #2
 800e1bc:	0092      	lsls	r2, r2, #2
 800e1be:	300c      	adds	r0, #12
 800e1c0:	f7fc ffae 	bl	800b120 <memcpy>
 800e1c4:	0021      	movs	r1, r4
 800e1c6:	9801      	ldr	r0, [sp, #4]
 800e1c8:	f7ff ffa6 	bl	800e118 <_Bfree>
 800e1cc:	0034      	movs	r4, r6
 800e1ce:	1d3b      	adds	r3, r7, #4
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	18e3      	adds	r3, r4, r3
 800e1d4:	605d      	str	r5, [r3, #4]
 800e1d6:	1c7b      	adds	r3, r7, #1
 800e1d8:	6123      	str	r3, [r4, #16]
 800e1da:	0020      	movs	r0, r4
 800e1dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1de:	46c0      	nop			; (mov r8, r8)
 800e1e0:	08010218 	.word	0x08010218
 800e1e4:	080102a4 	.word	0x080102a4

0800e1e8 <__s2b>:
 800e1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1ea:	0006      	movs	r6, r0
 800e1ec:	0018      	movs	r0, r3
 800e1ee:	000c      	movs	r4, r1
 800e1f0:	3008      	adds	r0, #8
 800e1f2:	2109      	movs	r1, #9
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	0015      	movs	r5, r2
 800e1f8:	f7f2 f828 	bl	800024c <__divsi3>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	2100      	movs	r1, #0
 800e200:	4283      	cmp	r3, r0
 800e202:	db0a      	blt.n	800e21a <__s2b+0x32>
 800e204:	0030      	movs	r0, r6
 800e206:	f7ff ff43 	bl	800e090 <_Balloc>
 800e20a:	1e01      	subs	r1, r0, #0
 800e20c:	d108      	bne.n	800e220 <__s2b+0x38>
 800e20e:	0002      	movs	r2, r0
 800e210:	4b19      	ldr	r3, [pc, #100]	; (800e278 <__s2b+0x90>)
 800e212:	481a      	ldr	r0, [pc, #104]	; (800e27c <__s2b+0x94>)
 800e214:	31ce      	adds	r1, #206	; 0xce
 800e216:	f000 fead 	bl	800ef74 <__assert_func>
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	3101      	adds	r1, #1
 800e21e:	e7ef      	b.n	800e200 <__s2b+0x18>
 800e220:	9b08      	ldr	r3, [sp, #32]
 800e222:	6143      	str	r3, [r0, #20]
 800e224:	2301      	movs	r3, #1
 800e226:	6103      	str	r3, [r0, #16]
 800e228:	2d09      	cmp	r5, #9
 800e22a:	dd18      	ble.n	800e25e <__s2b+0x76>
 800e22c:	0023      	movs	r3, r4
 800e22e:	3309      	adds	r3, #9
 800e230:	001f      	movs	r7, r3
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	1964      	adds	r4, r4, r5
 800e236:	783b      	ldrb	r3, [r7, #0]
 800e238:	220a      	movs	r2, #10
 800e23a:	0030      	movs	r0, r6
 800e23c:	3b30      	subs	r3, #48	; 0x30
 800e23e:	f7ff ff8f 	bl	800e160 <__multadd>
 800e242:	3701      	adds	r7, #1
 800e244:	0001      	movs	r1, r0
 800e246:	42a7      	cmp	r7, r4
 800e248:	d1f5      	bne.n	800e236 <__s2b+0x4e>
 800e24a:	002c      	movs	r4, r5
 800e24c:	9b00      	ldr	r3, [sp, #0]
 800e24e:	3c08      	subs	r4, #8
 800e250:	191c      	adds	r4, r3, r4
 800e252:	002f      	movs	r7, r5
 800e254:	9b01      	ldr	r3, [sp, #4]
 800e256:	429f      	cmp	r7, r3
 800e258:	db04      	blt.n	800e264 <__s2b+0x7c>
 800e25a:	0008      	movs	r0, r1
 800e25c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e25e:	2509      	movs	r5, #9
 800e260:	340a      	adds	r4, #10
 800e262:	e7f6      	b.n	800e252 <__s2b+0x6a>
 800e264:	1b63      	subs	r3, r4, r5
 800e266:	5ddb      	ldrb	r3, [r3, r7]
 800e268:	220a      	movs	r2, #10
 800e26a:	0030      	movs	r0, r6
 800e26c:	3b30      	subs	r3, #48	; 0x30
 800e26e:	f7ff ff77 	bl	800e160 <__multadd>
 800e272:	3701      	adds	r7, #1
 800e274:	0001      	movs	r1, r0
 800e276:	e7ed      	b.n	800e254 <__s2b+0x6c>
 800e278:	08010218 	.word	0x08010218
 800e27c:	080102a4 	.word	0x080102a4

0800e280 <__hi0bits>:
 800e280:	0003      	movs	r3, r0
 800e282:	0c02      	lsrs	r2, r0, #16
 800e284:	2000      	movs	r0, #0
 800e286:	4282      	cmp	r2, r0
 800e288:	d101      	bne.n	800e28e <__hi0bits+0xe>
 800e28a:	041b      	lsls	r3, r3, #16
 800e28c:	3010      	adds	r0, #16
 800e28e:	0e1a      	lsrs	r2, r3, #24
 800e290:	d101      	bne.n	800e296 <__hi0bits+0x16>
 800e292:	3008      	adds	r0, #8
 800e294:	021b      	lsls	r3, r3, #8
 800e296:	0f1a      	lsrs	r2, r3, #28
 800e298:	d101      	bne.n	800e29e <__hi0bits+0x1e>
 800e29a:	3004      	adds	r0, #4
 800e29c:	011b      	lsls	r3, r3, #4
 800e29e:	0f9a      	lsrs	r2, r3, #30
 800e2a0:	d101      	bne.n	800e2a6 <__hi0bits+0x26>
 800e2a2:	3002      	adds	r0, #2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	db03      	blt.n	800e2b2 <__hi0bits+0x32>
 800e2aa:	3001      	adds	r0, #1
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	d400      	bmi.n	800e2b2 <__hi0bits+0x32>
 800e2b0:	2020      	movs	r0, #32
 800e2b2:	4770      	bx	lr

0800e2b4 <__lo0bits>:
 800e2b4:	6803      	ldr	r3, [r0, #0]
 800e2b6:	0002      	movs	r2, r0
 800e2b8:	2107      	movs	r1, #7
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	4008      	ands	r0, r1
 800e2be:	420b      	tst	r3, r1
 800e2c0:	d00d      	beq.n	800e2de <__lo0bits+0x2a>
 800e2c2:	3906      	subs	r1, #6
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	420b      	tst	r3, r1
 800e2c8:	d105      	bne.n	800e2d6 <__lo0bits+0x22>
 800e2ca:	3002      	adds	r0, #2
 800e2cc:	4203      	tst	r3, r0
 800e2ce:	d003      	beq.n	800e2d8 <__lo0bits+0x24>
 800e2d0:	40cb      	lsrs	r3, r1
 800e2d2:	0008      	movs	r0, r1
 800e2d4:	6013      	str	r3, [r2, #0]
 800e2d6:	4770      	bx	lr
 800e2d8:	089b      	lsrs	r3, r3, #2
 800e2da:	6013      	str	r3, [r2, #0]
 800e2dc:	e7fb      	b.n	800e2d6 <__lo0bits+0x22>
 800e2de:	b299      	uxth	r1, r3
 800e2e0:	2900      	cmp	r1, #0
 800e2e2:	d101      	bne.n	800e2e8 <__lo0bits+0x34>
 800e2e4:	2010      	movs	r0, #16
 800e2e6:	0c1b      	lsrs	r3, r3, #16
 800e2e8:	b2d9      	uxtb	r1, r3
 800e2ea:	2900      	cmp	r1, #0
 800e2ec:	d101      	bne.n	800e2f2 <__lo0bits+0x3e>
 800e2ee:	3008      	adds	r0, #8
 800e2f0:	0a1b      	lsrs	r3, r3, #8
 800e2f2:	0719      	lsls	r1, r3, #28
 800e2f4:	d101      	bne.n	800e2fa <__lo0bits+0x46>
 800e2f6:	3004      	adds	r0, #4
 800e2f8:	091b      	lsrs	r3, r3, #4
 800e2fa:	0799      	lsls	r1, r3, #30
 800e2fc:	d101      	bne.n	800e302 <__lo0bits+0x4e>
 800e2fe:	3002      	adds	r0, #2
 800e300:	089b      	lsrs	r3, r3, #2
 800e302:	07d9      	lsls	r1, r3, #31
 800e304:	d4e9      	bmi.n	800e2da <__lo0bits+0x26>
 800e306:	3001      	adds	r0, #1
 800e308:	085b      	lsrs	r3, r3, #1
 800e30a:	d1e6      	bne.n	800e2da <__lo0bits+0x26>
 800e30c:	2020      	movs	r0, #32
 800e30e:	e7e2      	b.n	800e2d6 <__lo0bits+0x22>

0800e310 <__i2b>:
 800e310:	b510      	push	{r4, lr}
 800e312:	000c      	movs	r4, r1
 800e314:	2101      	movs	r1, #1
 800e316:	f7ff febb 	bl	800e090 <_Balloc>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d106      	bne.n	800e32c <__i2b+0x1c>
 800e31e:	21a0      	movs	r1, #160	; 0xa0
 800e320:	0002      	movs	r2, r0
 800e322:	4b04      	ldr	r3, [pc, #16]	; (800e334 <__i2b+0x24>)
 800e324:	4804      	ldr	r0, [pc, #16]	; (800e338 <__i2b+0x28>)
 800e326:	0049      	lsls	r1, r1, #1
 800e328:	f000 fe24 	bl	800ef74 <__assert_func>
 800e32c:	2301      	movs	r3, #1
 800e32e:	6144      	str	r4, [r0, #20]
 800e330:	6103      	str	r3, [r0, #16]
 800e332:	bd10      	pop	{r4, pc}
 800e334:	08010218 	.word	0x08010218
 800e338:	080102a4 	.word	0x080102a4

0800e33c <__multiply>:
 800e33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e33e:	690b      	ldr	r3, [r1, #16]
 800e340:	0014      	movs	r4, r2
 800e342:	6912      	ldr	r2, [r2, #16]
 800e344:	000d      	movs	r5, r1
 800e346:	b089      	sub	sp, #36	; 0x24
 800e348:	4293      	cmp	r3, r2
 800e34a:	da01      	bge.n	800e350 <__multiply+0x14>
 800e34c:	0025      	movs	r5, r4
 800e34e:	000c      	movs	r4, r1
 800e350:	692f      	ldr	r7, [r5, #16]
 800e352:	6926      	ldr	r6, [r4, #16]
 800e354:	6869      	ldr	r1, [r5, #4]
 800e356:	19bb      	adds	r3, r7, r6
 800e358:	9302      	str	r3, [sp, #8]
 800e35a:	68ab      	ldr	r3, [r5, #8]
 800e35c:	19ba      	adds	r2, r7, r6
 800e35e:	4293      	cmp	r3, r2
 800e360:	da00      	bge.n	800e364 <__multiply+0x28>
 800e362:	3101      	adds	r1, #1
 800e364:	f7ff fe94 	bl	800e090 <_Balloc>
 800e368:	9001      	str	r0, [sp, #4]
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d106      	bne.n	800e37c <__multiply+0x40>
 800e36e:	215e      	movs	r1, #94	; 0x5e
 800e370:	0002      	movs	r2, r0
 800e372:	4b48      	ldr	r3, [pc, #288]	; (800e494 <__multiply+0x158>)
 800e374:	4848      	ldr	r0, [pc, #288]	; (800e498 <__multiply+0x15c>)
 800e376:	31ff      	adds	r1, #255	; 0xff
 800e378:	f000 fdfc 	bl	800ef74 <__assert_func>
 800e37c:	9b01      	ldr	r3, [sp, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	3314      	adds	r3, #20
 800e382:	469c      	mov	ip, r3
 800e384:	19bb      	adds	r3, r7, r6
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	4463      	add	r3, ip
 800e38a:	9303      	str	r3, [sp, #12]
 800e38c:	4663      	mov	r3, ip
 800e38e:	9903      	ldr	r1, [sp, #12]
 800e390:	428b      	cmp	r3, r1
 800e392:	d32c      	bcc.n	800e3ee <__multiply+0xb2>
 800e394:	002b      	movs	r3, r5
 800e396:	0022      	movs	r2, r4
 800e398:	3314      	adds	r3, #20
 800e39a:	00bf      	lsls	r7, r7, #2
 800e39c:	3214      	adds	r2, #20
 800e39e:	9306      	str	r3, [sp, #24]
 800e3a0:	00b6      	lsls	r6, r6, #2
 800e3a2:	19db      	adds	r3, r3, r7
 800e3a4:	9304      	str	r3, [sp, #16]
 800e3a6:	1993      	adds	r3, r2, r6
 800e3a8:	9307      	str	r3, [sp, #28]
 800e3aa:	2304      	movs	r3, #4
 800e3ac:	9305      	str	r3, [sp, #20]
 800e3ae:	002b      	movs	r3, r5
 800e3b0:	9904      	ldr	r1, [sp, #16]
 800e3b2:	3315      	adds	r3, #21
 800e3b4:	9200      	str	r2, [sp, #0]
 800e3b6:	4299      	cmp	r1, r3
 800e3b8:	d305      	bcc.n	800e3c6 <__multiply+0x8a>
 800e3ba:	1b4b      	subs	r3, r1, r5
 800e3bc:	3b15      	subs	r3, #21
 800e3be:	089b      	lsrs	r3, r3, #2
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	9305      	str	r3, [sp, #20]
 800e3c6:	9b07      	ldr	r3, [sp, #28]
 800e3c8:	9a00      	ldr	r2, [sp, #0]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d311      	bcc.n	800e3f2 <__multiply+0xb6>
 800e3ce:	9b02      	ldr	r3, [sp, #8]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	dd06      	ble.n	800e3e2 <__multiply+0xa6>
 800e3d4:	9b03      	ldr	r3, [sp, #12]
 800e3d6:	3b04      	subs	r3, #4
 800e3d8:	9303      	str	r3, [sp, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d053      	beq.n	800e48a <__multiply+0x14e>
 800e3e2:	9b01      	ldr	r3, [sp, #4]
 800e3e4:	9a02      	ldr	r2, [sp, #8]
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	611a      	str	r2, [r3, #16]
 800e3ea:	b009      	add	sp, #36	; 0x24
 800e3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ee:	c304      	stmia	r3!, {r2}
 800e3f0:	e7cd      	b.n	800e38e <__multiply+0x52>
 800e3f2:	9b00      	ldr	r3, [sp, #0]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	b298      	uxth	r0, r3
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d01b      	beq.n	800e434 <__multiply+0xf8>
 800e3fc:	4667      	mov	r7, ip
 800e3fe:	2400      	movs	r4, #0
 800e400:	9e06      	ldr	r6, [sp, #24]
 800e402:	ce02      	ldmia	r6!, {r1}
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	b28b      	uxth	r3, r1
 800e408:	4343      	muls	r3, r0
 800e40a:	b292      	uxth	r2, r2
 800e40c:	189b      	adds	r3, r3, r2
 800e40e:	191b      	adds	r3, r3, r4
 800e410:	0c0c      	lsrs	r4, r1, #16
 800e412:	4344      	muls	r4, r0
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	0c11      	lsrs	r1, r2, #16
 800e418:	1861      	adds	r1, r4, r1
 800e41a:	0c1c      	lsrs	r4, r3, #16
 800e41c:	1909      	adds	r1, r1, r4
 800e41e:	0c0c      	lsrs	r4, r1, #16
 800e420:	b29b      	uxth	r3, r3
 800e422:	0409      	lsls	r1, r1, #16
 800e424:	430b      	orrs	r3, r1
 800e426:	c708      	stmia	r7!, {r3}
 800e428:	9b04      	ldr	r3, [sp, #16]
 800e42a:	42b3      	cmp	r3, r6
 800e42c:	d8e9      	bhi.n	800e402 <__multiply+0xc6>
 800e42e:	4663      	mov	r3, ip
 800e430:	9a05      	ldr	r2, [sp, #20]
 800e432:	509c      	str	r4, [r3, r2]
 800e434:	9b00      	ldr	r3, [sp, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	0c1e      	lsrs	r6, r3, #16
 800e43a:	d020      	beq.n	800e47e <__multiply+0x142>
 800e43c:	4663      	mov	r3, ip
 800e43e:	002c      	movs	r4, r5
 800e440:	4660      	mov	r0, ip
 800e442:	2700      	movs	r7, #0
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	3414      	adds	r4, #20
 800e448:	6822      	ldr	r2, [r4, #0]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	b291      	uxth	r1, r2
 800e44e:	4371      	muls	r1, r6
 800e450:	6802      	ldr	r2, [r0, #0]
 800e452:	0c12      	lsrs	r2, r2, #16
 800e454:	1889      	adds	r1, r1, r2
 800e456:	19cf      	adds	r7, r1, r7
 800e458:	0439      	lsls	r1, r7, #16
 800e45a:	430b      	orrs	r3, r1
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	cc02      	ldmia	r4!, {r1}
 800e460:	6843      	ldr	r3, [r0, #4]
 800e462:	0c09      	lsrs	r1, r1, #16
 800e464:	4371      	muls	r1, r6
 800e466:	b29b      	uxth	r3, r3
 800e468:	0c3f      	lsrs	r7, r7, #16
 800e46a:	18cb      	adds	r3, r1, r3
 800e46c:	9a04      	ldr	r2, [sp, #16]
 800e46e:	19db      	adds	r3, r3, r7
 800e470:	0c1f      	lsrs	r7, r3, #16
 800e472:	3004      	adds	r0, #4
 800e474:	42a2      	cmp	r2, r4
 800e476:	d8e7      	bhi.n	800e448 <__multiply+0x10c>
 800e478:	4662      	mov	r2, ip
 800e47a:	9905      	ldr	r1, [sp, #20]
 800e47c:	5053      	str	r3, [r2, r1]
 800e47e:	9b00      	ldr	r3, [sp, #0]
 800e480:	3304      	adds	r3, #4
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	2304      	movs	r3, #4
 800e486:	449c      	add	ip, r3
 800e488:	e79d      	b.n	800e3c6 <__multiply+0x8a>
 800e48a:	9b02      	ldr	r3, [sp, #8]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	9302      	str	r3, [sp, #8]
 800e490:	e79d      	b.n	800e3ce <__multiply+0x92>
 800e492:	46c0      	nop			; (mov r8, r8)
 800e494:	08010218 	.word	0x08010218
 800e498:	080102a4 	.word	0x080102a4

0800e49c <__pow5mult>:
 800e49c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e49e:	2303      	movs	r3, #3
 800e4a0:	0015      	movs	r5, r2
 800e4a2:	0007      	movs	r7, r0
 800e4a4:	000e      	movs	r6, r1
 800e4a6:	401a      	ands	r2, r3
 800e4a8:	421d      	tst	r5, r3
 800e4aa:	d008      	beq.n	800e4be <__pow5mult+0x22>
 800e4ac:	4925      	ldr	r1, [pc, #148]	; (800e544 <__pow5mult+0xa8>)
 800e4ae:	3a01      	subs	r2, #1
 800e4b0:	0092      	lsls	r2, r2, #2
 800e4b2:	5852      	ldr	r2, [r2, r1]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	0031      	movs	r1, r6
 800e4b8:	f7ff fe52 	bl	800e160 <__multadd>
 800e4bc:	0006      	movs	r6, r0
 800e4be:	10ad      	asrs	r5, r5, #2
 800e4c0:	d03d      	beq.n	800e53e <__pow5mult+0xa2>
 800e4c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e4c4:	2c00      	cmp	r4, #0
 800e4c6:	d10f      	bne.n	800e4e8 <__pow5mult+0x4c>
 800e4c8:	2010      	movs	r0, #16
 800e4ca:	f7ff fdb9 	bl	800e040 <malloc>
 800e4ce:	1e02      	subs	r2, r0, #0
 800e4d0:	6278      	str	r0, [r7, #36]	; 0x24
 800e4d2:	d105      	bne.n	800e4e0 <__pow5mult+0x44>
 800e4d4:	21d7      	movs	r1, #215	; 0xd7
 800e4d6:	4b1c      	ldr	r3, [pc, #112]	; (800e548 <__pow5mult+0xac>)
 800e4d8:	481c      	ldr	r0, [pc, #112]	; (800e54c <__pow5mult+0xb0>)
 800e4da:	0049      	lsls	r1, r1, #1
 800e4dc:	f000 fd4a 	bl	800ef74 <__assert_func>
 800e4e0:	6044      	str	r4, [r0, #4]
 800e4e2:	6084      	str	r4, [r0, #8]
 800e4e4:	6004      	str	r4, [r0, #0]
 800e4e6:	60c4      	str	r4, [r0, #12]
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	689c      	ldr	r4, [r3, #8]
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	2c00      	cmp	r4, #0
 800e4f0:	d108      	bne.n	800e504 <__pow5mult+0x68>
 800e4f2:	0038      	movs	r0, r7
 800e4f4:	4916      	ldr	r1, [pc, #88]	; (800e550 <__pow5mult+0xb4>)
 800e4f6:	f7ff ff0b 	bl	800e310 <__i2b>
 800e4fa:	9b01      	ldr	r3, [sp, #4]
 800e4fc:	0004      	movs	r4, r0
 800e4fe:	6098      	str	r0, [r3, #8]
 800e500:	2300      	movs	r3, #0
 800e502:	6003      	str	r3, [r0, #0]
 800e504:	2301      	movs	r3, #1
 800e506:	421d      	tst	r5, r3
 800e508:	d00a      	beq.n	800e520 <__pow5mult+0x84>
 800e50a:	0031      	movs	r1, r6
 800e50c:	0022      	movs	r2, r4
 800e50e:	0038      	movs	r0, r7
 800e510:	f7ff ff14 	bl	800e33c <__multiply>
 800e514:	0031      	movs	r1, r6
 800e516:	9001      	str	r0, [sp, #4]
 800e518:	0038      	movs	r0, r7
 800e51a:	f7ff fdfd 	bl	800e118 <_Bfree>
 800e51e:	9e01      	ldr	r6, [sp, #4]
 800e520:	106d      	asrs	r5, r5, #1
 800e522:	d00c      	beq.n	800e53e <__pow5mult+0xa2>
 800e524:	6820      	ldr	r0, [r4, #0]
 800e526:	2800      	cmp	r0, #0
 800e528:	d107      	bne.n	800e53a <__pow5mult+0x9e>
 800e52a:	0022      	movs	r2, r4
 800e52c:	0021      	movs	r1, r4
 800e52e:	0038      	movs	r0, r7
 800e530:	f7ff ff04 	bl	800e33c <__multiply>
 800e534:	2300      	movs	r3, #0
 800e536:	6020      	str	r0, [r4, #0]
 800e538:	6003      	str	r3, [r0, #0]
 800e53a:	0004      	movs	r4, r0
 800e53c:	e7e2      	b.n	800e504 <__pow5mult+0x68>
 800e53e:	0030      	movs	r0, r6
 800e540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e542:	46c0      	nop			; (mov r8, r8)
 800e544:	080103f0 	.word	0x080103f0
 800e548:	080101a6 	.word	0x080101a6
 800e54c:	080102a4 	.word	0x080102a4
 800e550:	00000271 	.word	0x00000271

0800e554 <__lshift>:
 800e554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e556:	000c      	movs	r4, r1
 800e558:	0017      	movs	r7, r2
 800e55a:	6923      	ldr	r3, [r4, #16]
 800e55c:	1155      	asrs	r5, r2, #5
 800e55e:	b087      	sub	sp, #28
 800e560:	18eb      	adds	r3, r5, r3
 800e562:	9302      	str	r3, [sp, #8]
 800e564:	3301      	adds	r3, #1
 800e566:	9301      	str	r3, [sp, #4]
 800e568:	6849      	ldr	r1, [r1, #4]
 800e56a:	68a3      	ldr	r3, [r4, #8]
 800e56c:	9004      	str	r0, [sp, #16]
 800e56e:	9a01      	ldr	r2, [sp, #4]
 800e570:	4293      	cmp	r3, r2
 800e572:	db10      	blt.n	800e596 <__lshift+0x42>
 800e574:	9804      	ldr	r0, [sp, #16]
 800e576:	f7ff fd8b 	bl	800e090 <_Balloc>
 800e57a:	2300      	movs	r3, #0
 800e57c:	0002      	movs	r2, r0
 800e57e:	0006      	movs	r6, r0
 800e580:	0019      	movs	r1, r3
 800e582:	3214      	adds	r2, #20
 800e584:	4298      	cmp	r0, r3
 800e586:	d10c      	bne.n	800e5a2 <__lshift+0x4e>
 800e588:	21da      	movs	r1, #218	; 0xda
 800e58a:	0002      	movs	r2, r0
 800e58c:	4b26      	ldr	r3, [pc, #152]	; (800e628 <__lshift+0xd4>)
 800e58e:	4827      	ldr	r0, [pc, #156]	; (800e62c <__lshift+0xd8>)
 800e590:	31ff      	adds	r1, #255	; 0xff
 800e592:	f000 fcef 	bl	800ef74 <__assert_func>
 800e596:	3101      	adds	r1, #1
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	e7e8      	b.n	800e56e <__lshift+0x1a>
 800e59c:	0098      	lsls	r0, r3, #2
 800e59e:	5011      	str	r1, [r2, r0]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	42ab      	cmp	r3, r5
 800e5a4:	dbfa      	blt.n	800e59c <__lshift+0x48>
 800e5a6:	43eb      	mvns	r3, r5
 800e5a8:	17db      	asrs	r3, r3, #31
 800e5aa:	401d      	ands	r5, r3
 800e5ac:	211f      	movs	r1, #31
 800e5ae:	0023      	movs	r3, r4
 800e5b0:	0038      	movs	r0, r7
 800e5b2:	00ad      	lsls	r5, r5, #2
 800e5b4:	1955      	adds	r5, r2, r5
 800e5b6:	6922      	ldr	r2, [r4, #16]
 800e5b8:	3314      	adds	r3, #20
 800e5ba:	0092      	lsls	r2, r2, #2
 800e5bc:	4008      	ands	r0, r1
 800e5be:	4684      	mov	ip, r0
 800e5c0:	189a      	adds	r2, r3, r2
 800e5c2:	420f      	tst	r7, r1
 800e5c4:	d02a      	beq.n	800e61c <__lshift+0xc8>
 800e5c6:	3101      	adds	r1, #1
 800e5c8:	1a09      	subs	r1, r1, r0
 800e5ca:	9105      	str	r1, [sp, #20]
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	9503      	str	r5, [sp, #12]
 800e5d0:	4667      	mov	r7, ip
 800e5d2:	6818      	ldr	r0, [r3, #0]
 800e5d4:	40b8      	lsls	r0, r7
 800e5d6:	4301      	orrs	r1, r0
 800e5d8:	9803      	ldr	r0, [sp, #12]
 800e5da:	c002      	stmia	r0!, {r1}
 800e5dc:	cb02      	ldmia	r3!, {r1}
 800e5de:	9003      	str	r0, [sp, #12]
 800e5e0:	9805      	ldr	r0, [sp, #20]
 800e5e2:	40c1      	lsrs	r1, r0
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d8f3      	bhi.n	800e5d0 <__lshift+0x7c>
 800e5e8:	0020      	movs	r0, r4
 800e5ea:	3015      	adds	r0, #21
 800e5ec:	2304      	movs	r3, #4
 800e5ee:	4282      	cmp	r2, r0
 800e5f0:	d304      	bcc.n	800e5fc <__lshift+0xa8>
 800e5f2:	1b13      	subs	r3, r2, r4
 800e5f4:	3b15      	subs	r3, #21
 800e5f6:	089b      	lsrs	r3, r3, #2
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	50e9      	str	r1, [r5, r3]
 800e5fe:	2900      	cmp	r1, #0
 800e600:	d002      	beq.n	800e608 <__lshift+0xb4>
 800e602:	9b02      	ldr	r3, [sp, #8]
 800e604:	3302      	adds	r3, #2
 800e606:	9301      	str	r3, [sp, #4]
 800e608:	9b01      	ldr	r3, [sp, #4]
 800e60a:	9804      	ldr	r0, [sp, #16]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	0021      	movs	r1, r4
 800e610:	6133      	str	r3, [r6, #16]
 800e612:	f7ff fd81 	bl	800e118 <_Bfree>
 800e616:	0030      	movs	r0, r6
 800e618:	b007      	add	sp, #28
 800e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e61c:	cb02      	ldmia	r3!, {r1}
 800e61e:	c502      	stmia	r5!, {r1}
 800e620:	429a      	cmp	r2, r3
 800e622:	d8fb      	bhi.n	800e61c <__lshift+0xc8>
 800e624:	e7f0      	b.n	800e608 <__lshift+0xb4>
 800e626:	46c0      	nop			; (mov r8, r8)
 800e628:	08010218 	.word	0x08010218
 800e62c:	080102a4 	.word	0x080102a4

0800e630 <__mcmp>:
 800e630:	6902      	ldr	r2, [r0, #16]
 800e632:	690b      	ldr	r3, [r1, #16]
 800e634:	b530      	push	{r4, r5, lr}
 800e636:	0004      	movs	r4, r0
 800e638:	1ad0      	subs	r0, r2, r3
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d10d      	bne.n	800e65a <__mcmp+0x2a>
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	3414      	adds	r4, #20
 800e642:	3114      	adds	r1, #20
 800e644:	18e2      	adds	r2, r4, r3
 800e646:	18c9      	adds	r1, r1, r3
 800e648:	3a04      	subs	r2, #4
 800e64a:	3904      	subs	r1, #4
 800e64c:	6815      	ldr	r5, [r2, #0]
 800e64e:	680b      	ldr	r3, [r1, #0]
 800e650:	429d      	cmp	r5, r3
 800e652:	d003      	beq.n	800e65c <__mcmp+0x2c>
 800e654:	2001      	movs	r0, #1
 800e656:	429d      	cmp	r5, r3
 800e658:	d303      	bcc.n	800e662 <__mcmp+0x32>
 800e65a:	bd30      	pop	{r4, r5, pc}
 800e65c:	4294      	cmp	r4, r2
 800e65e:	d3f3      	bcc.n	800e648 <__mcmp+0x18>
 800e660:	e7fb      	b.n	800e65a <__mcmp+0x2a>
 800e662:	4240      	negs	r0, r0
 800e664:	e7f9      	b.n	800e65a <__mcmp+0x2a>
	...

0800e668 <__mdiff>:
 800e668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e66a:	000e      	movs	r6, r1
 800e66c:	0007      	movs	r7, r0
 800e66e:	0011      	movs	r1, r2
 800e670:	0030      	movs	r0, r6
 800e672:	b087      	sub	sp, #28
 800e674:	0014      	movs	r4, r2
 800e676:	f7ff ffdb 	bl	800e630 <__mcmp>
 800e67a:	1e05      	subs	r5, r0, #0
 800e67c:	d110      	bne.n	800e6a0 <__mdiff+0x38>
 800e67e:	0001      	movs	r1, r0
 800e680:	0038      	movs	r0, r7
 800e682:	f7ff fd05 	bl	800e090 <_Balloc>
 800e686:	1e02      	subs	r2, r0, #0
 800e688:	d104      	bne.n	800e694 <__mdiff+0x2c>
 800e68a:	4b40      	ldr	r3, [pc, #256]	; (800e78c <__mdiff+0x124>)
 800e68c:	4940      	ldr	r1, [pc, #256]	; (800e790 <__mdiff+0x128>)
 800e68e:	4841      	ldr	r0, [pc, #260]	; (800e794 <__mdiff+0x12c>)
 800e690:	f000 fc70 	bl	800ef74 <__assert_func>
 800e694:	2301      	movs	r3, #1
 800e696:	6145      	str	r5, [r0, #20]
 800e698:	6103      	str	r3, [r0, #16]
 800e69a:	0010      	movs	r0, r2
 800e69c:	b007      	add	sp, #28
 800e69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	9301      	str	r3, [sp, #4]
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	db04      	blt.n	800e6b2 <__mdiff+0x4a>
 800e6a8:	0023      	movs	r3, r4
 800e6aa:	0034      	movs	r4, r6
 800e6ac:	001e      	movs	r6, r3
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	9301      	str	r3, [sp, #4]
 800e6b2:	0038      	movs	r0, r7
 800e6b4:	6861      	ldr	r1, [r4, #4]
 800e6b6:	f7ff fceb 	bl	800e090 <_Balloc>
 800e6ba:	1e02      	subs	r2, r0, #0
 800e6bc:	d103      	bne.n	800e6c6 <__mdiff+0x5e>
 800e6be:	2190      	movs	r1, #144	; 0x90
 800e6c0:	4b32      	ldr	r3, [pc, #200]	; (800e78c <__mdiff+0x124>)
 800e6c2:	0089      	lsls	r1, r1, #2
 800e6c4:	e7e3      	b.n	800e68e <__mdiff+0x26>
 800e6c6:	9b01      	ldr	r3, [sp, #4]
 800e6c8:	2700      	movs	r7, #0
 800e6ca:	60c3      	str	r3, [r0, #12]
 800e6cc:	6920      	ldr	r0, [r4, #16]
 800e6ce:	3414      	adds	r4, #20
 800e6d0:	9401      	str	r4, [sp, #4]
 800e6d2:	9b01      	ldr	r3, [sp, #4]
 800e6d4:	0084      	lsls	r4, r0, #2
 800e6d6:	191b      	adds	r3, r3, r4
 800e6d8:	0034      	movs	r4, r6
 800e6da:	9302      	str	r3, [sp, #8]
 800e6dc:	6933      	ldr	r3, [r6, #16]
 800e6de:	3414      	adds	r4, #20
 800e6e0:	0099      	lsls	r1, r3, #2
 800e6e2:	1863      	adds	r3, r4, r1
 800e6e4:	9303      	str	r3, [sp, #12]
 800e6e6:	0013      	movs	r3, r2
 800e6e8:	3314      	adds	r3, #20
 800e6ea:	469c      	mov	ip, r3
 800e6ec:	9305      	str	r3, [sp, #20]
 800e6ee:	9b01      	ldr	r3, [sp, #4]
 800e6f0:	9304      	str	r3, [sp, #16]
 800e6f2:	9b04      	ldr	r3, [sp, #16]
 800e6f4:	cc02      	ldmia	r4!, {r1}
 800e6f6:	cb20      	ldmia	r3!, {r5}
 800e6f8:	9304      	str	r3, [sp, #16]
 800e6fa:	b2ab      	uxth	r3, r5
 800e6fc:	19df      	adds	r7, r3, r7
 800e6fe:	b28b      	uxth	r3, r1
 800e700:	1afb      	subs	r3, r7, r3
 800e702:	0c09      	lsrs	r1, r1, #16
 800e704:	0c2d      	lsrs	r5, r5, #16
 800e706:	1a6d      	subs	r5, r5, r1
 800e708:	1419      	asrs	r1, r3, #16
 800e70a:	186d      	adds	r5, r5, r1
 800e70c:	4661      	mov	r1, ip
 800e70e:	142f      	asrs	r7, r5, #16
 800e710:	b29b      	uxth	r3, r3
 800e712:	042d      	lsls	r5, r5, #16
 800e714:	432b      	orrs	r3, r5
 800e716:	c108      	stmia	r1!, {r3}
 800e718:	9b03      	ldr	r3, [sp, #12]
 800e71a:	468c      	mov	ip, r1
 800e71c:	42a3      	cmp	r3, r4
 800e71e:	d8e8      	bhi.n	800e6f2 <__mdiff+0x8a>
 800e720:	0031      	movs	r1, r6
 800e722:	9c03      	ldr	r4, [sp, #12]
 800e724:	3115      	adds	r1, #21
 800e726:	2304      	movs	r3, #4
 800e728:	428c      	cmp	r4, r1
 800e72a:	d304      	bcc.n	800e736 <__mdiff+0xce>
 800e72c:	1ba3      	subs	r3, r4, r6
 800e72e:	3b15      	subs	r3, #21
 800e730:	089b      	lsrs	r3, r3, #2
 800e732:	3301      	adds	r3, #1
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	9901      	ldr	r1, [sp, #4]
 800e738:	18cc      	adds	r4, r1, r3
 800e73a:	9905      	ldr	r1, [sp, #20]
 800e73c:	0026      	movs	r6, r4
 800e73e:	18cb      	adds	r3, r1, r3
 800e740:	469c      	mov	ip, r3
 800e742:	9902      	ldr	r1, [sp, #8]
 800e744:	428e      	cmp	r6, r1
 800e746:	d310      	bcc.n	800e76a <__mdiff+0x102>
 800e748:	9e02      	ldr	r6, [sp, #8]
 800e74a:	1ee1      	subs	r1, r4, #3
 800e74c:	2500      	movs	r5, #0
 800e74e:	428e      	cmp	r6, r1
 800e750:	d304      	bcc.n	800e75c <__mdiff+0xf4>
 800e752:	0031      	movs	r1, r6
 800e754:	3103      	adds	r1, #3
 800e756:	1b0c      	subs	r4, r1, r4
 800e758:	08a4      	lsrs	r4, r4, #2
 800e75a:	00a5      	lsls	r5, r4, #2
 800e75c:	195b      	adds	r3, r3, r5
 800e75e:	3b04      	subs	r3, #4
 800e760:	6819      	ldr	r1, [r3, #0]
 800e762:	2900      	cmp	r1, #0
 800e764:	d00f      	beq.n	800e786 <__mdiff+0x11e>
 800e766:	6110      	str	r0, [r2, #16]
 800e768:	e797      	b.n	800e69a <__mdiff+0x32>
 800e76a:	ce02      	ldmia	r6!, {r1}
 800e76c:	b28d      	uxth	r5, r1
 800e76e:	19ed      	adds	r5, r5, r7
 800e770:	0c0f      	lsrs	r7, r1, #16
 800e772:	1429      	asrs	r1, r5, #16
 800e774:	1879      	adds	r1, r7, r1
 800e776:	140f      	asrs	r7, r1, #16
 800e778:	b2ad      	uxth	r5, r5
 800e77a:	0409      	lsls	r1, r1, #16
 800e77c:	430d      	orrs	r5, r1
 800e77e:	4661      	mov	r1, ip
 800e780:	c120      	stmia	r1!, {r5}
 800e782:	468c      	mov	ip, r1
 800e784:	e7dd      	b.n	800e742 <__mdiff+0xda>
 800e786:	3801      	subs	r0, #1
 800e788:	e7e9      	b.n	800e75e <__mdiff+0xf6>
 800e78a:	46c0      	nop			; (mov r8, r8)
 800e78c:	08010218 	.word	0x08010218
 800e790:	00000232 	.word	0x00000232
 800e794:	080102a4 	.word	0x080102a4

0800e798 <__ulp>:
 800e798:	4b0f      	ldr	r3, [pc, #60]	; (800e7d8 <__ulp+0x40>)
 800e79a:	4019      	ands	r1, r3
 800e79c:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <__ulp+0x44>)
 800e79e:	18c9      	adds	r1, r1, r3
 800e7a0:	2900      	cmp	r1, #0
 800e7a2:	dd04      	ble.n	800e7ae <__ulp+0x16>
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	000b      	movs	r3, r1
 800e7a8:	0010      	movs	r0, r2
 800e7aa:	0019      	movs	r1, r3
 800e7ac:	4770      	bx	lr
 800e7ae:	4249      	negs	r1, r1
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	1509      	asrs	r1, r1, #20
 800e7b6:	2913      	cmp	r1, #19
 800e7b8:	dc04      	bgt.n	800e7c4 <__ulp+0x2c>
 800e7ba:	2080      	movs	r0, #128	; 0x80
 800e7bc:	0300      	lsls	r0, r0, #12
 800e7be:	4108      	asrs	r0, r1
 800e7c0:	0003      	movs	r3, r0
 800e7c2:	e7f1      	b.n	800e7a8 <__ulp+0x10>
 800e7c4:	3914      	subs	r1, #20
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	291e      	cmp	r1, #30
 800e7ca:	dc02      	bgt.n	800e7d2 <__ulp+0x3a>
 800e7cc:	2080      	movs	r0, #128	; 0x80
 800e7ce:	0600      	lsls	r0, r0, #24
 800e7d0:	40c8      	lsrs	r0, r1
 800e7d2:	0002      	movs	r2, r0
 800e7d4:	e7e8      	b.n	800e7a8 <__ulp+0x10>
 800e7d6:	46c0      	nop			; (mov r8, r8)
 800e7d8:	7ff00000 	.word	0x7ff00000
 800e7dc:	fcc00000 	.word	0xfcc00000

0800e7e0 <__b2d>:
 800e7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7e2:	0006      	movs	r6, r0
 800e7e4:	6903      	ldr	r3, [r0, #16]
 800e7e6:	3614      	adds	r6, #20
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	18f3      	adds	r3, r6, r3
 800e7ec:	1f1d      	subs	r5, r3, #4
 800e7ee:	682c      	ldr	r4, [r5, #0]
 800e7f0:	000f      	movs	r7, r1
 800e7f2:	0020      	movs	r0, r4
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	f7ff fd43 	bl	800e280 <__hi0bits>
 800e7fa:	2320      	movs	r3, #32
 800e7fc:	1a1b      	subs	r3, r3, r0
 800e7fe:	491f      	ldr	r1, [pc, #124]	; (800e87c <__b2d+0x9c>)
 800e800:	603b      	str	r3, [r7, #0]
 800e802:	280a      	cmp	r0, #10
 800e804:	dc16      	bgt.n	800e834 <__b2d+0x54>
 800e806:	230b      	movs	r3, #11
 800e808:	0027      	movs	r7, r4
 800e80a:	1a1b      	subs	r3, r3, r0
 800e80c:	40df      	lsrs	r7, r3
 800e80e:	4339      	orrs	r1, r7
 800e810:	469c      	mov	ip, r3
 800e812:	000b      	movs	r3, r1
 800e814:	2100      	movs	r1, #0
 800e816:	42ae      	cmp	r6, r5
 800e818:	d202      	bcs.n	800e820 <__b2d+0x40>
 800e81a:	9901      	ldr	r1, [sp, #4]
 800e81c:	3908      	subs	r1, #8
 800e81e:	6809      	ldr	r1, [r1, #0]
 800e820:	3015      	adds	r0, #21
 800e822:	4084      	lsls	r4, r0
 800e824:	4660      	mov	r0, ip
 800e826:	40c1      	lsrs	r1, r0
 800e828:	430c      	orrs	r4, r1
 800e82a:	0022      	movs	r2, r4
 800e82c:	0010      	movs	r0, r2
 800e82e:	0019      	movs	r1, r3
 800e830:	b003      	add	sp, #12
 800e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e834:	2700      	movs	r7, #0
 800e836:	42ae      	cmp	r6, r5
 800e838:	d202      	bcs.n	800e840 <__b2d+0x60>
 800e83a:	9d01      	ldr	r5, [sp, #4]
 800e83c:	3d08      	subs	r5, #8
 800e83e:	682f      	ldr	r7, [r5, #0]
 800e840:	230b      	movs	r3, #11
 800e842:	425b      	negs	r3, r3
 800e844:	469c      	mov	ip, r3
 800e846:	4484      	add	ip, r0
 800e848:	280b      	cmp	r0, #11
 800e84a:	d013      	beq.n	800e874 <__b2d+0x94>
 800e84c:	4663      	mov	r3, ip
 800e84e:	2020      	movs	r0, #32
 800e850:	409c      	lsls	r4, r3
 800e852:	1ac0      	subs	r0, r0, r3
 800e854:	003b      	movs	r3, r7
 800e856:	40c3      	lsrs	r3, r0
 800e858:	431c      	orrs	r4, r3
 800e85a:	4321      	orrs	r1, r4
 800e85c:	000b      	movs	r3, r1
 800e85e:	2100      	movs	r1, #0
 800e860:	42b5      	cmp	r5, r6
 800e862:	d901      	bls.n	800e868 <__b2d+0x88>
 800e864:	3d04      	subs	r5, #4
 800e866:	6829      	ldr	r1, [r5, #0]
 800e868:	4664      	mov	r4, ip
 800e86a:	40c1      	lsrs	r1, r0
 800e86c:	40a7      	lsls	r7, r4
 800e86e:	430f      	orrs	r7, r1
 800e870:	003a      	movs	r2, r7
 800e872:	e7db      	b.n	800e82c <__b2d+0x4c>
 800e874:	4321      	orrs	r1, r4
 800e876:	000b      	movs	r3, r1
 800e878:	e7fa      	b.n	800e870 <__b2d+0x90>
 800e87a:	46c0      	nop			; (mov r8, r8)
 800e87c:	3ff00000 	.word	0x3ff00000

0800e880 <__d2b>:
 800e880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e882:	2101      	movs	r1, #1
 800e884:	0014      	movs	r4, r2
 800e886:	001e      	movs	r6, r3
 800e888:	9f08      	ldr	r7, [sp, #32]
 800e88a:	f7ff fc01 	bl	800e090 <_Balloc>
 800e88e:	1e05      	subs	r5, r0, #0
 800e890:	d105      	bne.n	800e89e <__d2b+0x1e>
 800e892:	0002      	movs	r2, r0
 800e894:	4b26      	ldr	r3, [pc, #152]	; (800e930 <__d2b+0xb0>)
 800e896:	4927      	ldr	r1, [pc, #156]	; (800e934 <__d2b+0xb4>)
 800e898:	4827      	ldr	r0, [pc, #156]	; (800e938 <__d2b+0xb8>)
 800e89a:	f000 fb6b 	bl	800ef74 <__assert_func>
 800e89e:	0333      	lsls	r3, r6, #12
 800e8a0:	0076      	lsls	r6, r6, #1
 800e8a2:	0b1b      	lsrs	r3, r3, #12
 800e8a4:	0d76      	lsrs	r6, r6, #21
 800e8a6:	d124      	bne.n	800e8f2 <__d2b+0x72>
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	2c00      	cmp	r4, #0
 800e8ac:	d027      	beq.n	800e8fe <__d2b+0x7e>
 800e8ae:	4668      	mov	r0, sp
 800e8b0:	9400      	str	r4, [sp, #0]
 800e8b2:	f7ff fcff 	bl	800e2b4 <__lo0bits>
 800e8b6:	9c00      	ldr	r4, [sp, #0]
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d01e      	beq.n	800e8fa <__d2b+0x7a>
 800e8bc:	9b01      	ldr	r3, [sp, #4]
 800e8be:	2120      	movs	r1, #32
 800e8c0:	001a      	movs	r2, r3
 800e8c2:	1a09      	subs	r1, r1, r0
 800e8c4:	408a      	lsls	r2, r1
 800e8c6:	40c3      	lsrs	r3, r0
 800e8c8:	4322      	orrs	r2, r4
 800e8ca:	616a      	str	r2, [r5, #20]
 800e8cc:	9301      	str	r3, [sp, #4]
 800e8ce:	9c01      	ldr	r4, [sp, #4]
 800e8d0:	61ac      	str	r4, [r5, #24]
 800e8d2:	1e63      	subs	r3, r4, #1
 800e8d4:	419c      	sbcs	r4, r3
 800e8d6:	3401      	adds	r4, #1
 800e8d8:	612c      	str	r4, [r5, #16]
 800e8da:	2e00      	cmp	r6, #0
 800e8dc:	d018      	beq.n	800e910 <__d2b+0x90>
 800e8de:	4b17      	ldr	r3, [pc, #92]	; (800e93c <__d2b+0xbc>)
 800e8e0:	18f6      	adds	r6, r6, r3
 800e8e2:	2335      	movs	r3, #53	; 0x35
 800e8e4:	1836      	adds	r6, r6, r0
 800e8e6:	1a18      	subs	r0, r3, r0
 800e8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ea:	603e      	str	r6, [r7, #0]
 800e8ec:	6018      	str	r0, [r3, #0]
 800e8ee:	0028      	movs	r0, r5
 800e8f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e8f2:	2280      	movs	r2, #128	; 0x80
 800e8f4:	0352      	lsls	r2, r2, #13
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	e7d6      	b.n	800e8a8 <__d2b+0x28>
 800e8fa:	616c      	str	r4, [r5, #20]
 800e8fc:	e7e7      	b.n	800e8ce <__d2b+0x4e>
 800e8fe:	a801      	add	r0, sp, #4
 800e900:	f7ff fcd8 	bl	800e2b4 <__lo0bits>
 800e904:	2401      	movs	r4, #1
 800e906:	9b01      	ldr	r3, [sp, #4]
 800e908:	612c      	str	r4, [r5, #16]
 800e90a:	616b      	str	r3, [r5, #20]
 800e90c:	3020      	adds	r0, #32
 800e90e:	e7e4      	b.n	800e8da <__d2b+0x5a>
 800e910:	4b0b      	ldr	r3, [pc, #44]	; (800e940 <__d2b+0xc0>)
 800e912:	18c0      	adds	r0, r0, r3
 800e914:	4b0b      	ldr	r3, [pc, #44]	; (800e944 <__d2b+0xc4>)
 800e916:	6038      	str	r0, [r7, #0]
 800e918:	18e3      	adds	r3, r4, r3
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	18eb      	adds	r3, r5, r3
 800e91e:	6958      	ldr	r0, [r3, #20]
 800e920:	f7ff fcae 	bl	800e280 <__hi0bits>
 800e924:	0164      	lsls	r4, r4, #5
 800e926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e928:	1a24      	subs	r4, r4, r0
 800e92a:	601c      	str	r4, [r3, #0]
 800e92c:	e7df      	b.n	800e8ee <__d2b+0x6e>
 800e92e:	46c0      	nop			; (mov r8, r8)
 800e930:	08010218 	.word	0x08010218
 800e934:	0000030a 	.word	0x0000030a
 800e938:	080102a4 	.word	0x080102a4
 800e93c:	fffffbcd 	.word	0xfffffbcd
 800e940:	fffffbce 	.word	0xfffffbce
 800e944:	3fffffff 	.word	0x3fffffff

0800e948 <__ratio>:
 800e948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e94a:	b087      	sub	sp, #28
 800e94c:	000f      	movs	r7, r1
 800e94e:	a904      	add	r1, sp, #16
 800e950:	0006      	movs	r6, r0
 800e952:	f7ff ff45 	bl	800e7e0 <__b2d>
 800e956:	9000      	str	r0, [sp, #0]
 800e958:	9101      	str	r1, [sp, #4]
 800e95a:	9c00      	ldr	r4, [sp, #0]
 800e95c:	9d01      	ldr	r5, [sp, #4]
 800e95e:	0038      	movs	r0, r7
 800e960:	a905      	add	r1, sp, #20
 800e962:	f7ff ff3d 	bl	800e7e0 <__b2d>
 800e966:	9002      	str	r0, [sp, #8]
 800e968:	9103      	str	r1, [sp, #12]
 800e96a:	9a02      	ldr	r2, [sp, #8]
 800e96c:	9b03      	ldr	r3, [sp, #12]
 800e96e:	6931      	ldr	r1, [r6, #16]
 800e970:	6938      	ldr	r0, [r7, #16]
 800e972:	9e05      	ldr	r6, [sp, #20]
 800e974:	1a08      	subs	r0, r1, r0
 800e976:	9904      	ldr	r1, [sp, #16]
 800e978:	0140      	lsls	r0, r0, #5
 800e97a:	1b89      	subs	r1, r1, r6
 800e97c:	1841      	adds	r1, r0, r1
 800e97e:	0508      	lsls	r0, r1, #20
 800e980:	2900      	cmp	r1, #0
 800e982:	dd07      	ble.n	800e994 <__ratio+0x4c>
 800e984:	9901      	ldr	r1, [sp, #4]
 800e986:	1845      	adds	r5, r0, r1
 800e988:	0020      	movs	r0, r4
 800e98a:	0029      	movs	r1, r5
 800e98c:	f7f3 f838 	bl	8001a00 <__aeabi_ddiv>
 800e990:	b007      	add	sp, #28
 800e992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e994:	9903      	ldr	r1, [sp, #12]
 800e996:	1a0b      	subs	r3, r1, r0
 800e998:	e7f6      	b.n	800e988 <__ratio+0x40>

0800e99a <__copybits>:
 800e99a:	b570      	push	{r4, r5, r6, lr}
 800e99c:	0014      	movs	r4, r2
 800e99e:	0005      	movs	r5, r0
 800e9a0:	3901      	subs	r1, #1
 800e9a2:	6913      	ldr	r3, [r2, #16]
 800e9a4:	1149      	asrs	r1, r1, #5
 800e9a6:	3101      	adds	r1, #1
 800e9a8:	0089      	lsls	r1, r1, #2
 800e9aa:	3414      	adds	r4, #20
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	1841      	adds	r1, r0, r1
 800e9b0:	18e3      	adds	r3, r4, r3
 800e9b2:	42a3      	cmp	r3, r4
 800e9b4:	d80d      	bhi.n	800e9d2 <__copybits+0x38>
 800e9b6:	0014      	movs	r4, r2
 800e9b8:	3411      	adds	r4, #17
 800e9ba:	2500      	movs	r5, #0
 800e9bc:	429c      	cmp	r4, r3
 800e9be:	d803      	bhi.n	800e9c8 <__copybits+0x2e>
 800e9c0:	1a9b      	subs	r3, r3, r2
 800e9c2:	3b11      	subs	r3, #17
 800e9c4:	089b      	lsrs	r3, r3, #2
 800e9c6:	009d      	lsls	r5, r3, #2
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	1940      	adds	r0, r0, r5
 800e9cc:	4281      	cmp	r1, r0
 800e9ce:	d803      	bhi.n	800e9d8 <__copybits+0x3e>
 800e9d0:	bd70      	pop	{r4, r5, r6, pc}
 800e9d2:	cc40      	ldmia	r4!, {r6}
 800e9d4:	c540      	stmia	r5!, {r6}
 800e9d6:	e7ec      	b.n	800e9b2 <__copybits+0x18>
 800e9d8:	c008      	stmia	r0!, {r3}
 800e9da:	e7f7      	b.n	800e9cc <__copybits+0x32>

0800e9dc <__any_on>:
 800e9dc:	0002      	movs	r2, r0
 800e9de:	6900      	ldr	r0, [r0, #16]
 800e9e0:	b510      	push	{r4, lr}
 800e9e2:	3214      	adds	r2, #20
 800e9e4:	114b      	asrs	r3, r1, #5
 800e9e6:	4298      	cmp	r0, r3
 800e9e8:	db13      	blt.n	800ea12 <__any_on+0x36>
 800e9ea:	dd0c      	ble.n	800ea06 <__any_on+0x2a>
 800e9ec:	241f      	movs	r4, #31
 800e9ee:	0008      	movs	r0, r1
 800e9f0:	4020      	ands	r0, r4
 800e9f2:	4221      	tst	r1, r4
 800e9f4:	d007      	beq.n	800ea06 <__any_on+0x2a>
 800e9f6:	0099      	lsls	r1, r3, #2
 800e9f8:	588c      	ldr	r4, [r1, r2]
 800e9fa:	0021      	movs	r1, r4
 800e9fc:	40c1      	lsrs	r1, r0
 800e9fe:	4081      	lsls	r1, r0
 800ea00:	2001      	movs	r0, #1
 800ea02:	428c      	cmp	r4, r1
 800ea04:	d104      	bne.n	800ea10 <__any_on+0x34>
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	18d3      	adds	r3, r2, r3
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d803      	bhi.n	800ea16 <__any_on+0x3a>
 800ea0e:	2000      	movs	r0, #0
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	0003      	movs	r3, r0
 800ea14:	e7f7      	b.n	800ea06 <__any_on+0x2a>
 800ea16:	3b04      	subs	r3, #4
 800ea18:	6819      	ldr	r1, [r3, #0]
 800ea1a:	2900      	cmp	r1, #0
 800ea1c:	d0f5      	beq.n	800ea0a <__any_on+0x2e>
 800ea1e:	2001      	movs	r0, #1
 800ea20:	e7f6      	b.n	800ea10 <__any_on+0x34>

0800ea22 <_calloc_r>:
 800ea22:	b570      	push	{r4, r5, r6, lr}
 800ea24:	0c13      	lsrs	r3, r2, #16
 800ea26:	0c0d      	lsrs	r5, r1, #16
 800ea28:	d11e      	bne.n	800ea68 <_calloc_r+0x46>
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10c      	bne.n	800ea48 <_calloc_r+0x26>
 800ea2e:	b289      	uxth	r1, r1
 800ea30:	b294      	uxth	r4, r2
 800ea32:	434c      	muls	r4, r1
 800ea34:	0021      	movs	r1, r4
 800ea36:	f000 f88d 	bl	800eb54 <_malloc_r>
 800ea3a:	1e05      	subs	r5, r0, #0
 800ea3c:	d01b      	beq.n	800ea76 <_calloc_r+0x54>
 800ea3e:	0022      	movs	r2, r4
 800ea40:	2100      	movs	r1, #0
 800ea42:	f7fc fb76 	bl	800b132 <memset>
 800ea46:	e016      	b.n	800ea76 <_calloc_r+0x54>
 800ea48:	1c1d      	adds	r5, r3, #0
 800ea4a:	1c0b      	adds	r3, r1, #0
 800ea4c:	b292      	uxth	r2, r2
 800ea4e:	b289      	uxth	r1, r1
 800ea50:	b29c      	uxth	r4, r3
 800ea52:	4351      	muls	r1, r2
 800ea54:	b2ab      	uxth	r3, r5
 800ea56:	4363      	muls	r3, r4
 800ea58:	0c0c      	lsrs	r4, r1, #16
 800ea5a:	191c      	adds	r4, r3, r4
 800ea5c:	0c22      	lsrs	r2, r4, #16
 800ea5e:	d107      	bne.n	800ea70 <_calloc_r+0x4e>
 800ea60:	0424      	lsls	r4, r4, #16
 800ea62:	b289      	uxth	r1, r1
 800ea64:	430c      	orrs	r4, r1
 800ea66:	e7e5      	b.n	800ea34 <_calloc_r+0x12>
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d101      	bne.n	800ea70 <_calloc_r+0x4e>
 800ea6c:	1c13      	adds	r3, r2, #0
 800ea6e:	e7ed      	b.n	800ea4c <_calloc_r+0x2a>
 800ea70:	230c      	movs	r3, #12
 800ea72:	2500      	movs	r5, #0
 800ea74:	6003      	str	r3, [r0, #0]
 800ea76:	0028      	movs	r0, r5
 800ea78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea7c <_free_r>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	0005      	movs	r5, r0
 800ea80:	2900      	cmp	r1, #0
 800ea82:	d010      	beq.n	800eaa6 <_free_r+0x2a>
 800ea84:	1f0c      	subs	r4, r1, #4
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	da00      	bge.n	800ea8e <_free_r+0x12>
 800ea8c:	18e4      	adds	r4, r4, r3
 800ea8e:	0028      	movs	r0, r5
 800ea90:	f000 fab2 	bl	800eff8 <__malloc_lock>
 800ea94:	4a1d      	ldr	r2, [pc, #116]	; (800eb0c <_free_r+0x90>)
 800ea96:	6813      	ldr	r3, [r2, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d105      	bne.n	800eaa8 <_free_r+0x2c>
 800ea9c:	6063      	str	r3, [r4, #4]
 800ea9e:	6014      	str	r4, [r2, #0]
 800eaa0:	0028      	movs	r0, r5
 800eaa2:	f000 fab1 	bl	800f008 <__malloc_unlock>
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}
 800eaa8:	42a3      	cmp	r3, r4
 800eaaa:	d908      	bls.n	800eabe <_free_r+0x42>
 800eaac:	6821      	ldr	r1, [r4, #0]
 800eaae:	1860      	adds	r0, r4, r1
 800eab0:	4283      	cmp	r3, r0
 800eab2:	d1f3      	bne.n	800ea9c <_free_r+0x20>
 800eab4:	6818      	ldr	r0, [r3, #0]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	1841      	adds	r1, r0, r1
 800eaba:	6021      	str	r1, [r4, #0]
 800eabc:	e7ee      	b.n	800ea9c <_free_r+0x20>
 800eabe:	001a      	movs	r2, r3
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <_free_r+0x4e>
 800eac6:	42a3      	cmp	r3, r4
 800eac8:	d9f9      	bls.n	800eabe <_free_r+0x42>
 800eaca:	6811      	ldr	r1, [r2, #0]
 800eacc:	1850      	adds	r0, r2, r1
 800eace:	42a0      	cmp	r0, r4
 800ead0:	d10b      	bne.n	800eaea <_free_r+0x6e>
 800ead2:	6820      	ldr	r0, [r4, #0]
 800ead4:	1809      	adds	r1, r1, r0
 800ead6:	1850      	adds	r0, r2, r1
 800ead8:	6011      	str	r1, [r2, #0]
 800eada:	4283      	cmp	r3, r0
 800eadc:	d1e0      	bne.n	800eaa0 <_free_r+0x24>
 800eade:	6818      	ldr	r0, [r3, #0]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	1841      	adds	r1, r0, r1
 800eae4:	6011      	str	r1, [r2, #0]
 800eae6:	6053      	str	r3, [r2, #4]
 800eae8:	e7da      	b.n	800eaa0 <_free_r+0x24>
 800eaea:	42a0      	cmp	r0, r4
 800eaec:	d902      	bls.n	800eaf4 <_free_r+0x78>
 800eaee:	230c      	movs	r3, #12
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	e7d5      	b.n	800eaa0 <_free_r+0x24>
 800eaf4:	6821      	ldr	r1, [r4, #0]
 800eaf6:	1860      	adds	r0, r4, r1
 800eaf8:	4283      	cmp	r3, r0
 800eafa:	d103      	bne.n	800eb04 <_free_r+0x88>
 800eafc:	6818      	ldr	r0, [r3, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	1841      	adds	r1, r0, r1
 800eb02:	6021      	str	r1, [r4, #0]
 800eb04:	6063      	str	r3, [r4, #4]
 800eb06:	6054      	str	r4, [r2, #4]
 800eb08:	e7ca      	b.n	800eaa0 <_free_r+0x24>
 800eb0a:	46c0      	nop			; (mov r8, r8)
 800eb0c:	200022cc 	.word	0x200022cc

0800eb10 <sbrk_aligned>:
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	4e0f      	ldr	r6, [pc, #60]	; (800eb50 <sbrk_aligned+0x40>)
 800eb14:	000d      	movs	r5, r1
 800eb16:	6831      	ldr	r1, [r6, #0]
 800eb18:	0004      	movs	r4, r0
 800eb1a:	2900      	cmp	r1, #0
 800eb1c:	d102      	bne.n	800eb24 <sbrk_aligned+0x14>
 800eb1e:	f000 f9f7 	bl	800ef10 <_sbrk_r>
 800eb22:	6030      	str	r0, [r6, #0]
 800eb24:	0029      	movs	r1, r5
 800eb26:	0020      	movs	r0, r4
 800eb28:	f000 f9f2 	bl	800ef10 <_sbrk_r>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d00a      	beq.n	800eb46 <sbrk_aligned+0x36>
 800eb30:	2303      	movs	r3, #3
 800eb32:	1cc5      	adds	r5, r0, #3
 800eb34:	439d      	bics	r5, r3
 800eb36:	42a8      	cmp	r0, r5
 800eb38:	d007      	beq.n	800eb4a <sbrk_aligned+0x3a>
 800eb3a:	1a29      	subs	r1, r5, r0
 800eb3c:	0020      	movs	r0, r4
 800eb3e:	f000 f9e7 	bl	800ef10 <_sbrk_r>
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	d101      	bne.n	800eb4a <sbrk_aligned+0x3a>
 800eb46:	2501      	movs	r5, #1
 800eb48:	426d      	negs	r5, r5
 800eb4a:	0028      	movs	r0, r5
 800eb4c:	bd70      	pop	{r4, r5, r6, pc}
 800eb4e:	46c0      	nop			; (mov r8, r8)
 800eb50:	200022d0 	.word	0x200022d0

0800eb54 <_malloc_r>:
 800eb54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb56:	2203      	movs	r2, #3
 800eb58:	1ccb      	adds	r3, r1, #3
 800eb5a:	4393      	bics	r3, r2
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	0006      	movs	r6, r0
 800eb60:	001f      	movs	r7, r3
 800eb62:	2b0c      	cmp	r3, #12
 800eb64:	d232      	bcs.n	800ebcc <_malloc_r+0x78>
 800eb66:	270c      	movs	r7, #12
 800eb68:	42b9      	cmp	r1, r7
 800eb6a:	d831      	bhi.n	800ebd0 <_malloc_r+0x7c>
 800eb6c:	0030      	movs	r0, r6
 800eb6e:	f000 fa43 	bl	800eff8 <__malloc_lock>
 800eb72:	4d32      	ldr	r5, [pc, #200]	; (800ec3c <_malloc_r+0xe8>)
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	001c      	movs	r4, r3
 800eb78:	2c00      	cmp	r4, #0
 800eb7a:	d12e      	bne.n	800ebda <_malloc_r+0x86>
 800eb7c:	0039      	movs	r1, r7
 800eb7e:	0030      	movs	r0, r6
 800eb80:	f7ff ffc6 	bl	800eb10 <sbrk_aligned>
 800eb84:	0004      	movs	r4, r0
 800eb86:	1c43      	adds	r3, r0, #1
 800eb88:	d11e      	bne.n	800ebc8 <_malloc_r+0x74>
 800eb8a:	682c      	ldr	r4, [r5, #0]
 800eb8c:	0025      	movs	r5, r4
 800eb8e:	2d00      	cmp	r5, #0
 800eb90:	d14a      	bne.n	800ec28 <_malloc_r+0xd4>
 800eb92:	6823      	ldr	r3, [r4, #0]
 800eb94:	0029      	movs	r1, r5
 800eb96:	18e3      	adds	r3, r4, r3
 800eb98:	0030      	movs	r0, r6
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	f000 f9b8 	bl	800ef10 <_sbrk_r>
 800eba0:	9b01      	ldr	r3, [sp, #4]
 800eba2:	4283      	cmp	r3, r0
 800eba4:	d143      	bne.n	800ec2e <_malloc_r+0xda>
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	3703      	adds	r7, #3
 800ebaa:	1aff      	subs	r7, r7, r3
 800ebac:	2303      	movs	r3, #3
 800ebae:	439f      	bics	r7, r3
 800ebb0:	3708      	adds	r7, #8
 800ebb2:	2f0c      	cmp	r7, #12
 800ebb4:	d200      	bcs.n	800ebb8 <_malloc_r+0x64>
 800ebb6:	270c      	movs	r7, #12
 800ebb8:	0039      	movs	r1, r7
 800ebba:	0030      	movs	r0, r6
 800ebbc:	f7ff ffa8 	bl	800eb10 <sbrk_aligned>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d034      	beq.n	800ec2e <_malloc_r+0xda>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	19df      	adds	r7, r3, r7
 800ebc8:	6027      	str	r7, [r4, #0]
 800ebca:	e013      	b.n	800ebf4 <_malloc_r+0xa0>
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	dacb      	bge.n	800eb68 <_malloc_r+0x14>
 800ebd0:	230c      	movs	r3, #12
 800ebd2:	2500      	movs	r5, #0
 800ebd4:	6033      	str	r3, [r6, #0]
 800ebd6:	0028      	movs	r0, r5
 800ebd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebda:	6822      	ldr	r2, [r4, #0]
 800ebdc:	1bd1      	subs	r1, r2, r7
 800ebde:	d420      	bmi.n	800ec22 <_malloc_r+0xce>
 800ebe0:	290b      	cmp	r1, #11
 800ebe2:	d917      	bls.n	800ec14 <_malloc_r+0xc0>
 800ebe4:	19e2      	adds	r2, r4, r7
 800ebe6:	6027      	str	r7, [r4, #0]
 800ebe8:	42a3      	cmp	r3, r4
 800ebea:	d111      	bne.n	800ec10 <_malloc_r+0xbc>
 800ebec:	602a      	str	r2, [r5, #0]
 800ebee:	6863      	ldr	r3, [r4, #4]
 800ebf0:	6011      	str	r1, [r2, #0]
 800ebf2:	6053      	str	r3, [r2, #4]
 800ebf4:	0030      	movs	r0, r6
 800ebf6:	0025      	movs	r5, r4
 800ebf8:	f000 fa06 	bl	800f008 <__malloc_unlock>
 800ebfc:	2207      	movs	r2, #7
 800ebfe:	350b      	adds	r5, #11
 800ec00:	1d23      	adds	r3, r4, #4
 800ec02:	4395      	bics	r5, r2
 800ec04:	1aea      	subs	r2, r5, r3
 800ec06:	429d      	cmp	r5, r3
 800ec08:	d0e5      	beq.n	800ebd6 <_malloc_r+0x82>
 800ec0a:	1b5b      	subs	r3, r3, r5
 800ec0c:	50a3      	str	r3, [r4, r2]
 800ec0e:	e7e2      	b.n	800ebd6 <_malloc_r+0x82>
 800ec10:	605a      	str	r2, [r3, #4]
 800ec12:	e7ec      	b.n	800ebee <_malloc_r+0x9a>
 800ec14:	6862      	ldr	r2, [r4, #4]
 800ec16:	42a3      	cmp	r3, r4
 800ec18:	d101      	bne.n	800ec1e <_malloc_r+0xca>
 800ec1a:	602a      	str	r2, [r5, #0]
 800ec1c:	e7ea      	b.n	800ebf4 <_malloc_r+0xa0>
 800ec1e:	605a      	str	r2, [r3, #4]
 800ec20:	e7e8      	b.n	800ebf4 <_malloc_r+0xa0>
 800ec22:	0023      	movs	r3, r4
 800ec24:	6864      	ldr	r4, [r4, #4]
 800ec26:	e7a7      	b.n	800eb78 <_malloc_r+0x24>
 800ec28:	002c      	movs	r4, r5
 800ec2a:	686d      	ldr	r5, [r5, #4]
 800ec2c:	e7af      	b.n	800eb8e <_malloc_r+0x3a>
 800ec2e:	230c      	movs	r3, #12
 800ec30:	0030      	movs	r0, r6
 800ec32:	6033      	str	r3, [r6, #0]
 800ec34:	f000 f9e8 	bl	800f008 <__malloc_unlock>
 800ec38:	e7cd      	b.n	800ebd6 <_malloc_r+0x82>
 800ec3a:	46c0      	nop			; (mov r8, r8)
 800ec3c:	200022cc 	.word	0x200022cc

0800ec40 <__ssputs_r>:
 800ec40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec42:	688e      	ldr	r6, [r1, #8]
 800ec44:	b085      	sub	sp, #20
 800ec46:	0007      	movs	r7, r0
 800ec48:	000c      	movs	r4, r1
 800ec4a:	9203      	str	r2, [sp, #12]
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	429e      	cmp	r6, r3
 800ec50:	d83c      	bhi.n	800eccc <__ssputs_r+0x8c>
 800ec52:	2390      	movs	r3, #144	; 0x90
 800ec54:	898a      	ldrh	r2, [r1, #12]
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	421a      	tst	r2, r3
 800ec5a:	d034      	beq.n	800ecc6 <__ssputs_r+0x86>
 800ec5c:	6909      	ldr	r1, [r1, #16]
 800ec5e:	6823      	ldr	r3, [r4, #0]
 800ec60:	6960      	ldr	r0, [r4, #20]
 800ec62:	1a5b      	subs	r3, r3, r1
 800ec64:	9302      	str	r3, [sp, #8]
 800ec66:	2303      	movs	r3, #3
 800ec68:	4343      	muls	r3, r0
 800ec6a:	0fdd      	lsrs	r5, r3, #31
 800ec6c:	18ed      	adds	r5, r5, r3
 800ec6e:	9b01      	ldr	r3, [sp, #4]
 800ec70:	9802      	ldr	r0, [sp, #8]
 800ec72:	3301      	adds	r3, #1
 800ec74:	181b      	adds	r3, r3, r0
 800ec76:	106d      	asrs	r5, r5, #1
 800ec78:	42ab      	cmp	r3, r5
 800ec7a:	d900      	bls.n	800ec7e <__ssputs_r+0x3e>
 800ec7c:	001d      	movs	r5, r3
 800ec7e:	0553      	lsls	r3, r2, #21
 800ec80:	d532      	bpl.n	800ece8 <__ssputs_r+0xa8>
 800ec82:	0029      	movs	r1, r5
 800ec84:	0038      	movs	r0, r7
 800ec86:	f7ff ff65 	bl	800eb54 <_malloc_r>
 800ec8a:	1e06      	subs	r6, r0, #0
 800ec8c:	d109      	bne.n	800eca2 <__ssputs_r+0x62>
 800ec8e:	230c      	movs	r3, #12
 800ec90:	603b      	str	r3, [r7, #0]
 800ec92:	2340      	movs	r3, #64	; 0x40
 800ec94:	2001      	movs	r0, #1
 800ec96:	89a2      	ldrh	r2, [r4, #12]
 800ec98:	4240      	negs	r0, r0
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	b005      	add	sp, #20
 800eca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eca2:	9a02      	ldr	r2, [sp, #8]
 800eca4:	6921      	ldr	r1, [r4, #16]
 800eca6:	f7fc fa3b 	bl	800b120 <memcpy>
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	4a14      	ldr	r2, [pc, #80]	; (800ed00 <__ssputs_r+0xc0>)
 800ecae:	401a      	ands	r2, r3
 800ecb0:	2380      	movs	r3, #128	; 0x80
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	81a3      	strh	r3, [r4, #12]
 800ecb6:	9b02      	ldr	r3, [sp, #8]
 800ecb8:	6126      	str	r6, [r4, #16]
 800ecba:	18f6      	adds	r6, r6, r3
 800ecbc:	6026      	str	r6, [r4, #0]
 800ecbe:	6165      	str	r5, [r4, #20]
 800ecc0:	9e01      	ldr	r6, [sp, #4]
 800ecc2:	1aed      	subs	r5, r5, r3
 800ecc4:	60a5      	str	r5, [r4, #8]
 800ecc6:	9b01      	ldr	r3, [sp, #4]
 800ecc8:	429e      	cmp	r6, r3
 800ecca:	d900      	bls.n	800ecce <__ssputs_r+0x8e>
 800eccc:	9e01      	ldr	r6, [sp, #4]
 800ecce:	0032      	movs	r2, r6
 800ecd0:	9903      	ldr	r1, [sp, #12]
 800ecd2:	6820      	ldr	r0, [r4, #0]
 800ecd4:	f000 f97c 	bl	800efd0 <memmove>
 800ecd8:	68a3      	ldr	r3, [r4, #8]
 800ecda:	2000      	movs	r0, #0
 800ecdc:	1b9b      	subs	r3, r3, r6
 800ecde:	60a3      	str	r3, [r4, #8]
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	199e      	adds	r6, r3, r6
 800ece4:	6026      	str	r6, [r4, #0]
 800ece6:	e7da      	b.n	800ec9e <__ssputs_r+0x5e>
 800ece8:	002a      	movs	r2, r5
 800ecea:	0038      	movs	r0, r7
 800ecec:	f000 f994 	bl	800f018 <_realloc_r>
 800ecf0:	1e06      	subs	r6, r0, #0
 800ecf2:	d1e0      	bne.n	800ecb6 <__ssputs_r+0x76>
 800ecf4:	0038      	movs	r0, r7
 800ecf6:	6921      	ldr	r1, [r4, #16]
 800ecf8:	f7ff fec0 	bl	800ea7c <_free_r>
 800ecfc:	e7c7      	b.n	800ec8e <__ssputs_r+0x4e>
 800ecfe:	46c0      	nop			; (mov r8, r8)
 800ed00:	fffffb7f 	.word	0xfffffb7f

0800ed04 <_svfiprintf_r>:
 800ed04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed06:	b0a1      	sub	sp, #132	; 0x84
 800ed08:	9003      	str	r0, [sp, #12]
 800ed0a:	001d      	movs	r5, r3
 800ed0c:	898b      	ldrh	r3, [r1, #12]
 800ed0e:	000f      	movs	r7, r1
 800ed10:	0016      	movs	r6, r2
 800ed12:	061b      	lsls	r3, r3, #24
 800ed14:	d511      	bpl.n	800ed3a <_svfiprintf_r+0x36>
 800ed16:	690b      	ldr	r3, [r1, #16]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10e      	bne.n	800ed3a <_svfiprintf_r+0x36>
 800ed1c:	2140      	movs	r1, #64	; 0x40
 800ed1e:	f7ff ff19 	bl	800eb54 <_malloc_r>
 800ed22:	6038      	str	r0, [r7, #0]
 800ed24:	6138      	str	r0, [r7, #16]
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d105      	bne.n	800ed36 <_svfiprintf_r+0x32>
 800ed2a:	230c      	movs	r3, #12
 800ed2c:	9a03      	ldr	r2, [sp, #12]
 800ed2e:	3801      	subs	r0, #1
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	b021      	add	sp, #132	; 0x84
 800ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed36:	2340      	movs	r3, #64	; 0x40
 800ed38:	617b      	str	r3, [r7, #20]
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	ac08      	add	r4, sp, #32
 800ed3e:	6163      	str	r3, [r4, #20]
 800ed40:	3320      	adds	r3, #32
 800ed42:	7663      	strb	r3, [r4, #25]
 800ed44:	3310      	adds	r3, #16
 800ed46:	76a3      	strb	r3, [r4, #26]
 800ed48:	9507      	str	r5, [sp, #28]
 800ed4a:	0035      	movs	r5, r6
 800ed4c:	782b      	ldrb	r3, [r5, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d001      	beq.n	800ed56 <_svfiprintf_r+0x52>
 800ed52:	2b25      	cmp	r3, #37	; 0x25
 800ed54:	d147      	bne.n	800ede6 <_svfiprintf_r+0xe2>
 800ed56:	1bab      	subs	r3, r5, r6
 800ed58:	9305      	str	r3, [sp, #20]
 800ed5a:	42b5      	cmp	r5, r6
 800ed5c:	d00c      	beq.n	800ed78 <_svfiprintf_r+0x74>
 800ed5e:	0032      	movs	r2, r6
 800ed60:	0039      	movs	r1, r7
 800ed62:	9803      	ldr	r0, [sp, #12]
 800ed64:	f7ff ff6c 	bl	800ec40 <__ssputs_r>
 800ed68:	1c43      	adds	r3, r0, #1
 800ed6a:	d100      	bne.n	800ed6e <_svfiprintf_r+0x6a>
 800ed6c:	e0ae      	b.n	800eecc <_svfiprintf_r+0x1c8>
 800ed6e:	6962      	ldr	r2, [r4, #20]
 800ed70:	9b05      	ldr	r3, [sp, #20]
 800ed72:	4694      	mov	ip, r2
 800ed74:	4463      	add	r3, ip
 800ed76:	6163      	str	r3, [r4, #20]
 800ed78:	782b      	ldrb	r3, [r5, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d100      	bne.n	800ed80 <_svfiprintf_r+0x7c>
 800ed7e:	e0a5      	b.n	800eecc <_svfiprintf_r+0x1c8>
 800ed80:	2201      	movs	r2, #1
 800ed82:	2300      	movs	r3, #0
 800ed84:	4252      	negs	r2, r2
 800ed86:	6062      	str	r2, [r4, #4]
 800ed88:	a904      	add	r1, sp, #16
 800ed8a:	3254      	adds	r2, #84	; 0x54
 800ed8c:	1852      	adds	r2, r2, r1
 800ed8e:	1c6e      	adds	r6, r5, #1
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	60e3      	str	r3, [r4, #12]
 800ed94:	60a3      	str	r3, [r4, #8]
 800ed96:	7013      	strb	r3, [r2, #0]
 800ed98:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed9a:	2205      	movs	r2, #5
 800ed9c:	7831      	ldrb	r1, [r6, #0]
 800ed9e:	4854      	ldr	r0, [pc, #336]	; (800eef0 <_svfiprintf_r+0x1ec>)
 800eda0:	f7ff f96a 	bl	800e078 <memchr>
 800eda4:	1c75      	adds	r5, r6, #1
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d11f      	bne.n	800edea <_svfiprintf_r+0xe6>
 800edaa:	6822      	ldr	r2, [r4, #0]
 800edac:	06d3      	lsls	r3, r2, #27
 800edae:	d504      	bpl.n	800edba <_svfiprintf_r+0xb6>
 800edb0:	2353      	movs	r3, #83	; 0x53
 800edb2:	a904      	add	r1, sp, #16
 800edb4:	185b      	adds	r3, r3, r1
 800edb6:	2120      	movs	r1, #32
 800edb8:	7019      	strb	r1, [r3, #0]
 800edba:	0713      	lsls	r3, r2, #28
 800edbc:	d504      	bpl.n	800edc8 <_svfiprintf_r+0xc4>
 800edbe:	2353      	movs	r3, #83	; 0x53
 800edc0:	a904      	add	r1, sp, #16
 800edc2:	185b      	adds	r3, r3, r1
 800edc4:	212b      	movs	r1, #43	; 0x2b
 800edc6:	7019      	strb	r1, [r3, #0]
 800edc8:	7833      	ldrb	r3, [r6, #0]
 800edca:	2b2a      	cmp	r3, #42	; 0x2a
 800edcc:	d016      	beq.n	800edfc <_svfiprintf_r+0xf8>
 800edce:	0035      	movs	r5, r6
 800edd0:	2100      	movs	r1, #0
 800edd2:	200a      	movs	r0, #10
 800edd4:	68e3      	ldr	r3, [r4, #12]
 800edd6:	782a      	ldrb	r2, [r5, #0]
 800edd8:	1c6e      	adds	r6, r5, #1
 800edda:	3a30      	subs	r2, #48	; 0x30
 800eddc:	2a09      	cmp	r2, #9
 800edde:	d94e      	bls.n	800ee7e <_svfiprintf_r+0x17a>
 800ede0:	2900      	cmp	r1, #0
 800ede2:	d111      	bne.n	800ee08 <_svfiprintf_r+0x104>
 800ede4:	e017      	b.n	800ee16 <_svfiprintf_r+0x112>
 800ede6:	3501      	adds	r5, #1
 800ede8:	e7b0      	b.n	800ed4c <_svfiprintf_r+0x48>
 800edea:	4b41      	ldr	r3, [pc, #260]	; (800eef0 <_svfiprintf_r+0x1ec>)
 800edec:	6822      	ldr	r2, [r4, #0]
 800edee:	1ac0      	subs	r0, r0, r3
 800edf0:	2301      	movs	r3, #1
 800edf2:	4083      	lsls	r3, r0
 800edf4:	4313      	orrs	r3, r2
 800edf6:	002e      	movs	r6, r5
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	e7ce      	b.n	800ed9a <_svfiprintf_r+0x96>
 800edfc:	9b07      	ldr	r3, [sp, #28]
 800edfe:	1d19      	adds	r1, r3, #4
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	9107      	str	r1, [sp, #28]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	db01      	blt.n	800ee0c <_svfiprintf_r+0x108>
 800ee08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee0a:	e004      	b.n	800ee16 <_svfiprintf_r+0x112>
 800ee0c:	425b      	negs	r3, r3
 800ee0e:	60e3      	str	r3, [r4, #12]
 800ee10:	2302      	movs	r3, #2
 800ee12:	4313      	orrs	r3, r2
 800ee14:	6023      	str	r3, [r4, #0]
 800ee16:	782b      	ldrb	r3, [r5, #0]
 800ee18:	2b2e      	cmp	r3, #46	; 0x2e
 800ee1a:	d10a      	bne.n	800ee32 <_svfiprintf_r+0x12e>
 800ee1c:	786b      	ldrb	r3, [r5, #1]
 800ee1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee20:	d135      	bne.n	800ee8e <_svfiprintf_r+0x18a>
 800ee22:	9b07      	ldr	r3, [sp, #28]
 800ee24:	3502      	adds	r5, #2
 800ee26:	1d1a      	adds	r2, r3, #4
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	9207      	str	r2, [sp, #28]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	db2b      	blt.n	800ee88 <_svfiprintf_r+0x184>
 800ee30:	9309      	str	r3, [sp, #36]	; 0x24
 800ee32:	4e30      	ldr	r6, [pc, #192]	; (800eef4 <_svfiprintf_r+0x1f0>)
 800ee34:	2203      	movs	r2, #3
 800ee36:	0030      	movs	r0, r6
 800ee38:	7829      	ldrb	r1, [r5, #0]
 800ee3a:	f7ff f91d 	bl	800e078 <memchr>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d006      	beq.n	800ee50 <_svfiprintf_r+0x14c>
 800ee42:	2340      	movs	r3, #64	; 0x40
 800ee44:	1b80      	subs	r0, r0, r6
 800ee46:	4083      	lsls	r3, r0
 800ee48:	6822      	ldr	r2, [r4, #0]
 800ee4a:	3501      	adds	r5, #1
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	6023      	str	r3, [r4, #0]
 800ee50:	7829      	ldrb	r1, [r5, #0]
 800ee52:	2206      	movs	r2, #6
 800ee54:	4828      	ldr	r0, [pc, #160]	; (800eef8 <_svfiprintf_r+0x1f4>)
 800ee56:	1c6e      	adds	r6, r5, #1
 800ee58:	7621      	strb	r1, [r4, #24]
 800ee5a:	f7ff f90d 	bl	800e078 <memchr>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d03c      	beq.n	800eedc <_svfiprintf_r+0x1d8>
 800ee62:	4b26      	ldr	r3, [pc, #152]	; (800eefc <_svfiprintf_r+0x1f8>)
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d125      	bne.n	800eeb4 <_svfiprintf_r+0x1b0>
 800ee68:	2207      	movs	r2, #7
 800ee6a:	9b07      	ldr	r3, [sp, #28]
 800ee6c:	3307      	adds	r3, #7
 800ee6e:	4393      	bics	r3, r2
 800ee70:	3308      	adds	r3, #8
 800ee72:	9307      	str	r3, [sp, #28]
 800ee74:	6963      	ldr	r3, [r4, #20]
 800ee76:	9a04      	ldr	r2, [sp, #16]
 800ee78:	189b      	adds	r3, r3, r2
 800ee7a:	6163      	str	r3, [r4, #20]
 800ee7c:	e765      	b.n	800ed4a <_svfiprintf_r+0x46>
 800ee7e:	4343      	muls	r3, r0
 800ee80:	0035      	movs	r5, r6
 800ee82:	2101      	movs	r1, #1
 800ee84:	189b      	adds	r3, r3, r2
 800ee86:	e7a6      	b.n	800edd6 <_svfiprintf_r+0xd2>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	425b      	negs	r3, r3
 800ee8c:	e7d0      	b.n	800ee30 <_svfiprintf_r+0x12c>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	200a      	movs	r0, #10
 800ee92:	001a      	movs	r2, r3
 800ee94:	3501      	adds	r5, #1
 800ee96:	6063      	str	r3, [r4, #4]
 800ee98:	7829      	ldrb	r1, [r5, #0]
 800ee9a:	1c6e      	adds	r6, r5, #1
 800ee9c:	3930      	subs	r1, #48	; 0x30
 800ee9e:	2909      	cmp	r1, #9
 800eea0:	d903      	bls.n	800eeaa <_svfiprintf_r+0x1a6>
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d0c5      	beq.n	800ee32 <_svfiprintf_r+0x12e>
 800eea6:	9209      	str	r2, [sp, #36]	; 0x24
 800eea8:	e7c3      	b.n	800ee32 <_svfiprintf_r+0x12e>
 800eeaa:	4342      	muls	r2, r0
 800eeac:	0035      	movs	r5, r6
 800eeae:	2301      	movs	r3, #1
 800eeb0:	1852      	adds	r2, r2, r1
 800eeb2:	e7f1      	b.n	800ee98 <_svfiprintf_r+0x194>
 800eeb4:	ab07      	add	r3, sp, #28
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	003a      	movs	r2, r7
 800eeba:	0021      	movs	r1, r4
 800eebc:	4b10      	ldr	r3, [pc, #64]	; (800ef00 <_svfiprintf_r+0x1fc>)
 800eebe:	9803      	ldr	r0, [sp, #12]
 800eec0:	f7fc f9ea 	bl	800b298 <_printf_float>
 800eec4:	9004      	str	r0, [sp, #16]
 800eec6:	9b04      	ldr	r3, [sp, #16]
 800eec8:	3301      	adds	r3, #1
 800eeca:	d1d3      	bne.n	800ee74 <_svfiprintf_r+0x170>
 800eecc:	89bb      	ldrh	r3, [r7, #12]
 800eece:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eed0:	065b      	lsls	r3, r3, #25
 800eed2:	d400      	bmi.n	800eed6 <_svfiprintf_r+0x1d2>
 800eed4:	e72d      	b.n	800ed32 <_svfiprintf_r+0x2e>
 800eed6:	2001      	movs	r0, #1
 800eed8:	4240      	negs	r0, r0
 800eeda:	e72a      	b.n	800ed32 <_svfiprintf_r+0x2e>
 800eedc:	ab07      	add	r3, sp, #28
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	003a      	movs	r2, r7
 800eee2:	0021      	movs	r1, r4
 800eee4:	4b06      	ldr	r3, [pc, #24]	; (800ef00 <_svfiprintf_r+0x1fc>)
 800eee6:	9803      	ldr	r0, [sp, #12]
 800eee8:	f7fc fc88 	bl	800b7fc <_printf_i>
 800eeec:	e7ea      	b.n	800eec4 <_svfiprintf_r+0x1c0>
 800eeee:	46c0      	nop			; (mov r8, r8)
 800eef0:	080103fc 	.word	0x080103fc
 800eef4:	08010402 	.word	0x08010402
 800eef8:	08010406 	.word	0x08010406
 800eefc:	0800b299 	.word	0x0800b299
 800ef00:	0800ec41 	.word	0x0800ec41

0800ef04 <nan>:
 800ef04:	2000      	movs	r0, #0
 800ef06:	4901      	ldr	r1, [pc, #4]	; (800ef0c <nan+0x8>)
 800ef08:	4770      	bx	lr
 800ef0a:	46c0      	nop			; (mov r8, r8)
 800ef0c:	7ff80000 	.word	0x7ff80000

0800ef10 <_sbrk_r>:
 800ef10:	2300      	movs	r3, #0
 800ef12:	b570      	push	{r4, r5, r6, lr}
 800ef14:	4d06      	ldr	r5, [pc, #24]	; (800ef30 <_sbrk_r+0x20>)
 800ef16:	0004      	movs	r4, r0
 800ef18:	0008      	movs	r0, r1
 800ef1a:	602b      	str	r3, [r5, #0]
 800ef1c:	f7f7 f908 	bl	8006130 <_sbrk>
 800ef20:	1c43      	adds	r3, r0, #1
 800ef22:	d103      	bne.n	800ef2c <_sbrk_r+0x1c>
 800ef24:	682b      	ldr	r3, [r5, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d000      	beq.n	800ef2c <_sbrk_r+0x1c>
 800ef2a:	6023      	str	r3, [r4, #0]
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
 800ef2e:	46c0      	nop			; (mov r8, r8)
 800ef30:	200022d4 	.word	0x200022d4

0800ef34 <strncmp>:
 800ef34:	b530      	push	{r4, r5, lr}
 800ef36:	0005      	movs	r5, r0
 800ef38:	1e10      	subs	r0, r2, #0
 800ef3a:	d008      	beq.n	800ef4e <strncmp+0x1a>
 800ef3c:	2400      	movs	r4, #0
 800ef3e:	3a01      	subs	r2, #1
 800ef40:	5d2b      	ldrb	r3, [r5, r4]
 800ef42:	5d08      	ldrb	r0, [r1, r4]
 800ef44:	4283      	cmp	r3, r0
 800ef46:	d101      	bne.n	800ef4c <strncmp+0x18>
 800ef48:	4294      	cmp	r4, r2
 800ef4a:	d101      	bne.n	800ef50 <strncmp+0x1c>
 800ef4c:	1a18      	subs	r0, r3, r0
 800ef4e:	bd30      	pop	{r4, r5, pc}
 800ef50:	3401      	adds	r4, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1f4      	bne.n	800ef40 <strncmp+0xc>
 800ef56:	e7f9      	b.n	800ef4c <strncmp+0x18>

0800ef58 <__ascii_wctomb>:
 800ef58:	0003      	movs	r3, r0
 800ef5a:	1e08      	subs	r0, r1, #0
 800ef5c:	d005      	beq.n	800ef6a <__ascii_wctomb+0x12>
 800ef5e:	2aff      	cmp	r2, #255	; 0xff
 800ef60:	d904      	bls.n	800ef6c <__ascii_wctomb+0x14>
 800ef62:	228a      	movs	r2, #138	; 0x8a
 800ef64:	2001      	movs	r0, #1
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	4240      	negs	r0, r0
 800ef6a:	4770      	bx	lr
 800ef6c:	2001      	movs	r0, #1
 800ef6e:	700a      	strb	r2, [r1, #0]
 800ef70:	e7fb      	b.n	800ef6a <__ascii_wctomb+0x12>
	...

0800ef74 <__assert_func>:
 800ef74:	b530      	push	{r4, r5, lr}
 800ef76:	0014      	movs	r4, r2
 800ef78:	001a      	movs	r2, r3
 800ef7a:	4b09      	ldr	r3, [pc, #36]	; (800efa0 <__assert_func+0x2c>)
 800ef7c:	0005      	movs	r5, r0
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	b085      	sub	sp, #20
 800ef82:	68d8      	ldr	r0, [r3, #12]
 800ef84:	4b07      	ldr	r3, [pc, #28]	; (800efa4 <__assert_func+0x30>)
 800ef86:	2c00      	cmp	r4, #0
 800ef88:	d101      	bne.n	800ef8e <__assert_func+0x1a>
 800ef8a:	4b07      	ldr	r3, [pc, #28]	; (800efa8 <__assert_func+0x34>)
 800ef8c:	001c      	movs	r4, r3
 800ef8e:	9301      	str	r3, [sp, #4]
 800ef90:	9100      	str	r1, [sp, #0]
 800ef92:	002b      	movs	r3, r5
 800ef94:	4905      	ldr	r1, [pc, #20]	; (800efac <__assert_func+0x38>)
 800ef96:	9402      	str	r4, [sp, #8]
 800ef98:	f000 f80a 	bl	800efb0 <fiprintf>
 800ef9c:	f000 fa9a 	bl	800f4d4 <abort>
 800efa0:	200002b0 	.word	0x200002b0
 800efa4:	0801040d 	.word	0x0801040d
 800efa8:	08010448 	.word	0x08010448
 800efac:	0801041a 	.word	0x0801041a

0800efb0 <fiprintf>:
 800efb0:	b40e      	push	{r1, r2, r3}
 800efb2:	b503      	push	{r0, r1, lr}
 800efb4:	0001      	movs	r1, r0
 800efb6:	ab03      	add	r3, sp, #12
 800efb8:	4804      	ldr	r0, [pc, #16]	; (800efcc <fiprintf+0x1c>)
 800efba:	cb04      	ldmia	r3!, {r2}
 800efbc:	6800      	ldr	r0, [r0, #0]
 800efbe:	9301      	str	r3, [sp, #4]
 800efc0:	f000 f880 	bl	800f0c4 <_vfiprintf_r>
 800efc4:	b002      	add	sp, #8
 800efc6:	bc08      	pop	{r3}
 800efc8:	b003      	add	sp, #12
 800efca:	4718      	bx	r3
 800efcc:	200002b0 	.word	0x200002b0

0800efd0 <memmove>:
 800efd0:	b510      	push	{r4, lr}
 800efd2:	4288      	cmp	r0, r1
 800efd4:	d902      	bls.n	800efdc <memmove+0xc>
 800efd6:	188b      	adds	r3, r1, r2
 800efd8:	4298      	cmp	r0, r3
 800efda:	d303      	bcc.n	800efe4 <memmove+0x14>
 800efdc:	2300      	movs	r3, #0
 800efde:	e007      	b.n	800eff0 <memmove+0x20>
 800efe0:	5c8b      	ldrb	r3, [r1, r2]
 800efe2:	5483      	strb	r3, [r0, r2]
 800efe4:	3a01      	subs	r2, #1
 800efe6:	d2fb      	bcs.n	800efe0 <memmove+0x10>
 800efe8:	bd10      	pop	{r4, pc}
 800efea:	5ccc      	ldrb	r4, [r1, r3]
 800efec:	54c4      	strb	r4, [r0, r3]
 800efee:	3301      	adds	r3, #1
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d1fa      	bne.n	800efea <memmove+0x1a>
 800eff4:	e7f8      	b.n	800efe8 <memmove+0x18>
	...

0800eff8 <__malloc_lock>:
 800eff8:	b510      	push	{r4, lr}
 800effa:	4802      	ldr	r0, [pc, #8]	; (800f004 <__malloc_lock+0xc>)
 800effc:	f000 fc41 	bl	800f882 <__retarget_lock_acquire_recursive>
 800f000:	bd10      	pop	{r4, pc}
 800f002:	46c0      	nop			; (mov r8, r8)
 800f004:	200022d8 	.word	0x200022d8

0800f008 <__malloc_unlock>:
 800f008:	b510      	push	{r4, lr}
 800f00a:	4802      	ldr	r0, [pc, #8]	; (800f014 <__malloc_unlock+0xc>)
 800f00c:	f000 fc3a 	bl	800f884 <__retarget_lock_release_recursive>
 800f010:	bd10      	pop	{r4, pc}
 800f012:	46c0      	nop			; (mov r8, r8)
 800f014:	200022d8 	.word	0x200022d8

0800f018 <_realloc_r>:
 800f018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f01a:	0007      	movs	r7, r0
 800f01c:	000e      	movs	r6, r1
 800f01e:	0014      	movs	r4, r2
 800f020:	2900      	cmp	r1, #0
 800f022:	d105      	bne.n	800f030 <_realloc_r+0x18>
 800f024:	0011      	movs	r1, r2
 800f026:	f7ff fd95 	bl	800eb54 <_malloc_r>
 800f02a:	0005      	movs	r5, r0
 800f02c:	0028      	movs	r0, r5
 800f02e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f030:	2a00      	cmp	r2, #0
 800f032:	d103      	bne.n	800f03c <_realloc_r+0x24>
 800f034:	f7ff fd22 	bl	800ea7c <_free_r>
 800f038:	0025      	movs	r5, r4
 800f03a:	e7f7      	b.n	800f02c <_realloc_r+0x14>
 800f03c:	f000 fc90 	bl	800f960 <_malloc_usable_size_r>
 800f040:	9001      	str	r0, [sp, #4]
 800f042:	4284      	cmp	r4, r0
 800f044:	d803      	bhi.n	800f04e <_realloc_r+0x36>
 800f046:	0035      	movs	r5, r6
 800f048:	0843      	lsrs	r3, r0, #1
 800f04a:	42a3      	cmp	r3, r4
 800f04c:	d3ee      	bcc.n	800f02c <_realloc_r+0x14>
 800f04e:	0021      	movs	r1, r4
 800f050:	0038      	movs	r0, r7
 800f052:	f7ff fd7f 	bl	800eb54 <_malloc_r>
 800f056:	1e05      	subs	r5, r0, #0
 800f058:	d0e8      	beq.n	800f02c <_realloc_r+0x14>
 800f05a:	9b01      	ldr	r3, [sp, #4]
 800f05c:	0022      	movs	r2, r4
 800f05e:	429c      	cmp	r4, r3
 800f060:	d900      	bls.n	800f064 <_realloc_r+0x4c>
 800f062:	001a      	movs	r2, r3
 800f064:	0031      	movs	r1, r6
 800f066:	0028      	movs	r0, r5
 800f068:	f7fc f85a 	bl	800b120 <memcpy>
 800f06c:	0031      	movs	r1, r6
 800f06e:	0038      	movs	r0, r7
 800f070:	f7ff fd04 	bl	800ea7c <_free_r>
 800f074:	e7da      	b.n	800f02c <_realloc_r+0x14>

0800f076 <__sfputc_r>:
 800f076:	6893      	ldr	r3, [r2, #8]
 800f078:	b510      	push	{r4, lr}
 800f07a:	3b01      	subs	r3, #1
 800f07c:	6093      	str	r3, [r2, #8]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	da04      	bge.n	800f08c <__sfputc_r+0x16>
 800f082:	6994      	ldr	r4, [r2, #24]
 800f084:	42a3      	cmp	r3, r4
 800f086:	db07      	blt.n	800f098 <__sfputc_r+0x22>
 800f088:	290a      	cmp	r1, #10
 800f08a:	d005      	beq.n	800f098 <__sfputc_r+0x22>
 800f08c:	6813      	ldr	r3, [r2, #0]
 800f08e:	1c58      	adds	r0, r3, #1
 800f090:	6010      	str	r0, [r2, #0]
 800f092:	7019      	strb	r1, [r3, #0]
 800f094:	0008      	movs	r0, r1
 800f096:	bd10      	pop	{r4, pc}
 800f098:	f000 f94e 	bl	800f338 <__swbuf_r>
 800f09c:	0001      	movs	r1, r0
 800f09e:	e7f9      	b.n	800f094 <__sfputc_r+0x1e>

0800f0a0 <__sfputs_r>:
 800f0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a2:	0006      	movs	r6, r0
 800f0a4:	000f      	movs	r7, r1
 800f0a6:	0014      	movs	r4, r2
 800f0a8:	18d5      	adds	r5, r2, r3
 800f0aa:	42ac      	cmp	r4, r5
 800f0ac:	d101      	bne.n	800f0b2 <__sfputs_r+0x12>
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	e007      	b.n	800f0c2 <__sfputs_r+0x22>
 800f0b2:	7821      	ldrb	r1, [r4, #0]
 800f0b4:	003a      	movs	r2, r7
 800f0b6:	0030      	movs	r0, r6
 800f0b8:	f7ff ffdd 	bl	800f076 <__sfputc_r>
 800f0bc:	3401      	adds	r4, #1
 800f0be:	1c43      	adds	r3, r0, #1
 800f0c0:	d1f3      	bne.n	800f0aa <__sfputs_r+0xa>
 800f0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0c4 <_vfiprintf_r>:
 800f0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c6:	b0a1      	sub	sp, #132	; 0x84
 800f0c8:	0006      	movs	r6, r0
 800f0ca:	000c      	movs	r4, r1
 800f0cc:	001f      	movs	r7, r3
 800f0ce:	9203      	str	r2, [sp, #12]
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d004      	beq.n	800f0de <_vfiprintf_r+0x1a>
 800f0d4:	6983      	ldr	r3, [r0, #24]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d101      	bne.n	800f0de <_vfiprintf_r+0x1a>
 800f0da:	f000 fb31 	bl	800f740 <__sinit>
 800f0de:	4b8e      	ldr	r3, [pc, #568]	; (800f318 <_vfiprintf_r+0x254>)
 800f0e0:	429c      	cmp	r4, r3
 800f0e2:	d11c      	bne.n	800f11e <_vfiprintf_r+0x5a>
 800f0e4:	6874      	ldr	r4, [r6, #4]
 800f0e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0e8:	07db      	lsls	r3, r3, #31
 800f0ea:	d405      	bmi.n	800f0f8 <_vfiprintf_r+0x34>
 800f0ec:	89a3      	ldrh	r3, [r4, #12]
 800f0ee:	059b      	lsls	r3, r3, #22
 800f0f0:	d402      	bmi.n	800f0f8 <_vfiprintf_r+0x34>
 800f0f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0f4:	f000 fbc5 	bl	800f882 <__retarget_lock_acquire_recursive>
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	071b      	lsls	r3, r3, #28
 800f0fc:	d502      	bpl.n	800f104 <_vfiprintf_r+0x40>
 800f0fe:	6923      	ldr	r3, [r4, #16]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d11d      	bne.n	800f140 <_vfiprintf_r+0x7c>
 800f104:	0021      	movs	r1, r4
 800f106:	0030      	movs	r0, r6
 800f108:	f000 f96c 	bl	800f3e4 <__swsetup_r>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d017      	beq.n	800f140 <_vfiprintf_r+0x7c>
 800f110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f112:	07db      	lsls	r3, r3, #31
 800f114:	d50d      	bpl.n	800f132 <_vfiprintf_r+0x6e>
 800f116:	2001      	movs	r0, #1
 800f118:	4240      	negs	r0, r0
 800f11a:	b021      	add	sp, #132	; 0x84
 800f11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f11e:	4b7f      	ldr	r3, [pc, #508]	; (800f31c <_vfiprintf_r+0x258>)
 800f120:	429c      	cmp	r4, r3
 800f122:	d101      	bne.n	800f128 <_vfiprintf_r+0x64>
 800f124:	68b4      	ldr	r4, [r6, #8]
 800f126:	e7de      	b.n	800f0e6 <_vfiprintf_r+0x22>
 800f128:	4b7d      	ldr	r3, [pc, #500]	; (800f320 <_vfiprintf_r+0x25c>)
 800f12a:	429c      	cmp	r4, r3
 800f12c:	d1db      	bne.n	800f0e6 <_vfiprintf_r+0x22>
 800f12e:	68f4      	ldr	r4, [r6, #12]
 800f130:	e7d9      	b.n	800f0e6 <_vfiprintf_r+0x22>
 800f132:	89a3      	ldrh	r3, [r4, #12]
 800f134:	059b      	lsls	r3, r3, #22
 800f136:	d4ee      	bmi.n	800f116 <_vfiprintf_r+0x52>
 800f138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f13a:	f000 fba3 	bl	800f884 <__retarget_lock_release_recursive>
 800f13e:	e7ea      	b.n	800f116 <_vfiprintf_r+0x52>
 800f140:	2300      	movs	r3, #0
 800f142:	ad08      	add	r5, sp, #32
 800f144:	616b      	str	r3, [r5, #20]
 800f146:	3320      	adds	r3, #32
 800f148:	766b      	strb	r3, [r5, #25]
 800f14a:	3310      	adds	r3, #16
 800f14c:	76ab      	strb	r3, [r5, #26]
 800f14e:	9707      	str	r7, [sp, #28]
 800f150:	9f03      	ldr	r7, [sp, #12]
 800f152:	783b      	ldrb	r3, [r7, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <_vfiprintf_r+0x98>
 800f158:	2b25      	cmp	r3, #37	; 0x25
 800f15a:	d14e      	bne.n	800f1fa <_vfiprintf_r+0x136>
 800f15c:	9b03      	ldr	r3, [sp, #12]
 800f15e:	1afb      	subs	r3, r7, r3
 800f160:	9305      	str	r3, [sp, #20]
 800f162:	9b03      	ldr	r3, [sp, #12]
 800f164:	429f      	cmp	r7, r3
 800f166:	d00d      	beq.n	800f184 <_vfiprintf_r+0xc0>
 800f168:	9b05      	ldr	r3, [sp, #20]
 800f16a:	0021      	movs	r1, r4
 800f16c:	0030      	movs	r0, r6
 800f16e:	9a03      	ldr	r2, [sp, #12]
 800f170:	f7ff ff96 	bl	800f0a0 <__sfputs_r>
 800f174:	1c43      	adds	r3, r0, #1
 800f176:	d100      	bne.n	800f17a <_vfiprintf_r+0xb6>
 800f178:	e0b5      	b.n	800f2e6 <_vfiprintf_r+0x222>
 800f17a:	696a      	ldr	r2, [r5, #20]
 800f17c:	9b05      	ldr	r3, [sp, #20]
 800f17e:	4694      	mov	ip, r2
 800f180:	4463      	add	r3, ip
 800f182:	616b      	str	r3, [r5, #20]
 800f184:	783b      	ldrb	r3, [r7, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d100      	bne.n	800f18c <_vfiprintf_r+0xc8>
 800f18a:	e0ac      	b.n	800f2e6 <_vfiprintf_r+0x222>
 800f18c:	2201      	movs	r2, #1
 800f18e:	1c7b      	adds	r3, r7, #1
 800f190:	9303      	str	r3, [sp, #12]
 800f192:	2300      	movs	r3, #0
 800f194:	4252      	negs	r2, r2
 800f196:	606a      	str	r2, [r5, #4]
 800f198:	a904      	add	r1, sp, #16
 800f19a:	3254      	adds	r2, #84	; 0x54
 800f19c:	1852      	adds	r2, r2, r1
 800f19e:	602b      	str	r3, [r5, #0]
 800f1a0:	60eb      	str	r3, [r5, #12]
 800f1a2:	60ab      	str	r3, [r5, #8]
 800f1a4:	7013      	strb	r3, [r2, #0]
 800f1a6:	65ab      	str	r3, [r5, #88]	; 0x58
 800f1a8:	9b03      	ldr	r3, [sp, #12]
 800f1aa:	2205      	movs	r2, #5
 800f1ac:	7819      	ldrb	r1, [r3, #0]
 800f1ae:	485d      	ldr	r0, [pc, #372]	; (800f324 <_vfiprintf_r+0x260>)
 800f1b0:	f7fe ff62 	bl	800e078 <memchr>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	1c5f      	adds	r7, r3, #1
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	d120      	bne.n	800f1fe <_vfiprintf_r+0x13a>
 800f1bc:	682a      	ldr	r2, [r5, #0]
 800f1be:	06d3      	lsls	r3, r2, #27
 800f1c0:	d504      	bpl.n	800f1cc <_vfiprintf_r+0x108>
 800f1c2:	2353      	movs	r3, #83	; 0x53
 800f1c4:	a904      	add	r1, sp, #16
 800f1c6:	185b      	adds	r3, r3, r1
 800f1c8:	2120      	movs	r1, #32
 800f1ca:	7019      	strb	r1, [r3, #0]
 800f1cc:	0713      	lsls	r3, r2, #28
 800f1ce:	d504      	bpl.n	800f1da <_vfiprintf_r+0x116>
 800f1d0:	2353      	movs	r3, #83	; 0x53
 800f1d2:	a904      	add	r1, sp, #16
 800f1d4:	185b      	adds	r3, r3, r1
 800f1d6:	212b      	movs	r1, #43	; 0x2b
 800f1d8:	7019      	strb	r1, [r3, #0]
 800f1da:	9b03      	ldr	r3, [sp, #12]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e0:	d016      	beq.n	800f210 <_vfiprintf_r+0x14c>
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	68eb      	ldr	r3, [r5, #12]
 800f1e6:	9f03      	ldr	r7, [sp, #12]
 800f1e8:	783a      	ldrb	r2, [r7, #0]
 800f1ea:	1c78      	adds	r0, r7, #1
 800f1ec:	3a30      	subs	r2, #48	; 0x30
 800f1ee:	4684      	mov	ip, r0
 800f1f0:	2a09      	cmp	r2, #9
 800f1f2:	d94f      	bls.n	800f294 <_vfiprintf_r+0x1d0>
 800f1f4:	2900      	cmp	r1, #0
 800f1f6:	d111      	bne.n	800f21c <_vfiprintf_r+0x158>
 800f1f8:	e017      	b.n	800f22a <_vfiprintf_r+0x166>
 800f1fa:	3701      	adds	r7, #1
 800f1fc:	e7a9      	b.n	800f152 <_vfiprintf_r+0x8e>
 800f1fe:	4b49      	ldr	r3, [pc, #292]	; (800f324 <_vfiprintf_r+0x260>)
 800f200:	682a      	ldr	r2, [r5, #0]
 800f202:	1ac0      	subs	r0, r0, r3
 800f204:	2301      	movs	r3, #1
 800f206:	4083      	lsls	r3, r0
 800f208:	4313      	orrs	r3, r2
 800f20a:	602b      	str	r3, [r5, #0]
 800f20c:	9703      	str	r7, [sp, #12]
 800f20e:	e7cb      	b.n	800f1a8 <_vfiprintf_r+0xe4>
 800f210:	9b07      	ldr	r3, [sp, #28]
 800f212:	1d19      	adds	r1, r3, #4
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	9107      	str	r1, [sp, #28]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	db01      	blt.n	800f220 <_vfiprintf_r+0x15c>
 800f21c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f21e:	e004      	b.n	800f22a <_vfiprintf_r+0x166>
 800f220:	425b      	negs	r3, r3
 800f222:	60eb      	str	r3, [r5, #12]
 800f224:	2302      	movs	r3, #2
 800f226:	4313      	orrs	r3, r2
 800f228:	602b      	str	r3, [r5, #0]
 800f22a:	783b      	ldrb	r3, [r7, #0]
 800f22c:	2b2e      	cmp	r3, #46	; 0x2e
 800f22e:	d10a      	bne.n	800f246 <_vfiprintf_r+0x182>
 800f230:	787b      	ldrb	r3, [r7, #1]
 800f232:	2b2a      	cmp	r3, #42	; 0x2a
 800f234:	d137      	bne.n	800f2a6 <_vfiprintf_r+0x1e2>
 800f236:	9b07      	ldr	r3, [sp, #28]
 800f238:	3702      	adds	r7, #2
 800f23a:	1d1a      	adds	r2, r3, #4
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	9207      	str	r2, [sp, #28]
 800f240:	2b00      	cmp	r3, #0
 800f242:	db2d      	blt.n	800f2a0 <_vfiprintf_r+0x1dc>
 800f244:	9309      	str	r3, [sp, #36]	; 0x24
 800f246:	2203      	movs	r2, #3
 800f248:	7839      	ldrb	r1, [r7, #0]
 800f24a:	4837      	ldr	r0, [pc, #220]	; (800f328 <_vfiprintf_r+0x264>)
 800f24c:	f7fe ff14 	bl	800e078 <memchr>
 800f250:	2800      	cmp	r0, #0
 800f252:	d007      	beq.n	800f264 <_vfiprintf_r+0x1a0>
 800f254:	4b34      	ldr	r3, [pc, #208]	; (800f328 <_vfiprintf_r+0x264>)
 800f256:	682a      	ldr	r2, [r5, #0]
 800f258:	1ac0      	subs	r0, r0, r3
 800f25a:	2340      	movs	r3, #64	; 0x40
 800f25c:	4083      	lsls	r3, r0
 800f25e:	4313      	orrs	r3, r2
 800f260:	3701      	adds	r7, #1
 800f262:	602b      	str	r3, [r5, #0]
 800f264:	7839      	ldrb	r1, [r7, #0]
 800f266:	1c7b      	adds	r3, r7, #1
 800f268:	2206      	movs	r2, #6
 800f26a:	4830      	ldr	r0, [pc, #192]	; (800f32c <_vfiprintf_r+0x268>)
 800f26c:	9303      	str	r3, [sp, #12]
 800f26e:	7629      	strb	r1, [r5, #24]
 800f270:	f7fe ff02 	bl	800e078 <memchr>
 800f274:	2800      	cmp	r0, #0
 800f276:	d045      	beq.n	800f304 <_vfiprintf_r+0x240>
 800f278:	4b2d      	ldr	r3, [pc, #180]	; (800f330 <_vfiprintf_r+0x26c>)
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d127      	bne.n	800f2ce <_vfiprintf_r+0x20a>
 800f27e:	2207      	movs	r2, #7
 800f280:	9b07      	ldr	r3, [sp, #28]
 800f282:	3307      	adds	r3, #7
 800f284:	4393      	bics	r3, r2
 800f286:	3308      	adds	r3, #8
 800f288:	9307      	str	r3, [sp, #28]
 800f28a:	696b      	ldr	r3, [r5, #20]
 800f28c:	9a04      	ldr	r2, [sp, #16]
 800f28e:	189b      	adds	r3, r3, r2
 800f290:	616b      	str	r3, [r5, #20]
 800f292:	e75d      	b.n	800f150 <_vfiprintf_r+0x8c>
 800f294:	210a      	movs	r1, #10
 800f296:	434b      	muls	r3, r1
 800f298:	4667      	mov	r7, ip
 800f29a:	189b      	adds	r3, r3, r2
 800f29c:	3909      	subs	r1, #9
 800f29e:	e7a3      	b.n	800f1e8 <_vfiprintf_r+0x124>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	425b      	negs	r3, r3
 800f2a4:	e7ce      	b.n	800f244 <_vfiprintf_r+0x180>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	001a      	movs	r2, r3
 800f2aa:	3701      	adds	r7, #1
 800f2ac:	606b      	str	r3, [r5, #4]
 800f2ae:	7839      	ldrb	r1, [r7, #0]
 800f2b0:	1c78      	adds	r0, r7, #1
 800f2b2:	3930      	subs	r1, #48	; 0x30
 800f2b4:	4684      	mov	ip, r0
 800f2b6:	2909      	cmp	r1, #9
 800f2b8:	d903      	bls.n	800f2c2 <_vfiprintf_r+0x1fe>
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d0c3      	beq.n	800f246 <_vfiprintf_r+0x182>
 800f2be:	9209      	str	r2, [sp, #36]	; 0x24
 800f2c0:	e7c1      	b.n	800f246 <_vfiprintf_r+0x182>
 800f2c2:	230a      	movs	r3, #10
 800f2c4:	435a      	muls	r2, r3
 800f2c6:	4667      	mov	r7, ip
 800f2c8:	1852      	adds	r2, r2, r1
 800f2ca:	3b09      	subs	r3, #9
 800f2cc:	e7ef      	b.n	800f2ae <_vfiprintf_r+0x1ea>
 800f2ce:	ab07      	add	r3, sp, #28
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	0022      	movs	r2, r4
 800f2d4:	0029      	movs	r1, r5
 800f2d6:	0030      	movs	r0, r6
 800f2d8:	4b16      	ldr	r3, [pc, #88]	; (800f334 <_vfiprintf_r+0x270>)
 800f2da:	f7fb ffdd 	bl	800b298 <_printf_float>
 800f2de:	9004      	str	r0, [sp, #16]
 800f2e0:	9b04      	ldr	r3, [sp, #16]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	d1d1      	bne.n	800f28a <_vfiprintf_r+0x1c6>
 800f2e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2e8:	07db      	lsls	r3, r3, #31
 800f2ea:	d405      	bmi.n	800f2f8 <_vfiprintf_r+0x234>
 800f2ec:	89a3      	ldrh	r3, [r4, #12]
 800f2ee:	059b      	lsls	r3, r3, #22
 800f2f0:	d402      	bmi.n	800f2f8 <_vfiprintf_r+0x234>
 800f2f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2f4:	f000 fac6 	bl	800f884 <__retarget_lock_release_recursive>
 800f2f8:	89a3      	ldrh	r3, [r4, #12]
 800f2fa:	065b      	lsls	r3, r3, #25
 800f2fc:	d500      	bpl.n	800f300 <_vfiprintf_r+0x23c>
 800f2fe:	e70a      	b.n	800f116 <_vfiprintf_r+0x52>
 800f300:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f302:	e70a      	b.n	800f11a <_vfiprintf_r+0x56>
 800f304:	ab07      	add	r3, sp, #28
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	0022      	movs	r2, r4
 800f30a:	0029      	movs	r1, r5
 800f30c:	0030      	movs	r0, r6
 800f30e:	4b09      	ldr	r3, [pc, #36]	; (800f334 <_vfiprintf_r+0x270>)
 800f310:	f7fc fa74 	bl	800b7fc <_printf_i>
 800f314:	e7e3      	b.n	800f2de <_vfiprintf_r+0x21a>
 800f316:	46c0      	nop			; (mov r8, r8)
 800f318:	0801046c 	.word	0x0801046c
 800f31c:	0801048c 	.word	0x0801048c
 800f320:	0801044c 	.word	0x0801044c
 800f324:	080103fc 	.word	0x080103fc
 800f328:	08010402 	.word	0x08010402
 800f32c:	08010406 	.word	0x08010406
 800f330:	0800b299 	.word	0x0800b299
 800f334:	0800f0a1 	.word	0x0800f0a1

0800f338 <__swbuf_r>:
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	0005      	movs	r5, r0
 800f33c:	000e      	movs	r6, r1
 800f33e:	0014      	movs	r4, r2
 800f340:	2800      	cmp	r0, #0
 800f342:	d004      	beq.n	800f34e <__swbuf_r+0x16>
 800f344:	6983      	ldr	r3, [r0, #24]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <__swbuf_r+0x16>
 800f34a:	f000 f9f9 	bl	800f740 <__sinit>
 800f34e:	4b22      	ldr	r3, [pc, #136]	; (800f3d8 <__swbuf_r+0xa0>)
 800f350:	429c      	cmp	r4, r3
 800f352:	d12e      	bne.n	800f3b2 <__swbuf_r+0x7a>
 800f354:	686c      	ldr	r4, [r5, #4]
 800f356:	69a3      	ldr	r3, [r4, #24]
 800f358:	60a3      	str	r3, [r4, #8]
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	071b      	lsls	r3, r3, #28
 800f35e:	d532      	bpl.n	800f3c6 <__swbuf_r+0x8e>
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d02f      	beq.n	800f3c6 <__swbuf_r+0x8e>
 800f366:	6823      	ldr	r3, [r4, #0]
 800f368:	6922      	ldr	r2, [r4, #16]
 800f36a:	b2f7      	uxtb	r7, r6
 800f36c:	1a98      	subs	r0, r3, r2
 800f36e:	6963      	ldr	r3, [r4, #20]
 800f370:	b2f6      	uxtb	r6, r6
 800f372:	4283      	cmp	r3, r0
 800f374:	dc05      	bgt.n	800f382 <__swbuf_r+0x4a>
 800f376:	0021      	movs	r1, r4
 800f378:	0028      	movs	r0, r5
 800f37a:	f000 f93f 	bl	800f5fc <_fflush_r>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d127      	bne.n	800f3d2 <__swbuf_r+0x9a>
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	3001      	adds	r0, #1
 800f386:	3b01      	subs	r3, #1
 800f388:	60a3      	str	r3, [r4, #8]
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	1c5a      	adds	r2, r3, #1
 800f38e:	6022      	str	r2, [r4, #0]
 800f390:	701f      	strb	r7, [r3, #0]
 800f392:	6963      	ldr	r3, [r4, #20]
 800f394:	4283      	cmp	r3, r0
 800f396:	d004      	beq.n	800f3a2 <__swbuf_r+0x6a>
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	07db      	lsls	r3, r3, #31
 800f39c:	d507      	bpl.n	800f3ae <__swbuf_r+0x76>
 800f39e:	2e0a      	cmp	r6, #10
 800f3a0:	d105      	bne.n	800f3ae <__swbuf_r+0x76>
 800f3a2:	0021      	movs	r1, r4
 800f3a4:	0028      	movs	r0, r5
 800f3a6:	f000 f929 	bl	800f5fc <_fflush_r>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d111      	bne.n	800f3d2 <__swbuf_r+0x9a>
 800f3ae:	0030      	movs	r0, r6
 800f3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3b2:	4b0a      	ldr	r3, [pc, #40]	; (800f3dc <__swbuf_r+0xa4>)
 800f3b4:	429c      	cmp	r4, r3
 800f3b6:	d101      	bne.n	800f3bc <__swbuf_r+0x84>
 800f3b8:	68ac      	ldr	r4, [r5, #8]
 800f3ba:	e7cc      	b.n	800f356 <__swbuf_r+0x1e>
 800f3bc:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <__swbuf_r+0xa8>)
 800f3be:	429c      	cmp	r4, r3
 800f3c0:	d1c9      	bne.n	800f356 <__swbuf_r+0x1e>
 800f3c2:	68ec      	ldr	r4, [r5, #12]
 800f3c4:	e7c7      	b.n	800f356 <__swbuf_r+0x1e>
 800f3c6:	0021      	movs	r1, r4
 800f3c8:	0028      	movs	r0, r5
 800f3ca:	f000 f80b 	bl	800f3e4 <__swsetup_r>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	d0c9      	beq.n	800f366 <__swbuf_r+0x2e>
 800f3d2:	2601      	movs	r6, #1
 800f3d4:	4276      	negs	r6, r6
 800f3d6:	e7ea      	b.n	800f3ae <__swbuf_r+0x76>
 800f3d8:	0801046c 	.word	0x0801046c
 800f3dc:	0801048c 	.word	0x0801048c
 800f3e0:	0801044c 	.word	0x0801044c

0800f3e4 <__swsetup_r>:
 800f3e4:	4b37      	ldr	r3, [pc, #220]	; (800f4c4 <__swsetup_r+0xe0>)
 800f3e6:	b570      	push	{r4, r5, r6, lr}
 800f3e8:	681d      	ldr	r5, [r3, #0]
 800f3ea:	0006      	movs	r6, r0
 800f3ec:	000c      	movs	r4, r1
 800f3ee:	2d00      	cmp	r5, #0
 800f3f0:	d005      	beq.n	800f3fe <__swsetup_r+0x1a>
 800f3f2:	69ab      	ldr	r3, [r5, #24]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d102      	bne.n	800f3fe <__swsetup_r+0x1a>
 800f3f8:	0028      	movs	r0, r5
 800f3fa:	f000 f9a1 	bl	800f740 <__sinit>
 800f3fe:	4b32      	ldr	r3, [pc, #200]	; (800f4c8 <__swsetup_r+0xe4>)
 800f400:	429c      	cmp	r4, r3
 800f402:	d10f      	bne.n	800f424 <__swsetup_r+0x40>
 800f404:	686c      	ldr	r4, [r5, #4]
 800f406:	230c      	movs	r3, #12
 800f408:	5ee2      	ldrsh	r2, [r4, r3]
 800f40a:	b293      	uxth	r3, r2
 800f40c:	0711      	lsls	r1, r2, #28
 800f40e:	d42d      	bmi.n	800f46c <__swsetup_r+0x88>
 800f410:	06d9      	lsls	r1, r3, #27
 800f412:	d411      	bmi.n	800f438 <__swsetup_r+0x54>
 800f414:	2309      	movs	r3, #9
 800f416:	2001      	movs	r0, #1
 800f418:	6033      	str	r3, [r6, #0]
 800f41a:	3337      	adds	r3, #55	; 0x37
 800f41c:	4313      	orrs	r3, r2
 800f41e:	81a3      	strh	r3, [r4, #12]
 800f420:	4240      	negs	r0, r0
 800f422:	bd70      	pop	{r4, r5, r6, pc}
 800f424:	4b29      	ldr	r3, [pc, #164]	; (800f4cc <__swsetup_r+0xe8>)
 800f426:	429c      	cmp	r4, r3
 800f428:	d101      	bne.n	800f42e <__swsetup_r+0x4a>
 800f42a:	68ac      	ldr	r4, [r5, #8]
 800f42c:	e7eb      	b.n	800f406 <__swsetup_r+0x22>
 800f42e:	4b28      	ldr	r3, [pc, #160]	; (800f4d0 <__swsetup_r+0xec>)
 800f430:	429c      	cmp	r4, r3
 800f432:	d1e8      	bne.n	800f406 <__swsetup_r+0x22>
 800f434:	68ec      	ldr	r4, [r5, #12]
 800f436:	e7e6      	b.n	800f406 <__swsetup_r+0x22>
 800f438:	075b      	lsls	r3, r3, #29
 800f43a:	d513      	bpl.n	800f464 <__swsetup_r+0x80>
 800f43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f43e:	2900      	cmp	r1, #0
 800f440:	d008      	beq.n	800f454 <__swsetup_r+0x70>
 800f442:	0023      	movs	r3, r4
 800f444:	3344      	adds	r3, #68	; 0x44
 800f446:	4299      	cmp	r1, r3
 800f448:	d002      	beq.n	800f450 <__swsetup_r+0x6c>
 800f44a:	0030      	movs	r0, r6
 800f44c:	f7ff fb16 	bl	800ea7c <_free_r>
 800f450:	2300      	movs	r3, #0
 800f452:	6363      	str	r3, [r4, #52]	; 0x34
 800f454:	2224      	movs	r2, #36	; 0x24
 800f456:	89a3      	ldrh	r3, [r4, #12]
 800f458:	4393      	bics	r3, r2
 800f45a:	81a3      	strh	r3, [r4, #12]
 800f45c:	2300      	movs	r3, #0
 800f45e:	6063      	str	r3, [r4, #4]
 800f460:	6923      	ldr	r3, [r4, #16]
 800f462:	6023      	str	r3, [r4, #0]
 800f464:	2308      	movs	r3, #8
 800f466:	89a2      	ldrh	r2, [r4, #12]
 800f468:	4313      	orrs	r3, r2
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	6923      	ldr	r3, [r4, #16]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10b      	bne.n	800f48a <__swsetup_r+0xa6>
 800f472:	21a0      	movs	r1, #160	; 0xa0
 800f474:	2280      	movs	r2, #128	; 0x80
 800f476:	89a3      	ldrh	r3, [r4, #12]
 800f478:	0089      	lsls	r1, r1, #2
 800f47a:	0092      	lsls	r2, r2, #2
 800f47c:	400b      	ands	r3, r1
 800f47e:	4293      	cmp	r3, r2
 800f480:	d003      	beq.n	800f48a <__swsetup_r+0xa6>
 800f482:	0021      	movs	r1, r4
 800f484:	0030      	movs	r0, r6
 800f486:	f000 fa27 	bl	800f8d8 <__smakebuf_r>
 800f48a:	220c      	movs	r2, #12
 800f48c:	5ea3      	ldrsh	r3, [r4, r2]
 800f48e:	2001      	movs	r0, #1
 800f490:	001a      	movs	r2, r3
 800f492:	b299      	uxth	r1, r3
 800f494:	4002      	ands	r2, r0
 800f496:	4203      	tst	r3, r0
 800f498:	d00f      	beq.n	800f4ba <__swsetup_r+0xd6>
 800f49a:	2200      	movs	r2, #0
 800f49c:	60a2      	str	r2, [r4, #8]
 800f49e:	6962      	ldr	r2, [r4, #20]
 800f4a0:	4252      	negs	r2, r2
 800f4a2:	61a2      	str	r2, [r4, #24]
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	6922      	ldr	r2, [r4, #16]
 800f4a8:	4282      	cmp	r2, r0
 800f4aa:	d1ba      	bne.n	800f422 <__swsetup_r+0x3e>
 800f4ac:	060a      	lsls	r2, r1, #24
 800f4ae:	d5b8      	bpl.n	800f422 <__swsetup_r+0x3e>
 800f4b0:	2240      	movs	r2, #64	; 0x40
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	81a3      	strh	r3, [r4, #12]
 800f4b6:	3801      	subs	r0, #1
 800f4b8:	e7b3      	b.n	800f422 <__swsetup_r+0x3e>
 800f4ba:	0788      	lsls	r0, r1, #30
 800f4bc:	d400      	bmi.n	800f4c0 <__swsetup_r+0xdc>
 800f4be:	6962      	ldr	r2, [r4, #20]
 800f4c0:	60a2      	str	r2, [r4, #8]
 800f4c2:	e7ef      	b.n	800f4a4 <__swsetup_r+0xc0>
 800f4c4:	200002b0 	.word	0x200002b0
 800f4c8:	0801046c 	.word	0x0801046c
 800f4cc:	0801048c 	.word	0x0801048c
 800f4d0:	0801044c 	.word	0x0801044c

0800f4d4 <abort>:
 800f4d4:	2006      	movs	r0, #6
 800f4d6:	b510      	push	{r4, lr}
 800f4d8:	f000 fa74 	bl	800f9c4 <raise>
 800f4dc:	2001      	movs	r0, #1
 800f4de:	f7f6 fdb5 	bl	800604c <_exit>
	...

0800f4e4 <__sflush_r>:
 800f4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4e6:	898b      	ldrh	r3, [r1, #12]
 800f4e8:	0005      	movs	r5, r0
 800f4ea:	000c      	movs	r4, r1
 800f4ec:	071a      	lsls	r2, r3, #28
 800f4ee:	d45f      	bmi.n	800f5b0 <__sflush_r+0xcc>
 800f4f0:	684a      	ldr	r2, [r1, #4]
 800f4f2:	2a00      	cmp	r2, #0
 800f4f4:	dc04      	bgt.n	800f500 <__sflush_r+0x1c>
 800f4f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f4f8:	2a00      	cmp	r2, #0
 800f4fa:	dc01      	bgt.n	800f500 <__sflush_r+0x1c>
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f500:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f502:	2f00      	cmp	r7, #0
 800f504:	d0fa      	beq.n	800f4fc <__sflush_r+0x18>
 800f506:	2200      	movs	r2, #0
 800f508:	2180      	movs	r1, #128	; 0x80
 800f50a:	682e      	ldr	r6, [r5, #0]
 800f50c:	602a      	str	r2, [r5, #0]
 800f50e:	001a      	movs	r2, r3
 800f510:	0149      	lsls	r1, r1, #5
 800f512:	400a      	ands	r2, r1
 800f514:	420b      	tst	r3, r1
 800f516:	d034      	beq.n	800f582 <__sflush_r+0x9e>
 800f518:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	075b      	lsls	r3, r3, #29
 800f51e:	d506      	bpl.n	800f52e <__sflush_r+0x4a>
 800f520:	6863      	ldr	r3, [r4, #4]
 800f522:	1ac0      	subs	r0, r0, r3
 800f524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f526:	2b00      	cmp	r3, #0
 800f528:	d001      	beq.n	800f52e <__sflush_r+0x4a>
 800f52a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f52c:	1ac0      	subs	r0, r0, r3
 800f52e:	0002      	movs	r2, r0
 800f530:	6a21      	ldr	r1, [r4, #32]
 800f532:	2300      	movs	r3, #0
 800f534:	0028      	movs	r0, r5
 800f536:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f538:	47b8      	blx	r7
 800f53a:	89a1      	ldrh	r1, [r4, #12]
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d106      	bne.n	800f54e <__sflush_r+0x6a>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	2b1d      	cmp	r3, #29
 800f544:	d831      	bhi.n	800f5aa <__sflush_r+0xc6>
 800f546:	4a2c      	ldr	r2, [pc, #176]	; (800f5f8 <__sflush_r+0x114>)
 800f548:	40da      	lsrs	r2, r3
 800f54a:	07d3      	lsls	r3, r2, #31
 800f54c:	d52d      	bpl.n	800f5aa <__sflush_r+0xc6>
 800f54e:	2300      	movs	r3, #0
 800f550:	6063      	str	r3, [r4, #4]
 800f552:	6923      	ldr	r3, [r4, #16]
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	04cb      	lsls	r3, r1, #19
 800f558:	d505      	bpl.n	800f566 <__sflush_r+0x82>
 800f55a:	1c43      	adds	r3, r0, #1
 800f55c:	d102      	bne.n	800f564 <__sflush_r+0x80>
 800f55e:	682b      	ldr	r3, [r5, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d100      	bne.n	800f566 <__sflush_r+0x82>
 800f564:	6560      	str	r0, [r4, #84]	; 0x54
 800f566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f568:	602e      	str	r6, [r5, #0]
 800f56a:	2900      	cmp	r1, #0
 800f56c:	d0c6      	beq.n	800f4fc <__sflush_r+0x18>
 800f56e:	0023      	movs	r3, r4
 800f570:	3344      	adds	r3, #68	; 0x44
 800f572:	4299      	cmp	r1, r3
 800f574:	d002      	beq.n	800f57c <__sflush_r+0x98>
 800f576:	0028      	movs	r0, r5
 800f578:	f7ff fa80 	bl	800ea7c <_free_r>
 800f57c:	2000      	movs	r0, #0
 800f57e:	6360      	str	r0, [r4, #52]	; 0x34
 800f580:	e7bd      	b.n	800f4fe <__sflush_r+0x1a>
 800f582:	2301      	movs	r3, #1
 800f584:	0028      	movs	r0, r5
 800f586:	6a21      	ldr	r1, [r4, #32]
 800f588:	47b8      	blx	r7
 800f58a:	1c43      	adds	r3, r0, #1
 800f58c:	d1c5      	bne.n	800f51a <__sflush_r+0x36>
 800f58e:	682b      	ldr	r3, [r5, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0c2      	beq.n	800f51a <__sflush_r+0x36>
 800f594:	2b1d      	cmp	r3, #29
 800f596:	d001      	beq.n	800f59c <__sflush_r+0xb8>
 800f598:	2b16      	cmp	r3, #22
 800f59a:	d101      	bne.n	800f5a0 <__sflush_r+0xbc>
 800f59c:	602e      	str	r6, [r5, #0]
 800f59e:	e7ad      	b.n	800f4fc <__sflush_r+0x18>
 800f5a0:	2340      	movs	r3, #64	; 0x40
 800f5a2:	89a2      	ldrh	r2, [r4, #12]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	81a3      	strh	r3, [r4, #12]
 800f5a8:	e7a9      	b.n	800f4fe <__sflush_r+0x1a>
 800f5aa:	2340      	movs	r3, #64	; 0x40
 800f5ac:	430b      	orrs	r3, r1
 800f5ae:	e7fa      	b.n	800f5a6 <__sflush_r+0xc2>
 800f5b0:	690f      	ldr	r7, [r1, #16]
 800f5b2:	2f00      	cmp	r7, #0
 800f5b4:	d0a2      	beq.n	800f4fc <__sflush_r+0x18>
 800f5b6:	680a      	ldr	r2, [r1, #0]
 800f5b8:	600f      	str	r7, [r1, #0]
 800f5ba:	1bd2      	subs	r2, r2, r7
 800f5bc:	9201      	str	r2, [sp, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	079b      	lsls	r3, r3, #30
 800f5c2:	d100      	bne.n	800f5c6 <__sflush_r+0xe2>
 800f5c4:	694a      	ldr	r2, [r1, #20]
 800f5c6:	60a2      	str	r2, [r4, #8]
 800f5c8:	9b01      	ldr	r3, [sp, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dc00      	bgt.n	800f5d0 <__sflush_r+0xec>
 800f5ce:	e795      	b.n	800f4fc <__sflush_r+0x18>
 800f5d0:	003a      	movs	r2, r7
 800f5d2:	0028      	movs	r0, r5
 800f5d4:	9b01      	ldr	r3, [sp, #4]
 800f5d6:	6a21      	ldr	r1, [r4, #32]
 800f5d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5da:	47b0      	blx	r6
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	dc06      	bgt.n	800f5ee <__sflush_r+0x10a>
 800f5e0:	2340      	movs	r3, #64	; 0x40
 800f5e2:	2001      	movs	r0, #1
 800f5e4:	89a2      	ldrh	r2, [r4, #12]
 800f5e6:	4240      	negs	r0, r0
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	81a3      	strh	r3, [r4, #12]
 800f5ec:	e787      	b.n	800f4fe <__sflush_r+0x1a>
 800f5ee:	9b01      	ldr	r3, [sp, #4]
 800f5f0:	183f      	adds	r7, r7, r0
 800f5f2:	1a1b      	subs	r3, r3, r0
 800f5f4:	9301      	str	r3, [sp, #4]
 800f5f6:	e7e7      	b.n	800f5c8 <__sflush_r+0xe4>
 800f5f8:	20400001 	.word	0x20400001

0800f5fc <_fflush_r>:
 800f5fc:	690b      	ldr	r3, [r1, #16]
 800f5fe:	b570      	push	{r4, r5, r6, lr}
 800f600:	0005      	movs	r5, r0
 800f602:	000c      	movs	r4, r1
 800f604:	2b00      	cmp	r3, #0
 800f606:	d102      	bne.n	800f60e <_fflush_r+0x12>
 800f608:	2500      	movs	r5, #0
 800f60a:	0028      	movs	r0, r5
 800f60c:	bd70      	pop	{r4, r5, r6, pc}
 800f60e:	2800      	cmp	r0, #0
 800f610:	d004      	beq.n	800f61c <_fflush_r+0x20>
 800f612:	6983      	ldr	r3, [r0, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <_fflush_r+0x20>
 800f618:	f000 f892 	bl	800f740 <__sinit>
 800f61c:	4b14      	ldr	r3, [pc, #80]	; (800f670 <_fflush_r+0x74>)
 800f61e:	429c      	cmp	r4, r3
 800f620:	d11b      	bne.n	800f65a <_fflush_r+0x5e>
 800f622:	686c      	ldr	r4, [r5, #4]
 800f624:	220c      	movs	r2, #12
 800f626:	5ea3      	ldrsh	r3, [r4, r2]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d0ed      	beq.n	800f608 <_fflush_r+0xc>
 800f62c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f62e:	07d2      	lsls	r2, r2, #31
 800f630:	d404      	bmi.n	800f63c <_fflush_r+0x40>
 800f632:	059b      	lsls	r3, r3, #22
 800f634:	d402      	bmi.n	800f63c <_fflush_r+0x40>
 800f636:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f638:	f000 f923 	bl	800f882 <__retarget_lock_acquire_recursive>
 800f63c:	0028      	movs	r0, r5
 800f63e:	0021      	movs	r1, r4
 800f640:	f7ff ff50 	bl	800f4e4 <__sflush_r>
 800f644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f646:	0005      	movs	r5, r0
 800f648:	07db      	lsls	r3, r3, #31
 800f64a:	d4de      	bmi.n	800f60a <_fflush_r+0xe>
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	059b      	lsls	r3, r3, #22
 800f650:	d4db      	bmi.n	800f60a <_fflush_r+0xe>
 800f652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f654:	f000 f916 	bl	800f884 <__retarget_lock_release_recursive>
 800f658:	e7d7      	b.n	800f60a <_fflush_r+0xe>
 800f65a:	4b06      	ldr	r3, [pc, #24]	; (800f674 <_fflush_r+0x78>)
 800f65c:	429c      	cmp	r4, r3
 800f65e:	d101      	bne.n	800f664 <_fflush_r+0x68>
 800f660:	68ac      	ldr	r4, [r5, #8]
 800f662:	e7df      	b.n	800f624 <_fflush_r+0x28>
 800f664:	4b04      	ldr	r3, [pc, #16]	; (800f678 <_fflush_r+0x7c>)
 800f666:	429c      	cmp	r4, r3
 800f668:	d1dc      	bne.n	800f624 <_fflush_r+0x28>
 800f66a:	68ec      	ldr	r4, [r5, #12]
 800f66c:	e7da      	b.n	800f624 <_fflush_r+0x28>
 800f66e:	46c0      	nop			; (mov r8, r8)
 800f670:	0801046c 	.word	0x0801046c
 800f674:	0801048c 	.word	0x0801048c
 800f678:	0801044c 	.word	0x0801044c

0800f67c <std>:
 800f67c:	2300      	movs	r3, #0
 800f67e:	b510      	push	{r4, lr}
 800f680:	0004      	movs	r4, r0
 800f682:	6003      	str	r3, [r0, #0]
 800f684:	6043      	str	r3, [r0, #4]
 800f686:	6083      	str	r3, [r0, #8]
 800f688:	8181      	strh	r1, [r0, #12]
 800f68a:	6643      	str	r3, [r0, #100]	; 0x64
 800f68c:	0019      	movs	r1, r3
 800f68e:	81c2      	strh	r2, [r0, #14]
 800f690:	6103      	str	r3, [r0, #16]
 800f692:	6143      	str	r3, [r0, #20]
 800f694:	6183      	str	r3, [r0, #24]
 800f696:	2208      	movs	r2, #8
 800f698:	305c      	adds	r0, #92	; 0x5c
 800f69a:	f7fb fd4a 	bl	800b132 <memset>
 800f69e:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <std+0x38>)
 800f6a0:	6224      	str	r4, [r4, #32]
 800f6a2:	6263      	str	r3, [r4, #36]	; 0x24
 800f6a4:	4b04      	ldr	r3, [pc, #16]	; (800f6b8 <std+0x3c>)
 800f6a6:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6a8:	4b04      	ldr	r3, [pc, #16]	; (800f6bc <std+0x40>)
 800f6aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f6ac:	4b04      	ldr	r3, [pc, #16]	; (800f6c0 <std+0x44>)
 800f6ae:	6323      	str	r3, [r4, #48]	; 0x30
 800f6b0:	bd10      	pop	{r4, pc}
 800f6b2:	46c0      	nop			; (mov r8, r8)
 800f6b4:	0800fa05 	.word	0x0800fa05
 800f6b8:	0800fa2d 	.word	0x0800fa2d
 800f6bc:	0800fa65 	.word	0x0800fa65
 800f6c0:	0800fa91 	.word	0x0800fa91

0800f6c4 <_cleanup_r>:
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	4902      	ldr	r1, [pc, #8]	; (800f6d0 <_cleanup_r+0xc>)
 800f6c8:	f000 f8ba 	bl	800f840 <_fwalk_reent>
 800f6cc:	bd10      	pop	{r4, pc}
 800f6ce:	46c0      	nop			; (mov r8, r8)
 800f6d0:	0800f5fd 	.word	0x0800f5fd

0800f6d4 <__sfmoreglue>:
 800f6d4:	b570      	push	{r4, r5, r6, lr}
 800f6d6:	2568      	movs	r5, #104	; 0x68
 800f6d8:	1e4a      	subs	r2, r1, #1
 800f6da:	4355      	muls	r5, r2
 800f6dc:	000e      	movs	r6, r1
 800f6de:	0029      	movs	r1, r5
 800f6e0:	3174      	adds	r1, #116	; 0x74
 800f6e2:	f7ff fa37 	bl	800eb54 <_malloc_r>
 800f6e6:	1e04      	subs	r4, r0, #0
 800f6e8:	d008      	beq.n	800f6fc <__sfmoreglue+0x28>
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	002a      	movs	r2, r5
 800f6ee:	6001      	str	r1, [r0, #0]
 800f6f0:	6046      	str	r6, [r0, #4]
 800f6f2:	300c      	adds	r0, #12
 800f6f4:	60a0      	str	r0, [r4, #8]
 800f6f6:	3268      	adds	r2, #104	; 0x68
 800f6f8:	f7fb fd1b 	bl	800b132 <memset>
 800f6fc:	0020      	movs	r0, r4
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}

0800f700 <__sfp_lock_acquire>:
 800f700:	b510      	push	{r4, lr}
 800f702:	4802      	ldr	r0, [pc, #8]	; (800f70c <__sfp_lock_acquire+0xc>)
 800f704:	f000 f8bd 	bl	800f882 <__retarget_lock_acquire_recursive>
 800f708:	bd10      	pop	{r4, pc}
 800f70a:	46c0      	nop			; (mov r8, r8)
 800f70c:	200022d9 	.word	0x200022d9

0800f710 <__sfp_lock_release>:
 800f710:	b510      	push	{r4, lr}
 800f712:	4802      	ldr	r0, [pc, #8]	; (800f71c <__sfp_lock_release+0xc>)
 800f714:	f000 f8b6 	bl	800f884 <__retarget_lock_release_recursive>
 800f718:	bd10      	pop	{r4, pc}
 800f71a:	46c0      	nop			; (mov r8, r8)
 800f71c:	200022d9 	.word	0x200022d9

0800f720 <__sinit_lock_acquire>:
 800f720:	b510      	push	{r4, lr}
 800f722:	4802      	ldr	r0, [pc, #8]	; (800f72c <__sinit_lock_acquire+0xc>)
 800f724:	f000 f8ad 	bl	800f882 <__retarget_lock_acquire_recursive>
 800f728:	bd10      	pop	{r4, pc}
 800f72a:	46c0      	nop			; (mov r8, r8)
 800f72c:	200022da 	.word	0x200022da

0800f730 <__sinit_lock_release>:
 800f730:	b510      	push	{r4, lr}
 800f732:	4802      	ldr	r0, [pc, #8]	; (800f73c <__sinit_lock_release+0xc>)
 800f734:	f000 f8a6 	bl	800f884 <__retarget_lock_release_recursive>
 800f738:	bd10      	pop	{r4, pc}
 800f73a:	46c0      	nop			; (mov r8, r8)
 800f73c:	200022da 	.word	0x200022da

0800f740 <__sinit>:
 800f740:	b513      	push	{r0, r1, r4, lr}
 800f742:	0004      	movs	r4, r0
 800f744:	f7ff ffec 	bl	800f720 <__sinit_lock_acquire>
 800f748:	69a3      	ldr	r3, [r4, #24]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d002      	beq.n	800f754 <__sinit+0x14>
 800f74e:	f7ff ffef 	bl	800f730 <__sinit_lock_release>
 800f752:	bd13      	pop	{r0, r1, r4, pc}
 800f754:	64a3      	str	r3, [r4, #72]	; 0x48
 800f756:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f758:	6523      	str	r3, [r4, #80]	; 0x50
 800f75a:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <__sinit+0x68>)
 800f75c:	4a13      	ldr	r2, [pc, #76]	; (800f7ac <__sinit+0x6c>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	62a2      	str	r2, [r4, #40]	; 0x28
 800f762:	9301      	str	r3, [sp, #4]
 800f764:	42a3      	cmp	r3, r4
 800f766:	d101      	bne.n	800f76c <__sinit+0x2c>
 800f768:	2301      	movs	r3, #1
 800f76a:	61a3      	str	r3, [r4, #24]
 800f76c:	0020      	movs	r0, r4
 800f76e:	f000 f81f 	bl	800f7b0 <__sfp>
 800f772:	6060      	str	r0, [r4, #4]
 800f774:	0020      	movs	r0, r4
 800f776:	f000 f81b 	bl	800f7b0 <__sfp>
 800f77a:	60a0      	str	r0, [r4, #8]
 800f77c:	0020      	movs	r0, r4
 800f77e:	f000 f817 	bl	800f7b0 <__sfp>
 800f782:	2200      	movs	r2, #0
 800f784:	2104      	movs	r1, #4
 800f786:	60e0      	str	r0, [r4, #12]
 800f788:	6860      	ldr	r0, [r4, #4]
 800f78a:	f7ff ff77 	bl	800f67c <std>
 800f78e:	2201      	movs	r2, #1
 800f790:	2109      	movs	r1, #9
 800f792:	68a0      	ldr	r0, [r4, #8]
 800f794:	f7ff ff72 	bl	800f67c <std>
 800f798:	2202      	movs	r2, #2
 800f79a:	2112      	movs	r1, #18
 800f79c:	68e0      	ldr	r0, [r4, #12]
 800f79e:	f7ff ff6d 	bl	800f67c <std>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	61a3      	str	r3, [r4, #24]
 800f7a6:	e7d2      	b.n	800f74e <__sinit+0xe>
 800f7a8:	08010008 	.word	0x08010008
 800f7ac:	0800f6c5 	.word	0x0800f6c5

0800f7b0 <__sfp>:
 800f7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b2:	0007      	movs	r7, r0
 800f7b4:	f7ff ffa4 	bl	800f700 <__sfp_lock_acquire>
 800f7b8:	4b1f      	ldr	r3, [pc, #124]	; (800f838 <__sfp+0x88>)
 800f7ba:	681e      	ldr	r6, [r3, #0]
 800f7bc:	69b3      	ldr	r3, [r6, #24]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d102      	bne.n	800f7c8 <__sfp+0x18>
 800f7c2:	0030      	movs	r0, r6
 800f7c4:	f7ff ffbc 	bl	800f740 <__sinit>
 800f7c8:	3648      	adds	r6, #72	; 0x48
 800f7ca:	68b4      	ldr	r4, [r6, #8]
 800f7cc:	6873      	ldr	r3, [r6, #4]
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	d504      	bpl.n	800f7dc <__sfp+0x2c>
 800f7d2:	6833      	ldr	r3, [r6, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d022      	beq.n	800f81e <__sfp+0x6e>
 800f7d8:	6836      	ldr	r6, [r6, #0]
 800f7da:	e7f6      	b.n	800f7ca <__sfp+0x1a>
 800f7dc:	220c      	movs	r2, #12
 800f7de:	5ea5      	ldrsh	r5, [r4, r2]
 800f7e0:	2d00      	cmp	r5, #0
 800f7e2:	d11a      	bne.n	800f81a <__sfp+0x6a>
 800f7e4:	0020      	movs	r0, r4
 800f7e6:	4b15      	ldr	r3, [pc, #84]	; (800f83c <__sfp+0x8c>)
 800f7e8:	3058      	adds	r0, #88	; 0x58
 800f7ea:	60e3      	str	r3, [r4, #12]
 800f7ec:	6665      	str	r5, [r4, #100]	; 0x64
 800f7ee:	f000 f847 	bl	800f880 <__retarget_lock_init_recursive>
 800f7f2:	f7ff ff8d 	bl	800f710 <__sfp_lock_release>
 800f7f6:	0020      	movs	r0, r4
 800f7f8:	2208      	movs	r2, #8
 800f7fa:	0029      	movs	r1, r5
 800f7fc:	6025      	str	r5, [r4, #0]
 800f7fe:	60a5      	str	r5, [r4, #8]
 800f800:	6065      	str	r5, [r4, #4]
 800f802:	6125      	str	r5, [r4, #16]
 800f804:	6165      	str	r5, [r4, #20]
 800f806:	61a5      	str	r5, [r4, #24]
 800f808:	305c      	adds	r0, #92	; 0x5c
 800f80a:	f7fb fc92 	bl	800b132 <memset>
 800f80e:	6365      	str	r5, [r4, #52]	; 0x34
 800f810:	63a5      	str	r5, [r4, #56]	; 0x38
 800f812:	64a5      	str	r5, [r4, #72]	; 0x48
 800f814:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f816:	0020      	movs	r0, r4
 800f818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f81a:	3468      	adds	r4, #104	; 0x68
 800f81c:	e7d7      	b.n	800f7ce <__sfp+0x1e>
 800f81e:	2104      	movs	r1, #4
 800f820:	0038      	movs	r0, r7
 800f822:	f7ff ff57 	bl	800f6d4 <__sfmoreglue>
 800f826:	1e04      	subs	r4, r0, #0
 800f828:	6030      	str	r0, [r6, #0]
 800f82a:	d1d5      	bne.n	800f7d8 <__sfp+0x28>
 800f82c:	f7ff ff70 	bl	800f710 <__sfp_lock_release>
 800f830:	230c      	movs	r3, #12
 800f832:	603b      	str	r3, [r7, #0]
 800f834:	e7ef      	b.n	800f816 <__sfp+0x66>
 800f836:	46c0      	nop			; (mov r8, r8)
 800f838:	08010008 	.word	0x08010008
 800f83c:	ffff0001 	.word	0xffff0001

0800f840 <_fwalk_reent>:
 800f840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f842:	0004      	movs	r4, r0
 800f844:	0006      	movs	r6, r0
 800f846:	2700      	movs	r7, #0
 800f848:	9101      	str	r1, [sp, #4]
 800f84a:	3448      	adds	r4, #72	; 0x48
 800f84c:	6863      	ldr	r3, [r4, #4]
 800f84e:	68a5      	ldr	r5, [r4, #8]
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	9b00      	ldr	r3, [sp, #0]
 800f854:	3b01      	subs	r3, #1
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	d504      	bpl.n	800f864 <_fwalk_reent+0x24>
 800f85a:	6824      	ldr	r4, [r4, #0]
 800f85c:	2c00      	cmp	r4, #0
 800f85e:	d1f5      	bne.n	800f84c <_fwalk_reent+0xc>
 800f860:	0038      	movs	r0, r7
 800f862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f864:	89ab      	ldrh	r3, [r5, #12]
 800f866:	2b01      	cmp	r3, #1
 800f868:	d908      	bls.n	800f87c <_fwalk_reent+0x3c>
 800f86a:	220e      	movs	r2, #14
 800f86c:	5eab      	ldrsh	r3, [r5, r2]
 800f86e:	3301      	adds	r3, #1
 800f870:	d004      	beq.n	800f87c <_fwalk_reent+0x3c>
 800f872:	0029      	movs	r1, r5
 800f874:	0030      	movs	r0, r6
 800f876:	9b01      	ldr	r3, [sp, #4]
 800f878:	4798      	blx	r3
 800f87a:	4307      	orrs	r7, r0
 800f87c:	3568      	adds	r5, #104	; 0x68
 800f87e:	e7e8      	b.n	800f852 <_fwalk_reent+0x12>

0800f880 <__retarget_lock_init_recursive>:
 800f880:	4770      	bx	lr

0800f882 <__retarget_lock_acquire_recursive>:
 800f882:	4770      	bx	lr

0800f884 <__retarget_lock_release_recursive>:
 800f884:	4770      	bx	lr
	...

0800f888 <__swhatbuf_r>:
 800f888:	b570      	push	{r4, r5, r6, lr}
 800f88a:	000e      	movs	r6, r1
 800f88c:	001d      	movs	r5, r3
 800f88e:	230e      	movs	r3, #14
 800f890:	5ec9      	ldrsh	r1, [r1, r3]
 800f892:	0014      	movs	r4, r2
 800f894:	b096      	sub	sp, #88	; 0x58
 800f896:	2900      	cmp	r1, #0
 800f898:	da08      	bge.n	800f8ac <__swhatbuf_r+0x24>
 800f89a:	220c      	movs	r2, #12
 800f89c:	5eb3      	ldrsh	r3, [r6, r2]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	602a      	str	r2, [r5, #0]
 800f8a2:	061b      	lsls	r3, r3, #24
 800f8a4:	d411      	bmi.n	800f8ca <__swhatbuf_r+0x42>
 800f8a6:	2380      	movs	r3, #128	; 0x80
 800f8a8:	00db      	lsls	r3, r3, #3
 800f8aa:	e00f      	b.n	800f8cc <__swhatbuf_r+0x44>
 800f8ac:	466a      	mov	r2, sp
 800f8ae:	f000 f91b 	bl	800fae8 <_fstat_r>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	dbf1      	blt.n	800f89a <__swhatbuf_r+0x12>
 800f8b6:	23f0      	movs	r3, #240	; 0xf0
 800f8b8:	9901      	ldr	r1, [sp, #4]
 800f8ba:	021b      	lsls	r3, r3, #8
 800f8bc:	4019      	ands	r1, r3
 800f8be:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <__swhatbuf_r+0x4c>)
 800f8c0:	18c9      	adds	r1, r1, r3
 800f8c2:	424b      	negs	r3, r1
 800f8c4:	4159      	adcs	r1, r3
 800f8c6:	6029      	str	r1, [r5, #0]
 800f8c8:	e7ed      	b.n	800f8a6 <__swhatbuf_r+0x1e>
 800f8ca:	2340      	movs	r3, #64	; 0x40
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	6023      	str	r3, [r4, #0]
 800f8d0:	b016      	add	sp, #88	; 0x58
 800f8d2:	bd70      	pop	{r4, r5, r6, pc}
 800f8d4:	ffffe000 	.word	0xffffe000

0800f8d8 <__smakebuf_r>:
 800f8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8da:	2602      	movs	r6, #2
 800f8dc:	898b      	ldrh	r3, [r1, #12]
 800f8de:	0005      	movs	r5, r0
 800f8e0:	000c      	movs	r4, r1
 800f8e2:	4233      	tst	r3, r6
 800f8e4:	d006      	beq.n	800f8f4 <__smakebuf_r+0x1c>
 800f8e6:	0023      	movs	r3, r4
 800f8e8:	3347      	adds	r3, #71	; 0x47
 800f8ea:	6023      	str	r3, [r4, #0]
 800f8ec:	6123      	str	r3, [r4, #16]
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	6163      	str	r3, [r4, #20]
 800f8f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f8f4:	466a      	mov	r2, sp
 800f8f6:	ab01      	add	r3, sp, #4
 800f8f8:	f7ff ffc6 	bl	800f888 <__swhatbuf_r>
 800f8fc:	9900      	ldr	r1, [sp, #0]
 800f8fe:	0007      	movs	r7, r0
 800f900:	0028      	movs	r0, r5
 800f902:	f7ff f927 	bl	800eb54 <_malloc_r>
 800f906:	2800      	cmp	r0, #0
 800f908:	d108      	bne.n	800f91c <__smakebuf_r+0x44>
 800f90a:	220c      	movs	r2, #12
 800f90c:	5ea3      	ldrsh	r3, [r4, r2]
 800f90e:	059a      	lsls	r2, r3, #22
 800f910:	d4ef      	bmi.n	800f8f2 <__smakebuf_r+0x1a>
 800f912:	2203      	movs	r2, #3
 800f914:	4393      	bics	r3, r2
 800f916:	431e      	orrs	r6, r3
 800f918:	81a6      	strh	r6, [r4, #12]
 800f91a:	e7e4      	b.n	800f8e6 <__smakebuf_r+0xe>
 800f91c:	4b0f      	ldr	r3, [pc, #60]	; (800f95c <__smakebuf_r+0x84>)
 800f91e:	62ab      	str	r3, [r5, #40]	; 0x28
 800f920:	2380      	movs	r3, #128	; 0x80
 800f922:	89a2      	ldrh	r2, [r4, #12]
 800f924:	6020      	str	r0, [r4, #0]
 800f926:	4313      	orrs	r3, r2
 800f928:	81a3      	strh	r3, [r4, #12]
 800f92a:	9b00      	ldr	r3, [sp, #0]
 800f92c:	6120      	str	r0, [r4, #16]
 800f92e:	6163      	str	r3, [r4, #20]
 800f930:	9b01      	ldr	r3, [sp, #4]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00d      	beq.n	800f952 <__smakebuf_r+0x7a>
 800f936:	0028      	movs	r0, r5
 800f938:	230e      	movs	r3, #14
 800f93a:	5ee1      	ldrsh	r1, [r4, r3]
 800f93c:	f000 f8e6 	bl	800fb0c <_isatty_r>
 800f940:	2800      	cmp	r0, #0
 800f942:	d006      	beq.n	800f952 <__smakebuf_r+0x7a>
 800f944:	2203      	movs	r2, #3
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	4393      	bics	r3, r2
 800f94a:	001a      	movs	r2, r3
 800f94c:	2301      	movs	r3, #1
 800f94e:	4313      	orrs	r3, r2
 800f950:	81a3      	strh	r3, [r4, #12]
 800f952:	89a0      	ldrh	r0, [r4, #12]
 800f954:	4307      	orrs	r7, r0
 800f956:	81a7      	strh	r7, [r4, #12]
 800f958:	e7cb      	b.n	800f8f2 <__smakebuf_r+0x1a>
 800f95a:	46c0      	nop			; (mov r8, r8)
 800f95c:	0800f6c5 	.word	0x0800f6c5

0800f960 <_malloc_usable_size_r>:
 800f960:	1f0b      	subs	r3, r1, #4
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	1f18      	subs	r0, r3, #4
 800f966:	2b00      	cmp	r3, #0
 800f968:	da01      	bge.n	800f96e <_malloc_usable_size_r+0xe>
 800f96a:	580b      	ldr	r3, [r1, r0]
 800f96c:	18c0      	adds	r0, r0, r3
 800f96e:	4770      	bx	lr

0800f970 <_raise_r>:
 800f970:	b570      	push	{r4, r5, r6, lr}
 800f972:	0004      	movs	r4, r0
 800f974:	000d      	movs	r5, r1
 800f976:	291f      	cmp	r1, #31
 800f978:	d904      	bls.n	800f984 <_raise_r+0x14>
 800f97a:	2316      	movs	r3, #22
 800f97c:	6003      	str	r3, [r0, #0]
 800f97e:	2001      	movs	r0, #1
 800f980:	4240      	negs	r0, r0
 800f982:	bd70      	pop	{r4, r5, r6, pc}
 800f984:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f986:	2b00      	cmp	r3, #0
 800f988:	d004      	beq.n	800f994 <_raise_r+0x24>
 800f98a:	008a      	lsls	r2, r1, #2
 800f98c:	189b      	adds	r3, r3, r2
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	2a00      	cmp	r2, #0
 800f992:	d108      	bne.n	800f9a6 <_raise_r+0x36>
 800f994:	0020      	movs	r0, r4
 800f996:	f000 f831 	bl	800f9fc <_getpid_r>
 800f99a:	002a      	movs	r2, r5
 800f99c:	0001      	movs	r1, r0
 800f99e:	0020      	movs	r0, r4
 800f9a0:	f000 f81a 	bl	800f9d8 <_kill_r>
 800f9a4:	e7ed      	b.n	800f982 <_raise_r+0x12>
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	2a01      	cmp	r2, #1
 800f9aa:	d0ea      	beq.n	800f982 <_raise_r+0x12>
 800f9ac:	1c51      	adds	r1, r2, #1
 800f9ae:	d103      	bne.n	800f9b8 <_raise_r+0x48>
 800f9b0:	2316      	movs	r3, #22
 800f9b2:	3001      	adds	r0, #1
 800f9b4:	6023      	str	r3, [r4, #0]
 800f9b6:	e7e4      	b.n	800f982 <_raise_r+0x12>
 800f9b8:	2400      	movs	r4, #0
 800f9ba:	0028      	movs	r0, r5
 800f9bc:	601c      	str	r4, [r3, #0]
 800f9be:	4790      	blx	r2
 800f9c0:	0020      	movs	r0, r4
 800f9c2:	e7de      	b.n	800f982 <_raise_r+0x12>

0800f9c4 <raise>:
 800f9c4:	b510      	push	{r4, lr}
 800f9c6:	4b03      	ldr	r3, [pc, #12]	; (800f9d4 <raise+0x10>)
 800f9c8:	0001      	movs	r1, r0
 800f9ca:	6818      	ldr	r0, [r3, #0]
 800f9cc:	f7ff ffd0 	bl	800f970 <_raise_r>
 800f9d0:	bd10      	pop	{r4, pc}
 800f9d2:	46c0      	nop			; (mov r8, r8)
 800f9d4:	200002b0 	.word	0x200002b0

0800f9d8 <_kill_r>:
 800f9d8:	2300      	movs	r3, #0
 800f9da:	b570      	push	{r4, r5, r6, lr}
 800f9dc:	4d06      	ldr	r5, [pc, #24]	; (800f9f8 <_kill_r+0x20>)
 800f9de:	0004      	movs	r4, r0
 800f9e0:	0008      	movs	r0, r1
 800f9e2:	0011      	movs	r1, r2
 800f9e4:	602b      	str	r3, [r5, #0]
 800f9e6:	f7f6 fb21 	bl	800602c <_kill>
 800f9ea:	1c43      	adds	r3, r0, #1
 800f9ec:	d103      	bne.n	800f9f6 <_kill_r+0x1e>
 800f9ee:	682b      	ldr	r3, [r5, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d000      	beq.n	800f9f6 <_kill_r+0x1e>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd70      	pop	{r4, r5, r6, pc}
 800f9f8:	200022d4 	.word	0x200022d4

0800f9fc <_getpid_r>:
 800f9fc:	b510      	push	{r4, lr}
 800f9fe:	f7f6 fb0f 	bl	8006020 <_getpid>
 800fa02:	bd10      	pop	{r4, pc}

0800fa04 <__sread>:
 800fa04:	b570      	push	{r4, r5, r6, lr}
 800fa06:	000c      	movs	r4, r1
 800fa08:	250e      	movs	r5, #14
 800fa0a:	5f49      	ldrsh	r1, [r1, r5]
 800fa0c:	f000 f8a4 	bl	800fb58 <_read_r>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	db03      	blt.n	800fa1c <__sread+0x18>
 800fa14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fa16:	181b      	adds	r3, r3, r0
 800fa18:	6563      	str	r3, [r4, #84]	; 0x54
 800fa1a:	bd70      	pop	{r4, r5, r6, pc}
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	4a02      	ldr	r2, [pc, #8]	; (800fa28 <__sread+0x24>)
 800fa20:	4013      	ands	r3, r2
 800fa22:	81a3      	strh	r3, [r4, #12]
 800fa24:	e7f9      	b.n	800fa1a <__sread+0x16>
 800fa26:	46c0      	nop			; (mov r8, r8)
 800fa28:	ffffefff 	.word	0xffffefff

0800fa2c <__swrite>:
 800fa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2e:	001f      	movs	r7, r3
 800fa30:	898b      	ldrh	r3, [r1, #12]
 800fa32:	0005      	movs	r5, r0
 800fa34:	000c      	movs	r4, r1
 800fa36:	0016      	movs	r6, r2
 800fa38:	05db      	lsls	r3, r3, #23
 800fa3a:	d505      	bpl.n	800fa48 <__swrite+0x1c>
 800fa3c:	230e      	movs	r3, #14
 800fa3e:	5ec9      	ldrsh	r1, [r1, r3]
 800fa40:	2200      	movs	r2, #0
 800fa42:	2302      	movs	r3, #2
 800fa44:	f000 f874 	bl	800fb30 <_lseek_r>
 800fa48:	89a3      	ldrh	r3, [r4, #12]
 800fa4a:	4a05      	ldr	r2, [pc, #20]	; (800fa60 <__swrite+0x34>)
 800fa4c:	0028      	movs	r0, r5
 800fa4e:	4013      	ands	r3, r2
 800fa50:	81a3      	strh	r3, [r4, #12]
 800fa52:	0032      	movs	r2, r6
 800fa54:	230e      	movs	r3, #14
 800fa56:	5ee1      	ldrsh	r1, [r4, r3]
 800fa58:	003b      	movs	r3, r7
 800fa5a:	f000 f81f 	bl	800fa9c <_write_r>
 800fa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa60:	ffffefff 	.word	0xffffefff

0800fa64 <__sseek>:
 800fa64:	b570      	push	{r4, r5, r6, lr}
 800fa66:	000c      	movs	r4, r1
 800fa68:	250e      	movs	r5, #14
 800fa6a:	5f49      	ldrsh	r1, [r1, r5]
 800fa6c:	f000 f860 	bl	800fb30 <_lseek_r>
 800fa70:	89a3      	ldrh	r3, [r4, #12]
 800fa72:	1c42      	adds	r2, r0, #1
 800fa74:	d103      	bne.n	800fa7e <__sseek+0x1a>
 800fa76:	4a05      	ldr	r2, [pc, #20]	; (800fa8c <__sseek+0x28>)
 800fa78:	4013      	ands	r3, r2
 800fa7a:	81a3      	strh	r3, [r4, #12]
 800fa7c:	bd70      	pop	{r4, r5, r6, pc}
 800fa7e:	2280      	movs	r2, #128	; 0x80
 800fa80:	0152      	lsls	r2, r2, #5
 800fa82:	4313      	orrs	r3, r2
 800fa84:	81a3      	strh	r3, [r4, #12]
 800fa86:	6560      	str	r0, [r4, #84]	; 0x54
 800fa88:	e7f8      	b.n	800fa7c <__sseek+0x18>
 800fa8a:	46c0      	nop			; (mov r8, r8)
 800fa8c:	ffffefff 	.word	0xffffefff

0800fa90 <__sclose>:
 800fa90:	b510      	push	{r4, lr}
 800fa92:	230e      	movs	r3, #14
 800fa94:	5ec9      	ldrsh	r1, [r1, r3]
 800fa96:	f000 f815 	bl	800fac4 <_close_r>
 800fa9a:	bd10      	pop	{r4, pc}

0800fa9c <_write_r>:
 800fa9c:	b570      	push	{r4, r5, r6, lr}
 800fa9e:	0004      	movs	r4, r0
 800faa0:	0008      	movs	r0, r1
 800faa2:	0011      	movs	r1, r2
 800faa4:	001a      	movs	r2, r3
 800faa6:	2300      	movs	r3, #0
 800faa8:	4d05      	ldr	r5, [pc, #20]	; (800fac0 <_write_r+0x24>)
 800faaa:	602b      	str	r3, [r5, #0]
 800faac:	f7f6 faf7 	bl	800609e <_write>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d103      	bne.n	800fabc <_write_r+0x20>
 800fab4:	682b      	ldr	r3, [r5, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d000      	beq.n	800fabc <_write_r+0x20>
 800faba:	6023      	str	r3, [r4, #0]
 800fabc:	bd70      	pop	{r4, r5, r6, pc}
 800fabe:	46c0      	nop			; (mov r8, r8)
 800fac0:	200022d4 	.word	0x200022d4

0800fac4 <_close_r>:
 800fac4:	2300      	movs	r3, #0
 800fac6:	b570      	push	{r4, r5, r6, lr}
 800fac8:	4d06      	ldr	r5, [pc, #24]	; (800fae4 <_close_r+0x20>)
 800faca:	0004      	movs	r4, r0
 800facc:	0008      	movs	r0, r1
 800face:	602b      	str	r3, [r5, #0]
 800fad0:	f7f6 fb01 	bl	80060d6 <_close>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d103      	bne.n	800fae0 <_close_r+0x1c>
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d000      	beq.n	800fae0 <_close_r+0x1c>
 800fade:	6023      	str	r3, [r4, #0]
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	46c0      	nop			; (mov r8, r8)
 800fae4:	200022d4 	.word	0x200022d4

0800fae8 <_fstat_r>:
 800fae8:	2300      	movs	r3, #0
 800faea:	b570      	push	{r4, r5, r6, lr}
 800faec:	4d06      	ldr	r5, [pc, #24]	; (800fb08 <_fstat_r+0x20>)
 800faee:	0004      	movs	r4, r0
 800faf0:	0008      	movs	r0, r1
 800faf2:	0011      	movs	r1, r2
 800faf4:	602b      	str	r3, [r5, #0]
 800faf6:	f7f6 faf8 	bl	80060ea <_fstat>
 800fafa:	1c43      	adds	r3, r0, #1
 800fafc:	d103      	bne.n	800fb06 <_fstat_r+0x1e>
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d000      	beq.n	800fb06 <_fstat_r+0x1e>
 800fb04:	6023      	str	r3, [r4, #0]
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
 800fb08:	200022d4 	.word	0x200022d4

0800fb0c <_isatty_r>:
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	b570      	push	{r4, r5, r6, lr}
 800fb10:	4d06      	ldr	r5, [pc, #24]	; (800fb2c <_isatty_r+0x20>)
 800fb12:	0004      	movs	r4, r0
 800fb14:	0008      	movs	r0, r1
 800fb16:	602b      	str	r3, [r5, #0]
 800fb18:	f7f6 faf5 	bl	8006106 <_isatty>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d103      	bne.n	800fb28 <_isatty_r+0x1c>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d000      	beq.n	800fb28 <_isatty_r+0x1c>
 800fb26:	6023      	str	r3, [r4, #0]
 800fb28:	bd70      	pop	{r4, r5, r6, pc}
 800fb2a:	46c0      	nop			; (mov r8, r8)
 800fb2c:	200022d4 	.word	0x200022d4

0800fb30 <_lseek_r>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	0004      	movs	r4, r0
 800fb34:	0008      	movs	r0, r1
 800fb36:	0011      	movs	r1, r2
 800fb38:	001a      	movs	r2, r3
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	4d05      	ldr	r5, [pc, #20]	; (800fb54 <_lseek_r+0x24>)
 800fb3e:	602b      	str	r3, [r5, #0]
 800fb40:	f7f6 faea 	bl	8006118 <_lseek>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d103      	bne.n	800fb50 <_lseek_r+0x20>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d000      	beq.n	800fb50 <_lseek_r+0x20>
 800fb4e:	6023      	str	r3, [r4, #0]
 800fb50:	bd70      	pop	{r4, r5, r6, pc}
 800fb52:	46c0      	nop			; (mov r8, r8)
 800fb54:	200022d4 	.word	0x200022d4

0800fb58 <_read_r>:
 800fb58:	b570      	push	{r4, r5, r6, lr}
 800fb5a:	0004      	movs	r4, r0
 800fb5c:	0008      	movs	r0, r1
 800fb5e:	0011      	movs	r1, r2
 800fb60:	001a      	movs	r2, r3
 800fb62:	2300      	movs	r3, #0
 800fb64:	4d05      	ldr	r5, [pc, #20]	; (800fb7c <_read_r+0x24>)
 800fb66:	602b      	str	r3, [r5, #0]
 800fb68:	f7f6 fa7c 	bl	8006064 <_read>
 800fb6c:	1c43      	adds	r3, r0, #1
 800fb6e:	d103      	bne.n	800fb78 <_read_r+0x20>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d000      	beq.n	800fb78 <_read_r+0x20>
 800fb76:	6023      	str	r3, [r4, #0]
 800fb78:	bd70      	pop	{r4, r5, r6, pc}
 800fb7a:	46c0      	nop			; (mov r8, r8)
 800fb7c:	200022d4 	.word	0x200022d4

0800fb80 <sqrt>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	0004      	movs	r4, r0
 800fb84:	000d      	movs	r5, r1
 800fb86:	f000 f821 	bl	800fbcc <__ieee754_sqrt>
 800fb8a:	0022      	movs	r2, r4
 800fb8c:	0006      	movs	r6, r0
 800fb8e:	000f      	movs	r7, r1
 800fb90:	002b      	movs	r3, r5
 800fb92:	0020      	movs	r0, r4
 800fb94:	0029      	movs	r1, r5
 800fb96:	f7f3 f933 	bl	8002e00 <__aeabi_dcmpun>
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	d113      	bne.n	800fbc6 <sqrt+0x46>
 800fb9e:	2200      	movs	r2, #0
 800fba0:	2300      	movs	r3, #0
 800fba2:	0020      	movs	r0, r4
 800fba4:	0029      	movs	r1, r5
 800fba6:	f7f0 fc53 	bl	8000450 <__aeabi_dcmplt>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d00b      	beq.n	800fbc6 <sqrt+0x46>
 800fbae:	f7fb fa8d 	bl	800b0cc <__errno>
 800fbb2:	2321      	movs	r3, #33	; 0x21
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	6003      	str	r3, [r0, #0]
 800fbb8:	2300      	movs	r3, #0
 800fbba:	0010      	movs	r0, r2
 800fbbc:	0019      	movs	r1, r3
 800fbbe:	f7f1 ff1f 	bl	8001a00 <__aeabi_ddiv>
 800fbc2:	0006      	movs	r6, r0
 800fbc4:	000f      	movs	r7, r1
 800fbc6:	0030      	movs	r0, r6
 800fbc8:	0039      	movs	r1, r7
 800fbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fbcc <__ieee754_sqrt>:
 800fbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbce:	000b      	movs	r3, r1
 800fbd0:	000c      	movs	r4, r1
 800fbd2:	4956      	ldr	r1, [pc, #344]	; (800fd2c <__ieee754_sqrt+0x160>)
 800fbd4:	0005      	movs	r5, r0
 800fbd6:	0002      	movs	r2, r0
 800fbd8:	0008      	movs	r0, r1
 800fbda:	b085      	sub	sp, #20
 800fbdc:	4020      	ands	r0, r4
 800fbde:	4288      	cmp	r0, r1
 800fbe0:	d10f      	bne.n	800fc02 <__ieee754_sqrt+0x36>
 800fbe2:	0028      	movs	r0, r5
 800fbe4:	0021      	movs	r1, r4
 800fbe6:	f7f2 fb0d 	bl	8002204 <__aeabi_dmul>
 800fbea:	0002      	movs	r2, r0
 800fbec:	000b      	movs	r3, r1
 800fbee:	0028      	movs	r0, r5
 800fbf0:	0021      	movs	r1, r4
 800fbf2:	f7f1 fbc9 	bl	8001388 <__aeabi_dadd>
 800fbf6:	0005      	movs	r5, r0
 800fbf8:	000c      	movs	r4, r1
 800fbfa:	0028      	movs	r0, r5
 800fbfc:	0021      	movs	r1, r4
 800fbfe:	b005      	add	sp, #20
 800fc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc02:	2c00      	cmp	r4, #0
 800fc04:	dc10      	bgt.n	800fc28 <__ieee754_sqrt+0x5c>
 800fc06:	0061      	lsls	r1, r4, #1
 800fc08:	0849      	lsrs	r1, r1, #1
 800fc0a:	4329      	orrs	r1, r5
 800fc0c:	d0f5      	beq.n	800fbfa <__ieee754_sqrt+0x2e>
 800fc0e:	2100      	movs	r1, #0
 800fc10:	428c      	cmp	r4, r1
 800fc12:	d100      	bne.n	800fc16 <__ieee754_sqrt+0x4a>
 800fc14:	e080      	b.n	800fd18 <__ieee754_sqrt+0x14c>
 800fc16:	0028      	movs	r0, r5
 800fc18:	0021      	movs	r1, r4
 800fc1a:	f7f2 fd5f 	bl	80026dc <__aeabi_dsub>
 800fc1e:	0002      	movs	r2, r0
 800fc20:	000b      	movs	r3, r1
 800fc22:	f7f1 feed 	bl	8001a00 <__aeabi_ddiv>
 800fc26:	e7e6      	b.n	800fbf6 <__ieee754_sqrt+0x2a>
 800fc28:	1521      	asrs	r1, r4, #20
 800fc2a:	d075      	beq.n	800fd18 <__ieee754_sqrt+0x14c>
 800fc2c:	4840      	ldr	r0, [pc, #256]	; (800fd30 <__ieee754_sqrt+0x164>)
 800fc2e:	031b      	lsls	r3, r3, #12
 800fc30:	180c      	adds	r4, r1, r0
 800fc32:	2080      	movs	r0, #128	; 0x80
 800fc34:	0b1b      	lsrs	r3, r3, #12
 800fc36:	0340      	lsls	r0, r0, #13
 800fc38:	4303      	orrs	r3, r0
 800fc3a:	07c9      	lsls	r1, r1, #31
 800fc3c:	d403      	bmi.n	800fc46 <__ieee754_sqrt+0x7a>
 800fc3e:	0fd1      	lsrs	r1, r2, #31
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	185b      	adds	r3, r3, r1
 800fc44:	0052      	lsls	r2, r2, #1
 800fc46:	1061      	asrs	r1, r4, #1
 800fc48:	2400      	movs	r4, #0
 800fc4a:	9103      	str	r1, [sp, #12]
 800fc4c:	005b      	lsls	r3, r3, #1
 800fc4e:	0fd1      	lsrs	r1, r2, #31
 800fc50:	185b      	adds	r3, r3, r1
 800fc52:	2180      	movs	r1, #128	; 0x80
 800fc54:	2516      	movs	r5, #22
 800fc56:	0020      	movs	r0, r4
 800fc58:	0052      	lsls	r2, r2, #1
 800fc5a:	0389      	lsls	r1, r1, #14
 800fc5c:	1846      	adds	r6, r0, r1
 800fc5e:	429e      	cmp	r6, r3
 800fc60:	dc02      	bgt.n	800fc68 <__ieee754_sqrt+0x9c>
 800fc62:	1870      	adds	r0, r6, r1
 800fc64:	1b9b      	subs	r3, r3, r6
 800fc66:	1864      	adds	r4, r4, r1
 800fc68:	0fd6      	lsrs	r6, r2, #31
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	3d01      	subs	r5, #1
 800fc6e:	18f3      	adds	r3, r6, r3
 800fc70:	0052      	lsls	r2, r2, #1
 800fc72:	0849      	lsrs	r1, r1, #1
 800fc74:	2d00      	cmp	r5, #0
 800fc76:	d1f1      	bne.n	800fc5c <__ieee754_sqrt+0x90>
 800fc78:	2620      	movs	r6, #32
 800fc7a:	2780      	movs	r7, #128	; 0x80
 800fc7c:	0029      	movs	r1, r5
 800fc7e:	9601      	str	r6, [sp, #4]
 800fc80:	063f      	lsls	r7, r7, #24
 800fc82:	197e      	adds	r6, r7, r5
 800fc84:	46b4      	mov	ip, r6
 800fc86:	4283      	cmp	r3, r0
 800fc88:	dc02      	bgt.n	800fc90 <__ieee754_sqrt+0xc4>
 800fc8a:	d114      	bne.n	800fcb6 <__ieee754_sqrt+0xea>
 800fc8c:	4296      	cmp	r6, r2
 800fc8e:	d812      	bhi.n	800fcb6 <__ieee754_sqrt+0xea>
 800fc90:	4665      	mov	r5, ip
 800fc92:	4666      	mov	r6, ip
 800fc94:	19ed      	adds	r5, r5, r7
 800fc96:	9002      	str	r0, [sp, #8]
 800fc98:	2e00      	cmp	r6, #0
 800fc9a:	da03      	bge.n	800fca4 <__ieee754_sqrt+0xd8>
 800fc9c:	43ee      	mvns	r6, r5
 800fc9e:	0ff6      	lsrs	r6, r6, #31
 800fca0:	1986      	adds	r6, r0, r6
 800fca2:	9602      	str	r6, [sp, #8]
 800fca4:	1a1b      	subs	r3, r3, r0
 800fca6:	4562      	cmp	r2, ip
 800fca8:	4180      	sbcs	r0, r0
 800fcaa:	4240      	negs	r0, r0
 800fcac:	1a1b      	subs	r3, r3, r0
 800fcae:	4660      	mov	r0, ip
 800fcb0:	1a12      	subs	r2, r2, r0
 800fcb2:	9802      	ldr	r0, [sp, #8]
 800fcb4:	19c9      	adds	r1, r1, r7
 800fcb6:	0fd6      	lsrs	r6, r2, #31
 800fcb8:	005b      	lsls	r3, r3, #1
 800fcba:	199b      	adds	r3, r3, r6
 800fcbc:	9e01      	ldr	r6, [sp, #4]
 800fcbe:	0052      	lsls	r2, r2, #1
 800fcc0:	3e01      	subs	r6, #1
 800fcc2:	087f      	lsrs	r7, r7, #1
 800fcc4:	9601      	str	r6, [sp, #4]
 800fcc6:	2e00      	cmp	r6, #0
 800fcc8:	d1db      	bne.n	800fc82 <__ieee754_sqrt+0xb6>
 800fcca:	4313      	orrs	r3, r2
 800fccc:	d003      	beq.n	800fcd6 <__ieee754_sqrt+0x10a>
 800fcce:	1c4b      	adds	r3, r1, #1
 800fcd0:	d127      	bne.n	800fd22 <__ieee754_sqrt+0x156>
 800fcd2:	0031      	movs	r1, r6
 800fcd4:	3401      	adds	r4, #1
 800fcd6:	4b17      	ldr	r3, [pc, #92]	; (800fd34 <__ieee754_sqrt+0x168>)
 800fcd8:	1060      	asrs	r0, r4, #1
 800fcda:	18c0      	adds	r0, r0, r3
 800fcdc:	0849      	lsrs	r1, r1, #1
 800fcde:	07e3      	lsls	r3, r4, #31
 800fce0:	d502      	bpl.n	800fce8 <__ieee754_sqrt+0x11c>
 800fce2:	2380      	movs	r3, #128	; 0x80
 800fce4:	061b      	lsls	r3, r3, #24
 800fce6:	4319      	orrs	r1, r3
 800fce8:	9b03      	ldr	r3, [sp, #12]
 800fcea:	000d      	movs	r5, r1
 800fcec:	051c      	lsls	r4, r3, #20
 800fcee:	1823      	adds	r3, r4, r0
 800fcf0:	001c      	movs	r4, r3
 800fcf2:	e782      	b.n	800fbfa <__ieee754_sqrt+0x2e>
 800fcf4:	0ad3      	lsrs	r3, r2, #11
 800fcf6:	3815      	subs	r0, #21
 800fcf8:	0552      	lsls	r2, r2, #21
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d0fa      	beq.n	800fcf4 <__ieee754_sqrt+0x128>
 800fcfe:	2480      	movs	r4, #128	; 0x80
 800fd00:	0364      	lsls	r4, r4, #13
 800fd02:	4223      	tst	r3, r4
 800fd04:	d00a      	beq.n	800fd1c <__ieee754_sqrt+0x150>
 800fd06:	2420      	movs	r4, #32
 800fd08:	0016      	movs	r6, r2
 800fd0a:	1a64      	subs	r4, r4, r1
 800fd0c:	40e6      	lsrs	r6, r4
 800fd0e:	1e4d      	subs	r5, r1, #1
 800fd10:	408a      	lsls	r2, r1
 800fd12:	4333      	orrs	r3, r6
 800fd14:	1b41      	subs	r1, r0, r5
 800fd16:	e789      	b.n	800fc2c <__ieee754_sqrt+0x60>
 800fd18:	2000      	movs	r0, #0
 800fd1a:	e7ee      	b.n	800fcfa <__ieee754_sqrt+0x12e>
 800fd1c:	005b      	lsls	r3, r3, #1
 800fd1e:	3101      	adds	r1, #1
 800fd20:	e7ef      	b.n	800fd02 <__ieee754_sqrt+0x136>
 800fd22:	2301      	movs	r3, #1
 800fd24:	3101      	adds	r1, #1
 800fd26:	4399      	bics	r1, r3
 800fd28:	e7d5      	b.n	800fcd6 <__ieee754_sqrt+0x10a>
 800fd2a:	46c0      	nop			; (mov r8, r8)
 800fd2c:	7ff00000 	.word	0x7ff00000
 800fd30:	fffffc01 	.word	0xfffffc01
 800fd34:	3fe00000 	.word	0x3fe00000

0800fd38 <_init>:
 800fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3a:	46c0      	nop			; (mov r8, r8)
 800fd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd3e:	bc08      	pop	{r3}
 800fd40:	469e      	mov	lr, r3
 800fd42:	4770      	bx	lr

0800fd44 <_fini>:
 800fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd46:	46c0      	nop			; (mov r8, r8)
 800fd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd4a:	bc08      	pop	{r3}
 800fd4c:	469e      	mov	lr, r3
 800fd4e:	4770      	bx	lr
